dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,0,0,0,6,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,1,0,1,2,0,0,0,0,3,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },4,0,0,0,1,0,0,0,0,4,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",18,2,1,1,2,0,0,0,0,22,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,4,0,0,0,0,2,4,0,0,10,15,3,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",10,2,0,1,2,1,14,0,0,28,34,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,329,            numerator   = BigInteger.valueOf(p2);,8,3,0,1,2,0,0,0,0,12,37,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,330,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,328,        if (q2 < maxDenominator) {,6,1,0,1,3,0,0,0,0,8,26,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,335,    },8,2,0,0,1,0,0,0,0,10,1,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,271,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,272,        long overflow = Integer.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,34,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,273,        double r0 = value;,2,0,0,0,0,0,0,0,0,3,18,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,274,        long a0 = (long) FastMath.floor(r0);,2,0,0,2,4,0,6,0,0,8,36,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,275,        if (a0 > overflow) {,4,2,0,1,3,0,10,0,0,17,20,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,281,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,287,        long p0 = 1;,12,2,0,0,0,2,2,0,0,18,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,288,        long q0 = 0;,4,0,1,0,0,0,6,2,0,15,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,289,        long p1 = a0;,16,2,1,0,0,0,2,0,0,26,13,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,290,        long q1 = 1;,6,0,0,0,0,0,0,0,0,7,12,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,292,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,293,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,295,        int n = 0;,6,0,0,0,0,0,0,0,0,8,10,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,298,            ++n;,14,1,0,0,0,3,4,0,0,23,4,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,301,            p2 = (a1 * p1) + p0;,10,2,0,1,2,3,0,0,0,16,20,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,303,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,309,            final double convergent = (double) p2 / (double) q2;,2,0,0,2,4,0,0,0,0,3,52,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,310,            if ((n < maxIterations) &&,4,1,1,1,3,0,6,0,0,15,26,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,315,                q0 = q1;,6,1,0,0,0,0,0,0,0,7,8,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,318,                r0 = r1;,2,0,1,0,0,0,2,0,0,9,8,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,320,                stop = true;,6,0,0,0,0,0,0,0,0,9,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,322,        } while (!stop);,0,0,0,1,3,0,0,0,0,4,16,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,324,        if (n >= maxIterations) {,2,0,0,1,3,0,2,0,0,5,25,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3352,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.07273,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,768,        return denominator.intValue();,0,0,0,1,2,1,4,0,0,4,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3338,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3342,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,14,4,0,1,3,0,0,0,0,20,46,3,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3355,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3024,        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));,0,0,0,2,4,1,0,0,0,7,83,4,0.0404,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,220,                p0 = p1;,10,1,0,0,0,0,2,0,0,15,8,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,222,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,223,                q1 = q2;,8,0,0,0,0,2,6,0,0,17,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,224,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,225,                r0 = r1;,14,4,0,0,0,0,6,0,0,26,8,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,366,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,374,        return numerator;,2,1,0,0,0,1,0,0,0,3,17,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,8,4,0,3,6,1,2,0,0,16,42,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,6,2,0,1,2,1,0,0,0,9,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,2,0,0,2,4,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,4,1,0,0,0,0,0,0,0,6,12,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,4,0,0,3,6,2,0,2,0,8,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,2,1,0,1,2,1,0,0,0,3,20,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,59,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,6,2,0,1,3,0,10,0,0,18,27,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,279,        if (!numericalVarianceIsCalculated) {,2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,281,            numericalVarianceIsCalculated = true;,16,2,0,0,0,0,0,0,0,19,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,283,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,292,        final double N = getPopulationSize();,2,0,0,1,2,1,2,0,0,5,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,295,        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));,18,6,0,5,10,1,0,0,0,24,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,308,"        return FastMath.max(0,",0,0,0,0,1,1,4,0,0,4,22,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,321,"        return FastMath.min(getNumberOfSuccesses(), getSampleSize());",0,0,0,3,6,1,8,0,0,8,61,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,105,        int lower = getSupportLowerBound();,20,4,0,1,2,1,2,0,0,30,35,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,106,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,109,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,114,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,161,        return numberOfSuccesses;,6,0,0,0,0,1,0,0,0,7,25,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,170,        return populationSize;,0,0,0,0,0,1,0,0,0,1,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,179,        return sampleSize;,2,0,0,0,0,1,0,0,0,2,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,2,0,1,1,2,1,4,0,0,13,77,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,128,    private static final double LN_HI_PREC_COEF[][] = {,12,4,0,2,5,1,0,0,0,18,51,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,141,    private static final double SINE_TABLE_A[] =,2,0,1,1,2,3,0,0,0,12,44,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,28,5,0,0,0,1,0,0,0,35,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,2,0,0,1,2,0,6,2,0,10,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,6,1,0,1,2,0,0,0,0,7,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,12,4,0,1,2,1,0,0,0,17,22,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",8,0,0,3,6,0,6,2,0,16,58,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",6,0,0,1,2,1,0,4,0,11,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,2,2,0,0,5,51,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",0,0,0,0,1,1,0,0,0,2,41,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,        final SubHyperplane<Euclidean1D> lowerCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,        if (Double.isInfinite(upper) && (upper > 0)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.11429,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),",10,0,0,2,5,1,8,0,0,19,54,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,47,"        super(buildTree(lower, upper));",4,0,1,2,4,0,6,0,0,15,31,3,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,115,                   final Object attribute) {,0,0,0,0,2,0,0,0,0,2,25,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,116,        this.cut       = cut;,8,0,0,0,0,0,6,0,0,17,21,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,117,        this.plus      = plus;,2,0,0,0,0,0,0,0,0,2,22,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,118,        this.minus     = minus;,4,0,0,0,0,0,8,0,0,12,23,9,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,119,        this.parent    = null;,2,0,0,0,0,0,0,0,0,4,22,6,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,120,        this.attribute = attribute;,16,1,0,0,0,0,8,0,0,28,27,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,39,"        super(hyperplane, remainingRegion);",12,4,0,1,2,0,6,0,0,23,35,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,40,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,43,        this.location = location;,4,0,0,0,0,0,14,0,0,19,25,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,50,                                    final Region<T> remainingRegion) {,4,0,0,0,2,0,0,0,0,5,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,51,        this.hyperplane      = hyperplane;,4,0,0,0,0,0,0,0,0,5,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,53,    },0,0,0,0,1,0,8,0,0,8,1,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,67,    },6,2,0,0,1,0,0,0,0,10,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,36,    public static final Vector1D ZERO = new Vector1D(0.0);,6,0,0,1,2,4,4,4,0,18,54,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,43,    public static final Vector1D NaN = new Vector1D(Double.NaN);,2,0,0,1,2,0,0,0,0,2,60,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,51,    public static final Vector1D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,128,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,69,    },8,0,0,0,1,0,0,0,0,11,1,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,128,    private static final double LN_HI_PREC_COEF[][] = {,8,2,0,2,5,3,12,0,0,28,51,1,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,160,    private static final double SINE_TABLE_B[] =,14,2,0,1,2,1,0,0,0,17,44,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,1,0,0,1,46,11,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,0,0,0,0,3,54,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,94,        cut    = null;,6,0,0,0,0,0,0,0,0,6,14,5,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,95,        plus   = null;,2,0,0,0,0,0,0,0,0,3,14,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,96,        minus  = null;,2,0,0,0,0,0,0,0,0,3,14,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,97,        parent = null;,2,0,0,0,0,0,6,0,0,9,14,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,44,"    public SubLine(final Line line, final IntervalsSet remainingRegion) {",6,0,0,1,3,3,0,4,0,13,69,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,45,        this.line            = line;,2,0,0,0,0,1,0,0,0,3,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,46,        this.remainingRegion = remainingRegion;,4,0,0,0,0,0,0,0,0,5,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,47,    },2,0,0,0,1,0,6,0,0,9,1,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,897,        final double a1High     = ca1 - (ca1 - a1);,8,2,1,1,2,1,2,0,0,26,43,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,4,2,0,8,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,345,            if (c.isNaN) {,10,1,1,1,3,0,4,2,0,22,14,1,0.02273,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,343,        if (other instanceof Complex){,2,0,1,1,3,1,0,0,0,7,30,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,340,        if (this == other) {,4,0,0,1,3,0,0,0,0,5,20,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,22,7,0,1,2,0,0,0,0,30,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,2,0,1,2,4,0,0,0,0,7,50,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,5,10,0,0,0,0,15,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,14,3,0,0,0,0,0,0,0,18,8,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,8,2,0,0,0,0,4,0,0,15,15,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,12,0,0,1,2,0,2,0,0,15,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,6,2,0,1,2,1,0,0,0,8,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",10,0,0,1,3,0,0,0,0,11,38,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,1,0,0,1,0,10,0,0,11,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,1,2,1,4,0,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,8,3,0,0,0,1,0,0,0,12,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },12,3,1,0,1,3,14,8,0,53,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,2,0,0,1,3,0,0,0,0,2,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,6,1,0,1,2,3,4,4,0,19,61,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,6,0,0,2,4,1,2,0,0,9,56,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,4,1,0,2,4,0,0,0,0,5,47,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,4,2,1,3,7,0,0,0,0,18,19,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,6,0,0,6,26,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,4,0,0,0,0,1,0,0,0,5,16,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,8,0,0,0,1,3,8,2,0,22,31,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,2,0,0,2,4,0,0,0,0,3,53,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,2,0,0,0,0,0,0,0,0,2,15,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,0,0,1,2,0,0,2,0,13,32,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,2,0,0,2,4,3,0,4,0,9,44,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,2,1,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,8,2,0,1,3,0,0,0,0,11,50,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,2,0,0,1,3,1,2,0,0,5,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,45,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,1,0,2,0,7,65,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",14,2,0,2,4,2,30,4,0,53,78,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,10,1,0,1,2,0,0,0,0,13,51,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,0,0,1,3,0,4,0,0,7,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,2,0,1,2,4,1,0,0,0,7,47,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,2,1,0,0,0,0,0,0,0,3,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",2,0,0,2,5,0,0,0,0,3,65,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,4,1,0,1,3,0,0,0,0,5,57,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,10,1,0,2,4,0,0,0,0,12,39,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,4,0,0,1,3,0,10,0,0,15,37,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",8,3,1,5,11,1,8,0,0,28,68,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,2,1,1,0,0,0,0,0,0,13,6,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,4,0,0,1,2,1,4,0,0,9,48,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,2,2,0,0,1,0,0,0,0,4,21,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,6,1,0,0,1,1,6,0,0,14,41,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,2,0,3,7,0,14,0,0,16,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,2,0,0,2,5,0,0,0,0,3,38,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",4,3,0,1,3,1,8,2,0,18,59,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,10,2,0,1,2,0,8,0,0,21,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,1,0,0,0,7,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",4,0,0,1,2,1,0,4,0,10,71,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,4,0,0,7,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,6,0,0,0,0,0,0,2,0,9,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,2,0,0,0,0,3,0,0,0,5,62,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,71,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,9,30,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,4,1,0,1,2,0,4,0,0,10,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,14,4,0,2,4,0,0,0,0,20,44,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",4,7,0,1,5,0,8,0,0,20,52,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",6,3,0,2,4,0,4,0,0,14,54,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",10,4,0,2,4,1,12,0,0,28,64,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,2,1,0,1,2,0,6,0,0,10,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,2,0,0,1,2,0,6,0,0,9,73,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,4,1,0,1,2,0,4,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",2,0,0,1,2,0,4,0,0,7,57,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,16,2,0,3,6,1,0,0,0,20,64,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,6,0,0,1,2,0,0,0,0,6,70,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,4,1,0,1,3,0,6,0,0,12,35,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,4,1,0,0,0,1,0,0,0,6,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,4,1,0,1,2,0,6,0,0,12,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,0,0,1,1,3,0,0,0,0,5,41,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,2,0,1,1,2,0,0,0,0,5,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },4,1,0,0,1,0,0,0,0,6,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",2,0,1,3,6,0,0,2,0,13,40,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,6,0,0,2,4,1,6,0,0,13,46,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,13,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",2,0,0,4,8,0,0,0,0,2,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,15,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,38,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,0,2,0,8,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,14,3,0,2,5,0,4,0,0,23,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",8,2,1,1,2,2,0,0,0,22,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,1,4,0,0,11,66,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,6,0,1,2,5,0,0,0,0,9,47,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,6,2,0,14,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,1,16,0,0,19,74,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",2,0,0,3,6,0,0,0,0,3,27,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,2,2,0,7,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,2,4,0,16,0,0,16,43,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },4,0,0,0,1,3,8,2,0,17,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,        final double[][] d = new double[n][m];,0,0,0,4,8,0,8,0,0,8,38,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,6,0,0,16,29,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",4,0,0,1,2,1,0,2,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,1,0,0,0,13,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,8,3,0,3,6,1,0,0,0,12,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,2,0,1,4,8,1,0,0,0,5,41,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,12,1,0,0,0,0,0,0,0,14,21,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,14,2,0,1,3,1,0,0,0,18,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,2,0,1,2,4,0,0,0,0,7,16,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,6,0,0,0,0,1,0,0,0,8,14,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,6,0,0,13,31,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,12,1,0,2,5,0,4,2,0,20,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,0,0,0,7,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,30,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,14,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,8,0,0,0,0,1,2,6,0,18,8,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,16,2,0,1,3,0,0,0,0,20,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,4,1,1,2,5,0,0,0,0,10,17,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,2,0,1,4,8,1,0,0,0,7,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,2,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,4,0,0,1,2,1,2,0,0,8,42,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,10,1,0,1,3,3,0,4,0,19,45,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",6,3,1,1,2,0,0,0,0,15,25,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,3,7,0,0,0,0,6,22,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,14,0,0,0,0,0,0,0,0,19,20,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0,0,1,1,4,0,2,0,0,8,35,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",6,2,0,1,2,0,10,0,0,18,89,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,2,0,0,1,2,3,0,0,0,5,27,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,2,0,0,0,0,0,0,0,0,3,11,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,2,0,0,0,0,0,0,8,0,10,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },12,3,0,0,1,0,6,0,0,22,1,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,1,2,3,0,0,0,5,44,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,364,                if (needReset) {,4,1,0,1,3,0,0,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,343,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,8,4,0,4,9,0,16,0,0,29,77,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,350,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,351,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,353,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,1,1,2,1,0,0,0,12,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,151,        final double[] y = new double[maximalOrder + 1];,4,1,0,2,4,1,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,155,"        verifySequence(x[0], x[1], x[2]);",0,0,1,4,8,0,2,0,0,8,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,165,        y[0] = computeObjectiveValue(x[0]);,30,7,1,3,6,1,12,0,0,55,35,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,173,        if (y[0] * y[1] < 0) {,4,3,1,3,7,0,4,0,0,15,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,202,        double xA    = x[signChangeIndex - 1];,8,2,1,1,2,0,0,0,0,13,38,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,203,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,204,        double absYA = FastMath.abs(yA);,4,0,0,1,2,0,6,0,0,11,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,205,        int agingA   = 0;,6,0,0,0,0,0,0,0,0,6,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,208,        double absYB = FastMath.abs(yB);,2,0,0,1,2,0,6,0,0,8,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,215,            final double xTol = getAbsoluteAccuracy() +,2,0,0,1,2,3,0,0,0,5,43,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,217,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",4,0,0,6,13,0,0,0,0,5,87,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,251,                targetY = 0;,2,0,0,0,0,3,6,0,0,11,12,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,256,            int start = 0;,14,2,0,0,0,0,2,0,0,21,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,257,            int end   = nbPoints;,4,0,0,0,0,0,0,0,0,5,21,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,261,"                System.arraycopy(x, start, tmpX, start, end - start);",4,1,0,1,2,0,12,0,0,17,53,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,264,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,283,            } while (Double.isNaN(nextX) && (end - start > 1));,12,4,0,3,7,0,6,0,0,22,51,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,285,            if (Double.isNaN(nextX)) {,4,1,1,2,5,0,6,0,0,14,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,375,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,0,0,0,13,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,376,            final int delta = i + 1 - start;,14,2,1,0,0,0,0,0,0,28,32,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,378,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,31,47,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,12,3,0,2,4,1,0,0,0,16,34,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,16,5,0,4,8,2,0,0,0,23,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,6,0,0,3,6,0,0,0,0,7,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,2,0,0,0,0,2,0,2,0,6,28,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,8,0,1,1,2,0,2,2,0,19,18,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,10,2,0,1,2,0,0,0,0,12,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,12,3,0,2,4,0,0,0,0,16,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,6,2,0,1,2,2,10,0,0,19,26,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,6,1,0,3,6,2,2,4,0,15,42,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,8,2,0,1,2,1,18,0,0,30,33,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",6,0,0,2,4,0,6,2,0,15,50,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",2,0,0,1,3,1,2,0,0,5,87,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },8,0,0,0,1,0,8,0,0,17,1,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,10,2,0,1,2,2,0,0,0,15,39,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,4,1,1,1,2,1,0,0,0,10,39,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",14,1,0,2,4,0,6,2,0,25,67,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,1,1,3,0,0,0,0,5,65,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",6,0,0,1,2,0,0,0,0,7,58,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },8,2,0,0,1,0,0,0,0,10,1,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",20,3,0,1,2,1,6,2,0,31,50,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {",18,2,0,1,3,3,0,4,0,30,47,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,        this.x = x;,8,0,0,0,0,0,0,0,0,10,11,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,        this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,        this.x = a * u.x;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",4,0,0,1,2,0,6,2,0,13,62,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",8,2,0,1,2,3,10,4,0,28,60,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",2,0,0,1,2,4,0,0,0,5,63,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,12,1,0,1,2,3,4,0,0,21,77,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,115,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,6,0,0,9,49,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,1,2,5,1,2,0,0,7,51,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,866,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,867,        final double a1High     = ca1 - (ca1 - a1);,22,3,1,1,2,1,4,0,0,38,43,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,869,        final double cb1        = SPLIT_FACTOR * b1;,10,1,0,0,0,1,0,0,0,13,44,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,871,        final double b1Low      = b1 - b1High;,4,0,0,0,0,0,6,0,0,10,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,879,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,4,1,1,2,4,0,0,0,0,10,25,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,6,1,0,1,4,0,0,0,0,7,20,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,4,1,0,2,4,0,0,0,0,5,42,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,2,0,1,1,2,1,0,0,0,7,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,2,0,0,2,4,0,0,0,0,3,31,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,2,0,1,2,4,1,0,0,0,5,37,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,6,1,0,0,0,1,0,0,0,8,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,4,2,0,1,2,1,0,0,0,7,36,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,16,5,0,0,0,0,0,0,0,22,17,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,2,1,1,2,4,0,0,0,0,8,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,2,0,0,1,3,0,0,0,0,3,34,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,2,0,0,4,8,1,0,0,0,3,89,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,2,0,0,0,0,0,0,0,0,2,23,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,2,0,0,1,2,0,0,0,0,2,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2464,        epsA = temp;,0,0,0,0,0,0,8,0,0,8,12,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,2,3,0,0,0,0,4,0,0,9,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,2,0,0,0,0,0,0,0,0,2,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,8,1,0,0,0,0,2,0,0,13,10,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,4,0,0,0,0,0,0,4,0,9,33,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,8,4,0,0,0,0,0,0,0,13,25,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,2,0,1,1,2,1,6,0,0,11,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,3,0,5,10,0,0,0,0,7,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,10,3,0,0,0,0,4,0,0,18,10,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,4,0,0,0,0,1,0,4,0,9,13,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,10,0,0,0,0,0,0,0,0,12,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,10,1,0,0,0,0,0,2,0,15,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,6,1,1,0,0,1,0,0,0,17,6,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,8,1,1,0,1,3,4,0,0,18,29,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,0,0,0,0,3,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",4,1,1,1,2,0,0,0,0,10,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,6,1,0,1,3,0,0,0,0,7,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,2,0,0,1,2,0,0,0,0,3,78,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,52,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0,0,0,1,2,0,10,0,0,10,42,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,2,0,0,1,2,0,6,0,0,9,56,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0,0,0,0,1,0,4,0,0,4,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,8,0,0,0,0,1,0,0,0,11,13,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,4,0,0,0,0,0,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },2,0,0,0,1,0,0,0,0,3,1,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,4,0,0,2,5,3,0,0,0,8,51,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,4,0,0,3,6,0,0,0,0,5,82,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },12,6,1,0,1,0,0,0,0,36,1,1,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",14,2,0,7,14,0,6,0,0,23,83,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },4,0,0,0,1,0,0,0,0,4,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,8,1,1,1,2,1,0,0,0,15,33,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,12,1,1,2,4,1,0,0,0,21,34,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,2,0,0,2,4,1,0,8,0,11,34,2,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,10,5,1,3,6,4,4,0,0,32,49,1,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,20,10,0,6,12,0,0,0,0,30,72,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,4,1,1,1,2,0,0,0,0,10,18,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,2,0,0,1,2,0,0,0,0,2,26,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,2,1,0,2,4,0,0,0,0,3,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,4,0,0,1,2,1,10,0,0,15,26,0,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,105,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,106,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,0,0,2,4,1,0,0,0,3,58,2,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,111,            random = nextGaussian;,6,0,0,0,0,0,0,0,0,7,22,3,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,112,            nextGaussian = Double.NaN;,0,0,1,0,0,0,2,0,0,5,26,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,115,        return random;,8,2,0,0,0,4,8,0,0,22,14,1,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2328,"                return cosQ(xa, xb);",2,0,0,1,2,1,0,0,0,2,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2293,        int quadrant = 0;,8,1,0,0,0,4,0,0,0,13,17,1,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2297,        if (x < 0) {,6,0,0,1,3,0,0,2,0,8,12,7,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2306,        double xb = 0;,8,0,0,0,0,0,2,10,0,20,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2326,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1822,            c = a + t;,6,1,0,0,0,3,0,0,0,10,10,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1823,            d = -(c - a - t);,4,0,0,1,2,0,0,0,0,4,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },6,0,1,0,1,0,0,0,0,9,1,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,10,1,1,3,6,1,8,0,0,26,51,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,2,0,1,2,4,0,4,0,0,11,26,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,6,2,1,2,4,1,10,0,0,24,31,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },8,3,0,0,1,0,0,0,0,11,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",12,1,0,2,4,0,4,2,0,19,58,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },2,0,0,0,1,3,0,0,0,5,1,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",2,2,0,1,3,0,6,0,0,10,83,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,        this.weight = weight;,2,0,0,0,0,0,0,0,0,2,21,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,        this.x      = x;,2,1,0,0,0,0,12,4,0,19,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {,6,0,0,1,3,2,0,2,0,10,79,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,        this.oldOptimizer = optimizer;,12,4,0,0,0,0,0,0,0,17,30,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,        this.optimizer    = null;,2,0,0,0,0,0,0,0,0,3,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,    },2,0,0,0,1,0,4,2,0,8,1,7,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,        super(null); // No custom convergence criterion.,8,3,1,1,2,0,4,4,0,24,48,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,        this.initialStepBoundFactor = initialStepBoundFactor;,4,0,1,0,0,0,0,0,0,10,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,        this.orthoTolerance = orthoTolerance;,8,1,0,0,0,0,0,0,0,10,37,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);",2,0,1,1,2,0,0,0,0,7,41,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,403,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3535,        if (a < b) {,16,3,0,1,3,0,8,0,0,28,12,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3545,        if (bits == 0x8000000000000000L) {,6,1,0,1,3,1,0,0,0,8,34,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,56,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,85,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,1,0,2,4,0,0,0,0,3,104,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,413,        return true;,10,1,0,0,0,1,0,0,0,13,12,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,440,"        return isSymmetricInternal(matrix, eps, false);",0,0,0,1,2,1,6,0,0,7,47,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,455,"        checkRowIndex(m, row);",6,0,0,1,2,1,0,0,0,7,22,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,456,"        checkColumnIndex(m, column);",10,2,0,1,2,0,6,0,0,19,28,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,457,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,468,        if (row < 0 ||,0,2,1,0,1,0,0,0,0,6,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,484,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,488,    },2,0,0,0,1,0,0,0,0,2,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",18,1,0,0,1,0,0,0,0,20,76,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,3,4,0,0,18,35,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,68,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,107,        return new DiagonalMatrix(data);,2,0,0,1,2,1,0,2,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,204,        final double[][] out = new double[dim][dim];,2,0,1,4,8,1,0,0,0,7,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,237,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,14,0,0,19,48,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,296,        return getRowDimension();,0,0,0,1,2,1,2,0,0,2,25,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,6,0,0,1,2,3,4,0,0,13,77,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,115,    private static final double LN_QUICK_COEF[][] = {,0,0,1,2,5,0,0,0,0,5,49,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,179,    private static final double COSINE_TABLE_A[] =,6,0,0,1,2,3,0,2,0,11,46,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,277,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,2,0,11,54,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,96,        maximalCount = max;,6,0,0,0,0,1,0,0,0,8,19,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,164,        count = 0;,4,0,0,0,0,0,0,0,0,6,10,0,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,43,        return getDefaultNumberFormat(Locale.getDefault());,2,1,0,2,4,1,6,0,0,9,51,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,267,    },2,0,0,0,1,1,0,6,0,10,1,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,44,        weightMatrix = new DiagonalMatrix(weight);,6,0,0,1,2,3,0,2,0,12,42,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,45,    },2,0,0,0,1,0,0,0,0,2,1,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,38,        init = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,26,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,232,        evaluations.resetCount();,6,0,0,1,2,0,4,0,0,11,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,233,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,237,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,322,        weight = new double[dim];,2,0,1,1,2,0,0,0,0,5,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,323,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,324,"            weight[i] = weightMatrix.getEntry(i, i);",0,0,1,2,4,0,8,0,0,13,40,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,342,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,344,                target = ((Target) data).getTarget();,6,0,0,3,6,0,2,2,0,11,37,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,347,            if (data instanceof Weight) {,10,1,0,1,3,0,0,2,0,14,29,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,348,                weightMatrix = ((Weight) data).getWeight();,14,1,0,3,6,0,2,2,0,22,43,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,352,                start = ((InitialGuess) data).getInitialGuess();,4,0,0,3,6,0,2,2,0,9,48,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,353,                continue;,6,0,0,0,0,2,0,2,0,11,9,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,365,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,39,    public Target(double[] observations) {,6,0,1,2,5,1,4,0,0,16,38,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,40,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,496,"        return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);",6,0,0,2,4,1,16,0,0,22,109,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,505,        jacobianEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,24,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,0,0,0,1,3,1,6,2,0,8,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,2,1,0,1,3,1,12,2,0,19,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,4,0,0,1,3,1,6,2,0,12,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,63,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,2,0,2,32,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,85,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,0,0,2,4,0,0,0,0,4,65,7,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,79,    protected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {,4,0,0,1,3,1,0,4,0,9,101,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,51,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,80,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,630,            super(Fraction.ZERO);,4,0,0,1,2,0,0,0,0,4,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,637,            data = new double[rows][columns];,4,0,1,2,4,1,0,2,0,12,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,643,            data[row][column] = value.doubleValue();,0,0,1,3,6,0,4,0,0,11,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,644,        },6,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,625,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,2,0,0,0,1,2,0,4,0,8,100,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,54,        return getWrongDimension(0);,4,0,0,1,2,4,6,2,0,15,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,72,        return getExpectedDimension(1);,2,0,0,1,2,1,2,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,59,"        super(specific, wrong, expected);",8,1,0,1,2,0,0,0,0,9,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,60,        this.wrong = wrong.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,61,        this.expected = expected.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,68,        return wrong.clone();,10,1,0,1,2,1,0,0,0,12,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,4,19,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,0,0,0,0,7,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,3,0,0,0,5,57,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,28,1,0,1,3,4,0,4,0,39,55,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,8,2,0,0,0,1,0,0,0,11,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,6,1,0,3,6,0,0,0,0,7,51,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,6,1,0,2,4,3,4,0,0,14,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,8,1,0,0,0,1,0,2,0,13,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,4,0,0,0,0,1,6,0,0,11,14,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,6,0,0,1,4,4,0,4,0,14,67,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));",8,0,1,2,4,1,6,2,0,20,58,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,75,        return y;,14,3,1,0,0,1,0,0,0,22,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,46,        this.weight = weight;,4,3,0,0,0,0,0,0,0,7,21,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,47,        this.x      = x;,0,0,1,0,0,0,2,0,0,7,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,63,    public CurveFitter(final MultivariateVectorOptimizer optimizer) {,4,0,0,1,3,2,0,2,0,8,65,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,64,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,65,        observations = new ArrayList<WeightedObservedPoint>();,4,1,0,1,2,0,8,4,0,18,54,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,269,        this.initialStepBoundFactor = initialStepBoundFactor;,12,2,0,0,0,0,0,0,0,15,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,274,    },10,4,0,0,1,1,0,0,0,15,1,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,35,    public ModelFunctionJacobian(MultivariateMatrixFunction j) {,4,0,0,1,3,1,0,2,0,7,60,2,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,36,        jacobian = j;,16,5,0,0,0,0,0,0,0,22,13,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,37,    },2,0,0,0,1,0,0,0,0,3,1,6,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,35,    public ModelFunction(MultivariateVectorFunction m) {,4,0,0,1,3,1,0,2,0,7,52,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,36,        model = m;,4,0,0,0,0,0,0,0,0,5,10,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,3421,        return (a <= b) ? a : b;,14,2,0,1,2,4,4,0,0,23,24,1,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,267,    },2,2,0,0,1,0,0,0,0,4,1,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,43,        return getDefaultNumberFormat(Locale.getDefault());,20,8,0,2,4,2,6,0,0,35,51,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,38,    public Target(double[] observations) {,2,0,0,2,5,0,12,2,0,17,38,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,39,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,35,    public MaxEval(int max) {,4,0,0,1,3,1,0,0,0,5,25,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,40,        maxEval = max;,4,0,0,0,0,0,0,0,0,5,14,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,41,    },4,1,0,0,1,0,10,2,0,20,1,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",16,1,0,0,1,0,0,0,0,17,73,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,8,0,0,8,44,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,237,    private static final double TANGENT_TABLE_B[] =,4,0,0,1,2,4,2,0,0,10,47,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,56,        return nf;,0,1,1,0,0,1,6,0,0,14,10,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,67,        throws NotStrictlyPositiveException {,0,0,1,0,1,0,0,0,0,7,37,9,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,74,    },0,0,0,0,1,0,0,0,0,1,1,7,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,51,    },2,0,0,0,1,3,0,0,0,5,1,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,14,53,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,101,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,140,        this.format            = format;,14,3,0,0,0,0,0,0,0,19,32,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,143,    },0,0,1,0,1,0,4,0,0,6,1,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,2,0,0,2,4,1,6,2,0,10,76,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,48,        super(checker);,6,0,0,1,2,0,0,2,0,9,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,49,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,48,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,80,                       MaxCountExceededCallback cb) {,2,0,0,0,2,0,0,2,0,4,30,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,41,    private int count = 0;,2,0,0,0,0,1,0,0,0,3,22,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,81,        if (cb == null){,2,1,0,1,3,0,0,0,0,3,16,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,191,    private static class MaxEvalCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,50,        super(checker);,2,0,0,1,2,0,6,0,0,8,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,51,    },8,1,0,0,1,0,0,0,0,10,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,206,    private static class MaxIterCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,102,        observations.add(observed);,2,0,0,1,2,0,6,0,0,9,27,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,112,        return observations.toArray(new WeightedObservedPoint[observations.size()]);,0,0,0,3,6,1,8,2,0,10,76,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,51,public class CurveFitter<T extends ParametricUnivariateFunction> {,4,0,0,0,1,1,0,2,0,7,66,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,62,        super.incrementEvaluationCount();,2,0,0,1,2,0,0,0,0,2,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,63,        return model.value(params);,2,0,0,1,2,1,6,0,0,8,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,92,        return super.optimize(optData);,4,0,0,1,2,1,0,0,0,4,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,137,            if (data instanceof ModelFunction) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,138,                model = ((ModelFunction) data).getModelFunction();,6,0,0,3,6,0,6,2,0,15,50,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,141,            if (data instanceof Target) {,4,1,0,1,3,0,0,0,0,5,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,142,                target = ((Target) data).getTarget();,6,0,0,3,6,0,16,4,0,27,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,145,            if (data instanceof Weight) {,4,0,0,1,3,0,0,2,0,6,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,146,                weightMatrix = ((Weight) data).getWeight();,4,0,0,3,6,0,2,2,0,9,43,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,159,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,160,"            throw new DimensionMismatchException(target.length,",4,0,0,0,1,0,0,2,0,6,51,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,12,3,0,0,0,0,4,0,0,22,6,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,4,3,1,5,10,0,6,0,0,22,73,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,2,0,0,4,8,0,4,0,0,7,69,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,0,0,1,3,0,0,0,0,3,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,6,1,0,1,2,1,0,2,0,10,38,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },6,1,0,0,1,0,0,0,0,8,1,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",10,1,0,7,14,0,0,0,0,12,71,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,5,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {",8,1,0,1,3,1,0,0,0,10,45,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,        mant = new int[field.getRadixDigits()];,6,0,0,2,4,0,0,0,0,7,39,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,        this.field = field;,6,0,0,0,0,0,6,0,0,12,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,        if (x == Long.MIN_VALUE) {,12,1,0,1,3,0,0,0,0,14,26,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,            sign = 1;,2,0,0,0,0,0,6,0,0,9,9,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,1,76,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,            mant[mant.length - 1] = (int) (x % RADIX);,12,1,0,3,6,1,0,0,0,14,42,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,            x /= RADIX;,2,1,0,0,0,0,0,0,0,3,11,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,        if (isLongMin) {,16,6,1,1,3,0,0,0,0,28,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,    public Dfp(final Dfp d) {,4,0,0,1,3,0,0,0,0,5,25,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,        exp   = d.exp;,8,0,0,0,0,3,0,0,0,12,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,        nans  = d.nans;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,        field = d.field;,14,2,0,0,0,0,6,2,0,25,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,        sign = 1;,4,0,0,0,0,0,0,0,0,6,9,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,        this.field = field;,6,1,0,0,0,1,0,0,0,8,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,0,0,2,0,4,57,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,        if (s.equals(POS_INFINITY_STRING)) {,0,2,0,2,5,0,2,0,0,5,36,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,        if (p == -1) { // try upper case?,4,0,0,1,3,0,4,0,0,9,33,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,12,1,0,1,3,3,0,0,0,16,23,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,6,0,0,0,0,1,6,0,0,13,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,2,0,0,5,10,0,0,2,0,4,73,11,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,12,5,0,4,8,0,0,0,0,17,69,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,6,1,0,1,3,3,4,0,0,14,13,1,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,8,3,0,2,4,0,0,0,0,12,18,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,6,1,1,0,0,1,4,0,0,26,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,1,2,0,0,0,0,3,64,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,7,14,0,6,2,0,17,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,217,    },20,4,0,0,1,0,4,0,0,31,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",2,1,0,2,4,0,0,0,0,3,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",2,0,0,1,3,0,6,0,0,8,45,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,6,0,0,0,0,0,0,0,0,9,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,6,3,1,0,0,0,4,0,0,15,7,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,8,3,1,1,3,0,2,0,0,27,16,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,2,1,1,1,3,0,0,0,0,8,16,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,10,2,1,1,2,1,0,0,0,19,23,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,4,0,1,0,0,0,0,0,0,8,14,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,6,0,0,0,0,0,0,0,0,9,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,10,3,1,0,0,3,0,0,0,19,16,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",12,8,1,1,3,0,4,0,0,29,53,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,14,4,0,0,0,1,2,0,0,22,8,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,2,5,1,0,0,0,0,0,0,24,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,10,1,0,0,0,0,0,0,0,13,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,0,0,0,0,2,54,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,1,0,3,6,0,6,2,0,17,71,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,2,0,0,2,5,0,16,0,0,19,36,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,6,1,0,0,0,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,4,0,0,0,0,0,2,2,0,9,6,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,6,0,0,2,5,0,6,0,0,12,42,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,2,0,0,1,2,0,0,0,0,2,48,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,4,0,0,0,0,1,0,0,0,4,31,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,907,                return false;,4,0,0,0,0,6,0,10,0,19,13,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,932,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,377,"            fpdecimal = s.substring(0, p);",2,0,0,1,2,0,6,0,0,9,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,378,            String fpexp = s.substring(p+1);,6,1,0,1,2,0,0,0,0,7,32,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,379,            boolean negative = false;,2,0,0,0,0,0,4,0,0,7,25,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,381,            for (int i=0; i<fpexp.length(); i++),10,1,0,2,4,1,4,4,0,21,36,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,393,            if (negative) {,2,0,0,1,3,0,0,0,0,2,15,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,            if (upper.length != dim) {,14,1,0,1,3,1,4,0,0,21,26,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,            for (int i = 0; i < dim; i++) {,12,2,0,1,3,0,0,0,0,15,31,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,                final double v = startPoint[i];,2,0,0,1,2,0,0,0,0,3,31,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,                if (v < lo) {,12,1,0,1,3,0,0,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,97,            if (lower.length != dim) {,0,0,0,1,3,0,4,0,0,5,26,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,927,                return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,953,                return x;,2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3519,        long bits = Double.doubleToRawLongBits(a);,6,3,1,1,2,0,0,0,0,18,42,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,60,public abstract class RealVector {,4,2,0,0,1,0,6,0,0,12,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,530,    },4,0,0,0,1,0,0,0,0,5,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,534,"        MatrixUtils.checkRowIndex(this, row);",4,0,0,1,2,1,0,4,0,9,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,538,"            out[i] = getEntry(row, i);",4,0,0,2,4,0,0,0,0,5,26,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,85,    public ArrayRealVector(double[] d) {,12,1,0,2,5,1,10,10,0,35,36,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,87,    },10,1,0,0,1,0,0,0,0,13,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,4,0,0,1,2,3,4,2,0,14,86,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,81,    },0,0,0,0,1,0,10,0,0,10,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,272,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,280,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,285,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,289,            data = new double[subMatrix.length][nCols];,6,1,0,2,4,1,4,0,0,12,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,4,0,1,5,10,1,2,0,0,9,68,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,534,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,115,        throws MathArithmeticException {,2,0,0,0,1,0,0,0,0,2,32,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,81,    private byte maxIter = 30;,2,0,0,0,0,0,0,0,0,2,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,4,0,0,4,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,118,            findEigenVectors(transformer.getQ().getData());,2,0,0,3,6,3,8,0,0,13,47,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,123,    },4,1,0,0,1,1,0,0,0,6,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,192,        final int rows = matrix.getRowDimension();,6,0,0,1,2,0,0,0,0,7,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,193,        final int columns = matrix.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,7,0,0,0,0,0,0,0,0,7,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,195,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,196,            for (int j = i + 1; j < columns; ++j) {,18,2,0,1,3,1,0,0,0,23,39,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,224,            final int m = eigenvectors.length;,2,1,0,0,0,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,10,1,0,1,2,3,6,0,0,22,64,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",12,5,1,3,8,1,10,0,0,32,71,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,259,        return cachedD;,4,0,0,0,0,1,0,0,0,5,15,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,555,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,558,    },8,2,0,0,1,0,10,0,0,20,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,567,        final double[][]z = householderMatrix.clone();,10,1,0,3,6,2,4,0,0,18,46,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,568,        final int n = main.length;,2,0,0,0,0,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,572,        for (int i = 0; i < n - 1; i++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,577,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,52,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,591,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,65,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,601,        for (int j = 0; j < n; j++) {,14,3,1,1,3,0,0,0,0,21,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,612,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,668,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,672,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,673,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,675,            for (int j = i + 1; j < n; j++) {,10,2,1,1,3,0,4,0,0,19,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,694,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,696,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,50,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,700,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,707,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,708,        final double[] tmp = new double[n];,2,0,1,2,4,1,0,0,0,5,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,709,        for (int i = 0; i < n; i++) {,12,1,0,1,3,0,0,0,0,14,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,711,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,713,            eigenvectors[i] = new ArrayRealVector(tmp);,2,0,1,2,4,0,0,2,0,9,43,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,71,        secondary = new double[m - 1];,6,1,0,1,2,0,6,0,0,15,30,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,72,        cachedQ   = null;,6,1,0,0,0,0,0,0,0,8,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,74,        cachedT   = null;,2,0,1,0,0,1,0,0,0,7,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,77,        transform();,2,0,0,1,2,1,2,0,0,5,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,78,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,131,        return cachedQt;,4,0,1,0,0,1,0,0,0,9,16,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,175,        return main;,4,0,0,0,0,1,6,0,0,11,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,185,        return secondary;,10,2,0,0,0,1,0,0,0,13,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,193,        final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,106,"                            final String separator, final NumberFormat format) {",8,2,1,0,2,2,0,4,0,21,52,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,114,    },8,4,1,0,1,0,0,0,0,19,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,12,1,1,0,0,0,12,6,0,41,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,8,1,0,1,3,0,0,0,0,11,37,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,4,0,0,1,3,3,4,2,0,13,24,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,0,0,0,3,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,4,0,1,1,2,4,0,4,0,16,31,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,20,5,0,1,2,1,4,0,0,31,27,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,100,            for (int i = 0; i < dim; i++) {,36,4,1,1,3,1,4,4,0,56,31,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,103,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,2,0,2,0,10,52,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,67,        msgArguments   = new ArrayList<Object[]>();,8,5,1,2,4,1,0,0,0,24,43,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,69,    },2,1,0,0,1,0,0,0,0,3,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,87,        msgPatterns.add(pattern);,10,1,0,1,2,0,6,0,0,19,25,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,88,        msgArguments.add(ArgUtils.flatten(arguments));,6,1,0,2,4,1,10,0,0,20,46,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,1,1,1,2,0,0,0,0,11,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",4,3,0,1,2,0,4,0,0,11,54,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",6,5,0,2,4,0,0,0,0,11,87,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",10,3,0,1,2,3,0,0,0,17,131,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,1,1,2,0,0,0,0,18,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,4,0,0,4,55,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,1,0,0,0,5,78,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,                final double v = startPoint[i];,2,0,0,1,2,3,0,0,0,5,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,                final double lo = lower[i];,4,0,1,1,2,2,4,0,0,14,27,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",10,1,0,1,2,0,0,0,0,12,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,        double negccov = 0;,18,3,0,0,0,0,0,0,0,23,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,        if (ccov1 + ccovmu > 0) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,            RealMatrix roneu = pc.multiply(pc.transpose()),18,5,1,2,4,1,18,6,0,53,46,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,20,7,0,1,2,0,6,0,0,35,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,            oldFac += 1. - ccov1 - ccovmu;,2,0,0,0,0,0,8,0,0,10,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,                negccov = (1. - ccovmu) * 0.25 * mueff /,6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,                double negminresidualvariance = 0.66;,2,0,1,0,0,0,4,0,0,8,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,                RealMatrix arzneg,34,10,0,0,0,1,20,0,0,67,17,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,723,"                arnorms = divide(arnormsReverse, arnormsSorted);",16,6,0,1,2,4,26,4,0,58,48,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,724,                int[] idxInv = inverse(idxnorms);,8,1,1,2,4,1,4,0,0,18,33,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,727,                double negcovMax = (1. - negminresidualvariance) /,8,2,0,1,2,1,12,2,0,25,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,729,                if (negccov > negcovMax) {,6,1,0,1,3,1,0,0,0,8,26,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,732,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,733,                RealMatrix artmp = BD.multiply(arzneg);,6,0,0,1,2,0,14,2,0,22,39,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,736,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,737,                C = C.scalarMultiply(oldFac),12,0,0,1,2,1,6,0,0,20,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,748,            } else {,2,1,0,0,2,0,0,0,0,3,8,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,760,    },2,0,1,0,1,0,0,0,0,7,1,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,768,        if (ccov1 + ccovmu + negccov > 0 &&,2,0,0,0,1,0,0,0,0,2,35,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,771,"            C = triu(C, 0).add(triu(C, 1).transpose());",2,0,0,4,8,0,12,0,0,15,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,773,            EigenDecomposition eig = new EigenDecomposition(C);,10,1,0,1,2,0,0,4,0,16,51,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,774,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",8,0,0,1,2,0,4,0,0,15,66,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,776,            diagD = diag(D);,10,2,0,1,2,1,6,0,0,19,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,777,            if (min(diagD) <= 0) {,2,1,0,2,5,1,6,0,0,10,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,792,            diagC = diag(C);,4,0,0,1,2,0,4,0,0,9,16,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,793,            diagD = sqrt(diagD); // D contains standard deviations now,6,0,0,1,2,0,4,0,0,12,58,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1085,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,4,0,0,7,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1086,        for (int r = 0; r < m.getRowDimension(); r++) {,6,2,0,2,5,0,8,0,0,19,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1087,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1088,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1091,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1116,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,8,0,0,16,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1118,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",6,2,1,3,6,0,8,0,0,23,44,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1129,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1130,        for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1131,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1132,            for (int r = 0; r < m.getRowDimension(); r++) {,18,2,0,2,5,1,4,0,0,27,47,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1135,            d[0][c] = sum;,2,0,1,2,4,0,0,0,0,7,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1137,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1314,        int[] inverse = new int[indices.length];,6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1315,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1316,            inverse[indices[i]] = i;,2,0,1,2,4,0,4,0,0,13,24,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1318,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1327,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1330,        return reverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,522,        final int nRows = getRowDimension();,4,0,0,1,2,0,0,0,0,4,36,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,534,"        MatrixUtils.checkRowIndex(this, row);",2,0,1,1,2,0,6,0,0,13,37,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,535,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,536,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,537,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,62,    public TriDiagonalTransformer(RealMatrix matrix) {,8,0,0,1,3,1,0,2,0,12,50,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,72,        cachedQ   = null;,4,0,0,0,0,0,10,0,0,16,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,73,        cachedQt  = null;,2,0,1,0,0,0,4,0,0,8,17,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,74,        cachedT   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,78,    },6,0,0,0,1,3,0,0,0,10,1,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,6,1,1,1,2,1,6,0,0,20,45,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,185,        return secondary;,4,0,0,0,0,4,4,2,0,13,17,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,193,        final int m = householderVectors.length;,2,0,1,0,0,0,0,0,0,5,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,85,    public ArrayRealVector(double[] d) {,12,2,0,2,5,1,0,0,0,16,36,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,86,        data = d.clone();,2,0,0,1,2,3,0,0,0,5,17,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,610,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,218,"            m.setEntry(i, i, diagonal[i]);",8,2,1,2,4,0,6,0,0,21,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,220,        return m;,4,0,0,0,0,4,0,0,0,7,9,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,2,1,0,1,0,0,0,0,17,75,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,80,        copyIn(d);,2,0,0,1,2,0,4,0,0,7,10,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,270,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,271,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,274,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,278,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,283,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,284,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,287,            data = new double[subMatrix.length][nCols];,2,0,1,2,4,0,0,0,0,7,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,288,            for (int i = 0; i < data.length; ++i) {,2,1,1,1,3,0,0,0,0,10,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,289,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,292,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,524,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,525,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,6,0,0,11,68,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,528,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,530,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,81,    private byte maxIter = 30;,2,0,1,0,0,1,0,2,0,9,26,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,118,            findEigenVectors(transformer.getQ().getData());,0,0,1,3,6,0,11,0,0,24,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,192,        final int rows = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,10,1,0,0,0,1,0,0,0,12,59,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,196,            for (int j = i + 1; j < columns; ++j) {,10,2,0,1,3,0,0,0,0,13,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,1,2,4,0,6,0,0,10,44,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,247,        if (cachedD == null) {,2,1,1,1,3,0,0,0,0,7,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,2,0,0,1,2,0,6,0,0,9,64,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,12,1,0,1,3,3,0,0,0,17,50,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,4,1,1,3,7,0,0,0,0,13,24,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,1,0,2,4,0,0,0,0,3,15,13,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,8,2,0,0,0,4,0,4,0,18,33,1,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,18,2,0,1,3,2,12,0,0,35,37,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2,0,1,1,2,1,0,0,0,7,24,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,1,4,0,0,16,12,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,0,1,2,0,4,0,0,6,24,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2,0,0,0,0,0,0,0,0,3,19,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,6,0,0,9,46,0,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },6,0,0,0,1,0,0,0,0,7,1,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,6,1,0,0,0,1,0,0,0,8,12,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,12,2,0,1,2,2,0,0,0,15,20,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,6,5,0,1,3,0,6,0,0,18,13,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,20,2,0,1,3,0,0,0,0,24,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,0,0,0,5,11,0,0,0,0,16,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,1,0,0,0,0,4,0,0,8,4,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,0,0,0,3,51,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,6,0,0,1,2,1,2,0,0,10,36,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,8,4,0,1,2,1,6,2,0,21,39,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,4,0,0,1,2,1,2,0,0,8,41,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,398,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,0,0,1,4,0,0,0,0,3,63,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,2,1,0,3,7,0,8,0,0,11,59,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,63,        if (rowDimension < 1) {,4,1,0,1,3,3,0,0,0,8,23,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,66,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,58,    },2,0,0,0,1,0,0,0,0,2,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,139,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,158,    private static final double SINE_TABLE_B[] =,2,1,1,1,2,0,0,0,0,8,44,6,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,177,    private static final double COSINE_TABLE_A[] =,2,0,1,1,2,0,0,0,0,5,46,0,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,196,    private static final double COSINE_TABLE_B[] =,4,0,0,1,2,3,0,0,0,8,46,0,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,275,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,0,0,10,54,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,2992,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,4,0,0,4,61,5,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,507,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,2,0,0,7,68,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,509,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,510,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,512,        return out;,8,1,0,0,0,2,0,0,0,10,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,117,    },6,0,0,0,1,0,8,0,0,15,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,    },6,1,0,0,1,0,0,0,0,7,1,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,102,        this.index  = 0;,4,1,0,0,0,0,8,0,0,14,16,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,106,        iRm1 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,108,        i1   = new int[r];,2,1,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,110,        i3   = new int[r];,10,4,1,1,2,0,0,0,0,17,18,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,112,            iRm1[j] = (j + r - 1) % r;,8,6,1,2,4,0,0,0,0,27,26,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,120,        setSeed(seed);,4,1,0,1,2,0,0,0,0,5,14,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,122,    },4,1,0,0,1,0,12,0,0,17,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,154,        if (seed == null) {,0,0,0,1,3,0,4,0,0,4,19,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",8,0,0,2,4,0,12,0,0,20,65,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,161,        if (seed.length < v.length) {,4,1,0,1,3,0,0,0,0,5,29,9,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,163,                final long l = v[i - seed.length];,10,1,1,1,2,1,4,0,0,18,34,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,6,5,1,6,12,0,0,0,0,16,65,8,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,170,    },10,2,0,0,1,0,0,2,0,14,1,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,35,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,36,        nextGaussian = Double.NaN;,6,0,0,0,0,0,6,0,0,14,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,166,    },2,0,0,0,1,0,0,0,0,3,1,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,128,    public RandomDataGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,129,    },0,0,0,0,1,0,4,0,0,4,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,108,    public RandomDataImpl() {,22,7,1,1,3,2,2,0,0,39,25,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,110,    },4,1,0,0,1,0,0,0,0,5,1,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,50,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,71,        random = rng;,10,1,0,0,0,0,0,0,0,13,13,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,1,1,0,0,0,0,0,0,12,36,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,4,0,0,0,0,0,0,0,0,5,34,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,0,0,0,0,0,0,6,0,0,6,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,4,0,0,0,0,0,0,0,0,5,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,2,1,0,0,0,1,10,0,0,15,34,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,6,0,0,0,0,1,0,0,0,7,9,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,1,2,0,0,0,0,12,54,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,8,0,0,12,41,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,0,0,0,0,0,0,0,0,7,68,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,6,3,0,1,3,0,0,0,0,9,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,16,2,1,0,0,2,16,4,0,46,10,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,2,0,0,1,2,3,0,0,0,5,17,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,10,0,0,0,0,0,0,0,0,12,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,8,3,0,0,0,0,14,0,0,25,15,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,4,1,1,0,0,0,0,0,0,8,42,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",4,1,0,1,2,1,0,2,0,7,18,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,6,1,1,0,0,0,4,0,0,17,25,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,6,0,0,0,0,1,0,0,0,8,16,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },8,1,0,0,1,0,0,0,0,9,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,18,6,0,0,0,0,0,0,0,26,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,18,0,0,0,0,0,2,0,0,20,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,196,        long q1 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,202,        boolean stop = false;,6,1,0,0,0,0,0,0,0,7,21,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,204,            ++n;,10,1,0,0,0,0,0,0,0,12,4,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,206,            long a1 = (long)FastMath.floor(r1);,2,1,0,2,4,0,0,0,0,3,35,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,207,            p2 = (a1 * p1) + p0;,14,2,0,1,2,3,0,0,0,21,20,1,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,208,            q2 = (a1 * q1) + q0;,10,2,0,1,2,0,0,0,0,13,20,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,213,            double convergent = (double)p2 / (double)q2;,4,4,0,2,4,0,10,0,0,18,44,8,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,122,    },0,0,0,0,1,0,4,0,0,5,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0,0,0,1,2,0,0,2,0,2,55,8,0.01887,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,177,    {,4,4,1,0,1,0,0,0,0,30,1,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,179,        double r0 = value;,10,1,0,0,0,0,0,0,0,12,18,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,187,        if (FastMath.abs(a0 - value) < epsilon) {,4,1,0,2,5,0,0,0,0,6,41,15,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,20,5,0,1,3,1,0,0,0,28,46,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3249,        y = (long) x;,24,2,0,1,2,0,6,0,0,35,13,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,50,                    list.add(o);,12,1,0,1,2,0,0,4,0,19,12,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,3,4,2,0,25,52,1,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,66,        msgPatterns    = new ArrayList<Localizable>();,6,1,0,1,2,0,0,0,0,7,46,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,67,        msgArguments   = new ArrayList<Object[]>();,4,0,0,2,4,0,0,4,0,9,43,3,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,69,    },2,0,0,0,1,0,0,2,0,4,1,9,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,88,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,0,2,4,0,10,0,0,13,46,0,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,89,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,3,0,0,0,5,50,2,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,366,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,367,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,368,    },2,0,0,0,1,0,0,0,0,2,1,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,1,0,5,10,0,6,0,0,12,67,3,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",8,2,0,1,2,0,6,2,0,19,60,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",6,0,0,1,2,3,0,6,0,15,62,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",12,5,1,1,2,3,0,4,0,28,61,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",8,1,0,1,2,0,0,0,0,10,61,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,8,2,0,2,5,0,0,0,0,11,49,8,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,2,1,1,2,0,6,0,0,22,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,10,3,0,1,2,4,6,0,0,23,44,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,12,0,0,12,46,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,9,52,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,4,0,0,8,61,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0,1,0,1,2,1,6,0,0,7,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,6,1,0,0,0,0,0,0,0,7,10,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,6,1,0,0,0,0,0,0,0,8,10,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,2,0,0,3,7,1,0,0,0,3,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,1,0,4,0,20,69,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,0,0,0,0,0,0,12,0,0,12,7,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,6,1,0,1,3,0,0,0,0,8,14,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,2,0,0,3,6,0,6,0,0,8,46,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,4,0,0,0,0,1,0,0,0,5,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",10,3,0,2,4,0,8,0,0,24,74,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,4,0,0,0,0,1,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,4,0,0,1,3,0,0,0,0,4,16,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },2,0,0,0,1,0,4,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },6,1,0,0,1,1,0,0,0,8,1,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,0,1,0,1,3,0,12,0,0,13,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,12,3,0,0,0,3,0,4,0,23,35,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,2,0,0,1,3,0,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,4,1,0,1,3,0,0,0,0,6,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,2,0,0,1,3,3,12,0,0,17,39,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",8,2,1,3,6,0,0,0,0,14,64,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",4,3,0,1,2,0,4,0,0,12,23,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },2,0,0,0,1,0,0,0,0,3,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,4,0,0,1,2,1,0,0,0,5,52,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {",6,1,0,2,5,0,0,0,0,8,50,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,        for (int i = 0; i < getNumArtificialVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,                columnsToDrop.add(col);,8,2,0,1,2,1,0,0,0,11,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,            int col = 0;,4,0,0,0,0,0,0,0,0,5,12,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,                if (!columnsToDrop.contains(j)) {,2,1,0,2,5,0,6,0,0,9,33,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);,6,0,0,4,8,0,14,6,0,26,74,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,        for (int i = drop.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,            columnLabels.remove((int) drop[i]);,0,0,1,3,6,0,4,0,0,8,35,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,        return row;,6,0,1,0,0,1,0,2,0,11,11,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);",10,1,0,1,2,0,0,0,0,12,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,        if (vector.getDimension() != nCols) {,16,5,1,2,5,0,4,0,0,29,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,498,"            setEntry(row, i, vector.getEntry(i));",10,1,0,2,4,3,2,4,0,21,37,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,500,    },8,2,0,0,1,1,8,0,0,19,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,523,        final int nCols = getColumnDimension();,2,0,0,1,2,1,4,0,0,7,39,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,524,        final double[] out = new double[nCols];,10,2,1,2,4,2,0,0,0,16,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,526,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,529,        return out;,4,0,0,0,0,1,8,0,0,12,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,66,    },2,0,1,0,1,0,0,0,0,4,1,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,317,        if (v instanceof ArrayRealVector) {,38,5,1,1,3,1,22,4,0,78,35,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,318,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,6,0,0,6,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,319,            final int dim = vData.length;,10,0,0,0,0,1,0,0,0,13,29,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,321,            ArrayRealVector result = new ArrayRealVector(dim);,26,9,1,1,2,1,0,4,0,45,50,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,323,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,324,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,326,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,591,            return data[index];,0,0,1,1,2,1,0,0,0,4,19,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,206,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,160,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,170,"        columnLabels.add(""s"" + i);",6,1,0,1,2,0,4,0,0,12,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,230,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,237,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,238,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,1,2,4,0,22,0,0,30,73,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,239,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,24,0,0,24,82,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,521,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,226,        while (!tableau.isOptimal()) {,2,0,1,2,5,0,4,0,0,12,30,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,316,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,317,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,318,"            final double entry = getEntry(i, col);",2,0,0,1,2,1,6,0,0,9,38,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,319,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,320,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,321,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,333,        if (getNumObjectiveFunctions() == 1) {,0,1,1,2,5,0,2,0,0,8,38,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,91,            return -1;,2,0,0,0,0,1,0,0,0,3,10,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,114,"        if (equals(x, y, maxUlps)) {",2,0,0,2,5,3,6,0,0,11,28,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,116,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,6,19,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,70,        double minValue = 0;,2,0,0,0,0,0,2,0,0,5,20,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,71,        Integer minPos = null;,4,0,0,0,0,0,0,2,0,6,22,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,14,2,0,3,7,1,0,0,0,18,83,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,73,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,76,            if (entry < minValue) {,4,1,0,1,3,0,0,0,0,5,23,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,77,                minValue = entry;,4,0,0,0,0,0,0,0,0,5,17,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,78,                minPos = i;,2,6,1,0,0,0,0,0,0,16,11,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,81,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,92,        List<Integer> minRatioPositions = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,59,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,93,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,94,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,95,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,1,0,2,4,1,10,0,0,14,63,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,96,"            final double entry = tableau.getEntry(i, col);",2,0,0,1,2,1,8,0,0,11,46,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,98,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,99,                final double ratio = rhs / entry;,10,3,0,0,0,1,0,0,0,14,33,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,102,"                final int cmp = Double.compare(ratio, minRatio);",2,0,0,1,2,1,8,0,0,11,48,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,106,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,107,                    minRatioPositions = new ArrayList<Integer>();,4,1,1,1,2,0,0,4,0,15,45,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,108,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,113,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,115,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,168,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,174,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,12,0,0,14,55,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,178,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,179,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,180,"                final double multiplier = tableau.getEntry(i, pivotCol);",2,0,0,1,2,1,8,0,0,11,56,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,127,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,270,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,1,4,2,0,6,57,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,392,                return false;,2,0,0,0,0,1,0,2,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,447,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,463,        for (int i = 0; i < getWidth(); i++) {,2,1,1,2,5,0,0,0,0,8,38,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,464,"            double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;",4,2,0,2,4,0,16,0,0,22,96,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,466,            if (FastMath.abs(result) < CUTOFF_THRESHOLD) {,4,1,0,2,5,3,6,0,0,14,46,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,467,                result = 0.0;,6,0,1,0,0,0,0,0,0,9,13,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,469,"            tableau.setEntry(minuendRow, i, result);",2,0,0,1,2,0,12,0,0,15,40,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,4,1,0,0,0,0,0,0,0,6,21,10,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,6,2,0,0,0,1,0,2,0,11,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,14,5,1,0,0,0,0,0,0,21,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,8,0,1,0,0,0,0,2,0,14,27,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",2,0,0,1,2,3,0,0,0,5,31,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,23,21,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,0,0,1,2,1,6,0,0,16,41,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,1,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,2,0,1,0,0,0,0,4,0,11,73,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,2,0,0,0,0,0,0,0,0,4,32,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,6,1,0,0,0,4,0,0,0,11,21,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,2,0,0,1,3,0,0,0,0,2,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",4,0,0,1,2,1,8,0,0,13,47,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",10,1,0,1,2,0,0,0,0,12,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,6,0,0,23,47,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,4,2,1,0,0,0,0,0,0,8,12,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,4,0,0,1,2,0,0,0,0,4,33,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,0,0,0,6,19,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,6,1,0,0,0,0,14,0,0,22,33,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,4,1,0,2,5,1,6,0,0,12,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,4,1,0,1,4,0,0,0,0,5,21,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",2,1,0,3,7,0,14,0,0,18,74,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0,1,0,3,7,0,14,0,0,15,74,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,2,1,0,1,3,0,4,0,0,7,19,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,4,0,0,0,0,0,0,0,0,5,9,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,1,1,0,0,0,0,0,0,11,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,10,91,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,0,0,0,7,27,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,6,2,0,0,1,3,0,0,0,12,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,10,2,0,1,3,0,0,0,0,13,24,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,2,1,0,2,5,0,2,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,6,2,1,1,3,0,0,0,0,11,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,2,0,1,1,2,0,4,0,0,9,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,12,1,0,0,0,0,0,0,0,14,54,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,6,1,0,1,3,0,0,0,0,8,32,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",6,1,0,0,1,0,0,2,0,10,75,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",8,0,0,0,1,0,0,2,0,11,75,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,10,1,0,1,2,0,0,2,0,14,57,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,6,0,0,1,2,1,6,6,0,20,49,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,4,0,0,1,2,0,0,2,0,7,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,0,0,5,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,6,1,0,1,2,0,0,2,0,10,88,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,8,1,0,0,1,2,0,0,0,12,34,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },4,2,0,0,1,0,0,0,0,6,1,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,8,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,2,0,0,0,0,0,0,0,0,2,17,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,4,0,0,0,0,0,0,0,0,7,27,0,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,4,0,0,2,5,3,8,0,0,16,37,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,18,4,0,1,3,4,2,0,0,29,42,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,6,0,0,2,5,4,12,4,0,26,44,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,12,2,1,3,6,3,4,0,0,31,78,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,115,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",10,0,0,1,2,0,0,0,0,10,76,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,118,    this.c         = c;,4,0,0,0,0,0,0,0,0,4,19,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,119,    this.a         = a;,8,1,0,0,0,0,0,0,0,10,19,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,120,    this.b         = b;,6,0,0,0,0,0,0,0,0,7,19,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,126,    setSafety(0.9);,6,0,0,1,2,0,0,0,0,6,15,2,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,127,    setMinReduction(0.2);,12,1,0,1,2,0,0,0,0,16,21,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,110,    super(name);,6,0,0,1,2,0,4,0,0,11,12,3,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,157,      minStep     = FastMath.abs(minimalStep);,2,0,0,1,2,0,6,0,0,9,40,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,158,      maxStep     = FastMath.abs(maximalStep);,2,1,0,1,2,0,6,0,0,10,40,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,159,      initialStep = -1;,8,0,0,0,0,2,4,0,0,16,17,2,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,161,      scalAbsoluteTolerance = absoluteTolerance;,4,0,0,0,0,0,0,0,0,5,42,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,162,      scalRelativeTolerance = relativeTolerance;,6,4,0,0,0,0,10,0,0,20,42,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,164,      vecRelativeTolerance  = null;,2,0,0,0,0,0,4,2,0,8,29,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,829,            if (intVal > 746) {,4,2,0,1,3,0,0,0,0,6,19,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,847,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,2,1,1,2,0,6,0,0,21,71,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,862,            intVal = -intVal;,2,1,0,0,0,0,0,0,0,3,17,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,258,    double yOnScale2 = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,259,    double yDotOnScale2 = 0;,2,0,0,0,0,0,0,0,0,2,24,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,260,    for (int j = 0; j < scale.length; ++j) {,12,1,0,1,3,0,0,0,0,14,40,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,261,      ratio         = y0[j] / scale[j];,2,1,1,2,4,0,0,0,0,12,33,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,1,0,0,0,5,33,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },4,0,0,0,1,0,0,0,0,6,1,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,2,0,0,0,0,0,0,0,0,3,6,12,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,296,"                System.arraycopy(y, start, y, 0, nbPoints);",0,0,0,1,2,0,12,0,0,12,43,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,297,                signChangeIndex -= start;,8,1,0,0,0,0,8,0,0,18,25,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,269,                    nextX = Double.NaN;,6,0,0,0,0,0,0,0,0,7,19,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,290,            if ((nbPoints > 2) && (end - start != nbPoints)) {,8,0,0,3,7,1,0,0,0,10,50,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,316,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",36,6,0,1,2,3,10,0,0,57,89,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,317,            x[signChangeIndex] = nextX;,2,0,1,1,2,0,0,0,0,7,27,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,319,            y[signChangeIndex] = nextY;,2,0,1,1,2,0,0,0,0,7,27,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,323,            if (nextY * yA <= 0) {,22,6,0,1,3,0,20,0,0,48,22,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,325,                xB = nextX;,4,0,0,0,0,0,0,0,0,5,11,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,327,                absYB = FastMath.abs(yB);,8,3,0,1,2,0,16,0,0,28,25,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,328,                ++agingA;,8,2,0,0,0,0,12,0,0,22,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,329,                agingB = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,172,            nbPoints        = 2;,8,1,0,0,0,0,0,0,0,9,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,199,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,200,        double absYA = FastMath.abs(yA);,2,0,0,1,2,0,6,0,0,8,32,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,201,        int agingA   = 0;,4,1,0,0,0,0,4,0,0,10,17,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,202,        double xB    = x[signChangeIndex];,2,0,1,1,2,0,0,0,0,7,34,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,4,0,0,1,2,0,0,4,0,8,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",8,0,0,1,2,3,16,4,0,32,50,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",10,1,0,2,5,0,10,0,0,22,43,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,2,0,0,0,0,0,0,0,0,2,17,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,14,2,0,1,3,0,0,0,0,18,46,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,4,1,1,1,2,0,0,0,0,10,23,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,6,1,1,1,2,0,4,0,0,16,27,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,4,1,1,0,0,1,0,0,0,10,11,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",2,1,0,2,5,1,12,6,0,22,43,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",14,4,1,1,2,0,2,0,0,31,49,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,8,2,0,1,2,1,2,0,0,13,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,4,0,0,0,0,0,6,0,0,13,10,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,6,0,0,21,46,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,8,2,0,0,0,1,16,2,0,32,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,10,1,1,1,3,0,4,0,0,21,16,1,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,8,0,0,0,0,0,0,0,0,8,24,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,6,2,0,1,2,0,4,0,0,12,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,2,0,0,3,6,0,10,0,0,12,48,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,2,21,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,1,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,0,0,0,4,36,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,            for (int i = 0; i < data.length; i++) {,2,0,0,1,3,0,0,0,0,2,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,0,0,0,0,1,10,0,0,15,11,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,4,0,0,2,5,0,0,0,0,4,30,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,        return tableau.getSolution();,6,1,0,1,2,1,4,0,0,12,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,                return null;,0,0,0,0,0,1,10,0,0,10,12,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,4,1,0,1,2,0,4,4,0,14,92,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,1,0,2,4,0,4,0,0,5,102,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,0,0,0,5,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,6,1,0,3,6,1,0,0,0,8,70,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,      for (int i = 0; i < coefficients.length; i++) {,8,0,0,1,3,0,0,0,0,10,47,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,          if (colIndex < 0) {,4,2,1,1,3,1,0,0,0,19,19,12,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.05556,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1,-1
defect4j,math,org/apache/commons/math/util/Precision,42,92,            return 0;,18,4,1,0,0,2,0,0,0,28,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,192,        tableau.dropPhase1Objective();,4,1,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,194,        while (!tableau.isOptimal()) {,2,0,0,2,5,2,4,0,0,9,30,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,98,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,10,1,0,3,7,0,2,2,0,15,83,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {",0,1,0,2,5,0,10,0,0,11,56,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,75,                minValue = entry;,2,0,0,0,0,0,0,0,0,2,17,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,79,        return minPos;,2,0,0,0,0,1,4,0,0,7,14,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,90,        List<Integer> minRatioPositions = new ArrayList<Integer>();,10,1,0,1,2,0,0,8,0,20,59,0,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,91,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,92,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,8,1,1,3,7,2,10,0,0,25,80,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",16,2,0,2,4,0,8,0,0,28,63,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,97,                final double ratio = rhs / entry;,6,1,0,0,0,1,0,0,0,8,33,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);",14,0,0,1,2,4,0,0,0,18,62,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,99,                if (cmp == 0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,101,                } else if (cmp < 0) {,8,4,1,1,4,0,0,0,0,23,21,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,102,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,111,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,141,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,150,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,151,            if (i != pivotRow) {,6,1,0,1,3,0,0,0,0,8,20,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,152,"                double multiplier = tableau.getEntry(i, pivotCol);",4,0,0,1,2,1,14,2,0,21,50,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,153,"                tableau.subtractRow(i, pivotRow, multiplier);",4,0,0,1,2,0,10,0,0,14,45,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,311,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,312,        for (int i = 0; i < getHeight(); i++) {,10,1,0,2,5,0,2,0,0,15,39,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,314,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",4,2,0,3,7,3,8,0,0,17,60,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,315,                row = i;,10,3,0,0,0,1,2,0,0,17,8,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,328,        if (getNumObjectiveFunctions() == 1) {,0,1,0,2,5,0,6,0,0,7,38,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,437,        for (int j = 0; j < getWidth(); j++) {,8,1,0,2,5,0,2,0,0,13,38,0,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,438,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,454,"        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)",0,0,0,1,3,0,12,0,0,12,65,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,456,    },0,0,1,0,1,0,4,0,0,8,1,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,68,            return -1;,4,7,1,0,0,1,0,0,0,27,10,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,285,            yInt = SGN_MASK - yInt;,8,1,0,0,0,0,0,2,0,12,23,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,168,"        columnLabels.add(""a"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,225,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,232,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,1,2,4,0,8,0,0,20,69,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,233,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",4,1,0,2,4,0,8,0,0,15,73,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,506,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,514,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,93,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,94,            return -1;,2,0,0,0,0,2,4,0,0,8,10,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,73,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,79,        this.maxIterations = maxIterations;,6,0,0,0,0,0,0,0,0,8,35,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,110,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,111,        this.linearConstraints = constraints;,6,0,0,0,0,0,0,0,0,7,37,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,112,        this.goal              = goalType;,4,0,0,0,0,0,0,0,0,5,34,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,113,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,115,        iterations  = 0;,2,0,1,0,0,0,4,0,0,11,16,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",6,0,0,1,2,3,0,0,0,9,36,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,52,    },2,0,0,0,1,0,0,0,0,3,1,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",4,0,0,1,3,0,0,0,0,4,63,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,60,        this.epsilon = epsilon;,8,0,0,0,0,0,0,0,0,10,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,169,        if (tableau.getNumArtificialVariables() == 0) {,4,1,0,2,5,0,0,0,0,5,47,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,191,        solvePhase1(tableau);,2,0,0,1,2,0,8,0,0,10,21,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,382,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,6,2,0,3,7,0,4,0,0,13,67,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,383,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,384,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",4,1,0,2,5,0,14,0,0,19,50,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,67,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6,0,0,1,3,1,4,0,0,12,12,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,0,0,0,0,0,0,0,0,5,20,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,0,0,0,0,0,2,2,0,11,25,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,2,0,0,0,0,2,0,0,0,4,20,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,10,0,0,0,0,0,0,2,0,15,8,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,0,0,0,0,2,53,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,1,0,2,4,0,4,0,0,21,53,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,1,0,0,0,0,12,0,0,15,33,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,24,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,0,0,2,4,3,0,0,0,5,30,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,20,5,1,0,0,1,0,0,0,29,33,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,20,6,0,0,0,0,0,0,0,28,24,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,0,0,0,0,0,1,6,0,0,6,15,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,        if (begin + length > values.length) {,8,2,0,1,3,0,0,0,0,10,37,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,4,2,0,1,3,0,0,0,0,7,33,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,        return true;,4,0,0,0,0,1,0,0,0,5,12,10,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,        if (values == null) {,6,1,0,1,3,6,0,4,0,17,21,1,1.14286,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,577,        checkEmpty();,6,2,0,1,2,3,18,0,0,29,13,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,578,        this.geoMeanImpl = geoMeanImpl;,2,0,0,0,0,3,0,0,0,5,31,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,635,        checkEmpty();,4,0,0,1,2,0,2,0,0,7,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,637,    },2,0,0,0,1,1,6,0,0,9,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,85,        n++;,4,0,1,0,0,1,0,0,0,10,4,3,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,86,    },2,0,0,0,1,3,0,0,0,5,1,2,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,150,        sumImpl.increment(value);,4,0,0,1,2,0,0,0,0,5,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,8,1,0,2,5,0,0,2,0,13,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,6,1,0,2,5,0,0,0,0,7,42,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,4,0,0,2,5,0,0,0,0,5,46,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,168,    },4,0,0,0,1,1,6,4,0,16,1,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,79,        n++;,6,1,0,0,0,0,0,0,0,8,4,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,76,        if (d < value || Double.isNaN(value)) {,4,2,0,2,5,0,6,0,0,12,39,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,77,            value = d;,6,0,0,0,0,0,0,0,0,7,10,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,79,        n++;,20,1,1,0,0,0,0,0,0,25,4,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,77,        n++;,6,1,0,0,0,0,0,0,0,8,4,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,78,    },10,1,0,0,1,0,0,0,0,13,1,0,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,76,        n++;,6,0,0,0,0,2,0,4,0,12,4,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,77,    },2,0,0,0,1,0,6,0,0,8,1,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,4,0,0,0,0,1,0,0,0,5,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);",4,0,0,1,2,0,18,0,0,23,36,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,6,0,1,4,9,0,0,0,0,9,77,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,        if (nextAction == EventHandler.Action.RESET_STATE) {,12,1,0,1,3,0,0,4,0,18,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {",2,1,0,2,5,0,6,0,0,9,41,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,287,                return nextX;,2,0,0,0,0,1,0,0,0,2,13,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,146,        final double[] x = new double[maximalOrder + 1];,2,0,0,2,4,0,0,0,0,2,48,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,148,        x[0] = getMin();,0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,149,        x[1] = getStartValue();,4,0,0,2,4,0,6,0,0,11,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,154,        y[1] = computeObjectiveValue(x[1]);,0,0,1,3,6,0,8,0,0,13,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,162,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,169,        if (y[0] * y[1] < 0) {,0,2,1,3,7,0,0,0,0,6,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,195,        final double[] tmpX = new double[x.length];,6,0,0,2,4,1,0,0,0,7,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,198,        double xA    = x[signChangeIndex - 1];,4,2,1,1,2,0,8,0,0,16,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,199,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,201,        int agingA   = 0;,4,0,0,0,0,1,0,8,0,13,17,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,205,        int agingB   = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,211,            final double xTol = getAbsoluteAccuracy() +,6,2,0,1,2,1,2,0,0,11,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,241,                targetY = 0;,6,0,0,0,0,0,0,0,0,8,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,246,            int start = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,251,"                System.arraycopy(x, start, tmpX, start, end - start);",8,2,0,1,2,0,12,0,0,22,53,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,273,            } while (Double.isNaN(nextX) && (end - start > 1));,4,0,0,3,7,0,0,0,0,5,51,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,283,            final double nextY = computeObjectiveValue(nextX);,12,1,0,1,2,1,4,0,0,18,50,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,366,            final int delta = i + 1 - start;,2,0,0,0,0,0,0,0,0,4,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,367,            for (int j = end - 1; j > i; --j) {,32,11,0,1,3,1,18,0,0,63,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,368,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,30,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,374,        for (int j = end - 1; j >= start; --j) {,10,2,0,1,3,0,0,2,0,16,40,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,378,        return x0;,6,1,0,0,0,1,0,0,0,8,10,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,385,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,386,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,232,                    } else {,2,1,0,0,2,0,0,0,0,3,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,131,    },6,1,0,0,1,0,8,0,0,15,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,304,                    occuringEvents.add(state);,6,2,0,1,2,0,10,0,0,19,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,313,                iterator.remove();,2,1,0,1,2,0,16,0,0,20,18,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,322,                final double[] eventY = interpolator.getInterpolatedState();,4,0,0,2,4,1,4,0,0,9,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,327,                for (final StepHandler handler : stepHandlers) {,8,0,0,1,3,1,0,2,0,12,48,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,331,                if (isLastStep) {,2,1,0,1,3,0,4,0,0,8,17,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,296,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());",6,1,0,3,6,3,16,2,0,28,77,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,321,  },2,0,0,0,1,0,0,0,0,2,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,335,  },4,1,0,0,1,0,0,0,0,5,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,82,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },2,1,1,0,1,0,0,0,0,7,1,4,0.00388,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,                destination[row - startRow][column - startColumn] = value;,10,2,1,2,4,0,0,0,0,15,58,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,            throw new NotStrictlyPositiveException(columnDimension);,14,2,0,1,2,3,0,4,0,23,56,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,        final int rowCount    = getRowDimension();,2,2,0,1,2,1,10,0,0,15,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,        return out;,6,1,1,0,0,1,6,0,0,18,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,        final int rowCount    = getRowDimension();,6,1,0,1,2,0,0,0,0,7,42,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,        for (int row = 0; row < rowCount; ++row) {,10,1,0,1,3,0,0,0,0,12,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,        return out;,2,0,0,0,0,1,0,0,0,2,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,104,        final int rowCount    = getRowDimension();,10,1,0,1,2,1,2,0,0,15,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,        final int columnCount = getColumnDimension();,10,5,0,1,2,3,6,0,0,24,45,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,108,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,8,0,0,8,45,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,        return out;,16,3,0,0,0,1,0,0,0,21,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,        for (int row = 0; row < rowCount; ++row) {,2,1,0,1,3,0,0,0,0,3,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,253,        MathUtils.checkNotNull(divisor);,2,0,0,1,2,0,16,0,0,18,32,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,583,        if (isNaN) {,12,3,0,1,3,1,10,0,0,26,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,            if (hiPrec != null) {,8,4,0,1,3,0,14,0,0,28,21,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,329,                return isNaN;,10,0,0,0,0,1,0,2,0,14,13,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,430,            return INF;,12,1,0,0,0,1,0,0,0,14,11,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,277,            double denominator = d * q + c;,8,3,0,0,0,0,4,0,0,16,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,",8,1,0,1,3,1,0,0,0,10,58,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,263,        if (divisor.isInfinite() && !isInfinite()) {,10,2,0,3,7,0,0,0,0,13,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,268,        final double d = divisor.getImaginary();,6,0,0,1,2,1,4,0,0,12,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,270,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,754,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,8,0,0,8,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1256,"        return log(x, null);",10,1,0,1,2,1,10,0,0,22,20,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2334,        if (o == null) {,8,2,0,1,3,0,0,0,0,11,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1269,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,2,0,0,2,5,1,0,0,0,3,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1283,        if (x == Double.POSITIVE_INFINITY) {,4,0,0,1,3,0,0,0,0,4,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1266,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3003,        if (y == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,36,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,85,    private static final long[] FACTORIALS = new long[] {,8,2,1,2,5,0,0,0,0,16,53,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,750,        if (isNaN) {,6,0,0,1,3,0,0,0,0,7,12,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2977,        if (y == 0.0) {,8,1,0,1,3,1,0,0,0,10,15,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,497,"        return createComplex(real - subtrahend.getReal(),",2,1,0,1,3,1,6,0,0,9,49,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,160,        if (isNaN || addend.isNaN) {,24,6,0,1,3,4,12,0,0,47,28,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,492,        MathUtils.checkNotNull(subtrahend);,14,3,0,1,2,3,0,0,0,20,35,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,425,        if (Double.isInfinite(real) ||,2,0,0,1,3,0,0,0,0,2,30,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,121,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,421,        MathUtils.checkNotNull(factor);,4,3,0,1,2,0,6,0,0,13,31,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,422,        if (isNaN || factor.isNaN) {,6,1,0,1,3,0,0,0,0,7,28,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,12,61,3,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,327,            Complex c = (Complex)other;,4,0,0,1,2,0,0,4,0,8,27,6,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,328,            if (c.isNaN) {,22,2,0,1,3,0,0,0,0,26,14,1,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,326,        if (other instanceof Complex){,4,0,0,1,3,0,0,2,0,6,30,3,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,392,        return isInfinite;,4,0,0,0,0,1,0,0,0,5,18,12,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,100,        this.real = real;,8,0,0,0,0,0,10,0,0,19,17,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,103,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,4,1,0,2,4,0,12,4,0,21,54,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,104,        isInfinite = !isNaN &&,10,1,1,0,0,0,0,0,0,16,22,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,106,        isZero = real == 0 && imaginary == 0;,14,6,0,0,0,0,0,2,0,23,37,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,61,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,22,70,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,66,"    public static final Complex ONE = new Complex(1.0, 0.0);",2,0,0,1,2,2,0,0,0,4,56,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,1,0,0,0,3,65,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,2,62,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,165,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,8,1,0,1,3,0,0,0,0,11,28,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,6,0,1,0,0,3,4,0,0,14,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,8,1,0,1,3,0,6,0,0,15,29,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,579,        if (isNaN) {,16,1,0,1,3,0,10,4,0,33,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,268,            double q = c / d;,8,1,1,0,0,0,0,0,0,13,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,269,            double denominator = c * q + d;,8,2,0,0,0,0,0,0,0,10,31,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,",8,0,0,1,3,2,0,2,0,12,58,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,747,            return NaN;,16,7,0,0,0,1,4,0,0,27,11,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,                return result;,2,0,1,0,0,2,0,0,0,7,14,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,            double invy = 1.0/y;,6,1,0,0,0,0,6,0,0,13,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,274,            double denominator = d * q + c;,8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,275,"            return createComplex((imaginary * q + real) / denominator,",8,3,0,1,3,1,6,0,0,18,58,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1429,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1431,            lnza = lnza * epsilon + -0.2499999997677497;,4,0,0,0,0,0,0,0,0,4,44,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1432,            lnza = lnza * epsilon + 0.3333333333332802;,0,1,0,0,0,0,4,0,0,5,43,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,260,        if (divisor.isInfinite() && !isInfinite()) {,2,0,0,3,7,0,0,0,0,2,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,264,        final double c = divisor.getReal();,2,0,0,1,2,1,4,0,0,7,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,265,        final double d = divisor.getImaginary();,14,1,0,1,2,2,6,0,0,24,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,419,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2334,        if (o == null) {,16,2,0,1,3,0,0,0,0,20,16,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1376,        double lnzb = 0.0;,6,1,0,0,0,1,0,0,0,8,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1452,        double a = LN_2_A*exp;,6,1,1,0,0,3,0,0,0,14,22,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1453,        double b = 0.0;,0,0,0,0,0,0,6,0,0,6,15,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1456,        a = c;,4,3,0,0,0,0,0,0,0,7,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1459,        c = a + lnza;,16,3,0,0,0,0,0,0,0,22,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1460,        d = -(c - a - lnza);,2,0,0,1,2,1,4,0,0,7,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1461,        a = c;,10,5,0,0,0,0,0,0,0,16,6,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1462,        b = b + d;,2,0,0,0,0,1,4,0,0,7,10,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1464,        c = a + LN_2_B*exp;,2,0,0,0,0,0,0,0,0,3,19,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1466,        a = c;,6,0,0,0,0,0,0,0,0,7,6,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1471,        a = c;,6,3,1,0,0,0,4,0,0,15,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1472,        b = b + d;,10,2,0,0,0,0,0,0,0,13,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1474,        c = a + lnzb;,12,2,0,0,0,0,14,0,0,33,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1475,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1476,        a = c;,2,1,0,0,0,0,0,0,0,3,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1477,        b = b + d;,10,1,0,0,0,0,0,0,0,12,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1479,        if (hiPrec != null) {,2,0,1,1,3,0,0,0,0,7,21,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1484,        return a + b;,4,3,0,0,0,1,0,0,0,7,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,750,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,0,0,0,8,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,132,            double q = imaginary / real;,6,1,0,0,0,0,0,0,0,7,28,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,133,            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);,4,3,0,2,4,1,10,0,0,17,53,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1292,        int exp = (int)(bits >> 52)-1023;,18,5,0,2,4,0,0,0,0,24,33,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1314,        if (exp == -1 || exp == 0) {,2,0,0,1,3,0,8,0,0,11,28,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1283,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,162,"        return createComplex(real + addend.getReal(),",8,0,0,1,3,3,0,0,0,11,45,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,85,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,746,        if (isNaN) {,2,0,0,1,3,0,0,0,0,2,12,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",14,5,0,1,2,0,0,0,0,20,131,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",4,1,0,1,2,0,6,0,0,11,55,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",4,2,0,3,6,0,6,0,0,12,46,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,3,2,0,0,10,112,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,0,0,0,0,8,86,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,16,290,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,1,1,2,1,0,0,0,7,52,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,1,2,0,0,5,72,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,3,0,0,0,5,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,8,0,0,13,49,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,4,1,1,2,0,0,0,0,22,51,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",6,1,0,4,8,1,4,0,0,12,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",20,8,0,1,2,1,0,0,0,29,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",8,0,0,4,8,3,4,0,0,16,78,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",20,0,0,3,6,4,0,6,0,31,81,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",4,2,0,1,2,0,0,2,0,9,36,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",6,1,0,3,6,1,0,0,0,8,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",4,1,0,2,4,0,0,0,0,5,69,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",6,0,0,3,6,0,10,2,0,19,50,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",0,0,1,3,6,0,12,0,0,16,32,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,1,1,3,6,0,0,0,0,8,51,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",22,2,0,3,6,1,0,0,0,28,79,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,8,0,0,11,72,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",10,1,0,4,8,0,0,0,0,12,121,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",4,1,0,2,5,1,4,0,0,10,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,2,1,0,1,2,0,0,0,0,3,18,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,6,1,0,1,2,0,0,0,0,7,24,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,2,0,1,0,0,0,0,0,0,8,7,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,4,0,0,0,0,3,0,2,0,10,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,10,1,0,0,0,1,4,0,0,15,16,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,6,1,0,1,2,1,16,0,0,25,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,2,2,0,4,13,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,6,0,0,6,22,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,6,1,0,0,0,1,0,0,0,7,12,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,4,0,0,1,3,2,0,2,0,8,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,2,0,1,1,2,0,0,0,0,5,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",4,0,0,1,2,0,8,0,0,12,50,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,2,0,1,1,2,0,0,0,0,5,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,4,2,1,1,2,0,12,2,0,25,26,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,10,0,0,0,0,0,6,0,0,17,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",14,2,0,1,3,1,0,0,0,17,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,77,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,78,    },6,0,0,0,1,0,0,0,0,7,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,12,1,1,1,3,1,8,2,0,32,47,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,180,        virtualSize = v.getDimension();,2,0,0,1,2,0,4,0,0,7,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,183,    },6,0,0,0,1,0,10,2,0,21,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,0,0,0,1,3,0,4,0,0,5,18,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,4,0,1,1,2,1,0,2,0,10,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,208,        return entries;,6,0,0,0,0,1,0,0,0,7,15,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,663,        checkIndex(index);,2,0,0,1,2,0,4,0,0,7,18,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,664,        if (!isDefaultValue(value)) {,2,0,0,2,5,0,2,2,0,6,29,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",6,1,0,1,2,0,0,0,0,8,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,241,        return new Iterator();,8,1,1,1,2,1,0,2,0,18,22,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,40,public class OpenIntToDoubleHashMap implements Serializable {,6,0,0,0,1,1,8,2,0,18,61,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,498,        private Iterator() {,2,0,0,1,3,1,0,0,0,3,20,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,504,            next = -1;,4,0,0,0,0,0,0,0,0,6,10,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,484,    public class Iterator {,10,0,0,0,1,3,0,0,0,13,23,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,518,            return next >= 0;,2,0,0,0,0,1,4,2,0,8,17,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,546,            if (referenceCount != count) {,8,5,0,1,3,0,4,0,0,17,30,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,549,            if (current < 0) {,4,1,0,1,3,0,0,0,0,6,18,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,552,            return values[current];,2,0,1,1,2,4,0,0,0,9,23,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,572,                while (states[++next] != FULL) {,4,1,1,2,5,0,0,0,0,8,32,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,582,        },0,0,0,0,1,0,2,0,0,2,1,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,479,        checkIndex(index);,0,0,1,1,2,0,4,0,0,13,18,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,180,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,385,        return (key != 0 || states[index] == FULL) && keys[index] == key;,0,0,0,3,6,1,0,0,0,10,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,76,        if (index < 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,103,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",8,0,0,1,2,0,4,0,0,13,44,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,120,                                  final double missingEntries) {,18,4,0,0,2,1,18,0,0,42,30,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,121,        final int capacity = computeCapacity(expectedSize);,2,0,0,1,2,1,4,0,0,7,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,122,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,123,        values = new double[capacity];,2,0,1,1,2,0,0,0,0,5,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,124,        states = new byte[capacity];,4,0,1,1,2,0,0,0,0,7,28,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,125,        this.missingEntries = missingEntries;,4,0,0,0,0,0,0,0,0,5,37,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,126,        mask   = capacity - 1;,0,0,1,0,0,0,0,0,0,7,22,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,153,        if (expectedSize == 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,156,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,6,1,0,2,4,1,4,0,0,12,71,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,2,0,4,18,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",2,1,0,2,4,1,6,0,0,9,60,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,                x0 = x1;,6,1,0,0,0,4,2,0,0,13,8,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,22,1,0,1,3,0,8,0,0,34,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,204,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,235,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,252,        },6,3,0,0,1,0,0,0,0,10,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,68,        super(absoluteAccuracy);,2,1,0,1,2,0,0,0,0,3,24,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,69,        this.allowed = AllowedSolution.ANY_SIDE;,6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,70,        this.method = method;,8,0,0,0,0,0,0,0,0,12,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,149,        final double ftol = getFunctionValueAccuracy();,2,0,0,1,2,1,2,0,0,5,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,151,        final double rtol = getRelativeAccuracy();,2,1,1,1,2,0,4,0,0,15,42,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,22,7,0,4,8,2,0,0,0,31,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,166,            if (fx == 0.0) {,4,1,1,1,3,0,0,0,0,8,16,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,128,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,134,        return relativeAccuracy;,4,0,0,0,0,2,0,0,0,5,24,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,283,    },2,0,1,0,1,0,0,0,0,6,1,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,2,0,0,2,4,4,6,0,0,11,61,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3925,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3928,        if (a < b) {,6,1,0,1,3,0,0,0,0,7,12,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3929,            return b;,14,2,0,0,0,2,0,0,0,18,9,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",0,0,0,1,2,0,10,0,0,10,67,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,116,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,2,0,2,31,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,117,"        return super.solve(maxEval, f, min, max, startValue);",12,0,0,1,2,1,0,0,0,12,53,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,132,        double f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,6,38,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,133,        double f1 = computeObjectiveValue(x1);,4,2,0,1,2,0,10,0,0,16,38,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,138,        if (f0 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,141,        if (f1 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,41,public enum AllowedSolution {,12,3,0,0,1,0,0,0,0,15,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,55,"    LEFT_SIDE,",4,1,0,0,0,0,4,0,0,10,10,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,62,"    RIGHT_SIDE,",6,1,1,0,0,0,0,0,0,9,11,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,68,"    BELOW_SIDE,",12,1,0,0,0,0,0,0,0,14,11,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,74,    ABOVE_SIDE;,12,2,0,0,0,1,6,0,0,22,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,256,    protected enum Method {,2,1,0,0,1,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,268,        PEGASUS;,4,0,0,0,0,0,0,2,0,6,8,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,371,        if (function == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,374,"        verifyInterval(lower, upper);",4,1,0,1,2,0,10,0,0,15,29,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,375,"        if (!isBracketing(function, lower, upper)) {",0,0,0,2,5,0,10,0,0,12,44,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,1,6,0,0,9,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,1,2,4,0,0,0,0,11,66,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,101,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,1,4,0,0,7,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,110,    private static final double LN_SPLIT_COEF[][] = {,12,1,1,2,5,0,0,0,0,19,49,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,130,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,156,    private static final double SINE_TABLE_B[] = new double[14];,4,0,0,2,4,0,0,0,0,4,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,162,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,10,0,0,10,62,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,168,    private static final double TANGENT_TABLE_B[] = new double[14];,6,0,0,2,4,0,0,0,0,8,63,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,171,    private static final long RECIP_2PI[] = new long[] {,4,0,0,2,5,0,0,0,0,5,52,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,235,            FACT[i] = FACT[i-1] * i;,2,1,0,2,4,0,0,0,0,3,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,238,        double tmp[] = new double[2];,4,0,0,2,4,0,0,0,0,5,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,243,"            expint(i, tmp);",4,1,0,1,2,0,6,2,0,13,15,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0,0,0,1,3,0,6,0,0,6,17,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,6,2,1,1,3,0,0,0,0,12,18,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,6,3,0,0,0,0,0,0,0,10,21,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,1,1,3,0,0,0,0,11,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,8,1,1,2,5,0,14,6,0,37,31,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },16,4,1,0,1,0,22,6,0,70,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,8,1,0,1,2,3,0,0,0,12,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,4,0,0,7,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,14,5,0,4,8,1,0,0,0,20,53,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,380,    },4,0,0,0,1,3,0,4,0,13,1,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3928,        if (a < b) {,6,1,0,1,3,0,0,0,0,7,12,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3929,            return b;,4,0,0,0,0,1,0,0,0,4,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,116,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,131,        double x1 = getMax();,2,0,0,1,2,0,2,0,0,4,21,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,132,        double f0 = computeObjectiveValue(x0);,4,0,1,1,2,1,4,0,0,13,38,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,138,        if (f0 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,141,        if (f1 == 0.0) {,6,5,0,1,3,0,0,0,0,11,16,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",2,0,0,1,2,1,18,0,0,21,67,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,308,        final double fLo = function.value(lower);,2,1,0,1,2,0,2,0,0,7,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,375,"        if (!isBracketing(function, lower, upper)) {",4,1,0,2,5,0,8,0,0,14,44,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,41,public enum AllowedSolution {,4,0,0,0,1,1,0,0,0,5,29,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,48,"    ANY_SIDE,",12,3,0,0,0,0,4,0,0,20,9,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,62,"    RIGHT_SIDE,",10,2,0,0,0,0,4,0,0,16,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,74,    ABOVE_SIDE;,4,0,0,0,0,0,10,2,0,16,11,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,4,0,0,2,4,0,0,0,0,5,65,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,6,0,0,2,4,1,0,8,0,15,66,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,98,    private static final double FACT[] = new double[20];,6,0,0,2,4,4,4,0,0,15,52,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,110,    private static final double LN_SPLIT_COEF[][] = {,8,1,0,2,5,0,0,0,0,11,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,159,    private static final double COSINE_TABLE_A[] = new double[14];,14,0,0,2,4,4,4,4,0,28,62,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,3,62,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,168,    private static final double TANGENT_TABLE_B[] = new double[14];,10,4,1,2,4,0,8,0,0,28,63,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,171,    private static final long RECIP_2PI[] = new long[] {,10,1,0,2,5,3,0,0,0,15,52,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,1,0,3,6,0,0,0,0,3,46,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",2,0,0,1,3,3,0,0,0,5,65,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },6,1,0,0,1,0,0,0,0,7,1,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },4,0,1,0,1,1,4,0,0,14,1,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",2,0,0,1,2,0,0,0,0,3,80,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,120,"    public Vector3D(double a, Vector3D u) {",16,3,0,1,3,0,0,0,0,20,39,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,121,        this.x = a * u.x;,12,1,0,0,0,1,6,0,0,21,17,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2377,        final double a1Low      = a1 - a1High;,12,3,1,0,0,1,0,0,0,21,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2378,        final double cb1        = SPLIT_FACTOR * b1;,4,0,0,0,0,0,0,2,0,6,44,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2383,        final double prod1High  = a1 * b1;,10,4,0,0,0,1,12,0,0,27,34,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2387,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,0,0,0,0,7,44,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2388,        final double a2High     = ca2 - (ca2 - a2);,12,3,0,1,2,1,10,0,0,27,43,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2390,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,2,2,0,12,44,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2391,        final double b2High     = cb2 - (cb2 - b2);,4,0,0,1,2,1,0,0,0,5,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2392,        final double b2Low      = b2 - b2High;,4,0,1,0,0,0,0,0,0,10,38,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2395,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2396,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2399,        final double s12High    = prod1High + prod2High;,4,0,0,0,0,0,0,0,0,5,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,2,1,0,3,6,0,4,0,0,7,86,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2405,        return s12High + (prod1Low + prod2Low + s12Low);,4,0,0,1,2,1,0,0,0,5,48,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,261,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,262,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,438,"        return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,67,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2451,        final double cb1        = SPLIT_FACTOR * b1;,2,0,1,0,0,0,0,0,0,6,44,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2452,        final double b1High     = cb1 - (cb1 - b1);,8,1,0,1,2,4,0,0,0,13,43,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2456,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2461,        final double a2High     = ca2 - (ca2 - a2);,12,2,0,1,2,1,0,2,0,19,43,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2463,        final double cb2        = SPLIT_FACTOR * b2;,12,2,0,0,0,1,6,0,0,22,44,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2465,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,2,0,0,0,0,1,4,0,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },10,0,0,0,1,1,8,0,0,19,1,3,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,    private static final long[] FACTORIALS = new long[] {,6,0,0,2,5,0,0,0,0,6,53,6,0.01587,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,308,        return real;,2,0,0,0,0,1,0,0,0,2,12,4,0.0098,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,299,        return imaginary;,2,0,0,0,0,1,0,0,0,2,17,4,0.00971,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,91,        this.real = real;,4,0,0,0,0,0,0,0,0,5,17,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,92,        this.imaginary = imaginary;,4,0,0,0,0,0,0,0,0,5,27,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,63,"    public static final Complex ONE = new Complex(1.0, 0.0);",6,1,0,1,2,0,0,0,0,7,56,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,66,"    public static final Complex ZERO = new Complex(0.0, 0.0);",2,0,0,1,2,3,0,4,0,9,57,2,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,50,9,1,1,2,0,0,2,0,66,18,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,10,1,0,0,0,0,0,0,0,12,11,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,6,0,0,0,0,1,0,0,0,6,19,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,2,0,0,3,6,0,0,0,0,2,39,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,6,2,0,1,3,0,4,0,0,13,19,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,14,4,0,1,3,0,6,0,0,25,23,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,0,1,0,1,3,0,8,0,0,9,22,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);",8,1,1,2,4,1,8,0,0,21,39,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,6,0,0,1,2,0,0,0,0,7,36,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,        if (exponent <= -1023) {,2,0,0,1,3,0,0,0,0,3,24,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2370,        while (exponent < -1023) {,2,1,0,1,3,0,0,0,0,4,26,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2375,        long bits = mantissa | ((exponent + 1023L) << 52);,6,3,0,2,4,0,0,0,0,9,50,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2376,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2378,        if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2382,        return x;,2,0,0,0,0,2,0,0,0,3,9,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,414,        return two;,2,1,0,0,0,1,4,0,0,7,11,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1096,        if (mant[mant.length-1] > 1000) {,4,2,1,2,5,0,0,0,0,8,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1099,        if (mant[mant.length-1] > 100) {,10,3,1,2,5,0,0,0,0,15,32,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,539,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",22,2,1,1,3,5,2,2,0,38,71,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,540,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,543,        this.exp     = 0;,2,0,0,0,0,0,4,0,0,7,17,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,545,    },4,0,0,0,1,0,0,0,0,5,1,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,918,        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);,6,0,0,1,2,1,2,0,0,8,52,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,393,"        return new Dfp(this, sign, nans);",14,2,0,1,2,2,2,2,0,22,33,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,383,"        return new Dfp(this, s);",2,0,0,1,2,1,0,2,0,4,24,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,976,        if (exp < 0) {,2,0,1,1,3,0,0,0,0,6,14,9,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,994,        Dfp result = newInstance(this);,8,3,0,1,2,0,2,0,0,13,31,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,995,        for (int i = 0; i < mant.length-result.exp; i++) {,22,3,0,1,3,0,0,0,0,27,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,996,            changed |= result.mant[i] != 0;,8,1,1,1,2,0,0,0,0,12,31,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,997,            result.mant[i] = 0;,10,1,1,1,2,0,0,0,0,15,19,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1634,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,6,0,0,1,2,0,4,0,0,12,47,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1635,            result = newInstance(getZero());,0,0,0,2,4,0,8,0,0,8,32,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1637,            result.nans = INFINITE;,10,0,0,0,0,0,0,0,0,12,23,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1638,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",6,0,0,1,2,0,8,0,0,15,70,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1639,            return result;,6,2,0,0,0,1,0,0,0,8,14,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2146,                    def = newInstance(getZero());,4,0,0,2,4,0,0,0,0,5,29,10,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2151,                if (nans == FINITE && mant[mant.length-1] == 0) {,2,0,0,2,5,0,0,0,0,2,49,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2157,                if (nans == INFINITE || nans == QNAN) {,0,0,0,1,3,0,0,2,0,3,39,9,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,295,        ieeeFlags = 0;,4,3,0,0,0,0,0,0,0,8,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,296,    },14,6,1,0,1,3,0,0,0,30,1,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,654,        return field.getOne();,4,0,0,1,2,1,8,0,0,13,22,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,399,            sign = -1;,16,2,0,0,0,1,0,4,0,23,10,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,209,"    protected Dfp(final DfpField field, long x) {",6,0,0,1,3,2,0,2,0,10,45,2,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,0,0,1,0,0,1,0,0,0,5,9,10,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",4,0,1,1,2,3,0,4,0,16,60,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",6,1,0,1,2,3,6,4,0,21,62,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,1,1,1,2,0,0,0,0,11,62,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,56,        final NumberFormat nf = NumberFormat.getInstance(locale);,8,1,0,1,2,1,6,2,0,18,57,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,57,        nf.setMaximumFractionDigits(2);,12,2,0,1,2,0,18,2,0,34,31,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,58,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,80,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",10,1,0,1,2,0,6,0,0,17,64,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,104,        this.prefix      = prefix;,2,2,0,0,0,0,0,0,0,4,26,6,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,106,        this.separator   = separator;,10,3,0,0,0,0,12,2,0,28,29,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,107,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,109,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,110,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,168,        return new Vector3DFormat(CompositeFormat.getDefaultNumberFormat(locale));,4,1,0,2,4,1,6,0,0,11,74,16,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,63,    public MathRuntimeException() {},4,0,0,2,4,1,0,2,0,7,32,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,78,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,83,"        context.put(key, value);",2,0,0,1,2,3,0,4,0,10,24,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,84,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,88,        return context.get(key);,6,1,0,1,2,1,0,0,0,8,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,103,"        return buildMessage(locale, "": "");",6,0,0,1,2,3,0,4,0,12,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,121,        return getMessage(Locale.US);,2,0,0,1,2,1,0,0,0,2,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,127,        return getMessage(Locale.getDefault());,2,0,0,2,4,1,0,0,0,3,39,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,139,        final StringBuilder sb = new StringBuilder();,6,1,0,1,2,1,0,4,0,12,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,140,        int count = 0;,6,1,0,0,0,0,0,0,0,9,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,        Iterator() {,2,0,0,1,3,0,0,0,0,2,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,4,1,1,2,4,2,2,0,0,18,49,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,2,0,0,0,0,1,0,0,0,4,23,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,            counter[last] = -1;,2,0,0,1,2,0,12,0,0,15,19,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,        return dimension;,2,0,0,0,0,1,12,0,0,14,17,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,        if (index < 0 ||,8,5,1,0,1,0,6,0,0,23,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,8,1,0,1,2,1,0,0,0,10,23,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,2,0,0,0,1,1,0,4,0,7,67,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,            count += uniCounterOffset[i] * c[i];,20,2,0,2,4,0,0,0,0,24,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,public final class MathUtils {,8,0,0,0,1,7,0,4,0,19,30,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);",2,0,0,1,2,1,0,0,0,2,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,    public MultidimensionalCounter(int ... size) {,16,5,0,1,3,1,0,0,0,24,46,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,        dimension = size.length;,6,0,0,0,0,0,0,0,0,7,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,167,        this.size = MathUtils.copyOf(size);,4,1,0,1,2,0,14,0,0,19,35,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,169,        uniCounterOffset = new int[dimension];,2,0,1,1,2,0,0,0,0,5,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,172,        int tS = size[last];,14,0,1,1,2,0,0,2,0,21,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,173,        for (int i = 0; i < last; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,175,            for (int j = i + 1; j < dimension; j++) {,4,3,0,1,3,0,10,0,0,17,41,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,176,                count *= size[j];,4,0,0,1,2,0,0,2,0,7,17,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,178,            uniCounterOffset[i] = count;,4,0,0,1,2,0,0,0,0,4,28,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,179,            tS *= size[i];,8,0,1,1,2,0,0,0,0,15,14,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,181,        uniCounterOffset[last] = 0;,2,0,1,1,2,0,0,0,0,8,27,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,183,        if (tS <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,187,        totalSize = tS;,4,0,1,0,0,0,0,0,0,12,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,10,1,0,2,4,0,0,0,0,12,66,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,73,    private static final double FACT[] = new double[20];,6,0,0,2,4,0,0,2,0,8,52,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,105,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,0,0,0,3,49,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,128,    private static final double SINE_TABLE_A[] = new double[14];,8,2,0,2,4,0,0,0,0,10,60,10,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,131,    private static final double SINE_TABLE_B[] = new double[14];,2,1,0,2,4,0,0,0,0,3,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,134,    private static final double COSINE_TABLE_A[] = new double[14];,6,1,0,2,4,1,0,0,0,8,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,1,0,2,4,0,0,0,0,6,126,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,208,        FACT[0] = 1.0;,4,0,0,1,2,0,6,0,0,12,14,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,209,        for (i = 1; i < FACT.length; i++) {,2,0,1,1,3,0,0,0,0,6,35,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,210,            FACT[i] = FACT[i-1] * i;,2,0,0,2,4,3,0,4,0,9,24,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,1,0,2,4,0,0,0,0,3,32,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,1,2,4,0,0,0,0,16,29,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,1,0,2,4,0,0,0,0,7,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",6,0,0,1,2,0,0,0,0,6,52,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,2,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",6,1,0,1,2,0,0,0,0,8,59,12,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,2,0,0,2,4,1,12,0,0,15,53,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,2,0,1,0,0,0,6,0,0,19,13,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,2,0,1,1,2,0,0,0,0,7,13,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,6,1,0,1,2,0,0,0,0,7,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,20,1,0,1,3,0,0,2,0,25,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,4,0,0,2,5,0,0,0,0,5,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,2,1,0,1,2,0,0,0,0,3,31,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,2,0,0,1,3,0,0,0,0,3,37,15,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,21,32,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,73,    private static final double FACT[] = new double[20];,4,1,0,2,4,3,0,0,0,8,52,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,76,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,0,0,0,0,3,61,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,85,    private static final double LN_SPLIT_COEF[][] = {,2,0,1,2,5,0,0,0,0,7,49,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,128,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,134,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,2,0,7,62,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,137,    private static final double COSINE_TABLE_B[] = new double[14];,8,1,0,2,4,0,0,0,0,9,62,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,1,0,2,4,0,0,0,0,3,63,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",6,0,0,2,4,0,0,0,0,7,126,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,0,0,0,0,3,61,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,14,1,1,2,4,0,4,0,0,27,32,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,222,            if (i != 0) {,12,2,0,1,3,0,8,0,0,24,13,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,225,                EXP_INT_TABLE_A[750-i] = recip[0];,4,0,0,2,4,0,0,0,0,5,34,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,1,1,3,0,2,0,0,7,47,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,2,0,0,2,4,3,0,0,0,5,29,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,0,0,4,8,0,0,0,0,3,79,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,240,            LN_MANT[i] = slowLog(d);,2,0,0,2,4,1,4,2,0,9,24,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,244,        buildSinCosTables();,4,0,0,1,2,2,0,2,0,8,20,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,245,    },8,1,0,0,1,0,0,0,0,11,1,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,987,        final double xs[] = new double[2];,20,2,0,2,4,1,16,0,0,40,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,988,        final double ys[] = new double[2];,8,0,0,2,4,0,6,0,0,16,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,990,        final double as[] = new double[2];,6,1,0,2,4,0,0,0,0,8,34,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,996,            ys[0] = as[0];,2,0,0,2,4,1,2,0,0,5,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,997,            ys[1] = as[1];,18,6,1,2,4,3,0,0,0,30,14,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1002,"            splitAdd(ys, facts, as);",6,0,0,1,2,1,0,0,0,7,24,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,2,0,0,1,4,0,0,2,0,4,33,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,0,0,0,4,8,0,8,0,0,9,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,16,3,0,0,0,0,0,0,0,20,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,14,1,0,0,0,0,0,0,0,17,15,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,20,4,0,0,0,0,6,2,0,33,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,    },8,0,0,0,1,0,4,2,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",6,0,0,0,1,0,0,0,0,6,53,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,12,1,1,0,0,0,8,0,0,28,13,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,    },0,0,0,0,1,0,8,0,0,8,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);",6,0,0,1,2,0,0,0,0,7,37,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,    },18,2,0,0,1,6,2,0,0,30,1,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);",0,1,0,1,2,0,22,0,0,23,43,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,52,    },2,0,0,0,1,0,0,0,0,3,1,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",8,1,0,5,10,0,0,0,0,10,67,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,1,4,8,0,0,0,0,5,94,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",6,0,0,1,2,0,0,0,0,8,60,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",10,1,0,1,2,0,0,0,0,12,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",6,0,0,3,6,0,6,0,0,13,93,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",4,0,0,2,4,0,6,0,0,11,108,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",8,5,0,1,2,0,0,0,0,13,100,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",14,1,0,2,4,1,0,2,0,19,91,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,0,0,3,6,1,0,0,0,7,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",4,0,1,2,4,1,0,0,0,10,115,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,1,0,0,0,7,86,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",4,0,0,5,10,1,4,4,0,14,290,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",8,1,0,3,6,1,0,0,0,11,263,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",18,4,0,1,2,1,0,0,0,24,52,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,80,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,81,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,1,3,6,0,6,0,0,14,81,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,82,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,83,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",10,1,0,5,10,0,0,0,0,12,71,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,84,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,1,0,3,6,0,2,0,0,3,52,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,87,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,88,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,6,0,0,12,78,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,90,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0,0,0,1,2,0,10,0,0,10,88,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,92,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,94,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,1,0,4,8,3,0,0,0,8,78,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,95,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",8,0,0,3,6,0,0,4,0,13,81,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,96,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",6,0,0,1,2,0,0,0,0,6,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,4,1,0,2,4,0,0,0,0,5,70,9,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,8,0,0,0,0,1,4,0,0,14,48,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,6,1,0,0,0,0,0,0,0,8,21,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,0,0,2,36,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,12,3,0,3,6,1,12,0,0,30,73,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,0,0,5,43,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,2,1,0,1,2,0,0,0,0,3,35,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",10,3,0,1,2,0,0,0,0,14,53,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,6,0,0,10,41,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,4,0,0,1,2,0,4,2,0,11,33,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",6,0,0,1,2,1,2,0,0,11,42,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,2,1,0,1,2,0,0,0,0,3,34,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);",6,0,0,1,2,0,6,2,0,15,42,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,            sqr2Reciprocal = null;,2,0,0,0,0,3,6,0,0,11,22,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,            sqr3           = null;,2,0,0,0,0,1,0,0,0,3,22,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,            sqr3Reciprocal = null;,16,4,0,0,0,4,10,4,0,40,22,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,            piSplit        = null;,4,0,0,0,0,0,0,0,0,5,22,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,            e              = null;,10,1,0,0,0,1,0,0,0,13,22,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,            eSplit         = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,            ln2            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,            ln5            = null;,2,0,0,0,0,0,0,0,0,3,22,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,            ln5Split       = null;,4,0,0,0,0,3,0,0,0,8,22,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,    },6,2,0,0,1,1,0,0,0,9,1,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,        return rMode;,4,0,0,0,0,1,0,0,0,5,13,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,2,0,0,1,2,3,0,2,0,7,99,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,329,    },4,1,0,0,1,0,0,0,0,5,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,        return zero;,14,3,0,0,0,1,0,0,0,18,12,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,      boolean leading = true;,2,0,0,0,0,0,0,0,0,3,23,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,527,      char[] buf = new char[a.length()];,2,0,0,3,6,0,4,0,0,6,34,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,        buf[i] = a.charAt(i);,2,0,0,2,4,0,14,0,0,17,21,13,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,532,        if (buf[i] >= '1' && buf[i] <= '9') {,8,3,1,3,7,0,0,2,0,29,37,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,            sig ++;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,554,        buf[i] = a.charAt(i);,2,0,1,2,4,0,6,0,0,20,21,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,556,            buf[i] = '0';,0,0,1,1,2,0,0,0,0,6,13,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));",10,0,1,3,6,0,0,4,0,18,43,0,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,      return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,570,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,8,1,0,2,5,0,0,0,0,11,81,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",6,0,0,1,2,1,0,4,0,12,67,0,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,4,6,0,18,67,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,            sqr3String           = highPrecisionSqr3.toString();,6,1,1,1,2,0,10,0,0,21,52,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",4,1,0,2,4,0,10,0,0,16,90,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",16,3,1,3,6,0,16,2,0,47,103,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,2,0,0,0,0,0,8,0,0,11,28,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,12,1,0,1,3,0,0,0,0,14,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,10,1,0,0,0,0,0,0,0,12,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,8,0,0,1,3,1,10,0,0,20,24,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,10,0,0,1,3,0,0,0,0,12,16,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,169,            ret = 0.0;,2,0,0,0,0,0,0,0,0,2,10,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,53,            ret = -ret;,4,0,0,0,0,0,0,0,0,6,11,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,127,        return 0.5 * (1.0 + Erf.erf((dev) /,4,0,0,1,4,1,0,0,0,5,35,10,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,52,        if (x < 0) {,8,1,0,1,3,0,0,0,0,11,12,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,131,        double q0 = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,134,        int n = 0;,4,0,0,0,0,1,0,4,0,9,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,135,        double relativeError = Double.MAX_VALUE;,4,0,0,0,0,0,0,0,0,5,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,136,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,137,            ++n;,6,0,0,0,0,0,10,2,0,18,4,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,138,"            double a = getA(n, x);",6,0,0,1,2,0,6,0,0,13,22,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,140,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,143,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,1,3,7,0,0,0,0,14,53,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,176,            if (infinite) {,8,4,0,1,3,0,0,0,0,12,15,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,185,            if (Double.isNaN(r)) {,0,0,0,2,5,0,12,0,0,12,22,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,194,            p0 = p1;,4,1,0,0,0,0,0,0,0,5,8,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,195,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,196,            q0 = q1;,14,1,0,0,0,0,0,0,0,18,8,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,200,        if (n >= maxIterations) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,206,        return c;,4,2,1,0,0,1,10,0,0,25,9,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,253,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,257,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,262,                    return n * (a - n);,8,2,0,1,2,1,0,0,0,11,19,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,266,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,267,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,12,4,0,4,8,1,20,0,0,40,67,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,        this.sourceFormat = sourceFormat;,2,0,1,0,0,0,4,0,0,10,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,0,0,5,10,3,0,0,0,8,67,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,0,0,4,8,0,8,0,0,13,94,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,1,0,4,8,0,6,0,0,9,107,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",12,1,0,1,2,0,0,0,0,16,89,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",12,3,0,1,2,1,6,0,0,24,100,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,7,83,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,6,0,0,9,131,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,1,0,0,0,3,75,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,1,2,4,1,0,0,0,7,78,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",10,1,1,1,2,1,0,0,0,16,95,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",8,1,0,2,4,0,2,0,0,13,112,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,1,0,2,4,0,0,0,0,3,86,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0,0,0,3,6,0,8,0,0,8,263,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",8,4,0,1,2,0,12,0,0,28,52,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",4,0,1,3,6,1,0,0,0,7,109,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,82,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,83,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,85,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,1,10,0,0,16,119,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,88,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",4,0,0,1,2,0,0,0,0,6,88,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,89,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,90,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,92,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,0,1,4,8,0,0,0,0,7,78,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,93,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,1,2,0,0,5,81,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,95,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,2,58,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,96,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,2,0,4,77,13,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,97,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,9,69,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,99,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",18,7,1,3,6,0,16,0,0,50,85,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,100,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,103,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,104,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",8,1,0,1,2,1,2,2,0,15,62,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,105,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,10,0,0,13,54,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,106,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,107,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",10,1,0,4,8,0,8,0,0,20,56,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,108,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,6,3,0,2,4,0,4,0,0,14,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,53,    private static final double FACT[] = new double[20];,2,1,0,2,4,3,12,0,0,18,52,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,65,    private static final double LN_SPLIT_COEF[][] = {,6,0,0,2,5,0,0,0,0,6,49,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,114,    private static final double COSINE_TABLE_A[] = new double[14];,6,5,0,2,4,0,0,0,0,11,62,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,120,    private static final double TANGENT_TABLE_A[] = new double[14];,4,0,0,2,4,3,6,0,0,14,63,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,126,    private static long RECIP_2PI[] = new long[] {,4,1,1,2,5,0,0,0,0,15,46,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,127,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,1,0,1,3,0,0,0,0,4,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,170,        for (i = 1; i < 20; i++) {,12,2,0,1,3,0,4,0,0,20,26,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,178,        for (i = 0; i < 750; i++) {,4,0,0,1,3,1,0,0,0,5,27,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,183,            if (i != 0) {,2,1,0,1,3,0,6,0,0,9,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,192,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,205,        buildSinCosTables();,2,0,0,1,2,1,8,0,0,11,20,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,684,"        split(x, xs);",2,0,0,1,2,0,0,0,0,3,13,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,685,        ys[0] = ys[1] = 0.0;,4,0,1,2,4,0,0,0,0,8,20,14,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,687,        for (int i = 19; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,10,31,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,690,            ys[1] = as[1];,8,1,0,2,4,1,8,0,0,19,14,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,695,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,0,0,0,2,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,696,            ys[0] = as[0];,4,1,0,2,4,1,0,0,0,6,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,697,            ys[1] = as[1];,4,0,0,2,4,0,0,2,0,7,14,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,700,        if (result != null) {,10,2,1,1,3,0,0,0,0,15,21,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,702,            result[1] = ys[1];,6,2,0,2,4,0,0,0,0,10,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,715,            final double a = d * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,34,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,730,        final double c = a[0] + a[1];,4,1,1,2,4,2,0,0,0,11,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",24,3,0,1,2,0,0,0,0,28,72,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,2,0,0,0,1,1,6,4,0,13,56,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,        this.strict = strict;,10,0,0,0,0,1,2,2,0,15,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,        this.index = index;,8,1,0,0,0,0,30,2,0,43,19,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,        return strict;,2,0,0,0,0,1,8,0,0,10,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,        argument = wrong;,8,1,0,0,0,0,0,0,0,10,17,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,66,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,61,                                           Object ... args) {,0,0,0,0,2,0,14,0,0,15,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,62,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,63,        this.general = general;,6,0,0,0,0,0,0,2,0,8,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,72,"        this(null, general, args);",2,1,1,1,2,0,0,0,0,7,26,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,73,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",2,0,0,1,2,1,0,0,0,3,73,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,1806,    public static enum OrderDirection {,8,2,0,0,1,2,8,0,0,21,35,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,1808,"        INCREASING,",16,1,0,0,0,0,0,0,0,19,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,1810,        DECREASING,6,1,0,0,0,0,0,0,0,8,10,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,1827,            switch (dir) {,8,4,0,1,3,0,10,0,0,23,14,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,88,        super();,6,1,0,1,2,0,4,2,0,15,8,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,102,        long s = (long)x + (long)y;,12,2,0,2,4,1,4,0,0,19,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,106,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,1,6,0,0,15,64,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,145,                    if (Long.MIN_VALUE - b <= a) {,2,1,1,1,3,0,0,0,0,14,30,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,146,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,159,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,0,0,1,1,4,0,2,0,0,7,20,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,4,2,1,1,2,0,0,0,0,10,24,3,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,618,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,0,6,0,0,13,38,5,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,622,            double correction = fp / (delta * sum2);,6,1,0,1,2,3,12,2,0,25,40,1,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,632,"            lmPar = Math.max(parl, lmPar + correction);",6,1,0,1,2,0,6,0,0,14,43,6,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,530,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,1,2,0,0,5,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,10,1,0,1,3,0,0,0,0,13,32,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,2,0,0,0,0,0,4,0,0,6,15,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,4,1,1,4,8,0,10,0,0,29,39,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,                jTj[i][j] = sum;,0,0,0,2,4,0,0,2,0,2,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,                jTj[j][i] = sum;,2,2,1,2,4,0,0,0,0,17,16,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,2,0,0,0,0,0,0,2,0,4,20,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,8,0,1,0,0,1,0,0,0,14,10,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);",6,0,0,1,2,3,0,0,0,9,37,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,    },12,3,1,0,1,0,0,0,0,29,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },4,0,0,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,0,0,1,1,2,1,10,0,0,14,17,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,10,0,1,1,2,4,0,0,0,16,38,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,12,1,0,1,3,0,6,2,0,22,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",12,1,1,4,8,1,20,2,0,48,56,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,            final int m = pivot.length;,6,0,0,0,0,1,0,0,0,7,27,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,            if (b.getRowDimension() != m) {,2,1,0,2,5,0,4,0,0,7,31,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,367,            if (singular) {,12,3,1,1,3,1,0,2,0,23,15,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));,26,6,0,2,4,1,6,4,0,45,65,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,        return (rows * columns <= 4096) ?,4,2,0,1,2,1,0,0,0,6,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);",6,5,0,1,2,0,6,0,0,18,60,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,147,        return m;,10,1,1,0,0,1,0,0,0,19,9,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,149,        return objectiveEvaluations;,4,1,0,0,0,1,0,0,0,5,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,154,        return jacobianEvaluations;,2,0,0,0,0,1,0,0,0,2,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,161,    },10,4,0,0,1,0,0,0,0,16,1,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,107,                sum = luRow[col];,2,0,0,1,2,0,0,0,0,3,17,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,108,                for (int i = 0; i < row; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,111,                luRow[col] = sum;,2,0,1,1,2,0,0,0,0,7,17,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,121,                    sum -= luRow[i] * lu[i][col];,4,2,1,3,6,0,0,0,0,17,29,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,157,                lu[row][col] /= luDiag;,2,0,0,2,4,0,0,0,0,3,23,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,638,        return getColumnDimension() == getRowDimension();,2,1,0,2,4,4,4,0,0,10,49,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,79,        throws NonSquareMatrixException {,10,0,0,0,1,0,0,0,0,10,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,87,        pivot = new int[m];,2,1,0,1,2,1,2,0,0,6,19,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,88,        cachedL = null;,2,0,0,0,0,0,0,0,0,3,15,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,90,        cachedP = null;,10,1,0,0,0,0,0,0,0,12,15,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,93,        for (int row = 0; row < m; row++) {,14,2,1,1,3,0,0,0,0,22,35,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,96,        even     = true;,2,0,0,0,0,0,0,0,0,4,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,97,        singular = false;,4,0,0,0,0,0,0,0,0,5,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,100,        for (int col = 0; col < m; col++) {,8,1,0,1,3,0,0,0,0,10,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,105,            for (int row = 0; row < col; row++) {,0,0,1,1,3,0,12,0,0,17,37,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,115,            int max = col; // permutation row,10,1,0,0,0,0,4,4,0,23,33,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,116,            double largest = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,42,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,117,            for (int row = col; row < m; row++) {,14,1,0,1,3,0,8,4,0,29,37,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,118,                final double[] luRow = lu[row];,2,0,1,2,4,1,0,0,0,7,31,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,119,                sum = luRow[col];,2,0,1,1,2,0,0,0,0,7,17,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,128,                    max = row;,4,0,1,0,0,0,0,0,0,10,10,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,133,            if (Math.abs(lu[max][col]) < singularityThreshold) {,2,0,0,4,9,0,0,0,0,4,52,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,155,            final double luDiag = lu[col][col];,6,0,0,2,4,0,6,2,0,14,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,227,"        return new Solver(lu, pivot, singular);",6,0,0,1,2,1,0,2,0,8,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,249,            this.lu       = lu;,6,0,0,0,0,0,0,0,0,8,19,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,250,            this.pivot    = pivot;,4,0,0,0,0,0,0,0,0,5,22,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,251,            this.singular = singular;,4,0,0,0,0,0,0,0,0,5,25,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,231,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,56,        throws IllegalArgumentException {,2,0,0,0,1,0,0,0,0,2,33,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,57,        if (rowDimension < 1 ) {,6,3,0,1,3,0,0,0,0,9,24,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,65,        lu = null;,2,0,0,0,0,1,2,0,0,5,10,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,448,                        return current;,2,0,0,0,0,1,0,0,0,2,15,12,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,            b = hi;,4,0,0,0,0,0,0,0,0,5,7,6,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,                        d = p / q;,6,0,0,0,0,0,0,0,0,6,10,5,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,                        u = x + d;,2,0,0,0,0,0,0,0,0,3,10,6,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,                        if (u - a < tol2,6,2,0,0,1,0,0,0,0,8,16,13,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,43,    public BrentOptimizer() {,4,0,0,1,3,0,4,8,0,16,25,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,106,        if (lo < hi) {,4,1,0,1,3,0,0,0,0,5,14,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,114,        double x = mid;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,116,        double w = x;,6,1,0,0,0,0,0,0,0,7,13,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,118,        double e = 0;,2,0,0,0,0,0,0,0,0,2,13,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",6,1,0,1,2,0,0,0,0,8,40,11,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,124,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,133,            if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {,10,5,0,3,7,0,4,0,0,19,45,6,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,135,                double q = 0;,2,0,0,0,0,0,0,0,0,2,13,9,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,136,                double r = 0;,6,0,0,0,0,0,0,2,0,8,13,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,137,                double u = 0;,2,0,0,0,0,0,0,0,0,3,13,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,139,                if (Math.abs(e) > tol1) { // Fit parabola.,2,0,0,2,5,0,12,0,0,15,42,8,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,141,                    q = (x - v) * (fx - fw);,6,0,0,2,4,0,0,2,0,10,24,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,142,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,0,0,0,20,30,10,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,145,                    if (q > 0) {,4,0,0,1,3,0,4,0,0,9,12,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,146,                        p = -p;,12,2,0,0,0,0,0,0,0,17,7,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,148,                        q = -q;,10,0,0,0,0,1,0,0,0,11,7,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,152,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,154,                    if (p > q * (a - x),8,3,0,1,3,0,0,0,0,11,19,12,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,6,1,0,2,4,1,6,0,0,14,70,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,        clearResult();,2,1,0,1,2,0,2,0,0,5,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);",8,1,0,1,2,1,0,0,0,10,75,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,        double x = a + GOLDEN_SECTION * (b - a);,16,4,0,1,2,0,0,0,0,20,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,        double w = x;,12,1,0,0,0,0,0,0,0,14,13,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,        double e = 0;,18,4,0,0,0,3,16,0,0,42,13,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);",24,10,1,1,2,2,6,0,0,47,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,96,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,97,        double fw = fx;,4,1,0,0,0,0,0,0,0,5,15,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,99,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,101,            double m = 0.5 * (a + b);,18,1,0,1,2,0,8,0,0,28,25,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,102,            double tol = eps * Math.abs(x) + t;,6,2,0,1,2,0,8,0,0,16,35,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,103,            double t2 = 2 * tol;,4,1,0,0,0,0,0,0,0,5,20,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,106,            if (Math.abs(x - m) > t2 - 0.5 * (b - a)) {,2,2,0,3,7,0,6,0,0,11,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,107,                double p = 0;,10,2,0,0,0,3,0,0,0,15,13,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,            for (int j = 0; j < solvedCols; ++j) {,2,1,0,1,3,0,0,0,0,3,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,518,                for (int i = 0; i < j; ++i) {,8,1,0,1,3,0,0,0,0,10,29,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,521,                double s = (work1[pj] - sum) / diagR[pj];,8,2,1,3,6,1,0,8,0,27,41,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,586,                int pj = permutation[j];,6,3,0,1,2,0,0,0,0,10,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,587,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,2,2,1,3,6,0,0,0,0,17,42,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,51,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,4,0,0,4,8,0,14,0,0,18,42,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,1,0,1,3,0,0,0,0,5,54,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,6,1,0,0,0,0,0,0,0,9,25,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,14,3,0,0,0,0,0,0,0,18,19,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,6,1,0,1,2,0,0,0,0,7,38,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },2,0,0,0,1,0,0,0,0,3,1,2,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,4,0,0,1,3,0,0,0,0,5,25,10,0.8,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,6,0,0,0,0,0,0,0,0,7,10,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,6,2,0,0,0,0,0,0,0,10,20,0,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,10,2,0,1,2,3,4,4,0,23,74,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,6,1,0,1,3,1,0,0,0,8,46,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,8,1,0,0,0,0,0,0,0,10,24,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,8,2,0,3,6,0,0,0,0,11,40,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,0,0,0,8,68,8,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,2,0,0,3,8,0,2,4,0,8,43,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,6,0,0,0,0,1,0,0,0,7,11,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,16,5,0,5,11,0,0,0,0,21,69,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,2,2,0,2,4,0,12,0,0,17,45,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,10,2,0,0,0,1,0,0,0,12,11,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,2,0,0,1,3,0,6,2,0,10,25,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1239,            final int jBlock = column / BLOCK_SIZE;,4,2,1,0,0,0,0,0,0,10,39,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,6,1,0,2,4,1,0,0,0,8,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,14,2,0,1,2,0,0,0,0,18,32,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,81,    },2,0,0,0,1,1,6,0,0,10,1,1,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,40,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,188,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",8,1,0,1,2,1,6,2,0,18,57,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,12,2,0,1,3,0,0,0,0,16,29,0,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",2,0,0,3,6,0,8,0,0,11,68,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,4,0,0,0,0,1,0,0,0,5,21,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,14,5,1,0,0,1,0,0,0,22,39,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,8,2,1,2,4,0,0,0,0,15,50,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1264,        },8,1,0,0,1,0,0,0,0,10,1,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },2,1,1,0,1,0,0,0,0,8,1,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,544,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,99,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,1,2,1,8,0,0,8,26,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,4,2,0,1,2,1,0,0,0,6,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,167,    },2,0,0,0,1,0,0,0,0,3,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,208,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,1,0,0,1,0,4,0,0,5,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,                x1 = x1 + 0.5 * tolerance;,8,2,1,0,0,0,0,0,0,18,26,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {",6,0,0,2,5,3,0,0,0,9,77,2,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,109,    previousTime      = Double.NaN;,2,1,0,0,0,0,0,0,0,3,31,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,112,    interpolatedTime  = Double.NaN;,4,0,0,0,0,2,4,0,0,10,31,1,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,114,    currentState            = y;,4,0,0,0,0,0,0,0,0,5,28,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,115,    interpolatedState       = new double[y.length];,2,0,0,1,2,3,0,4,0,9,47,2,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,116,    interpolatedDerivatives = new double[y.length];,2,0,0,1,2,0,0,0,0,3,47,2,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,119,    this.forward      = forward;,0,0,0,0,0,0,0,0,0,1,28,7,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,120,    this.dirtyState   = true;,8,0,0,0,0,0,0,0,0,11,25,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,122,  },4,0,0,0,1,0,0,0,0,5,1,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,73,    currentDerivative = yDot;,4,0,0,0,0,3,0,0,0,7,25,1,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,217,"      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);",8,1,1,2,4,0,0,2,0,14,75,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator,71,73,  },10,0,0,0,1,0,8,0,0,19,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator,71,49,  private static final double[] STATIC_C = {,4,0,0,1,3,0,0,0,0,5,42,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator,71,54,  private static final double[][] STATIC_A = {,18,3,0,2,5,1,2,0,0,26,44,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,0,0,0,2,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",6,0,0,1,2,0,0,2,0,8,34,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,12,3,0,2,4,1,0,0,0,16,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,3,6,0,0,11,41,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,        clearResult();,2,0,0,1,2,0,0,0,0,2,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,0,0,0,3,46,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,4,2,0,1,3,0,0,0,0,6,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",12,4,0,1,2,0,4,0,0,23,53,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,6,0,0,0,2,2,6,12,0,26,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,8,2,0,0,0,0,6,0,0,17,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,14,0,0,14,31,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,12,0,0,15,41,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,2,0,1,2,2,20,0,0,37,58,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,16,7,0,1,3,0,0,0,0,23,32,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,6,0,1,2,4,1,0,0,0,12,30,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,12,1,0,1,3,0,0,0,0,15,35,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,10,1,0,1,2,1,0,0,0,12,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,6,1,0,1,2,1,6,0,0,14,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,1,1,1,3,0,6,0,0,22,19,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,2,0,0,1,2,2,4,4,0,12,21,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,6,2,0,1,3,0,16,0,0,24,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,6,4,0,1,2,0,14,0,0,24,42,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",6,0,0,2,4,0,14,0,0,21,77,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",2,0,0,1,2,0,6,0,0,8,40,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,2,1,1,2,4,0,0,0,0,12,40,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);",0,0,0,1,2,0,8,0,0,8,72,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,                if (error <= 1.0) {,2,1,0,1,3,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",4,0,0,1,2,0,8,0,0,13,40,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,                    for (int j = 0; j < y0.length; ++j) {,14,1,0,1,3,0,2,0,0,18,37,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,6,1,1,2,4,1,4,0,0,26,40,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);",2,1,0,1,2,0,14,0,0,17,81,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);",4,0,0,1,2,0,0,0,0,4,79,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,14,1,1,0,0,0,0,0,0,24,28,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);",4,0,0,1,2,0,8,0,0,13,43,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,            },4,0,0,0,1,3,0,2,0,9,1,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {",6,1,0,2,5,1,8,0,0,17,47,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,14,2,1,1,3,0,10,0,0,32,17,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,2,0,0,1,2,1,4,0,0,7,62,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,14,2,0,0,0,1,10,2,0,31,45,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,12,2,0,0,0,1,0,0,0,16,47,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,2,0,0,2,4,0,0,0,0,2,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,                interpolator.rescale(hNew);,10,1,0,1,2,0,8,0,0,21,27,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,        },4,1,0,0,1,0,0,0,0,5,1,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,390,"        public Corrector(final double[] previous, final double[] scaled, final double[] state) {",4,0,0,4,9,0,0,0,0,4,88,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,2,0,1,0,0,0,0,0,0,5,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,2,0,0,0,0,0,6,4,0,12,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,20,3,1,1,2,3,4,0,0,41,30,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,395,        },6,1,0,0,1,0,4,0,0,11,1,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,400,"            Arrays.fill(after, 0.0);",0,0,0,1,2,0,6,0,0,6,24,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,406,            if ((row & 0x1) == 0) {,2,2,0,2,5,0,4,0,0,8,23,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,407,                after[column] -= value;,2,0,1,1,2,0,10,0,0,17,23,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,424,            double error = 0;,4,0,0,0,0,0,0,0,0,5,17,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,425,            for (int i = 0; i < after.length; ++i) {,10,1,0,1,3,0,0,0,0,12,40,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,426,                after[i] += previous[i] + scaled[i];,2,0,0,3,6,1,0,2,0,5,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",4,0,1,5,10,1,12,0,0,27,74,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,23,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,176,"        super(""Adams-Moulton"", nSteps, nSteps + 1, minStep, maxStep,",8,1,0,0,1,0,0,0,0,10,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,216,"            System.arraycopy(y0, 0, y, 0, n);",6,1,0,1,2,1,10,0,0,18,33,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,218,        final double[] yDot = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,219,        final double[] yTmp = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,222,        final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,224,        final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,82,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,225,"        interpolatorTmp.reinitialize(yTmp, forward);",2,0,0,1,2,0,8,0,0,10,44,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,228,        for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,231,"        CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",2,0,0,1,2,0,8,2,0,12,80,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,295,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,296,        final int nSum = this.getColumnDimension();,2,0,0,1,2,1,2,0,0,5,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,297,        final double[][] outData = new double[nRows][nCols];,4,0,1,4,8,2,0,2,0,16,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,298,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,300,            final double[] outDataRow = outData[row];,2,0,1,2,4,1,0,0,0,7,41,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,301,            for (int col = 0; col < nCols; col++) {,0,0,0,1,3,0,8,0,0,8,39,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,303,                for (int i = 0; i < nSum; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,304,                    sum += dataRow[i] * m.data[i][col];,12,3,1,3,6,0,0,0,0,26,35,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,306,                outDataRow[col] = sum;,6,0,1,1,2,0,0,0,0,12,22,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,310,"        return new Array2DRowRealMatrix(outData, false);",8,0,0,1,2,1,0,2,0,13,48,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,328,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,426,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,6,0,0,6,66,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,103,                    sum = sum.subtract(luRow[i].multiply(lu[i][col]));,2,0,1,5,10,0,6,0,0,19,50,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,650,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,153,        return evaluations;,2,0,0,0,0,1,0,0,0,2,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,31,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,8,1,1,4,8,2,0,0,0,16,45,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,177,        addValue(Long.valueOf(v));,4,1,0,2,4,0,14,0,0,19,26,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,2,0,0,0,0,0,0,0,0,3,4,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,0,0,0,0,0,1,2,0,0,2,16,5,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,8,1,1,2,4,0,0,0,0,17,25,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,8,3,0,0,0,1,0,0,0,12,15,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,12,2,0,1,3,0,0,0,0,15,43,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,10,1,0,0,1,0,0,0,0,12,88,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,    },2,0,0,0,1,0,6,0,0,8,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,        return 0;,8,1,0,0,0,1,0,0,0,12,9,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,60,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,        return walkInRowOrder(visitor);,2,0,0,1,2,1,2,0,0,4,31,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,14,4,0,0,0,1,0,0,0,20,16,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,            },2,1,0,0,1,0,0,0,0,3,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,0,0,0,1,3,0,6,0,0,6,20,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",4,1,0,1,2,0,0,0,0,5,43,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,6,0,0,0,0,3,0,0,0,12,14,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,            return subtract((Array2DRowRealMatrix) m);,2,0,0,2,4,1,0,0,0,2,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,        final double[][] outData = new double[rowCount][columnCount];,2,0,1,4,8,1,0,0,0,7,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,        for (int row = 0; row < rowCount; row++) {,10,1,0,1,3,0,0,0,0,13,42,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,            final double[] dataRow    = data[row];,8,1,1,2,4,1,4,2,0,30,38,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,            for (int col = 0; col < columnCount; col++) {,18,3,1,1,3,0,4,0,0,32,45,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,3,6,0,0,0,0,14,43,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);",16,7,0,1,2,1,4,0,0,27,48,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,            final double[] rowI = data[i];,6,0,1,2,4,3,0,2,0,15,30,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,502,"                visitor.visit(i, j, rowI[j]);",8,5,0,2,4,0,6,0,0,20,29,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,505,        return visitor.end();,4,3,1,1,2,1,8,0,0,19,21,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,            for (int i = 0; i < rows; ++i) {,2,2,0,1,3,0,16,0,0,20,32,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,        return visitor.end();,4,2,0,1,2,1,0,0,0,7,21,15,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,3,1,1,4,1,0,0,0,10,63,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);",8,0,0,1,2,0,0,0,0,8,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,        if (cachedU == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,            if (m >= n) {,14,2,0,1,3,0,2,0,0,21,13,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,                final RealMatrix e =,10,3,0,0,0,2,0,2,0,17,20,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,                final double[][] wData = new double[m][p];,18,6,1,4,8,1,0,0,0,34,42,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,                double[] ei1 = eData[0];,2,0,0,2,4,1,4,0,0,7,24,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,6,1,0,1,3,0,0,0,0,8,33,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,                        for (int j = 0; j < p; ++j) {,4,0,0,1,3,0,4,0,0,9,29,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,4,4,1,5,10,0,0,0,0,23,69,10,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,                for (int i = p; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,88,        if (cachedU == null) {,10,3,0,1,3,1,0,0,0,14,22,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,90,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,91,            final int n = householderVectors[0].length;,14,1,1,1,2,4,0,0,0,23,43,0,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,92,            final int p = main.length;,2,0,0,0,0,1,0,0,0,3,26,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,93,            final int diagOffset    = (m >= n) ? 0 : 1;,6,1,0,1,2,1,0,0,0,8,43,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,94,            final double[] diagonal = (m >= n) ? main : secondary;,10,1,0,2,4,1,0,0,0,12,54,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,98,            for (int k = m - 1; k >= p; --k) {,10,2,0,1,3,0,0,0,0,13,34,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,103,            for (int k = p - 1; k >= diagOffset; --k) {,10,2,0,1,3,0,0,0,0,13,43,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,104,                final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,108,                        double alpha = 0;,2,0,0,0,0,0,0,0,0,2,17,13,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,109,                        for (int i = k; i < m; ++i) {,2,0,0,1,3,0,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,110,"                            alpha -= cachedU.getEntry(i, j) * householderVectors[i][k - diagOffset];",0,0,0,3,6,0,2,0,0,2,72,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,112,                        alpha /= diagonal[k - diagOffset] * hK[k - diagOffset];,10,3,1,2,4,0,0,0,0,18,55,12,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,114,                        for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,120,            if (diagOffset > 0) {,2,1,0,1,3,0,4,0,0,7,21,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,127,        return cachedU;,6,0,0,0,0,1,4,0,0,10,15,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,189,                        double beta = 0;,2,0,0,0,0,0,6,0,0,8,16,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,190,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,191,"                            beta -= cachedV.getEntry(i, j) * hK[i];",2,1,1,2,4,0,8,0,0,16,39,14,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,195,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,196,"                            cachedV.addToEntry(i, j, -beta * hK[i]);",4,2,1,2,4,0,8,2,0,22,40,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,238,            final int p = singularValues.length;,8,0,0,0,0,2,0,4,0,14,36,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,239,            if (m >= n) {,4,1,0,1,3,0,0,0,0,5,13,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,241,                final RealMatrix e =,4,1,0,0,0,1,4,2,0,13,20,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,243,                cachedV = transformer.getV().multiply(e);,2,0,0,2,4,0,8,0,0,11,41,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,6,1,1,0,0,2,0,0,0,13,15,3,0.4,1,1,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,169,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,171,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,173,            final int p = main.length;,6,0,0,0,0,1,0,0,0,7,26,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,174,            final int diagOffset    = (m >= n) ? 1 : 0;,8,1,0,1,2,1,6,0,0,17,43,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,175,            final double[] diagonal = (m >= n) ? secondary : main;,14,1,0,2,4,1,0,2,0,18,54,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,176,"            cachedV = MatrixUtils.createRealMatrix(n, n);",2,0,0,1,2,0,8,0,0,11,45,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,179,            for (int k = n - 1; k >= p; --k) {,12,3,0,1,3,0,0,0,0,16,34,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,185,                final double[] hK = householderVectors[k - diagOffset];,6,1,1,2,4,1,0,0,0,10,55,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,187,                if (hK[k] != 0.0) {,0,1,1,2,5,0,0,0,0,5,19,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,201,            if (diagOffset > 0) {,4,1,0,1,3,0,0,0,0,5,21,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,202,"                cachedV.setEntry(0, 0, 1);",0,0,0,1,2,0,4,0,0,4,26,9,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,208,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,55,        throws IllegalArgumentException {,8,1,1,0,1,0,0,0,0,13,33,2,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,61,        if (columnDimension <= 0) {,4,0,0,1,3,0,0,0,0,4,27,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,67,    },6,0,0,0,1,3,0,0,0,10,1,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,269,            for (int j = startColumn; j <= endColumn; ++j) {,10,1,0,1,3,0,0,0,0,12,48,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",6,2,1,2,4,0,0,0,0,13,66,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,514,        for (int i = 0; i < nRows; ++i) {,10,1,0,1,3,1,4,0,0,17,33,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,515,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,12,0,0,12,40,7,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,118,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,119,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,120,        this.separator   = separator;,16,1,0,0,0,0,0,0,0,20,29,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,121,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,8,3,0,4,9,0,8,0,0,21,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,0,0,0,0,4,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,10,0,0,0,0,0,12,0,0,23,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,1,1,2,4,0,0,0,0,12,31,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,4,1,1,0,0,1,0,0,0,9,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,2,0,0,1,2,0,6,0,0,9,19,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,6,1,0,1,3,1,0,0,0,8,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,20,3,0,1,2,1,4,4,0,34,26,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,2,0,0,1,2,0,0,0,0,3,33,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },14,2,0,0,1,0,0,0,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,0,0,0,1,2,1,4,0,0,4,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,2,0,0,1,2,0,2,2,0,6,15,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,        return new OpenMapSparseIterator();,0,0,0,1,2,1,0,2,0,2,35,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",2,0,0,0,1,0,0,0,0,3,101,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,        },0,0,0,0,1,0,0,2,0,2,1,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,128,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,1,1,2,1,0,2,0,12,42,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,129,        this.epsilon = epsilon;,4,1,0,0,0,0,14,0,0,20,23,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,130,        for (int key = 0; key < values.length; key++) {,4,0,0,1,3,0,0,0,0,4,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,131,            double value = values[key];,38,8,1,1,2,5,24,8,0,106,27,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,132,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,133,"                entries.put(key, value);",8,1,0,1,2,0,8,0,0,18,24,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,700,        for (double a : data) {,18,3,1,1,3,1,2,0,0,29,23,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,701,            sum += a * a;,8,1,0,0,0,0,0,0,0,11,13,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,39,public class OpenIntToDoubleHashMap implements Serializable {,2,0,0,0,1,1,0,2,0,5,61,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,508,            referenceCount = count;,36,6,0,0,0,3,0,0,0,49,23,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,511,            next = -1;,8,0,0,0,0,1,0,0,0,11,10,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,513,                advance();,0,0,0,1,2,0,2,0,0,2,10,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,516,            },10,1,0,0,1,0,0,0,0,12,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,518,        },0,0,0,0,1,0,6,0,0,6,1,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,491,    public class Iterator {,6,0,0,0,1,1,0,2,0,9,23,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,525,            return next >= 0;,10,3,0,0,0,1,0,0,0,14,17,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,554,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,572,            if (referenceCount != count) {,6,1,0,1,3,0,6,2,0,15,30,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,578,            current = next;,10,1,0,0,0,0,0,0,0,12,15,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,582,                while (states[++next] != FULL) {,22,2,1,2,5,0,8,2,0,43,32,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,590,            },2,0,0,0,1,0,0,0,0,2,1,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,586,                next = -2;,2,0,0,0,0,0,0,0,0,4,10,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,110,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",4,1,0,1,2,0,4,0,0,10,44,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,128,        final int capacity = computeCapacity(expectedSize);,8,0,0,1,2,1,4,0,0,13,51,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,129,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,131,        states = new byte[capacity];,2,0,1,1,2,0,0,0,0,5,28,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,132,        this.missingEntries = missingEntries;,8,2,0,0,0,0,0,0,0,11,37,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,133,        mask   = capacity - 1;,4,1,0,0,0,0,0,0,0,6,22,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,134,    },2,2,0,0,1,0,6,0,0,10,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,160,        if (expectedSize == 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,166,            return capacity;,2,0,0,0,0,1,0,0,0,2,16,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,266,"        return findInsertionIndex(keys, states, key, mask);",0,0,0,1,2,1,10,0,0,10,51,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,279,        final int hash = hashOf(key);,2,0,0,1,2,0,0,0,0,3,29,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,280,        int index = hash & mask;,6,1,0,0,0,0,4,0,0,11,24,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,281,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,282,            return index;,2,0,0,0,0,1,0,0,0,2,13,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,417,        int index = findInsertionIndex(key);,2,0,0,1,2,0,4,0,0,6,36,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,418,        double previous = missingEntries;,4,0,0,0,0,0,4,0,0,8,33,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,419,        boolean newMapping = true;,2,0,0,0,0,0,0,0,0,3,26,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,420,        if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,427,        values[index] = value;,2,0,1,1,2,0,0,0,0,7,22,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,428,        if (newMapping) {,2,0,0,1,3,0,0,0,0,2,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,433,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,435,        return previous;,4,0,0,0,0,1,2,2,0,8,16,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,485,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,8,4,0,3,6,1,0,0,0,13,50,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,486,        return h ^ (h >>> 7) ^ (h >>> 4);,6,3,0,2,4,1,0,0,0,9,33,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,34,public abstract class AbstractRealVector implements RealVector {,2,0,0,0,1,2,0,2,0,6,64,1,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,82,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.00813,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,83,        data = d.clone();,6,2,1,1,2,0,4,0,0,24,17,3,0.00813,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,84,    },6,3,1,0,1,0,4,0,0,19,1,11,0.00813,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,41,    private static final RealVectorFormat DEFAULT_FORMAT =,14,1,0,0,0,3,0,4,0,23,54,1,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,30,public abstract class CompositeFormat extends Format {,4,0,0,0,1,5,0,4,0,13,54,1,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,8,4,0,15,57,3,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,55,        return nf;,6,2,0,0,0,1,6,0,0,15,10,10,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,1,1,2,0,0,0,0,5,64,6,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,117,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,119,        this.suffix      = suffix;,6,1,1,0,0,0,0,0,0,13,26,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,120,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,121,        trimmedPrefix    = prefix.trim();,10,2,0,1,2,0,4,0,0,18,33,3,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,124,        this.format      = format;,10,0,0,0,0,0,0,0,0,12,26,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,405,        return new NoSuchElementException() {,2,0,1,1,3,1,0,2,0,7,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,413,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,419,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,59,"    public MathRuntimeException(final String pattern, final Object ... arguments) {",6,0,0,1,3,3,0,4,0,13,79,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,8,1,0,3,6,0,2,0,0,12,42,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,16,3,0,0,0,0,0,0,0,20,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,100,  },2,0,0,0,1,0,0,0,0,2,1,8,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,66,"    super(y, forward);",4,1,0,1,2,0,14,0,0,19,18,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {",6,0,0,2,5,3,0,0,0,9,77,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,110,    currentTime       = Double.NaN;,2,0,0,0,0,0,0,0,0,2,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,111,    h                 = Double.NaN;,22,2,0,0,0,1,0,0,0,28,31,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,112,    interpolatedTime  = Double.NaN;,2,0,1,0,0,0,0,0,0,5,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,2,1,1,0,0,1,4,0,0,14,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",4,1,0,1,2,3,0,4,0,12,68,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,4,3,1,1,2,0,0,0,0,10,43,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,10,2,0,2,4,1,0,0,0,13,39,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,4,0,0,0,0,0,0,2,0,6,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,0,0,0,0,0,1,6,0,0,6,11,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,1,0,1,2,1,0,0,0,5,26,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,2,0,0,1,2,3,0,4,0,9,38,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },10,1,0,0,1,0,0,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,0,0,0,2,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,6,1,0,0,0,0,0,0,0,8,11,12,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,8,1,1,1,2,0,0,0,0,13,25,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,2,0,0,4,8,0,0,0,0,2,58,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,6,0,0,0,2,0,4,0,0,11,8,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,        data = d.clone();,2,0,0,1,2,1,0,0,0,3,17,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,        checkVectorDimensions(v.length);,18,6,0,1,2,0,6,0,0,30,32,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,        double[] out = new double[data.length];,6,0,0,2,4,1,0,0,0,7,39,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,        return new ArrayRealVector(out);,2,0,1,1,2,2,0,0,0,7,32,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,        double sum = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,909,        return Math.sqrt(sum);,2,0,0,1,2,1,8,0,0,11,22,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1292,    },14,2,0,0,1,0,0,0,0,17,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,                        b2 = work[np - 2];,4,1,1,1,2,0,0,0,0,8,18,11,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,                        gam = dN1;,6,0,0,0,0,0,0,0,0,7,10,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,                        if (work[np - 4]  >  work[np - 2]) {,2,0,0,3,7,3,0,0,0,5,36,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,                        b2 = work[nn - 9] / work[nn - 11];,10,2,0,2,4,0,0,0,0,13,34,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,                        np = nn - 13;,4,1,0,0,0,0,0,0,0,6,13,11,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1099,                    } else if (dMin1 > 0.0) {,14,4,0,1,4,0,12,0,0,31,25,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1101,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,4,1,0,2,4,0,0,0,0,5,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,666,                    for (int i = 0; i < n; ++i) {,18,4,0,1,3,1,4,0,0,28,29,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,667,                        realEigenvalues[begin + i] = lambda - work[4 * i];,18,4,1,2,4,0,0,0,0,29,50,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1475,                    tType = -4;,16,3,0,0,0,0,0,0,0,22,11,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1476,                    double s = 0.25 * dMin;,0,0,0,0,0,0,6,0,0,6,23,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1504,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,2,0,1,1,3,0,6,0,0,12,60,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1521,                    if (a2 < cnst1) {,6,0,0,1,3,0,2,0,0,9,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1522,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,8,3,0,3,6,0,0,0,0,11,41,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1030,                        s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));,4,0,0,5,10,0,0,0,0,5,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1034,                    t = work[k - 7] + (s + work[k - 5]);,2,0,0,3,6,0,0,0,0,2,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1035,                    work[k - 3] *= work[k - 7] / t;,0,0,0,2,4,0,0,2,0,2,31,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1356,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,193,        this.main      = main.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,194,        this.secondary = secondary.clone();,2,0,0,1,2,0,4,0,0,7,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,3,1,1,3,0,0,0,0,20,51,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,205,        decompose();,4,0,0,1,2,1,6,4,0,17,12,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,649,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,8,3,0,2,4,1,0,0,0,12,76,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,650,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,652,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,12,4,1,3,6,1,0,0,0,22,67,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,658,                processGeneralBlock(n);,8,2,0,1,2,0,4,0,0,15,23,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,661,                if (chooseLeft) {,2,0,0,1,3,0,0,0,0,2,17,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,827,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,828,        for (int i = 0; i < n - 1; ++i) {,8,2,0,1,3,0,0,0,0,11,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,830,            final double ei = work[fourI + 2];,4,6,1,1,2,1,0,0,0,28,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,831,            sumOffDiag += ei;,4,0,0,0,0,0,0,0,0,5,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,834,        if (sumOffDiag == 0) {,6,2,0,1,3,0,0,0,0,8,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,846,        tType = 0;,0,0,1,0,0,0,4,0,0,8,10,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,847,        dMin1 = 0;,12,1,0,0,0,0,0,0,0,15,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,848,        dMin2 = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,849,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,850,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,851,        dN2   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,852,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,856,        int n0 = n;,0,0,0,0,0,0,12,0,0,12,11,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,857,        while (n0 > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,861,            sigmaLow = 0;,2,1,1,0,0,0,0,0,0,8,13,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,866,            double diagMax    = work[4 * n0 - 4];,16,4,1,1,2,0,0,0,0,24,37,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,868,            i0 = 0;,2,0,0,0,0,0,0,0,0,3,7,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,869,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,8,3,0,2,5,0,0,0,0,12,44,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,870,                if (work[i + 2] <= 0) {,4,4,1,2,5,0,0,0,0,10,23,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,874,                if (diagMin >= 4 * offDiagMax) {,4,2,0,1,3,0,10,0,0,16,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,878,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",4,2,1,3,6,0,6,0,0,19,54,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,6,0,0,0,0,0,0,0,0,7,9,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,4,0,0,3,7,0,4,0,0,9,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,2,0,0,1,3,0,0,0,0,2,15,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,4,0,0,0,0,0,0,2,0,6,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,4,2,1,3,7,1,0,2,0,17,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,2,0,0,3,6,1,6,2,0,11,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",6,0,0,2,5,0,0,0,0,7,48,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,2,0,0,1,3,1,2,0,0,5,35,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,4,2,0,1,3,0,4,0,0,10,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,10,4,0,2,4,0,0,0,0,15,53,15,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,2,0,0,0,0,0,6,0,0,8,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,7,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,                    a2 = cnst3 * a2;,0,0,0,0,0,0,8,0,0,8,16,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,0,0,3,6,1,0,0,0,7,41,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,        this.main      = main.clone();,2,0,0,1,2,0,0,0,0,2,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,1,0,1,3,0,4,0,0,22,51,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,        decompose();,2,0,0,1,2,0,0,8,0,10,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,1,2,4,0,0,0,0,3,56,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,16,3,0,3,6,1,10,0,0,30,62,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,2,0,0,3,6,0,0,0,0,2,62,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,648,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,2,0,0,2,4,3,0,0,0,5,76,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",2,0,0,1,2,3,8,0,0,13,36,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,3,22,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,4,1,0,1,3,0,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,4,0,0,0,0,0,0,0,0,5,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,10,2,1,1,2,2,0,0,0,16,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,830,            sumOffDiag += ei;,2,0,0,0,0,3,0,0,0,5,17,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,8,2,0,1,3,0,0,0,0,11,22,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,854,        int i0 = 0;,18,3,1,0,0,0,0,0,0,30,11,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,4,0,0,0,0,0,0,0,0,4,11,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,10,3,1,2,4,0,0,2,0,19,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,864,            double offDiagMax = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,865,            double diagMax    = work[4 * n0 - 4];,4,2,1,1,2,0,0,0,0,8,37,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,867,            i0 = 0;,4,0,0,0,0,1,0,2,0,7,7,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,868,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,8,3,0,2,5,0,0,0,0,12,44,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,873,                if (diagMin >= 4 * offDiagMax) {,4,2,0,1,3,0,0,0,0,6,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,875,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",10,3,1,2,4,0,6,0,0,23,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,877,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",4,2,1,3,6,0,6,0,0,19,54,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,878,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,883,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",8,3,0,2,4,0,8,0,0,21,67,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,885,            pingPong = 0;,4,0,0,0,0,0,0,0,0,5,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,886,            int maxIter = 30 * (n0 - i0);,6,2,0,1,2,0,0,0,0,8,29,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,893,"                n0 = goodStep(i0, n0);",2,0,0,1,2,0,6,0,0,9,22,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,936,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,937,        for (int k = 0; k < 2; ++k) {,6,1,0,1,3,0,0,0,0,8,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,940,            double d = work[4 * (n - 1) + pingPong];,6,3,1,2,4,0,0,0,0,11,40,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,941,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,10,4,0,2,5,0,0,0,0,15,54,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,942,                if (work[i + 2] <= TOLERANCE_2 * d) {,6,3,1,2,5,0,0,0,0,11,37,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,946,                    d *= work[i] / (d + work[i + 2]);,6,3,1,3,6,0,0,0,0,16,33,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,951,            d = work[pingPong];,2,0,1,1,2,0,6,0,0,13,19,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,952,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,12,8,1,1,3,0,12,0,0,43,51,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,953,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,954,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,960,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,0,0,0,3,8,0,0,0,0,11,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,962,                    final double tmp = work[i + 2] / work[j];,8,2,1,2,4,1,0,0,0,19,41,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,963,                    work[j + 2] = work[i] * tmp;,4,2,1,2,4,0,0,0,0,13,28,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,964,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,970,            work[4 * n - 3 - pingPong] = d;,2,1,1,1,2,0,0,0,0,8,31,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,995,        int deflatedEnd = end;,6,0,0,0,0,0,0,0,0,7,22,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,996,        for (boolean deflating = true; deflating;) {,2,1,0,1,3,0,0,0,0,3,44,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,998,            if (start >= deflatedEnd) {,4,1,0,1,3,0,0,0,0,5,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1003,            final int k = 4 * deflatedEnd + pingPong - 1;,10,6,0,0,0,1,0,0,0,18,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1005,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1011,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,2,0,1,2,4,1,0,0,0,5,73,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1012,                deflatedEnd -= 1;,2,0,0,0,0,0,0,0,0,3,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1014,            } else if ((start == deflatedEnd - 2) ||,4,3,0,1,4,0,0,0,0,7,40,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,8,1,1,3,6,0,2,0,0,17,65,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,4,0,0,0,0,2,0,2,0,7,13,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,4,1,0,2,4,0,0,0,0,6,22,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",8,0,0,1,2,1,4,0,0,14,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,10,1,1,2,4,3,4,6,0,32,74,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,          if (basicRows.contains(basicRow)) {,8,1,0,2,5,0,6,0,0,16,35,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",4,1,0,2,4,1,2,0,0,7,70,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,2,0,0,0,0,0,6,0,0,8,20,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,14,2,0,0,0,2,4,0,0,22,13,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,193,        return tableau.getSolution();,4,1,0,1,2,1,4,0,0,9,29,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,82,    },2,0,0,0,1,0,4,0,0,7,1,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",4,1,0,3,8,0,0,0,0,6,63,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,189,        tableau.discardArtificialVariables();,6,0,0,1,2,0,14,0,0,22,37,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,77,    public ArrayRealVector(double[] d) {,14,0,0,2,5,3,0,6,0,24,36,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,43,    protected AbstractRealMatrix() {,6,0,0,1,3,3,0,4,0,14,32,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,6,2,0,9,1,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,6,2,1,0,0,1,0,6,0,27,12,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,8,0,1,0,0,0,4,0,0,15,15,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,12,3,1,2,4,0,0,0,0,25,22,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,0,1,2,5,0,2,0,0,6,47,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",10,2,0,3,7,0,12,0,0,25,66,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,        return true;,10,2,1,0,0,1,0,0,0,19,12,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",2,0,0,4,9,0,0,0,0,2,81,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,        int width = getWidth() - numArtificialVariables - 1;,10,2,1,1,2,0,2,0,0,20,52,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,        int height = getHeight() - 1;,8,1,0,1,2,1,12,0,0,23,29,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,0,0,0,10,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,            for (int j = 0; j < width - 1; j++) {,20,5,0,1,3,0,0,0,0,26,37,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",8,2,1,3,6,0,2,0,0,20,38,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",2,0,0,4,8,0,0,0,0,2,55,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,        this.tableau = new Array2DRowRealMatrix(matrix);,12,2,0,1,2,0,0,2,0,17,48,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,343,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,4,0,0,8,48,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,10,0,0,10,35,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,351,              basicRows.add(basicRow);,12,0,1,1,2,2,6,2,0,29,24,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,352,              coefficients[i] =,2,0,0,1,2,0,0,0,0,3,17,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,32,2,0,38,70,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,10,2,0,0,0,1,6,0,0,19,79,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,50,        this.value  = value;,10,0,0,0,0,0,0,4,0,15,20,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,146,        if (tableau.getNumArtificialVariables() > 0) {,16,3,0,2,5,0,0,2,0,23,46,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,16,2,0,3,7,4,8,0,0,31,83,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",4,2,0,3,7,0,0,0,0,7,66,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,188,        tableau.discardArtificialVariables();,10,1,0,1,2,0,4,0,0,17,37,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,367,"        if (equals(x, y, eps)) {",4,1,0,2,5,0,8,0,0,13,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },2,0,0,0,1,3,0,0,0,5,1,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,4,0,0,1,2,1,0,0,0,4,40,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",18,4,1,4,8,2,10,2,0,43,104,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",2,0,0,1,2,0,8,0,0,11,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",6,0,1,2,4,0,0,0,0,11,27,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,4,1,0,2,4,1,2,2,0,9,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",6,2,0,1,2,0,0,0,0,8,51,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",10,0,1,1,2,1,0,4,0,19,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,8,1,0,1,3,0,0,0,0,10,55,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,2,0,0,1,2,1,4,0,0,7,38,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,583,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,2,0,0,1,3,0,0,0,0,3,49,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,8,2,0,0,0,0,8,0,0,19,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,587,                            while (l < lEnd - 3) {,4,0,0,1,3,0,0,0,0,4,22,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,2,2,1,1,3,0,0,0,0,9,23,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },8,1,1,0,1,0,4,0,0,15,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,8,2,0,3,6,0,2,0,0,13,70,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",6,3,0,2,4,0,0,0,0,9,80,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,4,0,0,12,55,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,            if (basicRows.contains(basicRow)) {,0,0,1,2,5,0,0,0,0,5,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,                coefficients[i] =,6,1,1,1,2,0,4,0,0,17,17,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,70,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,        return coefficients.dotProduct(point) + constantTerm;,8,2,0,1,2,2,6,0,0,17,53,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,154,        return true;,12,3,0,0,0,2,0,0,0,18,12,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,8,2,0,3,7,3,8,0,0,22,83,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,369,        } else if (x < y) {,6,0,0,1,4,0,0,0,0,6,19,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,370,          return -1;,2,0,0,0,0,1,0,2,0,4,10,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,2,1,1,3,6,0,2,0,0,11,65,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,261,        for (double coefficient : coefficients.getData()) {,0,0,0,2,5,0,4,0,0,5,51,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,262,            sum -= coefficient;,0,1,0,0,0,0,6,0,0,8,19,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,357,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",6,2,1,2,4,0,16,0,0,29,77,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,359,    },2,0,0,0,1,0,0,0,0,2,1,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,474,        return numArtificialVariables;,8,0,1,0,0,1,8,0,0,22,30,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,59,        double minValue = 0;,2,0,0,0,0,3,0,0,0,5,20,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",4,3,1,3,7,0,14,0,0,28,73,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,2,0,0,1,2,2,0,8,0,11,21,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,6,0,0,1,2,0,4,2,0,12,32,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,2,0,0,2,1,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,4,0,0,0,0,1,0,0,0,5,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },10,0,0,0,1,3,0,4,0,17,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,4,0,0,1,2,0,0,0,0,4,27,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,6,1,0,0,0,0,4,0,0,12,20,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,80,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,0,0,10,55,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0,0,0,1,3,0,2,0,0,2,23,7,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0,0,0,3,7,0,10,0,0,10,83,9,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,459,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,129,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",6,3,0,3,7,0,22,0,0,31,66,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,134,                return false;,10,1,0,0,0,1,0,0,0,12,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,146,        if (tableau.getNumArtificialVariables() > 0) {,4,1,0,2,5,0,4,0,0,9,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,293,        int width = getWidth() - numArtificialVariables - 1;,10,2,0,1,2,0,2,0,0,14,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,294,        int height = getHeight() - 1;,2,1,0,1,2,0,2,0,0,5,29,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,295,        double[][] matrix = new double[height][width];,2,0,1,4,8,0,0,0,0,6,46,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,296,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,10,0,0,20,34,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,302,        this.tableau = new RealMatrixImpl(matrix);,2,1,0,1,2,0,0,0,0,3,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,304,    },6,1,0,0,1,0,0,0,0,8,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,61,    protected AbstractLinearOptimizer() {,0,0,0,1,3,0,6,0,0,6,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,63,    },6,2,0,0,1,0,8,0,0,17,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,67,        this.maxIterations = maxIterations;,8,0,0,0,0,0,0,0,0,10,35,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,86,        if (++iterations > maxIterations) {,2,0,0,1,3,0,4,0,0,7,35,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,91,    },4,1,0,0,1,0,6,0,0,11,1,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,6,1,0,0,0,0,2,0,0,10,10,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,8,3,0,3,6,2,12,0,0,24,35,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,12,5,0,1,3,0,0,0,0,17,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,583,        int k = 0;,2,0,0,0,0,0,4,0,0,7,10,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,590,        if (k == 31) {,2,0,0,1,3,1,2,0,0,5,14,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,4,0,0,0,0,1,0,0,0,4,9,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,8,4,0,3,7,0,0,2,0,14,31,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,14,2,0,1,3,0,0,0,0,17,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,2,1,0,0,0,0,0,0,0,3,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,0,0,1,0,0,0,0,0,0,6,7,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,413,            return (Math.abs(u) + Math.abs(v));,8,1,0,3,6,1,0,0,0,10,35,6,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,18,0,0,1,2,0,8,0,0,28,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,6,0,0,9,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,0,1,1,2,5,0,2,0,0,14,62,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,5,44,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,2,0,1,2,4,1,0,0,0,7,35,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,2,0,0,1,2,0,0,0,0,2,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,4,1,0,2,5,0,0,2,0,7,27,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",12,2,0,3,7,1,0,2,0,18,59,2,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,12,1,0,1,3,0,0,0,0,14,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,4,2,0,1,3,0,0,0,0,6,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,149,            final int nCols = d[0].length;,12,1,1,1,2,1,6,0,0,23,30,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,2,1,1,1,3,0,0,0,0,8,17,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,4,1,1,0,0,0,0,0,0,8,7,8,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,540,        int u = p;,10,1,0,0,0,0,0,0,0,12,10,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,541,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,0,0,0,0,2,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,4,0,0,1,3,3,16,2,0,25,32,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,0,1,3,0,0,0,0,15,37,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,735,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,747,                for (int j = 0; j < nColB; j++) {,14,1,0,1,3,0,0,0,0,16,33,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,80,                             boolean ignored) {,6,0,0,0,2,0,12,6,0,25,18,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,81,    this.weight        = weight;,4,0,0,0,0,0,0,0,0,5,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",4,1,0,2,4,0,6,2,0,14,60,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,59,    },6,1,0,0,1,2,4,0,0,13,1,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,237,        return getDefaultNumberFormat(Locale.getDefault());,2,0,1,2,4,1,0,0,0,6,51,9,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",6,1,0,3,6,1,12,0,0,21,57,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,2,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,4,1,0,0,0,2,0,0,0,6,12,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,8,0,0,15,67,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,4,1,1,1,2,0,0,0,0,8,23,6,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,10,3,0,0,0,0,0,0,0,13,24,3,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,46,    },4,0,0,0,1,0,0,0,0,4,1,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,2,0,0,1,3,0,0,0,0,3,12,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,60,        return ret;,2,0,0,0,0,1,0,2,0,5,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,2,0,0,1,2,1,6,0,0,9,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,6,2,0,2,4,4,10,2,0,24,33,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,10,2,0,1,2,1,4,0,0,16,19,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,0,1,0,1,4,0,6,0,0,7,30,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,0,0,2,48,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,6,1,0,0,0,0,0,2,0,9,25,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,2,0,1,0,0,0,0,0,0,7,26,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,10,0,1,0,0,1,0,0,0,13,12,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,3.9397,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,158,            if (iteration > 0) {,2,1,0,1,3,0,0,0,0,3,20,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,175,			++iteration;,2,0,0,0,0,0,0,0,0,3,12,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,193,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.03333,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,214,        int iter = 0;,4,0,0,0,0,1,6,2,0,13,13,4,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,217,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,223,"                if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,9,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,277,            if (iter % n == 0 ||,10,4,0,0,1,0,0,0,0,15,20,3,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,160,"                converged = checker.converged(iter, previous, current);",2,0,0,1,2,0,0,0,0,3,55,6,0.01923,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,106,        int iter = 0;,4,0,0,0,0,1,2,2,0,10,13,3,0.01786,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,322,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,325,            ++iter;,2,0,0,0,0,0,0,0,0,2,7,4,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,489,"                        if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,227,"                    stop = checker.converged(iter, previous, current);",2,0,0,1,2,0,10,0,0,13,50,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,2,0,0,1,2,0,4,0,0,7,33,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,357,                    for (final EventState remaining : occuringEvents) {,4,0,0,1,3,1,0,2,0,7,51,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,371,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,1,2,0,8,0,0,8,39,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",10,0,0,6,12,1,10,4,0,25,99,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));",4,0,0,2,4,1,6,4,0,15,63,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,878,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,12,2,0,1,2,0,8,4,0,27,71,3,0.01099,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,869,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.01081,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,458,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,991,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,992,                if (x[i] < 0) {,2,2,1,2,5,0,0,0,0,8,15,1,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,            return,16,4,1,0,0,0,4,0,0,35,6,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,237,"                        return best(current, previous, isMinim);",2,1,0,1,2,1,12,0,0,15,40,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,230,                        return current;,4,0,0,0,0,1,10,0,0,15,15,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,6,1,0,0,0,0,0,0,0,8,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,2,0,0,0,0,0,0,0,0,3,11,2,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,8,1,0,0,0,1,0,0,0,10,38,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,2,1,0,0,0,0,8,0,0,11,20,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,146,                double scaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,24,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,147,                double lastScaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,28,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,148,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,149,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,150,                if (scale <= 0) {  // Can't scale,2,1,0,1,3,0,0,0,0,3,33,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,153,                for (int i = 0; i < maxPower; i++) {,8,1,0,1,3,0,0,0,0,10,36,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,154,                    lastScaleFactor = scaleFactor;,4,0,0,0,0,0,0,0,0,5,30,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,155,                    scaleFactor *= scale;,4,0,0,0,0,0,0,0,0,5,21,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,156,                    if (a != 0.0 && a > b) {,6,3,0,1,3,0,0,0,0,9,24,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,157,                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);,12,4,0,1,2,0,0,0,0,17,54,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,158,                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);,18,5,0,1,2,0,0,0,0,24,54,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,161,                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;,12,4,0,1,2,0,0,0,0,17,54,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,163,                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {,0,1,0,4,9,0,12,0,0,14,56,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,164,                        break;,0,0,0,0,0,0,0,2,0,3,6,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1660,                    throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,2,0,2,43,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1662,                final int iptMinus1 = ipt;,4,0,0,0,0,1,0,0,0,5,26,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,                throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,2,0,2,43,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,                targetY = -REDUCTION_FACTOR * yA;,10,2,0,0,0,0,0,0,0,14,33,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,8,1,0,2,5,0,0,2,0,13,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,6,1,0,2,5,0,0,0,0,7,42,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,4,0,0,2,5,0,0,0,0,5,46,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,280,            resetOccurred = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00735,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,297,            return isZero ? NaN : INF;,6,0,0,0,0,1,0,0,0,6,26,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.02174,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,293,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,345,        Iterator iter = res.entries.iterator();,2,1,1,1,2,1,6,0,0,14,39,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,358,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,6,2,0,14,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,188,"                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",8,4,0,3,6,0,12,0,0,25,67,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,189,                        f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,7,31,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,      if (c == 0) {,2,1,0,1,3,0,0,0,0,3,13,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,238,        while (count < index) {,6,2,1,1,3,1,4,0,0,26,23,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,239,            count += idx;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,240,            ++idx;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,242,        --idx;,6,1,0,0,0,0,0,0,0,8,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,22,59,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,129,        } catch (MaxIterationsExceededException ex) {,2,0,0,1,4,0,0,2,0,4,45,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,130,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,12,4,0,2,5,0,0,0,0,17,65,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,132,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,133,                return 1;,6,1,0,0,0,1,4,0,0,12,9,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,135,                throw ex;,2,0,0,0,0,0,0,0,0,2,9,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",4,0,0,1,2,1,10,0,0,15,38,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",0,0,1,4,8,0,24,0,0,29,100,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,4,3,0,3,6,1,12,0,0,19,54,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,4,2,1,1,2,0,0,0,0,10,24,3,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,316,                            sum += jacobian[i][pj] * residuals[i];,2,1,1,3,6,0,0,0,0,14,38,14,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,365,"                current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,2,0,9,56,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,443,"                    if (checker.converged(getIterations(), previous, current)) {",0,0,0,3,7,0,10,0,0,10,60,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,444,                        return current;,2,0,0,0,0,1,0,0,0,2,15,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,241,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,242,            final double residual = residuals[i];,2,0,1,1,2,1,0,0,0,7,37,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,243,            criterion += residual * residual * residualsWeights[i];,6,1,1,1,2,0,0,0,0,12,55,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,245,        return Math.sqrt(criterion / rows);,2,0,0,1,2,1,8,0,0,11,35,8,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",6,1,0,1,2,0,0,0,0,8,40,11,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,10,1,0,1,3,0,0,0,0,12,36,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",16,1,0,2,4,0,6,0,0,25,64,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,57,        throw new UnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,42,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,303,"                return new VectorialPointValuePair(point, objective);",4,0,0,1,2,1,0,2,0,6,53,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,248,"              java.util.Arrays.fill(scale, scalAbsoluteTolerance);",6,0,0,1,2,0,6,0,0,12,52,13,0.02439,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,        return getCumPct((Comparable<?>) v);,6,4,0,2,4,1,0,0,0,10,36,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,6,1,0,1,3,0,0,0,0,8,33,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,6,1,1,0,0,2,0,0,0,13,15,3,0.4,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,252,                for (int i = 0; i < p - 1; ++i) {,16,4,0,1,3,1,0,0,0,22,33,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,219,                    if ((Math.abs(root - ta) <= convergence) &&,6,3,0,2,5,0,4,0,0,13,43,10,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,224,                    } else if (Double.isNaN(previousEventTime) ||,2,2,0,1,4,0,10,0,0,15,45,4,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,906,                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&,4,4,1,3,7,0,0,0,0,14,45,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,292,        int start = getNumObjectiveFunctions();,2,0,0,1,2,0,2,0,0,4,39,5,0.06667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,        if (fa * fb >= 0.0 ) {,12,4,0,1,3,0,8,0,0,25,22,3,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,8,1,0,3,7,0,0,0,0,11,49,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,115,                throw new NotPositiveDefiniteMatrixException();,6,0,0,1,2,1,0,2,0,9,47,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",2,0,1,3,7,1,12,0,0,20,56,5,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,276,                if (row == null) {,4,1,0,1,3,1,0,4,0,10,18,3,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,259,        double nOd = doubleValue();,2,0,0,1,2,0,2,0,0,4,27,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,        double dOn = object.doubleValue();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,3,0,0,0,0,0,0,0,10,18,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,10,1,0,2,4,0,4,2,0,19,30,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,350,    private static final long[] factorials = new long[] ,4,0,0,2,4,4,2,0,0,10,51,1,0.00495,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,63,        super();,2,1,0,1,2,0,0,0,0,3,8,4,0.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,186,            throw new ArithmeticException(,2,0,0,0,1,0,0,0,0,2,30,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,202,        int p = problem.getAllParameters().length;,6,2,1,1,2,0,4,0,0,17,42,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,207,        double[] errors = new double[problem.getAllParameters().length];,4,0,0,3,6,0,4,0,0,8,64,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,74,        double sumSq = 0.0d;,2,0,0,0,0,0,0,0,0,2,20,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,77,                dev = ((double) observed[i] - expected[i]);,2,1,1,4,8,0,0,0,0,12,43,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,80,        return sumSq;,6,1,0,0,0,1,0,0,0,7,13,3,0.0,1,1,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,50,        super();,2,0,0,1,2,0,0,0,0,2,8,7,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,8,3,0,0,0,1,0,0,0,11,37,4,0.125,1,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1,-1
