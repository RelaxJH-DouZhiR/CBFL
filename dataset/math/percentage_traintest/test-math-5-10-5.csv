dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,0,0,0,6,19,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,6,1,0,0,0,0,14,0,0,22,33,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,4,1,0,2,5,1,6,0,0,12,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1638,"                    interpolationPoints.setEntry(nfm, nfmm, stepa);",0,0,0,1,2,0,10,0,0,10,47,11,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,4,1,0,1,4,0,0,0,0,5,21,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",0,0,0,1,5,0,0,0,0,6,56,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",2,1,0,3,7,0,14,0,0,18,74,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0,1,0,3,7,0,14,0,0,15,74,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,0,0,0,0,0,0,0,0,0,0,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1686,"            fAtInterpolationPoints.setEntry(nfm, f);",0,0,0,1,2,0,8,0,0,8,40,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,2,1,0,1,3,0,4,0,0,7,19,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,4,0,0,0,0,0,0,0,0,5,9,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,1,1,0,0,0,0,0,0,11,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,10,91,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,0,0,0,7,27,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,6,2,0,0,1,3,0,0,0,12,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1704,"                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);",0,0,0,2,4,0,0,0,0,6,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,10,2,0,1,3,0,0,0,0,13,24,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,2,1,0,2,5,0,2,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,6,2,1,1,3,0,0,0,0,11,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,2,0,1,1,2,0,4,0,0,9,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,12,1,0,0,0,0,0,0,0,14,54,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,6,1,0,1,3,0,0,0,0,8,32,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",6,1,0,0,1,0,0,2,0,10,75,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",8,0,0,0,1,0,0,2,0,11,75,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,45,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,0,0,0,1,2,0,0,0,0,3,74,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,10,1,0,1,2,0,0,2,0,14,57,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2426,        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,61,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,6,0,0,1,2,1,6,6,0,20,49,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2428,        upperDifference = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,4,0,0,1,2,0,0,2,0,7,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,0,0,5,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2432,        trialStepPoint = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,6,1,0,1,2,0,0,2,0,10,88,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2435,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,8,1,0,0,1,2,0,0,0,12,34,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,2,0,1,1,2,3,4,0,0,22,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,6,1,1,0,0,1,14,0,0,26,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,0,0,0,1,2,0,0,0,0,3,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,680,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,681,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,109,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,150,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",16,1,0,1,3,4,6,2,0,29,81,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,6,3,0,1,3,0,0,0,0,9,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,4,0,0,7,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,8,0,0,0,1,2,6,0,0,18,42,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,295,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,8,0,0,14,48,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,106,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,2,0,7,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,367,"        checkRowIndex(m, row);",8,1,0,1,2,0,0,0,0,11,22,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,379,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,384,    },2,1,1,0,1,0,0,0,0,8,1,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,8,4,1,2,5,0,4,0,0,21,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,105,        if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,108,        if (goalType == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,111,        if (startPoint == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,116,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,117,        evaluations.resetCount();,2,0,0,1,2,0,4,0,0,7,25,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,120,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,121,        goal = goalType;,0,0,0,0,0,0,0,0,0,0,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,122,        start = startPoint.clone();,4,0,0,1,2,0,4,0,0,10,27,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,125,        return doOptimize();,2,0,0,1,2,1,2,0,0,5,20,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,139,        return start.clone();,0,0,0,1,2,1,4,0,0,4,21,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,235,        final double[] lowerBound = getLowerBound();,2,0,0,2,4,1,2,0,0,5,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,236,        final double[] upperBound = getUpperBound();,2,0,0,2,4,1,2,0,0,5,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,239,"        setup(lowerBound, upperBound);",2,0,0,1,2,0,6,0,0,9,30,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2384,        printMethod(); // XXX,0,0,0,1,2,0,0,0,0,3,21,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2386,        double[] init = getStartPoint();,2,0,0,2,4,0,2,0,0,4,32,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2387,        final int dimension = init.length;,6,1,1,0,0,1,0,0,0,14,34,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2390,        if (dimension < MINIMUM_PROBLEM_DIMENSION) {,6,2,0,1,3,0,8,0,0,16,44,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2466,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,72,        return lowerBound.clone();,0,0,1,1,2,1,4,0,0,9,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,79,        return upperBound.clone();,2,2,1,1,2,1,4,0,0,17,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,120,        if (lower == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,128,        if (upper == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,138,"        return super.optimize(maxEval, f, goalType, startPoint);",10,0,0,1,2,1,0,0,0,10,56,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,91,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,159,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,160,    },2,0,0,0,1,3,0,0,0,5,1,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,106,        if (upper != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,39,    public SimpleScalarValueChecker() {},2,0,0,2,4,1,0,0,0,3,36,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,52,    public AbstractConvergenceChecker() {,2,0,0,1,3,1,0,0,0,3,37,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,53,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,54,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,55,    },0,0,0,0,1,0,4,0,0,4,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,27,public enum GoalType implements Serializable {,2,0,0,0,1,1,14,2,0,19,46,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,30,"    MAXIMIZE,",2,0,1,0,0,0,0,0,0,12,9,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,33,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,60,        this(new SimpleScalarValueChecker());,0,0,0,2,4,0,0,2,0,2,37,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,65,    protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<RealPointValuePair> checker) {,8,0,0,1,3,1,0,4,0,14,93,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,44,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,66,        this.checker = checker;,0,0,0,0,0,0,0,0,0,0,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,67,    },4,1,1,0,1,0,0,0,0,16,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,211,"        this(numberOfInterpolationPoints,",0,0,0,0,1,0,0,0,0,1,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,214,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,226,                           double stoppingTrustRegionRadius) {,0,0,0,0,2,0,0,0,0,2,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,227,        this.numberOfInterpolationPoints = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,0,63,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,228,        this.initialTrustRegionRadius = initialTrustRegionRadius;,0,0,0,0,0,0,0,0,0,0,57,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,229,        this.stoppingTrustRegionRadius = stoppingTrustRegionRadius;,2,0,0,0,0,0,0,0,0,2,59,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,230,    },4,0,0,0,1,0,0,0,0,4,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,0,0,0,2,4,0,0,0,0,6,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,0,0,0,1,3,0,0,0,0,4,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,0,2,4,0,0,0,0,6,30,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },4,2,0,0,1,0,0,0,0,6,1,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,8,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,2,0,0,0,0,0,0,0,0,2,17,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,4,0,0,0,0,0,0,0,0,7,27,0,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,4,0,0,2,5,3,8,0,0,16,37,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,18,4,0,1,3,4,2,0,0,29,42,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,6,0,0,2,5,4,12,4,0,26,44,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,              for (int i = 0; i < scale.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,12,2,1,3,6,3,4,0,0,31,78,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,115,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",10,0,0,1,2,0,0,0,0,10,76,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,117,    this.fsal      = fsal;,0,0,0,0,0,0,0,0,0,0,22,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,118,    this.c         = c;,4,0,0,0,0,0,0,0,0,4,19,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,119,    this.a         = a;,8,1,0,0,0,0,0,0,0,10,19,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,120,    this.b         = b;,6,0,0,0,0,0,0,0,0,7,19,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,121,    this.prototype = prototype;,0,0,0,0,0,0,0,0,0,0,27,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,123,    exp = -1.0 / getOrder();,0,0,0,1,2,0,0,0,0,3,24,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,126,    setSafety(0.9);,6,0,0,1,2,0,0,0,0,6,15,2,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,127,    setMinReduction(0.2);,12,1,0,1,2,0,0,0,0,16,21,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,128,    setMaxGrowth(10.0);,0,0,0,1,2,0,0,0,0,3,19,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,130,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,110,    super(name);,6,0,0,1,2,0,4,0,0,11,12,3,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,111,"    setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",0,0,0,1,2,0,0,0,0,3,83,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,112,    resetInternalState();,0,0,0,1,2,0,0,0,0,3,21,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,114,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,157,      minStep     = FastMath.abs(minimalStep);,2,0,0,1,2,0,6,0,0,9,40,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,158,      maxStep     = FastMath.abs(maximalStep);,2,1,0,1,2,0,6,0,0,10,40,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,159,      initialStep = -1;,8,0,0,0,0,2,4,0,0,16,17,2,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,161,      scalAbsoluteTolerance = absoluteTolerance;,4,0,0,0,0,0,0,0,0,5,42,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,162,      scalRelativeTolerance = relativeTolerance;,6,4,0,0,0,0,10,0,0,20,42,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,163,      vecAbsoluteTolerance  = null;,0,0,0,0,0,0,0,0,0,0,29,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,164,      vecRelativeTolerance  = null;,2,0,0,0,0,0,4,2,0,8,29,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,166,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,827,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,829,            if (intVal > 746) {,4,2,0,1,3,0,0,0,0,6,19,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,847,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,2,1,1,2,0,6,0,0,21,71,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,862,            intVal = -intVal;,2,1,0,0,0,0,0,0,0,3,17,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,98,            return primaryMapper.getDimension();,0,0,0,1,2,1,0,0,0,4,36,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,258,    double yOnScale2 = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,259,    double yDotOnScale2 = 0;,2,0,0,0,0,0,0,0,0,2,24,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,260,    for (int j = 0; j < scale.length; ++j) {,12,1,0,1,3,0,0,0,0,14,40,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,261,      ratio         = y0[j] / scale[j];,2,1,1,2,4,0,0,0,0,12,33,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,262,      yOnScale2    += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,30,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,263,      ratio         = yDot0[j] / scale[j];,4,1,0,2,4,0,6,0,0,11,36,1,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,264,      yDotOnScale2 += ratio * ratio;,0,0,0,0,0,0,0,0,0,0,30,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,267,    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?,0,0,0,3,6,0,0,0,0,9,64,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,269,    if (! forward) {,2,0,0,1,3,0,0,0,0,3,16,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,274,    for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,275,      y1[j] = y0[j] + h * yDot0[j];,2,1,0,3,6,0,4,0,0,7,29,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,277,"    computeDerivatives(t0 + h, y1, yDot1);",4,1,0,1,2,0,6,0,0,11,38,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,280,    double yDDotOnScale = 0;,0,0,0,0,0,0,0,0,0,0,24,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,281,    for (int j = 0; j < scale.length; ++j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,282,      ratio         = (yDot1[j] - yDot0[j]) / scale[j];,0,0,0,4,8,0,0,0,0,12,49,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,283,      yDDotOnScale += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,30,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,285,    yDDotOnScale = FastMath.sqrt(yDDotOnScale) / h;,4,1,0,1,2,0,14,0,0,20,47,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,289,"    final double maxInv2 = FastMath.max(FastMath.sqrt(yDotOnScale2), yDDotOnScale);",4,0,0,2,4,2,0,0,0,7,79,0,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,290,    final double h1 = (maxInv2 < 1.0e-15) ?,4,1,1,1,2,1,0,0,0,12,39,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,293,"    h = FastMath.min(100.0 * FastMath.abs(h), h1);",0,0,0,2,4,0,0,0,0,6,46,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,294,"    h = FastMath.max(h, 1.0e-12 * FastMath.abs(t0));  // avoids cancellation when computing t1 - t0",6,0,0,2,4,0,0,0,0,7,95,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,295,    if (h < getMinStep()) {,2,1,0,2,5,0,2,0,0,5,23,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,298,    if (h > getMaxStep()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,301,    if (! forward) {,0,0,0,1,3,0,4,0,0,4,16,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,305,    return h;,2,0,0,0,0,1,0,0,0,2,9,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,362,    return minStep;,8,2,0,0,0,1,8,0,0,18,15,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,369,    return maxStep;,10,4,0,0,0,1,14,0,0,28,15,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,218,        if (y.length != equations.getDimension()) {,4,1,0,2,5,0,4,0,0,9,43,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,223,        final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);,0,0,0,1,2,0,0,0,0,3,81,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,224,        expandableODE.setTime(t0);,0,0,0,1,2,0,6,0,0,6,26,5,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,225,        expandableODE.setPrimaryState(y0);,6,1,0,1,2,1,6,0,0,14,34,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,228,"        integrate(expandableODE, t);",6,3,0,1,2,0,16,0,0,25,28,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,233,        if (firstTime) {,2,0,0,1,3,0,0,0,0,2,16,5,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,234,          final double[] scale = new double[mainSetDimension];,2,0,1,2,4,1,0,0,0,5,52,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,235,          if (vecAbsoluteTolerance == null) {,2,1,0,1,3,0,4,0,0,7,35,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,244,"          hNew = initializeStep(forward, getOrder(), scale,",2,0,0,1,3,0,8,0,0,11,49,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,246,          firstTime = false;,4,0,0,0,0,0,0,2,0,7,18,8,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,249,        stepSize = hNew;,4,0,0,0,0,0,0,0,0,5,16,8,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,252,        for (int k = 1; k < stages; ++k) {,0,0,0,1,3,0,0,0,0,4,34,4,0.01724,1,1,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,254,          for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,255,            double sum = a[k-1][0] * yDotK[0][j];,4,2,1,4,8,0,0,0,0,12,37,13,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,256,            for (int l = 1; l < k; ++l) {,8,1,0,1,3,0,0,0,0,10,29,12,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,257,              sum += a[k-1][l] * yDotK[l][j];,0,0,0,4,8,0,0,0,0,12,31,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,259,            yTmp[j] = y[j] + stepSize * sum;,4,2,1,2,4,0,0,0,0,15,32,12,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,262,"          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);",0,0,0,3,6,0,0,0,0,9,66,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,266,    },6,0,0,0,1,1,0,0,0,7,1,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,116,"        primaryMapper.insertEquationData(primaryStateDot, yDot);",20,4,1,1,2,2,8,0,0,39,56,1,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,119,        for (final SecondaryComponent component : components) {,4,0,0,1,3,1,0,2,0,7,55,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,126,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,181,        currentState     = null;,2,1,0,0,0,0,10,0,0,14,24,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,182,        primaryMapper    = null;,4,0,0,0,0,0,0,0,0,5,24,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,183,        secondaryMappers = null;,2,0,0,0,0,0,0,0,0,3,24,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,184,        allocateInterpolatedArrays(-1);,0,0,0,1,2,0,0,0,0,3,31,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,0,0,0,6,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,1,0,0,0,5,33,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },4,0,0,0,1,0,0,0,0,6,1,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,2,0,0,0,0,0,0,0,0,3,6,12,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,0,0,0,0,0,0,0,0,0,0,33,4,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,294,                nbPoints = end - start;,0,0,0,0,0,0,0,0,0,0,23,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,295,"                System.arraycopy(x, start, x, 0, nbPoints);",0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,296,"                System.arraycopy(y, start, y, 0, nbPoints);",0,0,0,1,2,0,12,0,0,12,43,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,297,                signChangeIndex -= start;,8,1,0,0,0,0,8,0,0,18,25,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,260,                    if (signChangeIndex - start >= end - signChangeIndex) {,0,0,0,1,3,0,0,0,0,4,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,269,                    nextX = Double.NaN;,6,0,0,0,0,0,0,0,0,7,19,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,290,            if ((nbPoints > 2) && (end - start != nbPoints)) {,8,0,0,3,7,1,0,0,0,10,50,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,299,            } else  if (nbPoints == x.length) {,0,0,0,1,4,0,0,0,0,5,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,316,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",36,6,0,1,2,3,10,0,0,57,89,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,317,            x[signChangeIndex] = nextX;,2,0,1,1,2,0,0,0,0,7,27,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,318,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,319,            y[signChangeIndex] = nextY;,2,0,1,1,2,0,0,0,0,7,27,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,320,            ++nbPoints;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,323,            if (nextY * yA <= 0) {,22,6,0,1,3,0,20,0,0,48,22,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,325,                xB = nextX;,4,0,0,0,0,0,0,0,0,5,11,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,326,                yB = nextY;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,327,                absYB = FastMath.abs(yB);,8,3,0,1,2,0,16,0,0,28,25,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,328,                ++agingA;,8,2,0,0,0,0,12,0,0,22,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,329,                agingB = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,343,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,172,            nbPoints        = 2;,8,1,0,0,0,0,0,0,0,9,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,173,            signChangeIndex = 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,195,        final double[] tmpX = new double[x.length];,0,0,0,2,4,0,0,0,0,6,43,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,198,        double xA    = x[signChangeIndex - 1];,0,0,0,1,2,0,0,0,0,3,38,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,199,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,200,        double absYA = FastMath.abs(yA);,2,0,0,1,2,0,6,0,0,8,32,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,201,        int agingA   = 0;,4,1,0,0,0,0,4,0,0,10,17,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,202,        double xB    = x[signChangeIndex];,2,0,1,1,2,0,0,0,0,7,34,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,203,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,204,        double absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,32,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,205,        int agingB   = 0;,14,4,0,0,0,0,0,0,0,20,17,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,211,            final double xTol = getAbsoluteAccuracy() +,2,1,0,1,2,1,2,0,0,6,43,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",2,0,0,6,13,1,0,0,0,3,87,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,233,            if (agingA >= MAXIMAL_AGING) {,2,0,0,1,3,3,0,0,0,5,30,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,236,            } else if (agingB >= MAXIMAL_AGING) {,8,2,0,1,4,0,0,0,0,13,37,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,241,                targetY = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,246,            int start = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,247,            int end   = nbPoints;,0,0,0,0,0,0,0,0,0,0,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,251,"                System.arraycopy(x, start, tmpX, start, end - start);",0,0,0,1,2,0,0,0,0,3,53,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,252,"                nextX = guessX(targetY, tmpX, y, start, end);",2,0,0,1,2,0,12,0,0,15,45,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,254,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,273,            } while (Double.isNaN(nextX) && (end - start > 1));,4,3,0,3,7,0,6,0,0,13,51,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,275,            if (Double.isNaN(nextX)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,283,            final double nextY = computeObjectiveValue(nextX);,2,0,0,1,2,1,4,0,0,7,50,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,284,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,365,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,6,0,0,19,39,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,366,            final int delta = i + 1 - start;,0,0,0,0,0,0,0,0,0,0,32,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,367,            for (int j = end - 1; j > i; --j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,368,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,0,0,0,7,14,0,0,0,0,21,47,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,373,        double x0 = 0;,10,1,0,0,0,0,0,0,0,13,14,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,374,        for (int j = end - 1; j >= start; --j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,375,            x0 = x[j] + x0 * (targetY - y[j]);,0,0,0,3,6,0,0,0,0,9,34,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,378,        return x0;,2,0,0,0,0,1,0,0,0,2,10,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,128,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,134,        return relativeAccuracy;,10,2,0,0,0,2,0,0,0,14,24,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,140,        return functionValueAccuracy;,0,0,0,0,0,1,0,0,0,1,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,146,        final double[] x = new double[maximalOrder + 1];,0,0,0,2,4,0,6,0,0,6,48,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,147,        final double[] y = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,148,        x[0] = getMin();,8,1,1,2,4,0,2,0,0,15,16,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,149,        x[1] = getStartValue();,18,7,1,2,4,0,2,0,0,35,23,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,150,        x[2] = getMax();,2,0,0,2,4,0,0,0,0,2,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,151,"        verifySequence(x[0], x[1], x[2]);",2,1,0,4,8,0,0,0,0,3,33,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,154,        y[1] = computeObjectiveValue(x[1]);,0,0,0,3,6,0,0,0,0,9,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,155,"        if (Precision.equals(y[1], 0.0, 1)) {",4,0,1,3,7,1,4,2,0,13,37,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,161,        y[0] = computeObjectiveValue(x[0]);,0,0,1,3,6,0,2,0,0,7,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,162,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,169,        if (y[0] * y[1] < 0) {,2,0,0,3,7,0,0,2,0,4,22,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,40,257,        if (o == null) {,6,3,0,1,3,0,0,0,0,10,16,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,40,260,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,0,0,0,4,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,0,0,0,7,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,4,0,0,1,2,0,0,4,0,8,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",8,0,0,1,2,3,16,4,0,32,50,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",10,1,0,2,5,0,10,0,0,22,43,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,2,0,0,0,0,0,0,0,0,2,17,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,14,2,0,1,3,0,0,0,0,18,46,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,4,1,1,1,2,0,0,0,0,10,23,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,6,1,1,1,2,0,4,0,0,16,27,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,4,1,1,0,0,1,0,0,0,10,11,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",2,1,0,2,5,1,12,6,0,22,43,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",14,4,1,1,2,0,2,0,0,31,49,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",0,0,0,1,2,0,0,0,0,3,67,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,0,0,0,3,6,0,0,0,0,9,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,8,2,0,1,2,1,2,0,0,13,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,4,0,0,0,0,0,6,0,0,13,10,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,6,0,0,21,46,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,8,2,0,0,0,1,16,2,0,32,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,10,1,1,1,3,0,4,0,0,21,16,1,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,4,0,0,4,15,7,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,8,0,0,0,0,0,0,0,0,8,24,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",10,1,0,2,5,0,12,0,0,26,40,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,12,2,0,0,0,0,2,0,0,17,10,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,4,0,0,1,3,0,0,4,0,9,46,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,124,                sum += values[i];,0,0,0,1,2,0,0,0,0,3,17,4,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,2,1,0,0,0,1,4,0,0,7,11,7,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,92,        super.clear();,8,1,0,1,2,1,0,0,0,10,14,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,6,1,0,0,0,0,0,0,0,8,16,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,117,        m1 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,118,        n = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,2,0,0,0,0,0,0,0,0,2,17,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,2,0,0,0,0,0,10,0,0,12,18,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,79,    public Mean() {,0,0,0,1,3,0,0,0,0,4,15,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,80,        incMoment = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,81,        moment = new FirstMoment();,2,0,0,1,2,0,0,2,0,5,27,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,97,    public Variance() {,0,0,0,1,3,0,0,0,0,4,19,4,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,98,        moment = new SecondMoment();,2,0,0,1,2,0,0,2,0,5,28,4,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,99,    },2,0,0,0,1,0,0,0,0,3,1,9,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,184,        return true;,16,3,0,0,0,1,0,0,0,22,12,3,0.00909,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,163,        if (values == null) {,2,0,0,1,3,0,6,0,0,8,21,10,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,167,        if (begin < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,171,        if (length < 0) {,4,0,0,1,3,0,0,0,0,5,17,10,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,175,        if (begin + length > values.length) {,0,0,0,1,3,0,0,0,0,4,37,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,180,        if (length == 0 && !allowEmpty) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,56,    public Sum() {,4,0,0,1,3,0,0,0,0,4,14,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,57,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,58,        value = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,59,    },8,1,0,0,1,0,0,0,0,11,1,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,75,    protected SecondMoment moment = null;,0,0,0,0,0,0,0,0,0,0,37,4,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,84,    protected boolean incMoment = true;,8,0,0,0,0,1,0,0,0,11,35,1,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,91,    private boolean isBiasCorrected = true;,2,0,0,0,0,1,0,0,0,4,39,2,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,375,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.00662,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,60,        super();,4,0,0,1,2,0,0,0,0,5,8,11,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,61,        m2 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,62,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,6,2,0,1,2,0,4,0,0,12,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,0,0,0,7,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0,0,0,3,6,0,0,0,0,9,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,2,0,0,3,6,0,10,0,0,12,48,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,2,21,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,1,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,448,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,0,0,0,4,36,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,            for (int i = 0; i < data.length; i++) {,2,0,0,1,3,0,0,0,0,2,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,452,                dot += data[i] * vData[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,0,0,0,0,1,10,0,0,15,11,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,4,0,0,2,5,0,0,0,0,4,30,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,        return tableau.getSolution();,6,1,0,1,2,1,4,0,0,12,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,44,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",0,0,0,2,4,1,0,0,0,7,81,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,                return null;,0,0,0,0,0,1,10,0,0,10,12,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,320,        return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,0,0,0,1,2,0,0,0,0,3,72,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,4,1,0,1,2,0,4,4,0,14,92,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,1,0,2,4,0,4,0,0,5,102,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,0,0,0,5,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,6,1,0,3,6,1,0,0,0,8,70,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,      for (int i = 0; i < coefficients.length; i++) {,8,0,0,1,3,0,0,0,0,10,47,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",0,0,0,1,2,0,0,0,0,3,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,          if (colIndex < 0) {,4,2,1,1,3,1,0,0,0,19,19,12,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,409,          Integer basicRow = getBasicRow(colIndex);,0,0,0,1,2,0,0,0,0,3,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.05556,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,419,              coefficients[i] =,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,424,"      return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,92,            return 0;,18,4,1,0,0,2,0,0,0,28,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,192,        tableau.dropPhase1Objective();,4,1,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,194,        while (!tableau.isOptimal()) {,2,0,0,2,5,2,4,0,0,9,30,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,98,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,70,        double minValue = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,71,        Integer minPos = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,10,1,0,3,7,0,2,2,0,15,83,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,73,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {",0,1,0,2,5,0,10,0,0,11,56,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,75,                minValue = entry;,2,0,0,0,0,0,0,0,0,2,17,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,76,                minPos = i;,0,0,0,0,0,0,0,0,0,0,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,79,        return minPos;,2,0,0,0,0,1,4,0,0,7,14,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,90,        List<Integer> minRatioPositions = new ArrayList<Integer>();,10,1,0,1,2,0,0,8,0,20,59,0,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,91,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,92,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,8,1,1,3,7,2,10,0,0,25,80,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",16,2,0,2,4,0,8,0,0,28,63,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,94,"            final double entry = tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,97,                final double ratio = rhs / entry;,6,1,0,0,0,1,0,0,0,8,33,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);",14,0,0,1,2,4,0,0,0,18,62,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,99,                if (cmp == 0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,101,                } else if (cmp < 0) {,8,4,1,1,4,0,0,0,0,23,21,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,102,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,103,                    minRatioPositions = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,109,        if (minRatioPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,36,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,111,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,125,        return minRatioPositions.get(0);,0,0,0,1,2,1,0,0,0,4,32,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,137,        incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,139,        Integer pivotCol = getPivotColumn(tableau);,0,0,0,1,2,0,0,0,0,3,43,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,141,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,147,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,150,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,151,            if (i != pivotRow) {,6,1,0,1,3,0,0,0,0,8,20,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,152,"                double multiplier = tableau.getEntry(i, pivotCol);",4,0,0,1,2,1,14,2,0,21,50,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,153,"                tableau.subtractRow(i, pivotRow, multiplier);",4,0,0,1,2,0,10,0,0,14,45,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,156,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,311,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,312,        for (int i = 0; i < getHeight(); i++) {,10,1,0,2,5,0,2,0,0,15,39,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,313,"            final double entry = getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,38,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,314,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",4,2,0,3,7,3,8,0,0,17,60,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,315,                row = i;,10,3,0,0,0,1,2,0,0,17,8,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,316,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,328,        if (getNumObjectiveFunctions() == 1) {,0,1,0,2,5,0,6,0,0,7,38,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,385,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,437,        for (int j = 0; j < getWidth(); j++) {,8,1,0,2,5,0,2,0,0,13,38,0,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,438,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,440,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,454,"        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)",0,0,0,1,3,0,12,0,0,12,65,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,456,    },0,0,1,0,1,0,4,0,0,8,1,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,68,            return -1;,4,7,1,0,0,1,0,0,0,27,10,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,285,            yInt = SGN_MASK - yInt;,8,1,0,0,0,0,0,2,0,12,23,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,155,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,168,"        columnLabels.add(""a"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,188,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,4,0,0,5,26,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,225,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,232,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,1,2,4,0,8,0,0,20,69,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,233,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",4,1,0,2,4,0,8,0,0,15,73,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,234,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,16,0,0,16,82,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,506,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,514,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,91,"        if (equals(x, y, maxUlps)) {",0,0,0,2,5,0,8,0,0,8,28,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,93,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,94,            return -1;,2,0,0,0,0,2,4,0,0,8,10,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,96,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,73,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,74,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,0,0,0,3,41,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,79,        this.maxIterations = maxIterations;,6,0,0,0,0,0,0,0,0,8,35,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,110,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,111,        this.linearConstraints = constraints;,6,0,0,0,0,0,0,0,0,7,37,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,112,        this.goal              = goalType;,4,0,0,0,0,0,0,0,0,5,34,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,113,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,115,        iterations  = 0;,2,0,1,0,0,0,4,0,0,11,16,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,118,        return doOptimize();,0,0,0,1,2,1,0,0,0,4,20,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",6,0,0,1,2,3,0,0,0,9,36,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,52,    },2,0,0,0,1,0,0,0,0,3,1,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",4,0,0,1,3,0,0,0,0,4,63,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,60,        this.epsilon = epsilon;,8,0,0,0,0,0,0,0,0,10,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,169,        if (tableau.getNumArtificialVariables() == 0) {,4,1,0,2,5,0,0,0,0,5,47,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,187,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,191,        solvePhase1(tableau);,2,0,0,1,2,0,8,0,0,10,21,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,382,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,6,2,0,3,7,0,4,0,0,13,67,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,383,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,384,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",4,1,0,2,5,0,14,0,0,19,50,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,388,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,471,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,65,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,66,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,67,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,70,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,241,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,463,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,480,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,0,0,0,4,37,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,0,0,0,0,0,0,0,0,0,0,71,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0,0,0,0,0,0,0,0,0,0,58,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,128,    private static final double LN_HI_PREC_COEF[][] = {,12,3,0,2,5,0,0,0,0,15,51,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,0,0,0,0,2,44,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,237,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",8,0,0,2,4,3,0,0,0,12,126,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,3005,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,277,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,278,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,281,        if (xInt < 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,282,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,6,0,0,16,23,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,284,        if (yInt < 0) {,4,2,1,1,3,0,0,0,0,14,15,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,288,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0,0,0,1,2,0,0,0,0,3,61,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,290,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,478,"        return new ArrayRealVector(getRow(row), false);",2,0,0,2,4,1,4,2,0,9,47,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,483,"        MatrixUtils.checkRowIndex(this, row);",6,1,0,1,2,0,0,0,0,7,37,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,484,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,485,        if (vector.getDimension() != nCols) {,2,0,0,2,5,0,4,0,0,7,37,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,489,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,490,"            setEntry(row, i, vector.getEntry(i));",0,0,0,2,4,0,18,0,0,18,37,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,492,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,514,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,515,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,516,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,517,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,518,"            out[i] = getEntry(row, i);",2,0,1,2,4,0,6,0,0,13,26,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,521,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,64,    },0,0,1,0,1,0,0,0,0,3,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,315,        if (v instanceof ArrayRealVector) {,2,0,1,1,3,0,0,2,0,7,35,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,316,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,317,            final int dim = vData.length;,2,1,0,0,0,0,0,0,0,4,29,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,318,            checkVectorDimensions(dim);,2,0,0,1,2,0,4,0,0,6,27,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,319,            ArrayRealVector result = new ArrayRealVector(dim);,0,0,0,1,2,0,0,0,0,3,50,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,320,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,321,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,322,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,324,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,622,        return data[index];,0,0,1,1,2,1,0,0,0,4,19,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,265,"        return new LinearConstraint(constraint.getCoefficients(),",8,1,0,1,3,1,4,2,0,17,57,0,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,101,"    public ArrayRealVector(double[] d, boolean copyArray) {",6,0,0,2,5,1,0,0,0,7,55,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,102,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,105,        data = copyArray ? d.clone() :  d;,0,0,0,1,2,0,0,0,0,3,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,762,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,765,    },0,0,0,0,1,0,6,0,0,6,1,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,295,        return data[row][column];,4,0,1,2,4,3,2,0,0,20,25,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,58,public abstract class RealVector {,6,1,0,0,1,2,6,0,0,15,34,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,864,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,527,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",6,0,0,1,3,3,0,0,0,9,81,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,57,        if (columnDimension < 1) {,2,0,0,1,3,0,0,0,0,3,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,42,52,public abstract class RealLinearOperator {,2,1,0,0,1,0,0,0,0,3,42,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,83,    public ArrayRealVector(double[] d) {,20,3,1,2,5,1,0,0,0,35,36,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",8,0,0,1,3,1,0,2,0,12,57,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,198,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,199,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,284,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,2,0,3,39,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,373,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,374,            data[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,22,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,376,        return this;,4,1,0,0,0,1,6,0,0,11,12,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,628,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,37,public class ArrayRealVector extends RealVector implements Serializable {,2,0,0,0,1,1,0,4,0,7,73,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,57,    },2,0,0,0,1,0,6,0,0,8,1,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,254,        return data;,0,0,0,0,0,1,0,0,0,1,12,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",2,0,0,1,2,0,8,0,0,10,48,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",10,2,0,1,2,0,0,0,0,12,64,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,109,        this.separator   = separator;,10,1,1,0,0,0,0,0,0,16,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,110,        trimmedPrefix    = prefix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,111,        trimmedSuffix    = suffix.trim();,4,1,0,1,2,0,6,0,0,14,33,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,112,        trimmedSeparator = separator.trim();,4,0,0,1,2,0,0,0,0,5,36,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,162,        return getInstance(Locale.getDefault());,2,0,0,2,4,3,6,2,0,12,40,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,367,"        checkRowIndex(m, row);",6,1,0,1,2,0,6,0,0,14,22,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,369,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,379,        if (row < 0 ||,2,0,0,0,1,0,6,0,0,9,14,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,384,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,394,        if (column < 0 || column >= m.getColumnDimension()) {,0,0,0,2,5,0,4,0,0,4,53,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,58,"        this(new ArrayRealVector(coefficients), constantTerm);",4,0,0,2,4,0,0,2,0,6,54,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",0,0,0,1,3,0,0,0,0,4,78,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,67,        this.constantTerm = constantTerm;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6,0,0,1,3,1,4,0,0,12,12,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,0,0,0,0,0,0,0,0,5,20,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,0,0,0,0,0,2,2,0,11,25,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,2,0,0,0,0,2,0,0,0,4,20,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,10,0,0,0,0,0,0,2,0,15,8,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,0,0,0,0,2,53,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,1,0,2,4,0,4,0,0,21,53,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,1,0,0,0,0,12,0,0,15,33,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,24,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,0,0,2,4,3,0,0,0,5,30,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,30,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,20,5,1,0,0,1,0,0,0,29,33,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,20,6,0,0,0,0,0,0,0,28,24,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,0,0,0,0,0,1,6,0,0,6,15,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,167,        if (begin < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,171,        if (length < 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,        if (begin + length > values.length) {,8,2,0,1,3,0,0,0,0,10,37,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,4,2,0,1,3,0,0,0,0,7,33,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,        return true;,4,0,0,0,0,1,0,0,0,5,12,10,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,        if (values == null) {,6,1,0,1,3,6,0,4,0,17,21,1,1.14286,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,62,"        return evaluate(values, 0, values.length);",0,0,0,1,2,1,0,0,0,4,42,4,1.14286,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,577,        checkEmpty();,6,2,0,1,2,3,18,0,0,29,13,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,578,        this.geoMeanImpl = geoMeanImpl;,2,0,0,0,0,3,0,0,0,5,31,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,579,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,635,        checkEmpty();,4,0,0,1,2,0,2,0,0,7,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,636,        this.varianceImpl = varianceImpl;,0,0,0,0,0,0,0,0,0,0,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,637,    },2,0,0,0,1,1,6,0,0,9,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,84,        value += FastMath.log(d);,0,0,0,1,2,0,0,0,0,3,25,4,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,85,        n++;,4,0,1,0,0,1,0,0,0,10,4,3,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,86,    },2,0,0,0,1,3,0,0,0,5,1,2,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,150,        sumImpl.increment(value);,4,0,0,1,2,0,0,0,0,5,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,151,        sumsqImpl.increment(value);,0,0,0,1,2,0,6,0,0,6,27,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,152,        minImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,153,        maxImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,154,        sumLogImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,155,        secondMoment.increment(value);,0,0,0,1,2,0,0,0,0,3,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,8,1,0,2,5,0,0,2,0,13,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,6,1,0,2,5,0,0,0,0,7,42,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,4,0,0,2,5,0,0,0,0,5,46,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,167,        n++;,0,0,0,0,0,0,0,0,0,0,4,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,168,    },4,0,0,0,1,1,6,4,0,16,1,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,76,        if (d > value || Double.isNaN(value)) {,0,0,0,2,5,0,0,0,0,7,39,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,77,            value = d;,0,0,0,0,0,0,0,0,0,0,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,79,        n++;,6,1,0,0,0,0,0,0,0,8,4,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,76,        if (d < value || Double.isNaN(value)) {,4,2,0,2,5,0,6,0,0,12,39,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,77,            value = d;,6,0,0,0,0,0,0,0,0,7,10,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,79,        n++;,20,1,1,0,0,0,0,0,0,25,4,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,76,        value += d;,0,0,0,0,0,0,0,0,0,0,11,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,77,        n++;,6,1,0,0,0,0,0,0,0,8,4,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,78,    },10,1,0,0,1,0,0,0,0,13,1,0,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,75,        value += d * d;,0,0,0,0,0,0,0,0,0,0,15,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,76,        n++;,6,0,0,0,0,2,0,4,0,12,4,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,77,    },2,0,0,0,1,0,6,0,0,8,1,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,102,        if (n == 0) {,6,1,0,1,3,0,0,0,0,7,13,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,103,            m1 = 0.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,105,        n++;,0,0,0,0,0,0,0,0,0,0,4,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,106,        double n0 = n;,6,0,0,0,0,0,4,0,0,11,14,3,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,107,        dev = d - m1;,6,1,0,0,0,0,0,0,0,8,13,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,108,        nDev = dev / n0;,0,0,0,0,0,0,0,0,0,0,16,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,109,        m1 += nDev;,4,0,0,0,0,0,0,0,0,5,11,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,110,    },0,0,0,0,1,0,0,0,0,1,1,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,80,        if (n < 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,81,            m1 = m2 = 0.0;,0,0,0,0,0,0,0,0,0,0,14,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,83,        super.increment(d);,4,0,0,1,2,0,0,0,0,4,19,5,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,84,        m2 += ((double) n - 1) * dev * nDev;,0,0,0,2,4,0,0,0,0,6,36,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,85,    },10,1,0,0,1,0,2,2,0,16,1,3,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1269,            lnza = -0.16624882440418567;,4,2,0,0,0,0,14,0,0,20,28,5,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1270,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1274,            lnza = lnza * epsilon + 1.0;,4,0,0,0,0,0,0,0,0,4,28,5,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1275,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3791,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3796,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,2,0,0,1,3,0,0,0,0,2,34,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3804,            } else if (LOAD_RESOURCES) {,0,0,0,1,4,0,0,0,0,5,28,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3807,                LN_MANT = FastMathLiteralArrays.loadLnMant();,4,0,0,1,2,0,4,0,0,8,45,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3809,        },0,0,0,0,1,0,0,0,0,1,1,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,375,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1096,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,8,2,0,5,10,0,0,0,0,10,73,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,0,0,0,0,12,89,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1215,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1216,        double lnzb = 0.0;,8,1,0,0,0,0,0,0,0,10,18,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1218,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1292,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1294,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1295,        double d = -(c-a-lnm[0]);,12,2,1,2,4,1,0,0,0,18,25,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1297,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1299,        c = a + lnza;,8,1,0,0,0,0,0,0,0,10,13,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1300,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1301,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1302,        b = b + d;,2,0,0,0,0,0,0,0,0,3,10,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1304,        c = a + LN_2_B*exp;,8,2,0,0,0,0,0,0,0,11,19,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1305,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,0,0,0,0,0,0,0,0,0,0,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,0,0,0,0,0,1,0,0,0,1,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,4,0,0,0,0,1,0,0,0,5,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,            nbPoints        = 2;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,            signChangeIndex = 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);",4,0,0,1,2,0,18,0,0,23,36,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,                    resetOccurred = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,6,0,1,4,9,0,0,0,0,9,77,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,        if (nextAction == EventHandler.Action.RESET_STATE) {,12,1,0,1,3,0,0,4,0,18,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,336,        pendingEvent      = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {",2,1,0,2,5,0,6,0,0,9,41,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,287,                return nextX;,2,0,0,0,0,1,0,0,0,2,13,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,146,        final double[] x = new double[maximalOrder + 1];,2,0,0,2,4,0,0,0,0,2,48,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,147,        final double[] y = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,148,        x[0] = getMin();,0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,149,        x[1] = getStartValue();,4,0,0,2,4,0,6,0,0,11,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,150,        x[2] = getMax();,0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,151,"        verifySequence(x[0], x[1], x[2]);",0,0,0,4,8,0,0,0,0,12,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,154,        y[1] = computeObjectiveValue(x[1]);,0,0,1,3,6,0,8,0,0,13,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,155,"        if (Precision.equals(y[1], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,161,        y[0] = computeObjectiveValue(x[0]);,0,0,0,3,6,0,0,0,0,9,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,162,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,169,        if (y[0] * y[1] < 0) {,0,2,1,3,7,0,0,0,0,6,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,195,        final double[] tmpX = new double[x.length];,6,0,0,2,4,1,0,0,0,7,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,198,        double xA    = x[signChangeIndex - 1];,4,2,1,1,2,0,8,0,0,16,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,199,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,200,        double absYA = FastMath.abs(yA);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,201,        int agingA   = 0;,4,0,0,0,0,1,0,8,0,13,17,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,202,        double xB    = x[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,203,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,204,        double absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,205,        int agingB   = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,211,            final double xTol = getAbsoluteAccuracy() +,6,2,0,1,2,1,2,0,0,11,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",0,0,0,6,13,0,0,0,0,19,87,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,233,            if (agingA >= MAXIMAL_AGING) {,0,0,0,1,3,0,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,236,            } else if (agingB >= MAXIMAL_AGING) {,0,0,0,1,4,0,0,0,0,5,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,241,                targetY = 0;,6,0,0,0,0,0,0,0,0,8,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,246,            int start = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,247,            int end   = nbPoints;,0,0,0,0,0,0,0,0,0,0,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,251,"                System.arraycopy(x, start, tmpX, start, end - start);",8,2,0,1,2,0,12,0,0,22,53,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,252,"                nextX = guessX(targetY, tmpX, y, start, end);",0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,254,                if (!((nextX > xA) && (nextX < xB))) {,0,0,0,4,9,0,0,0,0,13,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,273,            } while (Double.isNaN(nextX) && (end - start > 1));,4,0,0,3,7,0,0,0,0,5,51,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,275,            if (Double.isNaN(nextX)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,283,            final double nextY = computeObjectiveValue(nextX);,12,1,0,1,2,1,4,0,0,18,50,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,284,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,365,        for (int i = start; i < end - 1; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,366,            final int delta = i + 1 - start;,2,0,0,0,0,0,0,0,0,4,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,367,            for (int j = end - 1; j > i; --j) {,32,11,0,1,3,1,18,0,0,63,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,368,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,30,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,373,        double x0 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,374,        for (int j = end - 1; j >= start; --j) {,10,2,0,1,3,0,0,2,0,16,40,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,375,            x0 = x[j] + x0 * (targetY - y[j]);,0,0,0,3,6,0,0,0,0,9,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,378,        return x0;,6,1,0,0,0,1,0,0,0,8,10,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,385,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,386,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,232,                    } else {,2,1,0,0,2,0,0,0,0,3,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,128,"        addEventHandler(handler, maxCheckInterval, convergence,",0,0,0,0,1,0,0,0,0,1,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,131,    },6,1,0,0,1,0,8,0,0,15,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,304,                    occuringEvents.add(state);,6,2,0,1,2,0,10,0,0,19,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,311,                final Iterator<EventState> iterator = occuringEvents.iterator();,0,0,0,1,2,0,0,0,0,3,64,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,312,                final EventState currentEvent = iterator.next();,0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,313,                iterator.remove();,2,1,0,1,2,0,16,0,0,20,18,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,316,                final double eventT = currentEvent.getEventTime();,0,0,0,1,2,0,0,0,0,3,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,317,                interpolator.setSoftPreviousTime(previousT);,0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,318,                interpolator.setSoftCurrentTime(eventT);,0,0,0,1,2,0,0,0,0,3,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,321,                interpolator.setInterpolatedTime(eventT);,0,0,0,1,2,0,6,0,0,6,41,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,322,                final double[] eventY = interpolator.getInterpolatedState();,4,0,0,2,4,1,4,0,0,9,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,323,"                currentEvent.stepAccepted(eventT, eventY);",0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,324,                isLastStep = currentEvent.stop();,0,0,0,1,2,0,0,0,0,3,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,327,                for (final StepHandler handler : stepHandlers) {,8,0,0,1,3,1,0,2,0,12,48,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,331,                if (isLastStep) {,2,1,0,1,3,0,4,0,0,8,17,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,296,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());",6,1,0,3,6,3,16,2,0,28,77,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,320,      this.softPreviousTime = softPreviousTime;,0,0,0,0,0,0,0,0,0,0,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,321,  },2,0,0,0,1,0,0,0,0,2,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,334,      this.softCurrentTime  = softCurrentTime;,0,0,0,0,0,0,0,0,0,0,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,335,  },4,1,0,0,1,0,0,0,0,5,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,82,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,83,        if (maximalOrder < 2) {,4,1,0,1,3,0,0,0,0,6,23,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,86,        this.maximalOrder = maximalOrder;,4,0,0,0,0,0,0,0,0,5,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,87,        this.allowed = AllowedSolution.ANY_SIDE;,10,0,1,0,0,0,10,0,0,25,40,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,122,        return searchStart;,2,0,0,0,0,2,6,0,0,9,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",4,0,0,2,4,1,6,0,0,11,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,268,"        UnivariateRealSolverUtils.verifySequence(lower, initial, upper);",0,0,0,1,2,0,10,0,0,10,64,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,269,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,354,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,355,"        verifyInterval(initial, upper);",4,0,0,1,2,0,0,0,0,5,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,356,    },12,6,1,0,1,1,8,0,0,33,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,227,                        BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =,2,0,0,0,0,0,0,4,0,6,66,10,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,229,                        root = forward ?,4,0,0,0,0,0,0,0,0,5,16,10,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,246,                    if ((!Double.isNaN(previousEventTime)) &&,0,1,0,2,5,0,6,0,0,8,41,8,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,254,                    } else if (Double.isNaN(previousEventTime) ||,0,0,0,1,4,0,0,0,0,5,45,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,256,                        pendingEventTime = root;,4,1,0,0,0,1,0,0,0,6,24,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,257,                        pendingEvent = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,258,                        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,285,        return pendingEvent ?,2,0,0,0,0,1,0,0,0,2,21,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,303,            previousEventTime = t;,4,0,0,0,0,0,0,0,0,5,22,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,304,            g0Positive        = increasing;,8,0,0,0,0,0,0,4,0,14,31,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,305,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));",6,1,0,2,4,0,8,0,0,17,73,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,37,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,65,"        this(DEFAULT_RELATIVE_ACCURACY,",2,0,0,0,1,0,8,0,0,10,31,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,221,                    increasing = gb >= ga;,6,1,0,0,0,0,0,0,0,8,22,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,225,                    if (solver instanceof BracketedUnivariateRealSolver<?>) {,0,0,0,1,3,0,0,0,0,4,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,307,            g0Positive = g0 >= 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,308,            nextAction = EventHandler.Action.CONTINUE;,10,0,1,0,0,0,0,0,0,16,42,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,317,        return nextAction == EventHandler.Action.STOP;,8,1,0,0,0,1,0,0,0,9,46,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,44,public class EventState {,2,0,0,0,1,1,4,0,0,7,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,202,                    interpolator.setInterpolatedTime(t);,0,0,0,1,2,0,6,0,0,6,36,11,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,203,"                    return handler.g(t, interpolator.getInterpolatedState());",2,0,0,2,4,1,14,0,0,17,57,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,139,"        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,",6,0,0,0,2,0,4,2,0,12,71,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,285,                    state.reinitializeBegin(interpolator);,0,0,0,1,2,0,6,0,0,6,38,9,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,286,                },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,302,                if (state.evaluateStep(interpolator)) {,0,0,0,2,5,0,6,0,0,6,39,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,306,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,362,"                state.stepAccepted(currentT, currentY);",0,0,0,1,2,0,0,0,0,3,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,363,                isLastStep = isLastStep || state.stop();,4,1,0,1,2,0,4,0,0,10,40,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,364,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3370,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,110,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,116,        return searchMax;,2,0,0,0,0,1,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,128,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,134,        return relativeAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,140,        return functionValueAccuracy;,0,0,0,0,0,1,0,0,0,1,29,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,153,        incrementEvaluationCount();,0,0,0,1,2,0,2,0,0,2,27,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,154,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,173,        MathUtils.checkNotNull(f);,2,0,0,1,2,0,0,0,0,2,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,176,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,177,        searchMax = max;,0,0,0,0,0,0,0,0,0,0,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,178,        searchStart = startValue;,0,0,0,0,0,0,0,0,0,0,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,179,        function = f;,10,2,0,0,0,0,0,0,0,15,13,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,180,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,181,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00388,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },2,1,1,0,1,0,0,0,0,7,1,4,0.00388,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.00386,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,                this.startColumn = startColumn;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,                destination[row - startRow][column - startColumn] = value;,10,2,1,2,4,0,0,0,0,15,58,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,366,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,            throw new NotStrictlyPositiveException(rowDimension);,0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,            throw new NotStrictlyPositiveException(columnDimension);,14,2,0,1,2,3,0,4,0,23,56,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,        final int rowCount    = getRowDimension();,2,2,0,1,2,1,10,0,0,15,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,74,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,        return out;,6,1,1,0,0,1,6,0,0,18,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,48,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,        final int rowCount    = getRowDimension();,6,1,0,1,2,0,0,0,0,7,42,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,91,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,        for (int row = 0; row < rowCount; ++row) {,10,1,0,1,3,0,0,0,0,12,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,94,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,        return out;,2,0,0,0,0,1,0,0,0,2,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,104,        final int rowCount    = getRowDimension();,10,1,0,1,2,1,2,0,0,15,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,        final int columnCount = getColumnDimension();,10,5,0,1,2,3,6,0,0,24,45,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,107,        for (int row = 0; row < rowCount; ++row) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,108,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,8,0,0,8,45,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,109,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,        return out;,16,3,0,0,0,1,0,0,0,21,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,118,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,119,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,        for (int row = 0; row < rowCount; ++row) {,2,1,0,1,3,0,0,0,0,3,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,123,"                out.setEntry(row, col, getEntry(row, col) * d);",2,2,0,2,4,0,26,0,0,30,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,127,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,135,        final int nRows = getRowDimension();,8,0,0,1,2,1,6,0,0,15,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,136,        final int nCols = m.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,137,        final int nSum  = getColumnDimension();,2,0,0,1,2,0,4,0,0,7,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,139,        for (int row = 0; row < nRows; ++row) {,4,1,1,1,3,0,0,0,0,10,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,140,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,141,                double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,142,                for (int i = 0; i < nSum; ++i) {,14,2,0,1,3,0,0,0,0,18,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,145,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,149,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,154,        return m.multiply(this);,6,1,0,1,2,1,6,0,0,14,24,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,159,        if (p < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,163,        if (!isSquare()) {,4,0,0,2,5,2,0,4,0,10,18,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",2,0,0,3,6,3,0,0,0,5,76,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,167,        if (p == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,2,1,0,2,4,1,0,0,0,3,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,171,        if (p == 1) {,2,0,0,1,3,0,0,2,0,4,13,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,172,            return this.copy();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,175,        final int power = p - 1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,186,        int maxI = -1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,10,1,0,1,3,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,189,            if (binaryRepresentation[i] == '1') {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,190,                final int pos = binaryRepresentation.length - i - 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,191,                nonZeroPositions.add(pos);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,0,0,0,13,49,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,253,        MathUtils.checkNotNull(divisor);,2,0,0,1,2,0,16,0,0,18,32,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,254,        if (isNaN || divisor.isNaN) {,0,0,0,1,3,0,0,0,0,4,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,583,        if (isNaN) {,12,3,0,1,3,1,10,0,0,26,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,            if (hiPrec != null) {,8,4,0,1,3,0,14,0,0,28,21,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,329,                return isNaN;,10,0,0,0,0,1,0,2,0,14,13,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,430,            return INF;,12,1,0,0,0,1,0,0,0,14,11,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,276,            double q = d / c;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,277,            double denominator = d * q + c;,8,3,0,0,0,0,4,0,0,16,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,",8,1,0,1,3,1,0,0,0,10,58,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,122,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,263,        if (divisor.isInfinite() && !isInfinite()) {,10,2,0,3,7,0,0,0,0,13,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,267,        final double c = divisor.getReal();,0,0,0,1,2,0,0,0,0,3,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,268,        final double d = divisor.getImaginary();,6,0,0,1,2,1,4,0,0,12,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,270,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2337,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,754,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,8,0,0,8,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1256,"        return log(x, null);",10,1,0,1,2,1,10,0,0,22,20,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2334,        if (o == null) {,8,2,0,1,3,0,0,0,0,11,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1269,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,2,0,0,2,5,1,0,0,0,3,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1283,        if (x == Double.POSITIVE_INFINITY) {,4,0,0,1,3,0,0,0,0,4,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,164,"        return createComplex(real + addend.getReal(),",0,0,0,1,3,1,0,0,0,5,45,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1266,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3003,        if (y == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,36,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,85,    private static final long[] FACTORIALS = new long[] {,8,2,1,2,5,0,0,0,0,16,53,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,379,        return isNaN;,0,0,0,0,0,1,0,0,0,1,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,750,        if (isNaN) {,6,0,0,1,3,0,0,0,0,7,12,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2977,        if (y == 0.0) {,8,1,0,1,3,1,0,0,0,10,15,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,497,"        return createComplex(real - subtrahend.getReal(),",2,1,0,1,3,1,6,0,0,9,49,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2973,        if (x !=x || y != y) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,159,        MathUtils.checkNotNull(addend);,0,0,0,1,2,0,0,0,0,3,31,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,160,        if (isNaN || addend.isNaN) {,24,6,0,1,3,4,12,0,0,47,28,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,492,        MathUtils.checkNotNull(subtrahend);,14,3,0,1,2,3,0,0,0,20,35,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,493,        if (isNaN || subtrahend.isNaN) {,0,0,0,1,3,0,0,0,0,4,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,425,        if (Double.isInfinite(real) ||,2,0,0,1,3,0,0,0,0,2,30,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,121,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,118,        if (isNaN) {,0,0,0,1,3,0,0,0,0,4,12,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,421,        MathUtils.checkNotNull(factor);,4,3,0,1,2,0,6,0,0,13,31,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,422,        if (isNaN || factor.isNaN) {,6,1,0,1,3,0,0,0,0,7,28,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,12,61,3,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,327,            Complex c = (Complex)other;,4,0,0,1,2,0,0,4,0,8,27,6,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,328,            if (c.isNaN) {,22,2,0,1,3,0,0,0,0,26,14,1,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,326,        if (other instanceof Complex){,4,0,0,1,3,0,0,2,0,6,30,3,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,392,        return isInfinite;,4,0,0,0,0,1,0,0,0,5,18,12,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,99,"    public Complex(double real, double imaginary) {",0,0,0,1,3,0,0,0,0,4,47,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,100,        this.real = real;,8,0,0,0,0,0,10,0,0,19,17,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,101,        this.imaginary = imaginary;,0,0,0,0,0,0,0,0,0,0,27,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,103,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,4,1,0,2,4,0,12,4,0,21,54,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,104,        isInfinite = !isNaN &&,10,1,1,0,0,0,0,0,0,16,22,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,106,        isZero = real == 0 && imaginary == 0;,14,6,0,0,0,0,0,2,0,23,37,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,58,"    public static final Complex I = new Complex(0.0, 1.0);",0,0,0,1,2,0,0,0,0,3,54,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,61,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,22,70,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,64,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,98,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,66,"    public static final Complex ONE = new Complex(1.0, 0.0);",2,0,0,1,2,2,0,0,0,4,56,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,68,"    public static final Complex ZERO = new Complex(0.0, 0.0);",0,0,0,1,2,0,0,0,0,3,57,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,323,        if (this == other) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,1,0,0,0,3,65,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,98,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,110,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,2,62,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,165,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,233,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,235,            FACT[i] = FACT[i-1] * i;,6,3,1,2,4,0,6,0,0,22,24,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,238,        double tmp[] = new double[2];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,239,        double recip[] = new double[2];,4,1,0,2,4,0,0,0,0,7,31,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,242,        for (i = 0; i < 750; i++) {,4,1,1,1,3,0,0,0,0,10,27,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,243,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,0,0,2,4,0,0,0,0,2,32,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,251,                EXP_INT_TABLE_B[750-i] = recip[1];,8,1,0,2,4,0,0,0,0,9,34,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,2,0,0,1,3,0,4,2,0,8,47,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,257,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,10,1,1,2,4,0,0,0,0,19,29,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,263,        for (i = 0; i < LN_MANT.length; i++) {,14,1,0,1,3,1,0,2,0,20,38,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,4,0,0,10,79,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,265,            LN_MANT[i] = slowLog(d);,8,2,0,2,4,0,4,0,0,15,24,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,269,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1012,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1013,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1014,        final double facts[] = new double[2];,6,0,0,2,4,2,0,2,0,10,37,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1015,        final double as[] = new double[2];,2,0,0,2,4,1,4,2,0,9,34,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1016,"        split(x, xs);",2,0,0,1,2,0,6,0,0,9,13,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1017,        ys[0] = ys[1] = 0.0;,12,9,1,2,4,0,0,0,0,28,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1019,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.01351,0,0,-1
