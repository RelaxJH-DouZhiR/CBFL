dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,125,        if (start != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,126,            final int dim = start.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,127,            if (lowerBound != null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,128,                if (lowerBound.length != dim) {,6,1,0,1,3,0,0,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,129,"                    throw new DimensionMismatchException(lowerBound.length, dim);",6,0,0,1,2,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,131,                for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,132,                    final double v = start[i];,2,0,1,1,2,1,0,0,0,7,26,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,133,                    final double lo = lowerBound[i];,2,0,1,1,2,1,0,0,0,7,32,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,134,                    if (v < lo) {,6,1,0,1,3,0,0,0,0,8,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,135,"                        throw new NumberIsTooSmallException(v, lo, true);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,139,            if (upperBound != null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,140,                if (upperBound.length != dim) {,6,1,0,1,3,0,0,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,141,"                    throw new DimensionMismatchException(upperBound.length, dim);",6,0,0,1,2,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,143,                for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,144,                    final double v = start[i];,4,0,1,1,2,1,0,0,0,10,26,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,145,                    final double hi = upperBound[i];,4,0,1,1,2,1,0,0,0,12,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,146,                    if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,147,"                        throw new NumberIsTooLargeException(v, hi, true);",6,0,0,1,2,0,0,2,0,9,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,152,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,60,        return evaluations.getMaximalCount();,2,0,0,1,2,1,6,2,0,10,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,72,        return evaluations.getCount();,4,0,0,1,2,1,10,0,0,15,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,81,        return iterations.getMaximalCount();,0,0,0,1,2,1,4,0,0,4,36,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,93,        return iterations.getCount();,0,0,0,1,2,1,10,0,0,10,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,102,        return checker;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,123,        parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,125,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,126,        iterations.resetCount();,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,128,        return doOptimize();,2,1,0,1,2,1,2,0,0,5,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,147,        evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,158,        iterations.incrementCount();,0,0,0,1,2,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,159,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,175,        for (OptimizationData data : optData) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,176,            if (data instanceof MaxEval) {,2,0,0,1,3,0,0,2,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,177,                evaluations.setMaximalCount(((MaxEval) data).getMaxEval());,2,0,0,4,8,0,6,2,0,10,59,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,178,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,180,            if (data instanceof MaxIter) {,2,0,0,1,3,0,0,2,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,181,                iterations.setMaximalCount(((MaxIter) data).getMaxIter());,0,0,0,4,8,0,0,0,0,12,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,182,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,66,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,220,                        final double[][] jacobian = new double[observations.size()][];,2,0,0,5,10,1,4,0,0,7,62,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,221,                        int i = 0;,10,1,0,0,0,0,0,0,0,12,10,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,222,                        for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,223,"                            jacobian[i++] = f.gradient(observed.getX(), point);",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,224,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,225,                        return jacobian;,2,0,0,0,0,1,8,0,0,10,16,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,184,    private class TheoreticalValuesFunction {,2,0,1,0,1,1,4,0,0,11,41,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,203,                        final double[] values = new double[observations.size()];,2,0,0,3,6,1,4,0,0,7,56,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,38,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,12,3,0,0,0,0,4,0,0,22,6,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,4,3,1,5,10,0,6,0,0,22,73,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,2,0,0,4,8,0,4,0,0,7,69,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,0,0,1,3,0,0,0,0,3,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,6,1,0,1,2,1,0,2,0,10,38,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },6,1,0,0,1,0,0,0,0,8,1,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",10,1,0,7,14,0,0,0,0,12,71,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1541,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0137,1,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,5,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {",8,1,0,1,3,1,0,0,0,10,45,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,        mant = new int[field.getRadixDigits()];,6,0,0,2,4,0,0,0,0,7,39,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,213,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,        this.field = field;,6,0,0,0,0,0,6,0,0,12,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,        if (x == Long.MIN_VALUE) {,12,1,0,1,3,0,0,0,0,14,26,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,            sign = 1;,2,0,0,0,0,0,6,0,0,9,9,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,233,        while (x != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,1,76,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,            mant[mant.length - 1] = (int) (x % RADIX);,12,1,0,3,6,1,0,0,0,14,42,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,            x /= RADIX;,2,1,0,0,0,0,0,0,0,3,11,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,        if (isLongMin) {,16,6,1,1,3,0,0,0,0,28,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,    public Dfp(final Dfp d) {,4,0,0,1,3,0,0,0,0,5,25,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,323,        mant  = d.mant.clone();,0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,        exp   = d.exp;,8,0,0,0,0,3,0,0,0,12,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,        nans  = d.nans;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,        field = d.field;,14,2,0,0,0,0,6,2,0,25,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,334,"    protected Dfp(final DfpField field, final String s) {",0,0,0,1,3,0,0,0,0,4,53,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,        sign = 1;,4,0,0,0,0,0,0,0,0,6,9,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,        this.field = field;,6,1,0,0,0,1,0,0,0,8,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,0,0,2,0,4,57,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,345,        final int offset = 4;  // Starting offset into Striped,0,0,0,0,0,0,0,0,0,0,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0,0,0,3,6,0,0,0,0,9,71,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,        if (s.equals(POS_INFINITY_STRING)) {,0,2,0,2,5,0,2,0,0,5,36,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,355,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,361,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,        if (p == -1) { // try upper case?,4,0,0,1,3,0,4,0,0,9,33,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,370,"            p = s.indexOf(""E"");",6,0,0,1,2,0,4,0,0,12,19,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,375,        if (p != -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,398,            fpdecimal = s;,6,1,1,0,0,0,0,0,0,18,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,407,        p = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,410,        int decimalPos = 0;,14,2,0,0,0,0,0,0,0,18,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,2,3,0,3,7,0,12,0,0,21,63,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,413,                break;,2,0,0,0,0,1,0,0,0,3,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,1,1,2,5,0,0,0,0,8,49,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,417,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,420,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,10,2,0,19,33,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,421,                decimalFound = true;,12,1,0,0,0,0,0,0,0,16,20,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,426,            if (p == fpdecimal.length()) {,2,0,0,2,5,1,6,0,0,10,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,432,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,433,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,434,        striped[1] = '0';,4,0,1,1,2,0,0,0,0,9,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,435,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,439,            if (p == (fpdecimal.length())) {,2,0,0,3,7,0,0,0,0,3,32,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,440,                break;,2,0,0,0,0,0,0,0,0,2,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,444,            if (q == mant.length*rsize+offset+1) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,445,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,448,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,449,                decimalFound = true;,4,0,0,0,0,0,0,0,0,7,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,450,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,451,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,22,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0,0,0,5,10,0,0,0,0,15,76,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,                i = 1;,0,0,0,0,0,0,0,0,0,0,6,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,12,1,0,1,3,3,0,0,0,16,23,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,6,0,0,0,0,1,6,0,0,13,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,2,0,0,5,10,0,0,2,0,4,73,11,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,12,5,0,4,8,0,0,0,0,17,69,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,            mt[i]   = (int) (l & 0xffffffffL);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,6,1,0,1,3,3,4,0,0,14,13,1,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,8,3,0,2,4,0,0,0,0,12,18,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,6,1,1,0,0,1,4,0,0,26,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,1,2,0,0,0,0,3,64,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,6,0,0,6,38,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,7,14,0,6,2,0,17,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,217,    },20,4,0,0,1,0,4,0,0,31,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",2,1,0,2,4,0,0,0,0,3,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",2,0,0,1,3,0,6,0,0,8,45,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,6,0,0,0,0,0,0,0,0,9,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,217,        if (x == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,6,3,1,0,0,0,4,0,0,15,7,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,232,        exp = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,8,3,1,1,3,0,2,0,0,27,16,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,3,76,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,235,            mant[mant.length - 1] = (int) (x % RADIX);,0,0,0,3,6,0,0,0,0,9,42,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,236,            x /= RADIX;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,2,1,1,1,3,0,0,0,0,8,16,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,322,    public Dfp(final Dfp d) {,0,0,0,1,3,0,0,0,0,4,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,10,2,1,1,2,1,0,0,0,19,23,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,4,0,1,0,0,0,0,0,0,8,14,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,6,0,0,0,0,0,0,0,0,9,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,10,3,1,0,0,3,0,0,0,19,16,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",12,8,1,1,3,0,4,0,0,29,53,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,338,        sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,14,4,0,0,0,1,2,0,0,22,8,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,2,5,1,0,0,0,0,0,0,24,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,341,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,10,1,0,0,0,0,0,0,0,13,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,0,0,0,0,2,54,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,1,0,3,6,0,6,2,0,17,71,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,2,0,0,2,5,0,16,0,0,19,36,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,2,0,0,2,5,0,10,0,0,13,36,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,361,        if (s.equals(NAN_STRING)) {,4,0,0,2,5,0,0,0,0,5,27,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,12,4,1,1,3,0,0,0,0,27,33,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,370,"            p = s.indexOf(""E"");",0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,6,2,1,0,0,0,0,0,0,15,14,12,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,0,0,2,5,0,0,0,0,7,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,10,1,0,0,0,0,6,0,0,17,19,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,6,5,0,3,7,0,12,0,0,26,63,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,413,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,417,                decimalPos--;,2,0,0,0,0,0,0,0,0,3,13,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,420,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,421,                decimalFound = true;,2,0,0,0,0,0,0,0,0,4,20,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,6,1,0,2,5,1,4,4,0,16,30,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,6,0,0,0,0,0,4,0,0,11,15,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,6,0,0,1,2,1,0,0,0,7,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,434,        striped[1] = '0';,4,0,1,1,2,0,0,4,0,12,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,435,        striped[2] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,439,            if (p == (fpdecimal.length())) {,0,0,0,3,7,0,0,0,0,10,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,440,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,444,            if (q == mant.length*rsize+offset+1) {,8,2,0,1,3,1,0,0,0,11,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0,0,0,0,0,1,0,0,0,1,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,6,1,0,0,0,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,4,0,0,0,0,0,2,2,0,9,6,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,6,0,0,2,5,0,6,0,0,12,42,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2274,                result.exp = result.exp + ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2275,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,2,0,0,1,2,0,0,0,0,2,48,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,4,0,0,0,0,1,0,0,0,4,31,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,385,                    negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,386,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,394,                sciexp = -sciexp;,0,0,0,0,0,0,0,0,0,0,17,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,907,                return false;,4,0,0,0,0,6,0,10,0,19,13,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,932,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2056,            if (nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2059,                return NAN_STRING;,0,0,0,0,0,1,0,0,0,1,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,377,"            fpdecimal = s.substring(0, p);",2,0,0,1,2,0,6,0,0,9,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,378,            String fpexp = s.substring(p+1);,6,1,0,1,2,0,0,0,0,7,32,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,379,            boolean negative = false;,2,0,0,0,0,0,4,0,0,7,25,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,381,            for (int i=0; i<fpexp.length(); i++),10,1,0,2,4,1,4,4,0,21,36,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,383,                if (fpexp.charAt(i) == '-'),0,0,0,2,4,0,0,0,0,6,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,388,                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {,0,0,0,3,7,0,0,0,0,10,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,389,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,0,0,0,1,2,0,0,0,0,3,45,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,393,            if (negative) {,2,0,0,1,3,0,0,0,0,2,15,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,396,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,961,            return a.sign;,4,0,0,0,0,1,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,969,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2237,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2238,                def.sign = result.sign;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2239,                def.nans = QNAN;,0,0,0,0,0,0,6,0,0,6,16,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2240,                break;,6,0,1,0,0,1,8,4,0,21,6,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,500,            p--;,0,0,0,0,0,0,0,0,0,0,4,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2218,            buffer[--q] = '-';,6,3,0,1,2,0,0,0,0,9,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,284,        return ieeeFlags;,6,1,0,0,0,1,0,0,0,7,17,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1652,            lostdigit = result.mant[0];,4,0,0,1,2,0,0,0,0,6,27,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1653,            result.shiftRight();,10,3,0,1,2,1,0,2,0,17,20,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,            if (upper.length != dim) {,14,1,0,1,3,1,4,0,0,21,26,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,            for (int i = 0; i < dim; i++) {,12,2,0,1,3,0,0,0,0,15,31,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,                final double v = startPoint[i];,2,0,0,1,2,0,0,0,0,3,31,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,                if (v < lo) {,12,1,0,1,3,0,0,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,97,            if (lower.length != dim) {,0,0,0,1,3,0,4,0,0,5,26,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,927,                return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,953,                return x;,2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,975,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3514,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3519,        long bits = Double.doubleToRawLongBits(a);,6,3,1,1,2,0,0,0,0,18,42,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3520,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,60,public abstract class RealVector {,4,2,0,0,1,0,6,0,0,12,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,522,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,530,    },4,0,0,0,1,0,0,0,0,5,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,534,"        MatrixUtils.checkRowIndex(this, row);",4,0,0,1,2,1,0,4,0,9,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,535,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,536,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,537,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,538,"            out[i] = getEntry(row, i);",4,0,0,2,4,0,0,0,0,5,26,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,85,    public ArrayRealVector(double[] d) {,12,1,0,2,5,1,10,10,0,35,36,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,87,    },10,1,0,0,1,0,0,0,0,13,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,4,0,0,1,2,3,4,2,0,14,86,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,600,            return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,610,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,80,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,81,    },0,0,0,0,1,0,10,0,0,10,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,254,        return copyOut();,0,0,0,1,2,1,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,272,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,279,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,280,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,281,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,285,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,289,            data = new double[subMatrix.length][nCols];,6,1,0,2,4,1,4,0,0,12,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,291,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,300,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,4,0,1,5,10,1,2,0,0,9,68,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,531,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,534,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,547,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,115,        throws MathArithmeticException {,2,0,0,0,1,0,0,0,0,2,32,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,81,    private byte maxIter = 30;,2,0,0,0,0,0,0,0,0,2,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,4,0,0,4,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,118,            findEigenVectors(transformer.getQ().getData());,2,0,0,3,6,3,8,0,0,13,47,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,123,    },4,1,0,0,1,1,0,0,0,6,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,192,        final int rows = matrix.getRowDimension();,6,0,0,1,2,0,0,0,0,7,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,193,        final int columns = matrix.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,7,0,0,0,0,0,0,0,0,7,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,195,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,196,            for (int j = i + 1; j < columns; ++j) {,18,2,0,1,3,1,0,0,0,23,39,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,208,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,224,            final int m = eigenvectors.length;,2,1,0,0,0,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,247,        if (cachedD == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,10,1,0,1,2,3,6,0,0,22,64,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",12,5,1,3,8,1,10,0,0,32,71,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,259,        return cachedD;,4,0,0,0,0,1,0,0,0,5,15,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,555,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,556,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,557,        secondary = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,558,    },8,2,0,0,1,0,10,0,0,20,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,567,        final double[][]z = householderMatrix.clone();,10,1,0,3,6,2,4,0,0,18,46,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,568,        final int n = main.length;,2,0,0,0,0,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,569,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,570,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,571,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,572,        for (int i = 0; i < n - 1; i++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,577,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,580,        double maxAbsoluteValue = 0;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,581,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,52,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,585,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,590,        if (maxAbsoluteValue != 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,591,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,65,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,601,        for (int j = 0; j < n; j++) {,14,3,1,1,3,0,0,0,0,21,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,602,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,605,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,612,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,668,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,672,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,673,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,674,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,675,            for (int j = i + 1; j < n; j++) {,10,2,1,1,3,0,4,0,0,19,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,681,            if (k != i) {,0,0,0,1,3,0,0,0,0,4,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,693,        maxAbsoluteValue = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,694,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,695,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,696,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,50,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,700,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,701,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,702,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,78,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,707,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,708,        final double[] tmp = new double[n];,2,0,1,2,4,1,0,0,0,5,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,709,        for (int i = 0; i < n; i++) {,12,1,0,1,3,0,0,0,0,14,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,710,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,711,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,713,            eigenvectors[i] = new ArrayRealVector(tmp);,2,0,1,2,4,0,0,2,0,9,43,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,715,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,62,    public TriDiagonalTransformer(RealMatrix matrix) {,0,0,0,1,3,0,0,0,0,4,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,68,        final int m = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,71,        secondary = new double[m - 1];,6,1,0,1,2,0,6,0,0,15,30,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,72,        cachedQ   = null;,6,1,0,0,0,0,0,0,0,8,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,74,        cachedT   = null;,2,0,1,0,0,1,0,0,0,7,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,77,        transform();,2,0,0,1,2,1,2,0,0,5,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,78,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,86,        if (cachedQ == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,89,        return cachedQ;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,131,        return cachedQt;,4,0,1,0,0,1,0,0,0,9,16,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,175,        return main;,4,0,0,0,0,1,6,0,0,11,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,185,        return secondary;,10,2,0,0,0,1,0,0,0,13,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,193,        final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,252,        main[m - 1] = householderVectors[m - 1][m - 1];,0,0,0,3,6,0,0,0,0,9,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,106,"                            final String separator, final NumberFormat format) {",8,2,1,0,2,2,0,4,0,21,52,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,114,    },8,4,1,0,1,0,0,0,0,19,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,130,        if (data == null ||,4,2,0,0,1,0,0,0,0,6,19,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",12,1,0,1,2,1,2,2,0,18,72,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,217,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,218,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,220,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,384,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),2,0,0,2,5,0,14,0,0,17,52,13,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,413,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",0,0,0,1,2,0,12,0,0,12,52,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,717,        double negccov = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,718,        if (ccov1 + ccovmu > 0) {,4,2,0,1,3,0,0,2,0,8,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,719,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",2,0,0,2,4,0,10,2,0,14,56,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,721,            RealMatrix roneu = pc.multiply(pc.transpose()),0,0,0,2,4,0,0,0,0,6,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,724,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,12,1,0,1,2,0,0,0,0,14,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,725,            oldFac += 1. - ccov1 - ccovmu;,6,1,0,0,0,0,0,0,0,8,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,726,            if (isActiveCMA) {,6,0,0,1,3,1,0,2,0,9,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,728,                negccov = (1. - ccovmu) * 0.25 * mueff /,0,0,0,1,2,0,0,0,0,3,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,730,                double negminresidualvariance = 0.66;,0,0,0,0,0,0,0,0,0,0,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,733,                double negalphaold = 0.5; // where to make up for the variance,8,1,0,0,0,1,0,0,0,10,62,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,736,                int[] arReverseIndex = reverse(arindex);,2,0,0,2,4,0,4,0,0,6,40,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,737,                RealMatrix arzneg,2,0,0,0,0,0,0,2,0,4,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,739,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,740,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,8,2,0,3,6,0,10,0,0,21,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,741,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",8,2,0,1,2,1,6,2,0,19,60,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,742,                int[] idxReverse = reverse(idxnorms);,2,0,0,2,4,0,4,0,0,6,37,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,743,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,744,"                arnorms = divide(arnormsReverse, arnormsSorted);",2,0,0,1,2,0,6,0,0,9,48,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,745,                int[] idxInv = inverse(idxnorms);,2,0,0,2,4,0,4,0,0,6,33,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,746,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",2,0,0,1,2,0,6,2,0,10,55,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,748,                double negcovMax = (1. - negminresidualvariance) /,0,0,0,1,2,0,6,0,0,6,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,750,                if (negccov > negcovMax) {,4,1,0,1,3,0,0,0,0,5,26,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,753,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,754,                RealMatrix artmp = BD.multiply(arzneg);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,755,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0,0,0,2,5,0,0,0,0,7,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,757,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,758,                C = C.scalarMultiply(oldFac),2,0,0,1,2,0,6,0,0,9,28,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,769,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,780,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,781,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,789,        if (ccov1 + ccovmu + negccov > 0 &&,6,3,0,0,1,0,0,0,0,9,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,792,"            C = triu(C, 0).add(triu(C, 1).transpose());",0,0,0,4,8,0,0,0,0,12,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,794,            EigenDecomposition eig = new EigenDecomposition(C);,4,0,0,1,2,0,0,4,0,8,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,795,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",2,0,0,1,2,0,4,0,0,7,66,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,796,            D = eig.getD();,6,1,0,1,2,0,0,0,0,7,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,797,            diagD = diag(D);,2,0,0,1,2,0,8,0,0,11,16,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,798,            if (min(diagD) <= 0) {,0,0,0,2,5,0,0,0,0,7,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,808,            if (max(diagD) > 1e14 * min(diagD)) {,0,2,0,3,7,0,8,0,0,10,37,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,813,            diagC = diag(C);,2,0,0,1,2,0,4,0,0,7,16,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,814,            diagD = sqrt(diagD); // D contains standard deviations now,0,0,0,1,2,0,0,0,0,3,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,815,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0,0,0,4,8,0,0,0,0,12,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,817,    },0,0,0,0,1,0,4,0,0,4,1,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1109,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1110,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1111,            for (int c = 0; c < m.getColumnDimension(); c++) {,10,1,0,2,5,0,10,0,0,24,50,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1112,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",2,1,1,4,8,2,16,0,0,28,46,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1115,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1139,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1140,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1141,            for (int c = 0; c < m.getColumnDimension(); c++) {,8,1,0,2,5,1,6,0,0,17,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1142,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",10,4,1,3,6,0,8,0,0,39,44,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1145,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1153,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1154,        for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1155,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1156,            for (int r = 0; r < m.getRowDimension(); r++) {,12,4,1,2,5,0,4,0,0,26,47,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1157,"                sum += m.getEntry(r, c);",2,0,0,1,2,0,16,0,0,19,24,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1159,            d[0][c] = sum;,0,0,0,2,4,0,0,0,0,6,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1161,"        return new Array2DRowRealMatrix(d, false);",6,2,1,1,2,1,0,2,0,20,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1338,        int[] inverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1339,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1340,            inverse[indices[i]] = i;,0,0,0,2,4,0,0,0,0,6,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1342,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1350,        int[] reverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,0,0,0,3,6,0,0,0,0,9,46,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,                hasFiniteBounds = true;,0,0,0,0,0,0,0,0,0,0,23,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,12,1,1,0,0,0,12,6,0,41,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,8,1,0,1,3,0,0,0,0,11,37,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,4,0,0,1,3,3,4,2,0,13,24,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,0,0,0,3,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,4,0,1,1,2,4,0,4,0,16,31,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,20,5,0,1,2,1,4,0,0,31,27,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,100,            for (int i = 0; i < dim; i++) {,36,4,1,1,3,1,4,4,0,56,31,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,103,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,2,0,2,0,10,52,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,66,        msgPatterns    = new ArrayList<Localizable>();,0,0,0,1,2,0,0,0,0,3,46,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,67,        msgArguments   = new ArrayList<Object[]>();,8,5,1,2,4,1,0,0,0,24,43,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,69,    },2,1,0,0,1,0,0,0,0,3,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,87,        msgPatterns.add(pattern);,10,1,0,1,2,0,6,0,0,19,25,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,88,        msgArguments.add(ArgUtils.flatten(arguments));,6,1,0,2,4,1,10,0,0,20,46,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,368,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,369,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,370,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,1,1,1,2,0,0,0,0,11,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",4,3,0,1,2,0,4,0,0,11,54,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",6,5,0,2,4,0,0,0,0,11,87,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",10,3,0,1,2,3,0,0,0,17,131,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,1,1,2,0,0,0,0,18,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,4,0,0,4,55,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,1,0,0,0,5,78,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,2,263,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",8,1,0,1,2,0,0,0,0,10,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",2,0,0,1,2,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",4,1,0,5,10,0,6,0,0,11,71,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0,0,0,1,2,0,8,0,0,8,51,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",2,0,0,2,4,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",8,1,0,3,6,0,0,0,0,10,81,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",6,2,0,1,2,0,8,0,0,18,53,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,102,"    EVALUATION(""evaluation""), /* keep */",4,0,0,1,2,3,0,6,0,14,36,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,0,0,0,5,10,0,0,0,0,15,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,0,0,0,1,2,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,0,0,0,2,5,0,0,0,0,7,31,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,                final double v = startPoint[i];,2,0,0,1,2,3,0,0,0,5,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,                final double lo = lower[i];,4,0,1,1,2,2,4,0,0,14,27,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,                if (v < lo) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,            if (lower.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),0,0,0,2,5,0,0,0,0,7,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",10,1,0,1,2,0,0,0,0,12,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,        double negccov = 0;,18,3,0,0,0,0,0,0,0,23,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,        if (ccov1 + ccovmu > 0) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",0,0,0,2,4,0,0,0,0,6,56,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,            RealMatrix roneu = pc.multiply(pc.transpose()),18,5,1,2,4,1,18,6,0,53,46,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,20,7,0,1,2,0,6,0,0,35,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,            oldFac += 1. - ccov1 - ccovmu;,2,0,0,0,0,0,8,0,0,10,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,            if (isActiveCMA) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,                negccov = (1. - ccovmu) * 0.25 * mueff /,6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,                double negminresidualvariance = 0.66;,2,0,1,0,0,0,4,0,0,8,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,                double negalphaold = 0.5; // where to make up for the variance,0,0,0,0,0,0,0,0,0,0,62,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,                int[] arReverseIndex = reverse(arindex);,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,                RealMatrix arzneg,34,10,0,0,0,1,20,0,0,67,17,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,718,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,719,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,0,0,0,3,6,0,0,0,0,9,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,721,                int[] idxReverse = reverse(idxnorms);,0,0,0,2,4,0,0,0,0,6,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,723,"                arnorms = divide(arnormsReverse, arnormsSorted);",16,6,0,1,2,4,26,4,0,58,48,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,724,                int[] idxInv = inverse(idxnorms);,8,1,1,2,4,1,4,0,0,18,33,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,725,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",0,0,0,1,2,0,0,0,0,3,55,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,727,                double negcovMax = (1. - negminresidualvariance) /,8,2,0,1,2,1,12,2,0,25,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,729,                if (negccov > negcovMax) {,6,1,0,1,3,1,0,0,0,8,26,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,732,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,733,                RealMatrix artmp = BD.multiply(arzneg);,6,0,0,1,2,0,14,2,0,22,39,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,734,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0,0,0,2,5,0,0,0,0,7,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,736,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,737,                C = C.scalarMultiply(oldFac),12,0,0,1,2,1,6,0,0,20,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,748,            } else {,2,1,0,0,2,0,0,0,0,3,8,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,759,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,760,    },2,0,1,0,1,0,0,0,0,7,1,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,768,        if (ccov1 + ccovmu + negccov > 0 &&,2,0,0,0,1,0,0,0,0,2,35,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,771,"            C = triu(C, 0).add(triu(C, 1).transpose());",2,0,0,4,8,0,12,0,0,15,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,773,            EigenDecomposition eig = new EigenDecomposition(C);,10,1,0,1,2,0,0,4,0,16,51,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,774,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",8,0,0,1,2,0,4,0,0,15,66,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,775,            D = eig.getD();,0,0,0,1,2,0,0,0,0,3,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,776,            diagD = diag(D);,10,2,0,1,2,1,6,0,0,19,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,777,            if (min(diagD) <= 0) {,2,1,0,2,5,1,6,0,0,10,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,787,            if (max(diagD) > 1e14 * min(diagD)) {,0,0,0,3,7,0,0,0,0,10,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,792,            diagC = diag(C);,4,0,0,1,2,0,4,0,0,9,16,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,793,            diagD = sqrt(diagD); // D contains standard deviations now,6,0,0,1,2,0,4,0,0,12,58,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,794,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0,0,0,4,8,0,0,0,0,12,65,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,796,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1085,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,4,0,0,7,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1086,        for (int r = 0; r < m.getRowDimension(); r++) {,6,2,0,2,5,0,8,0,0,19,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1087,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1088,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1091,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1115,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1116,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,8,0,0,16,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1117,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1118,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",6,2,1,3,6,0,8,0,0,23,44,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1121,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1129,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1130,        for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1131,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1132,            for (int r = 0; r < m.getRowDimension(); r++) {,18,2,0,2,5,1,4,0,0,27,47,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1133,"                sum += m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,24,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1135,            d[0][c] = sum;,2,0,1,2,4,0,0,0,0,7,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1137,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1314,        int[] inverse = new int[indices.length];,6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1315,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1316,            inverse[indices[i]] = i;,2,0,1,2,4,0,4,0,0,13,24,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1318,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1326,        int[] reverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1327,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1328,            reverse[i] = indices[indices.length - i - 1];,0,0,0,2,4,0,0,0,0,6,45,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1330,        return reverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,522,        final int nRows = getRowDimension();,4,0,0,1,2,0,0,0,0,4,36,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,534,"        MatrixUtils.checkRowIndex(this, row);",2,0,1,1,2,0,6,0,0,13,37,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,535,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,536,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,537,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,538,"            out[i] = getEntry(row, i);",0,0,0,2,4,0,0,0,0,6,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,62,    public TriDiagonalTransformer(RealMatrix matrix) {,8,0,0,1,3,1,0,2,0,12,50,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,71,        secondary = new double[m - 1];,0,0,0,1,2,0,0,0,0,3,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,72,        cachedQ   = null;,4,0,0,0,0,0,10,0,0,16,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,73,        cachedQt  = null;,2,0,1,0,0,0,4,0,0,8,17,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,74,        cachedT   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,78,    },6,0,0,0,1,3,0,0,0,10,1,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,6,1,1,1,2,1,6,0,0,20,45,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,131,        return cachedQt;,0,0,0,0,0,1,0,0,0,1,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,175,        return main;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,185,        return secondary;,4,0,0,0,0,4,4,2,0,13,17,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,193,        final int m = householderVectors.length;,2,0,1,0,0,0,0,0,0,5,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,85,    public ArrayRealVector(double[] d) {,12,2,0,2,5,1,0,0,0,16,36,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,86,        data = d.clone();,2,0,0,1,2,3,0,0,0,5,17,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,600,            return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,610,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,130,        if (data == null ||,0,0,0,0,1,0,0,0,0,1,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,217,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,218,"            m.setEntry(i, i, diagonal[i]);",8,2,1,2,4,0,6,0,0,21,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,220,        return m;,4,0,0,0,0,4,0,0,0,7,9,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,2,1,0,1,0,0,0,0,17,75,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,80,        copyIn(d);,2,0,0,1,2,0,4,0,0,7,10,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,252,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,270,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,271,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,274,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,277,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,278,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,279,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,283,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,284,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,287,            data = new double[subMatrix.length][nCols];,2,0,1,2,4,0,0,0,0,7,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,288,            for (int i = 0; i < data.length; ++i) {,2,1,1,1,3,0,0,0,0,10,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,289,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,292,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,294,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,524,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,525,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,6,0,0,11,68,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,527,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,528,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,530,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,543,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,544,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,115,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,81,    private byte maxIter = 30;,2,0,1,0,0,1,0,2,0,9,26,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,0,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,118,            findEigenVectors(transformer.getQ().getData());,0,0,1,3,6,0,11,0,0,24,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,192,        final int rows = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,193,        final int columns = matrix.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,48,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,10,1,0,0,0,1,0,0,0,12,59,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,195,        for (int i = 0; i < rows; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,196,            for (int j = i + 1; j < columns; ++j) {,10,2,0,1,3,0,0,0,0,13,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,208,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,224,            final int m = eigenvectors.length;,0,0,0,0,0,0,0,0,0,0,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,1,2,4,0,6,0,0,10,44,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,247,        if (cachedD == null) {,2,1,1,1,3,0,0,0,0,7,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,2,0,0,1,2,0,6,0,0,9,64,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,12,1,0,1,3,3,0,0,0,17,50,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",2,2,1,3,8,0,6,0,0,15,71,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,259,        return cachedD;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,555,        transformer = new TriDiagonalTransformer(matrix);,6,0,0,1,2,3,0,2,0,12,49,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,556,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,557,        secondary = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,558,    },6,0,0,0,1,0,4,0,0,11,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,567,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,568,        final int n = main.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,569,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,570,        imagEigenvalues = new double[n];,2,0,1,1,2,0,0,0,0,5,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,571,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,572,        for (int i = 0; i < n - 1; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,577,        e[n - 1] = 0;,6,1,1,1,2,0,0,0,0,10,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,580,        double maxAbsoluteValue = 0;,8,4,0,0,0,0,0,0,0,12,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,581,        for (int i = 0; i < n; i++) {,4,0,0,1,3,0,0,0,0,4,29,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,0,0,3,7,0,0,0,0,4,58,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,0,0,0,2,4,0,0,0,0,6,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,585,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,4,0,1,3,7,1,0,0,0,7,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,590,        if (maxAbsoluteValue != 0) {,6,2,0,1,3,1,0,0,0,9,28,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,591,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,79,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,8,2,1,3,7,0,16,0,0,31,65,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.07143,0,0,-1
