dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,0,0,0,6,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,1,0,1,2,0,0,0,0,3,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },4,0,0,0,1,0,0,0,0,4,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",18,2,1,1,2,0,0,0,0,22,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,            this.numerator = (int) p1;,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,            this.denominator = (int) q1;,0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,4,0,0,0,0,2,4,0,0,10,15,3,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",10,2,0,1,2,1,14,0,0,28,34,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,329,            numerator   = BigInteger.valueOf(p2);,8,3,0,1,2,0,0,0,0,12,37,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,330,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,328,        if (q2 < maxDenominator) {,6,1,0,1,3,0,0,0,0,8,26,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,335,    },8,2,0,0,1,0,0,0,0,10,1,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,271,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,272,        long overflow = Integer.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,34,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,273,        double r0 = value;,2,0,0,0,0,0,0,0,0,3,18,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,274,        long a0 = (long) FastMath.floor(r0);,2,0,0,2,4,0,6,0,0,8,36,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,275,        if (a0 > overflow) {,4,2,0,1,3,0,10,0,0,17,20,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,281,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,287,        long p0 = 1;,12,2,0,0,0,2,2,0,0,18,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,288,        long q0 = 0;,4,0,1,0,0,0,6,2,0,15,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,289,        long p1 = a0;,16,2,1,0,0,0,2,0,0,26,13,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,290,        long q1 = 1;,6,0,0,0,0,0,0,0,0,7,12,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,292,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,293,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,295,        int n = 0;,6,0,0,0,0,0,0,0,0,8,10,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,296,        boolean stop = false;,0,0,0,0,0,0,0,0,0,0,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,298,            ++n;,14,1,0,0,0,3,4,0,0,23,4,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,299,            final double r1 = 1.0 / (r0 - a0);,0,0,0,1,2,0,0,0,0,3,34,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,300,            final long a1 = (long) FastMath.floor(r1);,0,0,0,2,4,0,0,0,0,6,42,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,301,            p2 = (a1 * p1) + p0;,10,2,0,1,2,3,0,0,0,16,20,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,302,            q2 = (a1 * q1) + q0;,0,0,0,1,2,0,0,0,0,3,20,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,303,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,309,            final double convergent = (double) p2 / (double) q2;,2,0,0,2,4,0,0,0,0,3,52,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,310,            if ((n < maxIterations) &&,4,1,1,1,3,0,6,0,0,15,26,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,313,                p0 = p1;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,314,                p1 = p2;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,315,                q0 = q1;,6,1,0,0,0,0,0,0,0,7,8,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,316,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,317,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,318,                r0 = r1;,2,0,1,0,0,0,2,0,0,9,8,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,320,                stop = true;,6,0,0,0,0,0,0,0,0,9,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,322,        } while (!stop);,0,0,0,1,3,0,0,0,0,4,16,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,324,        if (n >= maxIterations) {,2,0,0,1,3,0,2,0,0,5,25,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3352,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.07273,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,768,        return denominator.intValue();,0,0,0,1,2,1,4,0,0,4,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,801,        return numerator.intValue();,0,0,0,1,2,1,4,0,0,4,28,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3338,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3342,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,14,4,0,1,3,0,0,0,0,20,46,3,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3346,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3347,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3351,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3355,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3024,        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));,0,0,0,2,4,1,0,0,0,7,83,4,0.0404,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,220,                p0 = p1;,10,1,0,0,0,0,2,0,0,15,8,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,221,                p1 = p2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,222,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,223,                q1 = q2;,8,0,0,0,0,2,6,0,0,17,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,224,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,225,                r0 = r1;,14,4,0,0,0,0,6,0,0,26,8,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,366,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,374,        return numerator;,2,1,0,0,0,1,0,0,0,3,17,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,370,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,371,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,8,4,0,3,6,1,2,0,0,16,42,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,6,2,0,1,2,1,0,0,0,9,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,2,0,0,2,4,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,            double tmp = mu - k * sigma;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,4,1,0,0,0,0,0,0,0,6,12,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,            tmp = mu + k * sigma;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,            if (tmp < upper) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,4,0,0,3,6,2,0,2,0,8,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,2,1,0,1,2,1,0,0,0,3,20,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,59,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,        if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,0,0,0,4,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,6,2,0,1,3,0,10,0,0,18,27,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,279,        if (!numericalVarianceIsCalculated) {,2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,280,            numericalVariance = calculateNumericalVariance();,0,0,0,1,2,0,0,0,0,3,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,281,            numericalVarianceIsCalculated = true;,16,2,0,0,0,0,0,0,0,19,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,283,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,292,        final double N = getPopulationSize();,2,0,0,1,2,1,2,0,0,5,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,293,        final double m = getNumberOfSuccesses();,0,0,0,1,2,0,0,0,0,3,40,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,294,        final double n = getSampleSize();,0,0,0,1,2,0,0,0,0,3,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,295,        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));,18,6,0,5,10,1,0,0,0,24,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,308,"        return FastMath.max(0,",0,0,0,0,1,1,4,0,0,4,22,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,321,"        return FastMath.min(getNumberOfSuccesses(), getSampleSize());",0,0,0,3,6,1,8,0,0,8,61,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,105,        int lower = getSupportLowerBound();,20,4,0,1,2,1,2,0,0,30,35,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,106,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,109,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,114,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,118,        int upper = getSupportUpperBound();,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,119,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,101,        if (p < 0.0 || p > 1.0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,161,        return numberOfSuccesses;,6,0,0,0,0,1,0,0,0,7,25,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,170,        return populationSize;,0,0,0,0,0,1,0,0,0,1,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,179,        return sampleSize;,2,0,0,0,0,1,0,0,0,2,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,2,0,1,1,2,1,4,0,0,13,77,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,115,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,128,    private static final double LN_HI_PREC_COEF[][] = {,12,4,0,2,5,1,0,0,0,18,51,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,141,    private static final double SINE_TABLE_A[] =,2,0,1,1,2,3,0,0,0,12,44,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,0,0,0,2,4,0,0,0,0,6,42,4,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,28,5,0,0,0,1,0,0,0,35,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,0,0,0,1,2,0,0,0,0,3,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,2,0,0,1,2,0,6,2,0,10,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,0,0,0,0,0,0,0,0,0,0,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,6,1,0,1,2,0,0,0,0,7,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,12,4,0,1,2,1,0,0,0,17,22,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",0,0,0,3,6,0,0,0,0,9,57,4,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,0,0,1,2,1,0,0,0,4,29,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,0,0,0,1,2,0,0,0,0,3,49,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,0,0,0,1,2,0,0,0,0,3,53,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,0,0,0,1,2,1,0,0,0,4,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",8,0,0,3,6,0,6,2,0,16,58,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",6,0,0,1,2,1,0,4,0,11,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,2,2,0,0,5,51,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",0,0,0,0,1,1,0,0,0,2,41,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,        final SubHyperplane<Euclidean1D> lowerCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,        if (Double.isInfinite(upper) && (upper > 0)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.11429,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,139,"        final Line line = new Line(start, end);",0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),",10,0,0,2,5,1,8,0,0,19,54,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,47,"        super(buildTree(lower, upper));",4,0,1,2,4,0,6,0,0,15,31,3,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,94,        if (Double.isInfinite(lower) && (lower < 0)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,115,                   final Object attribute) {,0,0,0,0,2,0,0,0,0,2,25,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,116,        this.cut       = cut;,8,0,0,0,0,0,6,0,0,17,21,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,117,        this.plus      = plus;,2,0,0,0,0,0,0,0,0,2,22,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,118,        this.minus     = minus;,4,0,0,0,0,0,8,0,0,12,23,9,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,119,        this.parent    = null;,2,0,0,0,0,0,0,0,0,4,22,6,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,120,        this.attribute = attribute;,16,1,0,0,0,0,8,0,0,28,27,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,121,        plus.parent    = this;,0,0,0,0,0,0,0,0,0,0,22,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,122,        minus.parent   = this;,0,0,0,0,0,0,0,0,0,0,22,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,39,"        super(hyperplane, remainingRegion);",12,4,0,1,2,0,6,0,0,23,35,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,40,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,42,"    public OrientedPoint(final Vector1D location, final boolean direct) {",0,0,0,1,3,0,0,0,0,4,69,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,43,        this.location = location;,4,0,0,0,0,0,14,0,0,19,25,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,44,        this.direct   = direct;,0,0,0,0,0,0,0,0,0,0,23,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,74,"        return new SubOrientedPoint(this, null);",0,0,0,1,2,1,0,0,0,4,40,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,50,                                    final Region<T> remainingRegion) {,4,0,0,0,2,0,0,0,0,5,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,51,        this.hyperplane      = hyperplane;,4,0,0,0,0,0,0,0,0,5,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,52,        this.remainingRegion = remainingRegion;,0,0,0,0,0,0,0,0,0,0,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,53,    },0,0,0,0,1,0,8,0,0,8,1,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,65,    public Vector1D(double x) {,0,0,0,1,3,0,0,0,0,4,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,66,        this.x = x;,0,0,0,0,0,0,0,0,0,0,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,67,    },6,2,0,0,1,0,0,0,0,10,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,36,    public static final Vector1D ZERO = new Vector1D(0.0);,6,0,0,1,2,4,4,4,0,18,54,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,39,    public static final Vector1D ONE  = new Vector1D(1.0);,0,0,0,1,2,0,0,0,0,3,54,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,43,    public static final Vector1D NaN = new Vector1D(Double.NaN);,2,0,0,1,2,0,0,0,0,2,60,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,47,    public static final Vector1D POSITIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,51,    public static final Vector1D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,128,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,67,    protected AbstractRegion(final BSPTree<S> tree) {,0,0,0,1,3,0,0,0,0,4,49,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,68,        this.tree = tree;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,69,    },8,0,0,0,1,0,0,0,0,11,1,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,115,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,128,    private static final double LN_HI_PREC_COEF[][] = {,8,2,0,2,5,3,12,0,0,28,51,1,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,160,    private static final double SINE_TABLE_B[] =,14,2,0,1,2,1,0,0,0,17,44,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,1,0,0,1,46,11,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,0,0,0,0,3,54,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,93,    public BSPTree(final Object attribute) {,0,0,0,1,3,0,0,0,0,4,40,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,94,        cut    = null;,6,0,0,0,0,0,0,0,0,6,14,5,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,95,        plus   = null;,2,0,0,0,0,0,0,0,0,3,14,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,96,        minus  = null;,2,0,0,0,0,0,0,0,0,3,14,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,97,        parent = null;,2,0,0,0,0,0,6,0,0,9,14,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,98,        this.attribute = attribute;,0,0,0,0,0,0,0,0,0,0,27,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,44,"    public SubLine(final Line line, final IntervalsSet remainingRegion) {",6,0,0,1,3,3,0,4,0,13,69,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,45,        this.line            = line;,2,0,0,0,0,1,0,0,0,3,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,46,        this.remainingRegion = remainingRegion;,4,0,0,0,0,0,0,0,0,5,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,47,    },2,0,0,0,1,0,6,0,0,9,1,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,896,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,897,        final double a1High     = ca1 - (ca1 - a1);,8,2,1,1,2,1,2,0,0,26,43,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,4,2,0,8,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,0,0,0,2,4,1,0,0,0,7,54,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,344,            Complex c = (Complex)other;,0,0,0,1,2,0,0,0,0,3,27,4,0.02273,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,345,            if (c.isNaN) {,10,1,1,1,3,0,4,2,0,22,14,1,0.02273,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,343,        if (other instanceof Complex){,2,0,1,1,3,1,0,0,0,7,30,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,340,        if (this == other) {,4,0,0,1,3,0,0,0,0,5,20,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,        if (mti >= N) { // generate N words at one time,0,0,0,1,3,0,0,0,0,4,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,22,7,0,1,2,0,0,0,0,30,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,            for (int k = 0; k < N - M; ++k) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,                mtNext = mt[k + 1];,0,0,0,1,2,0,0,0,0,3,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,2,0,1,2,4,0,0,0,0,7,50,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,            for (int k = N - M; k < N - 1; ++k) {,0,0,0,1,3,0,0,0,0,4,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0,0,0,2,4,0,0,0,0,6,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,5,10,0,0,0,0,15,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,14,3,0,0,0,0,0,0,0,18,8,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,        y = mt[mti++];,0,0,0,1,2,0,0,0,0,3,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,8,2,0,0,0,0,4,0,0,15,15,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,12,0,0,1,2,0,2,0,0,15,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,        y ^=  y >>> 18;,0,0,0,0,0,0,0,0,0,0,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,6,2,0,1,2,1,0,0,0,8,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",10,0,0,1,3,0,0,0,0,11,38,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,1,0,0,1,0,10,0,0,11,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,1,2,1,4,0,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,    private static class DoubleIndex implements Comparable<DoubleIndex> {,0,0,0,0,1,0,0,0,0,1,69,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,        public FitnessFunction() {,0,0,0,1,3,0,0,0,0,4,26,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,8,3,0,0,0,1,0,0,0,12,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,            isRepairMode = true;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },12,3,1,0,1,3,14,8,0,53,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,2,0,0,1,3,0,0,0,0,2,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,6,1,0,1,2,3,4,4,0,19,61,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,            this.valueRange = valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,        },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,            final double[] lB = CMAESOptimizer.this.getLowerBound();,0,0,0,2,4,0,0,0,0,6,56,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,6,0,0,2,4,1,2,0,0,9,56,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,4,1,0,2,4,0,0,0,0,5,47,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,4,2,1,3,7,0,0,0,0,18,19,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,6,0,0,6,26,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,4,0,0,0,0,1,0,0,0,5,16,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,            double penalty = 0;,0,0,0,0,0,0,0,0,0,0,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,8,0,0,0,1,3,8,2,0,22,31,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,2,0,0,2,4,0,0,0,0,3,53,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,        final double[] guess = getStartPoint();,0,0,0,2,4,0,0,0,0,6,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,        dimension = guess.length;,0,0,0,0,0,0,0,0,0,0,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,        initializeCMA(guess);,0,0,0,1,2,0,0,0,0,3,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,2,0,0,0,0,0,0,0,0,2,15,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,        double bestValue = fitfun.value(guess);,0,0,0,1,2,0,0,0,0,3,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,0,0,1,2,0,0,2,0,13,32,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,        PointValuePair lastResult = null;,0,0,0,0,0,0,0,0,0,0,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,        for (iterations = 1; iterations <= maxIterations; iterations++) {,0,0,0,1,3,0,0,0,0,4,65,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,49,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,2,0,0,2,4,3,0,4,0,9,44,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,            for (int k = 0; k < lambda; k++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,2,1,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,8,2,0,1,3,0,0,0,0,11,50,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,2,0,0,1,3,1,2,0,0,5,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,                },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,45,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,1,0,2,0,7,65,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,78,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,            xmean = bestArx.multiply(weights);,0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",14,2,0,2,4,2,30,4,0,53,78,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,10,1,0,1,2,0,0,0,0,13,51,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);",0,0,0,1,2,0,0,0,0,3,55,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,0,0,1,3,0,4,0,0,7,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));",0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,2,0,1,2,4,1,0,0,0,7,47,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,            final double worstFitness = fitness[arindex[arindex.length - 1]];,0,0,0,2,4,0,0,0,0,6,65,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,            if (bestValue > bestFitness) {,0,0,0,1,3,0,0,0,0,4,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,2,1,0,0,0,0,0,0,0,3,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,                lastResult = optimum;,0,0,0,0,0,0,0,0,0,0,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",2,0,0,2,5,0,0,0,0,3,65,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,                if (getConvergenceChecker() != null &&,0,0,0,1,3,0,0,0,0,4,38,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,4,1,0,1,3,0,0,0,0,5,57,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,52,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,10,1,0,2,4,0,0,0,0,12,39,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,4,0,0,1,3,0,10,0,0,15,37,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",8,3,1,5,11,1,8,0,0,28,68,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,2,1,1,0,0,0,0,0,0,13,6,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,                if (sigma * sqrtDiagC[i] > stopTolUpX) {,0,0,0,2,5,0,0,0,0,7,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,            final double historyBest = min(fitnessHistory);,0,0,0,1,2,0,0,0,0,3,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,4,0,0,1,2,1,4,0,0,9,48,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,2,2,0,0,1,0,0,0,0,4,21,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,6,1,0,0,1,1,6,0,0,14,41,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,2,0,3,7,0,14,0,0,16,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,2,0,0,2,5,0,0,0,0,3,38,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",4,3,0,1,3,1,8,2,0,18,59,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);",0,0,0,1,2,0,0,0,0,3,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,10,2,0,1,2,0,8,0,0,21,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,            if (generateStatistics) {,0,0,0,1,3,0,0,0,0,4,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,        return optimum;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,        if (lambda <= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,1,0,0,0,7,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,        for (int i = 0; i < guess.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,            sigmaArray[i][0] = inputSigma[i];,0,0,0,3,6,0,0,0,0,9,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",4,0,0,1,2,1,0,4,0,10,71,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,4,0,0,7,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,6,0,0,0,0,0,0,2,0,9,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,2,0,0,0,0,3,0,0,0,5,62,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,        logMu2 = Math.log(mu + 0.5);,0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,71,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,        double sumw = 0;,0,0,0,0,0,0,0,0,0,0,16,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,9,30,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);",0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,4,1,0,1,2,0,4,0,0,10,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,        cc = (4 + mueff / dimension) /,0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,14,4,0,2,4,0,0,0,0,20,44,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",4,7,0,1,5,0,8,0,0,20,52,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);,0,0,0,3,6,0,0,0,0,9,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /",0,0,0,1,3,0,0,0,0,4,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",6,3,0,2,4,0,4,0,0,14,54,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",10,4,0,2,4,1,12,0,0,28,64,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,2,1,0,1,2,0,6,0,0,10,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,2,0,0,1,2,0,6,0,0,9,73,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,4,1,0,1,2,0,4,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,        diagC = square(diagD);,0,0,0,1,2,0,0,0,0,3,22,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);",0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",2,0,0,1,2,0,4,0,0,7,57,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,0,0,0,5,10,0,0,0,0,15,70,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,16,2,0,3,6,1,0,0,0,20,64,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,6,0,0,1,2,0,0,0,0,6,70,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,        for (int i = 0; i < historySize; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,637,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,4,1,0,1,3,0,6,0,0,12,35,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,4,1,0,0,0,1,0,0,0,6,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,4,1,0,1,2,0,6,0,0,12,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,657,            pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));,0,0,0,5,10,0,0,0,0,15,91,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,0,0,1,1,3,0,0,0,0,5,41,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,805,            vals[i] = vals[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,2,0,1,1,2,0,0,0,0,5,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },4,1,0,0,1,0,0,0,0,6,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,817,        final DoubleIndex[] dis = new DoubleIndex[doubles.length];,0,0,0,2,4,0,0,0,0,6,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",2,0,1,3,6,0,0,2,0,13,40,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,821,        Arrays.sort(dis);,0,0,0,1,2,0,0,0,0,3,17,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,6,0,0,2,4,1,6,0,0,13,46,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,13,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,826,        return indices;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,982,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",2,0,0,4,8,0,0,0,0,2,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,996,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,15,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,38,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1010,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1013,"                double e = m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1014,                d[r][c] = e * e;,0,0,0,2,4,0,0,0,0,6,16,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,0,2,0,8,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,14,3,0,2,5,0,4,0,0,23,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1028,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",8,2,1,1,2,2,0,0,0,22,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,1,4,0,0,11,66,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,6,0,1,2,5,0,0,0,0,9,47,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1059,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,0,4,8,0,0,0,0,12,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,6,2,0,14,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,1,16,0,0,19,74,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1104,            for (int i = 0; i < m.getRowDimension(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",2,0,0,3,6,0,0,0,0,3,27,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,2,2,0,7,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,2,4,0,16,0,0,16,43,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },4,0,0,0,1,3,8,2,0,17,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1140,"            Arrays.fill(d[r], 1);",0,0,0,2,4,0,0,0,0,6,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1142,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,        final double[][] d = new double[n][m];,0,0,0,4,8,0,8,0,0,8,38,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,6,0,0,16,29,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1154,            if (r < m) {,0,0,0,1,3,0,0,0,0,4,12,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",4,0,0,1,2,1,0,2,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1177,        final int rd = mat.getRowDimension();,0,0,0,1,2,0,0,0,0,3,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,1,0,0,0,13,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1181,            for (int c = 0; c < m * cd; c++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,8,3,0,3,6,1,0,0,0,12,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,2,0,1,4,8,1,0,0,0,5,41,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,12,1,0,0,0,0,0,0,0,14,21,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,14,2,0,1,3,1,0,0,0,18,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,2,0,1,2,4,0,0,0,0,7,16,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,6,0,0,0,0,1,0,0,0,8,14,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,6,0,0,13,31,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,12,1,0,2,5,0,4,2,0,20,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,0,0,0,7,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,30,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,14,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,8,0,0,0,0,1,2,6,0,18,8,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1236,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1258,        double min = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,16,2,0,1,3,0,0,0,0,20,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,4,1,1,2,5,0,0,0,0,10,17,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1261,                min = m[r];,0,0,0,1,2,0,0,0,0,3,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,2,0,1,4,8,1,0,0,0,7,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,79,public class CMAESOptimizer,0,0,0,0,0,0,0,0,0,0,27,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,762,         final int[] output = new int[len];,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,763,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,2,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,4,0,0,1,2,1,2,0,0,8,42,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,82,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,10,1,0,1,3,3,0,4,0,19,45,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,0,0,0,0,0,1,0,0,0,1,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,0,0,0,0,0,0,0,0,0,0,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",6,3,1,1,2,0,0,0,0,15,25,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,3,7,0,0,0,0,6,22,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,14,0,0,0,0,0,0,0,0,19,20,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0,0,1,1,4,0,2,0,0,8,35,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,            x[signChangeIndex] = nextX;,0,0,0,1,2,0,0,0,0,3,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",6,2,0,1,2,0,10,0,0,18,89,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,2,0,0,1,2,3,0,0,0,5,27,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,2,0,0,0,0,0,0,0,0,3,11,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,            if (nextY * yA <= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,                xB = nextX;,0,0,0,0,0,0,0,0,0,0,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,                absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,                ++agingA;,0,0,0,0,0,0,0,0,0,0,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,2,0,0,0,0,0,0,8,0,10,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },12,3,0,0,1,0,6,0,0,22,1,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,1,2,3,0,0,0,5,44,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);",0,0,0,1,2,0,0,0,0,3,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,364,                if (needReset) {,4,1,0,1,3,0,0,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,343,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,8,4,0,4,9,0,16,0,0,29,77,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,347,        if (nextAction == EventHandler.Action.RESET_STATE) {,0,0,0,1,3,0,0,0,0,4,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,350,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,351,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,353,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,1,1,2,1,0,0,0,12,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,150,        final double[] x = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,151,        final double[] y = new double[maximalOrder + 1];,4,1,0,2,4,1,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,152,        x[0] = getMin();,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,153,        x[1] = getStartValue();,0,0,0,2,4,0,0,0,0,6,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,154,        x[2] = getMax();,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,155,"        verifySequence(x[0], x[1], x[2]);",0,0,1,4,8,0,2,0,0,8,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,158,        y[1] = computeObjectiveValue(x[1]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,159,"        if (Precision.equals(y[1], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,165,        y[0] = computeObjectiveValue(x[0]);,30,7,1,3,6,1,12,0,0,55,35,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,166,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,173,        if (y[0] * y[1] < 0) {,4,3,1,3,7,0,4,0,0,15,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,199,        final double[] tmpX = new double[x.length];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,202,        double xA    = x[signChangeIndex - 1];,8,2,1,1,2,0,0,0,0,13,38,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,203,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,204,        double absYA = FastMath.abs(yA);,4,0,0,1,2,0,6,0,0,11,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,205,        int agingA   = 0;,6,0,0,0,0,0,0,0,0,6,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,206,        double xB    = x[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,207,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,208,        double absYB = FastMath.abs(yB);,2,0,0,1,2,0,6,0,0,8,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,209,        int agingB   = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,215,            final double xTol = getAbsoluteAccuracy() +,2,0,0,1,2,3,0,0,0,5,43,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,217,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",4,0,0,6,13,0,0,0,0,5,87,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,237,            if (agingA >= MAXIMAL_AGING) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,251,                targetY = 0;,2,0,0,0,0,3,6,0,0,11,12,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,256,            int start = 0;,14,2,0,0,0,0,2,0,0,21,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,257,            int end   = nbPoints;,4,0,0,0,0,0,0,0,0,5,21,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,261,"                System.arraycopy(x, start, tmpX, start, end - start);",4,1,0,1,2,0,12,0,0,17,53,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,262,"                nextX = guessX(targetY, tmpX, y, start, end);",0,0,0,1,2,0,0,0,0,3,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,264,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,283,            } while (Double.isNaN(nextX) && (end - start > 1));,12,4,0,3,7,0,6,0,0,22,51,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,285,            if (Double.isNaN(nextX)) {,4,1,1,2,5,0,6,0,0,14,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,293,            final double nextY = computeObjectiveValue(nextX);,0,0,0,1,2,0,0,0,0,3,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,294,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,375,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,0,0,0,13,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,376,            final int delta = i + 1 - start;,14,2,1,0,0,0,0,0,0,28,32,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,377,            for (int j = end - 1; j > i; --j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,378,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,31,47,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,0,0,0,1,2,0,0,0,0,3,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,0,0,0,1,3,0,0,0,0,4,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,12,3,0,2,4,1,0,0,0,16,34,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,16,5,0,4,8,2,0,0,0,23,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,6,0,0,3,6,0,0,0,0,7,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,2,0,0,0,0,2,0,2,0,6,28,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,8,0,1,1,2,0,2,2,0,19,18,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,10,2,0,1,2,0,0,0,0,12,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,12,3,0,2,4,0,0,0,0,16,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,6,2,0,1,2,2,10,0,0,19,26,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,6,1,0,3,6,2,2,4,0,15,42,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,8,2,0,1,2,1,18,0,0,30,33,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",6,0,0,2,4,0,6,2,0,15,50,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,        return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",2,0,0,1,3,1,2,0,0,5,87,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);",0,0,0,1,2,0,0,0,0,3,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },8,0,0,0,1,0,8,0,0,17,1,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,10,2,0,1,2,2,0,0,0,15,39,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,4,1,1,1,2,1,0,0,0,10,39,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",14,1,0,2,4,0,6,2,0,25,67,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,1,1,3,0,0,0,0,5,65,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",6,0,0,1,2,0,0,0,0,7,58,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },8,2,0,0,1,0,0,0,0,10,1,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,286,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",20,3,0,1,2,1,6,2,0,31,50,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {",18,2,0,1,3,3,0,4,0,30,47,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,        this.x = x;,8,0,0,0,0,0,0,0,0,10,11,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,        this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,98,        this.z = z;,0,0,0,0,0,0,0,0,0,0,11,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,        this.x = a * u.x;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,140,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",4,0,0,1,2,0,6,2,0,13,62,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",8,2,0,1,2,3,10,4,0,28,60,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",2,0,0,1,2,4,0,0,0,5,63,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,12,1,0,1,2,3,4,0,0,21,77,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,115,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,6,0,0,9,49,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,1,2,5,1,2,0,0,7,51,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,379,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,866,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,867,        final double a1High     = ca1 - (ca1 - a1);,22,3,1,1,2,1,4,0,0,38,43,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,869,        final double cb1        = SPLIT_FACTOR * b1;,10,1,0,0,0,1,0,0,0,13,44,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,870,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,871,        final double b1Low      = b1 - b1High;,4,0,0,0,0,0,6,0,0,10,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,875,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,878,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,879,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,880,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0,0,0,1,2,0,0,0,0,3,54,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0,0,0,3,6,0,0,0,0,9,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,                double v = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,4,1,1,2,4,0,0,0,0,10,25,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,6,1,0,1,4,0,0,0,0,7,20,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,                    v *= x;,0,0,0,0,0,0,0,0,0,0,7,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,                function[n] = coeff * v;,0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,4,1,0,2,4,0,0,0,0,5,42,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,2,0,1,1,2,1,0,0,0,7,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,2,0,0,2,4,0,0,0,0,3,31,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,        if (order > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,2,0,1,2,4,1,0,0,0,5,37,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,            q[0] = 1;,0,0,0,1,2,0,0,0,0,3,9,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,6,1,0,0,0,1,0,0,0,8,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,4,2,0,1,2,1,0,0,0,7,36,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,16,5,0,0,0,0,0,0,0,22,17,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,2,1,1,2,4,0,0,0,0,8,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,2,0,0,1,3,0,0,0,0,3,34,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1368,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,1,2,0,0,0,0,3,64,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,2,0,0,4,8,1,0,0,0,3,89,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,2,0,0,0,0,0,0,0,0,2,23,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2440,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2447,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2452,        if (xa < 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,2,0,0,1,2,0,0,0,0,2,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2462,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2463,        epsB = -(temp - epsA - epsB);,0,0,0,1,2,0,0,0,0,3,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2464,        epsA = temp;,0,0,0,0,0,0,8,0,0,8,12,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,2,3,0,0,0,0,4,0,0,9,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2468,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2469,        double yb = xb + xa - ya;,0,0,0,0,0,0,0,0,0,0,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,2,0,0,0,0,0,0,0,0,2,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2474,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,8,1,0,0,0,0,2,0,0,13,10,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,4,0,0,0,0,0,0,4,0,9,33,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,8,4,0,0,0,0,0,0,0,13,25,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2525,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",0,0,0,1,2,1,0,0,0,4,48,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,0,0,4,8,0,0,0,0,12,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,0,0,0,2,4,0,0,0,0,6,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,2,0,1,1,2,1,6,0,0,11,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,3,0,5,10,0,0,0,0,7,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,10,3,0,0,0,0,4,0,0,18,10,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,4,0,0,0,0,1,0,4,0,9,13,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,10,0,0,0,0,0,0,0,0,12,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,10,1,0,0,0,0,0,2,0,15,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,6,1,1,0,0,1,0,0,0,17,6,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,8,1,1,0,1,3,4,0,0,18,29,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,0,0,0,0,3,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,76,"        this(new Well19937c(), means, covariances);",0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,77,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",4,1,1,1,2,0,0,0,0,10,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,6,1,0,1,3,0,0,0,0,7,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,111,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,117,        this.means = MathArrays.copyOf(means);,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,2,0,0,1,2,0,0,0,0,3,78,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,52,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,133,            if (covMatEigenvalues[i] < 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,139,"        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",0,0,0,1,2,0,0,0,0,3,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,140,        for (int v = 0; v < dim; v++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,141,            final double[] evec = covMatDec.getEigenvector(v).toArray();,0,0,0,3,6,0,0,0,0,9,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,145,        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();,0,0,0,1,2,0,0,0,0,3,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,149,            final double factor = FastMath.sqrt(covMatEigenvalues[row]);,0,0,0,2,4,0,0,0,0,6,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0,0,0,1,2,0,10,0,0,10,42,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,2,0,0,1,2,0,6,0,0,9,56,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0,0,0,0,1,0,4,0,0,4,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,41,                                                   int n) {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,8,0,0,0,0,1,0,0,0,11,13,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,4,0,0,0,0,0,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },2,0,0,0,1,0,0,0,0,3,1,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,4,0,0,2,5,3,0,0,0,8,51,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,0,0,0,0,0,0,0,0,0,0,46,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,0,0,0,3,6,0,0,0,0,9,57,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,0,0,0,4,9,0,0,0,0,13,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,0,0,0,1,2,0,0,0,0,3,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",0,0,0,1,2,0,0,0,0,3,27,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,4,0,0,3,6,0,0,0,0,5,82,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },12,6,1,0,1,0,0,0,0,36,1,1,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",14,2,0,7,14,0,6,0,0,23,83,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },4,0,0,0,1,0,0,0,0,4,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,8,1,1,1,2,1,0,0,0,15,33,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,12,1,1,2,4,1,0,0,0,21,34,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,2,0,0,2,4,1,0,8,0,11,34,2,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,0,0,0,4,8,0,0,0,0,12,71,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,10,5,1,3,6,4,4,0,0,32,49,1,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,97,        final int z3 = z1      ^ z2;,0,0,0,0,0,0,0,0,0,0,28,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,20,10,0,6,12,0,0,0,0,30,72,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,4,1,1,1,2,0,0,0,0,10,18,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,2,0,0,1,2,0,0,0,0,2,26,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,2,1,0,2,4,0,0,0,0,3,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,4,0,0,1,2,1,10,0,0,15,26,0,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,101,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,0,6,0,0,6,33,5,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,103,            final double x = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,104,            final double y = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,105,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,106,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,0,0,2,4,1,0,0,0,3,58,2,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,107,            random       = r * FastMath.cos(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,108,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,109,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,111,            random = nextGaussian;,6,0,0,0,0,0,0,0,0,7,22,3,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,112,            nextGaussian = Double.NaN;,0,0,1,0,0,0,2,0,0,5,26,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,115,        return random;,8,2,0,0,0,4,8,0,0,22,14,1,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2274,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2328,"                return cosQ(xa, xb);",2,0,0,1,2,1,0,0,0,2,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2293,        int quadrant = 0;,8,1,0,0,0,4,0,0,0,13,17,1,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2296,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2297,        if (x < 0) {,6,0,0,1,3,0,0,2,0,8,12,7,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2306,        double xb = 0;,8,0,0,0,0,0,2,10,0,20,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2307,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2326,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1822,            c = a + t;,6,1,0,0,0,3,0,0,0,10,10,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1823,            d = -(c - a - t);,4,0,0,1,2,0,0,0,0,4,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1824,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,55,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,0,0,0,3,26,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0,0,0,1,2,0,0,0,0,3,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,            this.f = f;,0,0,0,0,0,0,0,0,0,0,11,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },6,0,1,0,1,0,0,0,0,9,1,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,10,1,1,3,6,1,8,0,0,26,51,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,2,0,1,2,4,0,4,0,0,11,26,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,6,2,1,2,4,1,10,0,0,24,31,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },8,3,0,0,1,0,0,0,0,11,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,        if (optimizer == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,        return weight;,0,0,0,0,0,1,0,0,0,1,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,",0,0,0,0,1,1,0,0,0,2,32,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",12,1,0,2,4,0,4,2,0,19,58,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },2,0,0,0,1,3,0,0,0,5,1,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",2,2,0,1,3,0,6,0,0,10,83,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,        this.weight = weight;,2,0,0,0,0,0,0,0,0,2,21,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,        this.x      = x;,2,1,0,0,0,0,12,4,0,19,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,52,        this.y      = y;,0,0,0,0,0,0,0,0,0,0,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {,6,0,0,1,3,2,0,2,0,10,79,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,        this.oldOptimizer = optimizer;,12,4,0,0,0,0,0,0,0,17,30,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,        this.optimizer    = null;,2,0,0,0,0,0,0,0,0,3,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,72,        observations      = new ArrayList<WeightedObservedPoint>();,0,0,0,1,2,0,0,0,0,3,59,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,158,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0,0,0,1,2,0,0,0,0,3,51,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,    },2,0,0,0,1,0,4,2,0,8,1,7,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,        super(null); // No custom convergence criterion.,8,3,1,1,2,0,4,4,0,24,48,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,        this.initialStepBoundFactor = initialStepBoundFactor;,4,0,1,0,0,0,0,0,0,10,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,272,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,273,        this.parRelativeTolerance = parRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,49,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,        this.orthoTolerance = orthoTolerance;,8,1,0,0,0,0,0,0,0,10,37,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,275,        this.qrRankingThreshold = threshold;,0,0,0,0,0,0,0,0,0,0,36,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,276,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);",2,0,1,1,2,0,0,0,0,7,41,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,402,"                final double mji = matrix.getEntry(j, i);",0,0,0,1,2,0,0,0,0,3,41,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,403,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3532,        if (a > b) {,0,0,1,1,3,0,0,0,0,5,12,6,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3535,        if (a < b) {,16,3,0,1,3,0,8,0,0,28,12,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3539,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3544,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3545,        if (bits == 0x8000000000000000L) {,6,1,0,1,3,1,0,0,0,8,34,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3548,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,56,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,0,0,0,1,2,0,0,0,0,3,95,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,0,0,0,6,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,13,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,85,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,1,0,2,4,0,0,0,0,3,104,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,391,        final int rows = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,392,        if (rows != matrix.getColumnDimension()) {,0,0,0,2,5,0,0,0,0,7,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,399,        for (int i = 0; i < rows; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,413,        return true;,10,1,0,0,0,1,0,0,0,13,12,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,440,"        return isSymmetricInternal(matrix, eps, false);",0,0,0,1,2,1,6,0,0,7,47,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,455,"        checkRowIndex(m, row);",6,0,0,1,2,1,0,0,0,7,22,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,456,"        checkColumnIndex(m, column);",10,2,0,1,2,0,6,0,0,19,28,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,457,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,468,        if (row < 0 ||,0,2,1,0,1,0,0,0,0,6,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,484,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,488,    },2,0,0,0,1,0,0,0,0,2,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",18,1,0,0,1,0,0,0,0,20,76,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",0,0,0,0,1,0,0,0,0,1,73,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,133,                            final NumberFormat format) {,0,0,0,0,2,0,0,0,0,2,28,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,3,4,0,0,18,35,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,139,        this.columnSeparator   = columnSeparator;,0,0,0,0,0,0,0,0,0,0,41,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,207,        return format;,0,0,0,0,0,1,0,0,0,1,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,67,    public DiagonalMatrix(final double[] d) {,0,0,0,2,5,0,0,0,0,7,41,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,68,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,107,        return new DiagonalMatrix(data);,2,0,0,1,2,1,0,2,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,203,        final int dim = getRowDimension();,0,0,0,1,2,0,0,0,0,3,34,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,204,        final double[][] out = new double[dim][dim];,2,0,1,4,8,1,0,0,0,7,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,237,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,14,0,0,19,48,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,238,        return row == column ? data[row] : 0;,0,0,0,1,2,1,0,0,0,4,37,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,290,        return data == null ? 0 : data.length;,0,0,0,0,0,1,0,0,0,1,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,296,        return getRowDimension();,0,0,0,1,2,1,2,0,0,2,25,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,6,0,0,1,2,3,4,0,0,13,77,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,115,    private static final double LN_QUICK_COEF[][] = {,0,0,1,2,5,0,0,0,0,5,49,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,128,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,179,    private static final double COSINE_TABLE_A[] =,6,0,0,1,2,3,0,2,0,11,46,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,277,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,2,0,11,54,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,96,        maximalCount = max;,6,0,0,0,0,1,0,0,0,8,19,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,97,    },0,0,1,0,1,0,0,0,0,9,1,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,164,        count = 0;,4,0,0,0,0,0,0,0,0,6,10,0,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,43,        return getDefaultNumberFormat(Locale.getDefault());,2,1,0,2,4,1,6,0,0,9,51,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,264,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,267,    },2,0,0,0,1,1,0,6,0,10,1,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,43,    public Weight(double[] weight) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,44,        weightMatrix = new DiagonalMatrix(weight);,6,0,0,1,2,3,0,2,0,12,42,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,45,    },2,0,0,0,1,0,0,0,0,2,1,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,67,        return weightMatrix.copy();,0,0,0,1,2,1,4,0,0,4,27,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,37,    public InitialGuess(double[] startPoint) {,0,0,0,2,5,0,0,0,0,7,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,38,        init = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,26,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,39,    },0,0,0,0,1,0,4,0,0,4,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,47,        return init.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,231,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,232,        evaluations.resetCount();,6,0,0,1,2,0,4,0,0,11,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,233,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,235,        parseOptimizationData(optData);,0,0,0,1,2,0,4,0,0,4,31,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,237,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,239,        setUp();,0,0,0,1,2,0,2,0,0,2,8,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,260,        return weightMatrix.copy();,0,0,0,1,2,1,0,0,0,4,27,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,321,        final int dim = target.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,322,        weight = new double[dim];,2,0,1,1,2,0,0,0,0,5,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,323,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,324,"            weight[i] = weightMatrix.getEntry(i, i);",0,0,1,2,4,0,8,0,0,13,40,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,326,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,342,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,343,            if (data instanceof Target) {,0,0,0,1,3,0,0,0,0,4,29,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,344,                target = ((Target) data).getTarget();,6,0,0,3,6,0,2,2,0,11,37,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,345,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,347,            if (data instanceof Weight) {,10,1,0,1,3,0,0,2,0,14,29,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,348,                weightMatrix = ((Weight) data).getWeight();,14,1,0,3,6,0,2,2,0,22,43,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,349,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,351,            if (data instanceof InitialGuess) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,352,                start = ((InitialGuess) data).getInitialGuess();,4,0,0,3,6,0,2,2,0,9,48,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,353,                continue;,6,0,0,0,0,2,0,2,0,11,9,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,356,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,365,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,39,    public Target(double[] observations) {,6,0,1,2,5,1,4,0,0,16,38,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,40,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,49,        return target.clone();,0,0,0,1,2,1,4,0,0,4,22,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,496,"        return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);",6,0,0,2,4,1,16,0,0,22,109,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,502,        super.setUp();,0,0,0,1,2,0,0,0,0,3,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,505,        jacobianEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,24,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,508,        weightMatrixSqrt = squareRoot(getWeight());,0,0,0,2,4,0,0,0,0,6,43,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,562,            final EigenDecomposition dec = new EigenDecomposition(m);,0,0,0,1,2,0,0,0,0,3,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,0,0,0,1,3,1,6,2,0,8,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,0,0,0,1,3,1,0,0,0,5,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,2,1,0,1,3,1,12,2,0,19,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,4,0,0,1,3,1,6,2,0,12,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,63,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,2,0,2,32,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,53,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,62,"        this(max,",0,0,0,0,1,0,0,0,0,1,9,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,80,                       MaxCountExceededCallback cb) {,0,0,0,0,2,0,0,0,0,2,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,41,    private int count = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,81,        if (cb == null){,0,0,0,1,3,0,0,0,0,4,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,85,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,0,0,2,4,0,0,0,0,4,65,7,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,79,    protected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {,4,0,0,1,3,1,0,4,0,9,101,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,51,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,80,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,134,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,135,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,630,            super(Fraction.ZERO);,4,0,0,1,2,0,0,0,0,4,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,631,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,637,            data = new double[rows][columns];,4,0,1,2,4,1,0,2,0,12,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,638,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,643,            data[row][column] = value.doubleValue();,0,0,1,3,6,0,4,0,0,11,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,644,        },6,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,652,"            return new Array2DRowRealMatrix(data, false);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,625,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,2,0,0,0,1,2,0,4,0,8,100,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0,0,0,0,1,0,0,0,0,1,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,54,        return getWrongDimension(0);,4,0,0,1,2,4,6,2,0,15,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,60,        return getExpectedDimension(0);,0,0,0,1,2,1,2,0,0,2,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,66,        return getWrongDimension(1);,0,0,0,1,2,1,2,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,72,        return getExpectedDimension(1);,2,0,0,1,2,1,2,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,59,"        super(specific, wrong, expected);",8,1,0,1,2,0,0,0,0,9,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,60,        this.wrong = wrong.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,61,        this.expected = expected.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,68,        return wrong.clone();,10,1,0,1,2,1,0,0,0,12,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,0,0,0,0,1,0,0,0,0,1,72,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,55,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,62,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,4,19,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,0,0,0,0,7,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,3,0,0,0,5,57,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,28,1,0,1,3,4,0,4,0,39,55,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,268,                final int qStart = jBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,8,2,0,0,0,1,0,0,0,11,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,271,                blocks[blockIndex] = new double[iHeight * jWidth];,0,0,0,2,4,0,0,0,0,6,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,272,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,159,        double[] target  = new double[observations.size()];,0,0,0,3,6,0,0,0,0,9,51,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,6,1,0,3,6,0,0,0,0,7,51,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,162,        for (WeightedObservedPoint point : observations) {,0,0,0,1,3,0,0,0,0,4,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,6,1,0,2,4,3,4,0,0,14,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,164,            weights[i] = point.getWeight();,0,0,0,2,4,0,0,0,0,6,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,165,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,166,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,169,        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);,0,0,0,1,2,0,0,0,0,3,73,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,8,1,0,0,0,1,0,2,0,13,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,4,0,0,0,0,1,6,0,0,11,14,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,6,0,0,1,4,4,0,4,0,14,67,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));",8,0,1,2,4,1,6,2,0,20,58,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,75,        return y;,14,3,1,0,0,1,0,0,0,22,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,45,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",0,0,0,1,3,0,0,0,0,4,83,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,46,        this.weight = weight;,4,3,0,0,0,0,0,0,0,7,21,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,47,        this.x      = x;,0,0,1,0,0,0,2,0,0,7,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,48,        this.y      = y;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,63,    public CurveFitter(final MultivariateVectorOptimizer optimizer) {,4,0,0,1,3,2,0,2,0,8,65,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,64,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,65,        observations = new ArrayList<WeightedObservedPoint>();,4,1,0,1,2,0,8,4,0,18,54,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,156,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0,0,0,1,2,0,0,0,0,3,51,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,157,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,268,        super(null); // No custom convergence criterion.,0,0,0,1,2,0,0,0,0,3,48,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,269,        this.initialStepBoundFactor = initialStepBoundFactor;,12,2,0,0,0,0,0,0,0,15,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,270,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,271,        this.parRelativeTolerance = parRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,49,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,272,        this.orthoTolerance = orthoTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,273,        this.qrRankingThreshold = threshold;,0,0,0,0,0,0,0,0,0,0,36,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,274,    },10,4,0,0,1,1,0,0,0,15,1,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,35,    public ModelFunctionJacobian(MultivariateMatrixFunction j) {,4,0,0,1,3,1,0,2,0,7,60,2,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,36,        jacobian = j;,16,5,0,0,0,0,0,0,0,22,13,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,37,    },2,0,0,0,1,0,0,0,0,3,1,6,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,35,    public ModelFunction(MultivariateVectorFunction m) {,4,0,0,1,3,1,0,2,0,7,52,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,36,        model = m;,4,0,0,0,0,0,0,0,0,5,10,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,3421,        return (a <= b) ? a : b;,14,2,0,1,2,4,4,0,0,23,24,1,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,267,    },2,2,0,0,1,0,0,0,0,4,1,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,43,        return getDefaultNumberFormat(Locale.getDefault());,20,8,0,2,4,2,6,0,0,35,51,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,41,    public Weight(double[] weight) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,42,        final int dim = weight.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,38,    public Target(double[] observations) {,2,0,0,2,5,0,12,2,0,17,38,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,39,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,35,    public MaxEval(int max) {,4,0,0,1,3,1,0,0,0,5,25,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,36,        if (max <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,40,        maxEval = max;,4,0,0,0,0,0,0,0,0,5,14,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,41,    },4,1,0,0,1,0,10,2,0,20,1,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",16,1,0,0,1,0,0,0,0,17,73,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,81,        return (rows * columns <= 4096) ?,0,0,0,1,2,1,0,0,0,4,33,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,8,0,0,8,44,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,237,    private static final double TANGENT_TABLE_B[] =,4,0,0,1,2,4,2,0,0,10,47,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,56,        return nf;,0,1,1,0,0,1,6,0,0,14,10,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,67,        throws NotStrictlyPositiveException {,0,0,1,0,1,0,0,0,0,7,37,9,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,71,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,74,    },0,0,0,0,1,0,0,0,0,1,1,7,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,51,    },2,0,0,0,1,3,0,0,0,5,1,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,14,53,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0,0,0,0,1,0,0,0,0,1,76,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,101,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,133,                            final NumberFormat format) {,0,0,0,0,2,0,0,0,0,2,28,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,138,        this.rowSeparator      = rowSeparator;,0,0,0,0,0,0,0,0,0,0,38,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,140,        this.format            = format;,14,3,0,0,0,0,0,0,0,19,32,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,143,    },0,0,1,0,1,0,4,0,0,6,1,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,2,0,0,2,4,1,6,2,0,10,76,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,48,        super(checker);,6,0,0,1,2,0,0,2,0,9,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,49,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,48,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,47,    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {,0,0,0,1,3,0,0,0,0,4,59,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,48,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,50,"        evaluations = new Incrementor(0, new MaxEvalCallback());",0,0,0,2,4,0,0,0,0,6,56,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,80,                       MaxCountExceededCallback cb) {,2,0,0,0,2,0,0,2,0,4,30,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,41,    private int count = 0;,2,0,0,0,0,1,0,0,0,3,22,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,81,        if (cb == null){,2,1,0,1,3,0,0,0,0,3,16,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,85,        maxCountCallback = cb;,0,0,0,0,0,0,0,0,0,0,22,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,191,    private static class MaxEvalCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,53,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01111,1,1,-1
