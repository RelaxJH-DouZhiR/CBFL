project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/linear/AbstractRealVector,49,67,    },1.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,1.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,1.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,1.0,1,,0
org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,1.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,1.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",1.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,0.5,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,0.5,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0.5,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0.5,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0.5,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,0.33333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,0.33333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",0.33333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,0.33333,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,0.33333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,138,"        System.arraycopy(source.values, 0, values, 0, length);",0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,140,"        System.arraycopy(source.states, 0, states, 0, length);",0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,144,        count = source.count;,0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,145,    },0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,75,        virtualSize = dimension;,0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,76,        entries = new OpenIntToDoubleHashMap(0.0);,0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,77,        this.epsilon = epsilon;,0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,78,    },0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,180,        virtualSize = v.getDimension();,0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,182,        epsilon = v.epsilon;,0.25,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,183,    },0.25,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,0.16667,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,0.16667,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,0.16667,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,208,        return entries;,0.16667,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,663,        checkIndex(index);,0.16667,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,664,        if (!isDefaultValue(value)) {,0.16667,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",0.16667,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,669,    },0.16667,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,241,        return new Iterator();,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,40,public class OpenIntToDoubleHashMap implements Serializable {,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,498,        private Iterator() {,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,501,            referenceCount = count;,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,504,            next = -1;,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,506,                advance();,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,509,            },0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,511,        },0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,484,    public class Iterator {,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,518,            return next >= 0;,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,546,            if (referenceCount != count) {,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,549,            if (current < 0) {,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,552,            return values[current];,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,563,            if (referenceCount != count) {,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,568,            current = next;,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,572,                while (states[++next] != FULL) {,0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,580,            },0.14286,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,582,        },0.14286,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,479,        checkIndex(index);,0.125,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,480,        return entries.get(index);,0.125,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,180,        final int hash  = hashOf(key);,0.11111,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,181,        int index = hash & mask;,0.11111,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,182,"        if (containsKey(key, index)) {",0.11111,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,385,        return (key != 0 || states[index] == FULL) && keys[index] == key;,0.11111,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,76,        if (index < 0 ||,0.11111,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,81,    },0.11111,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,103,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,104,    },0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,120,                                  final double missingEntries) {,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,121,        final int capacity = computeCapacity(expectedSize);,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,122,        keys   = new int[capacity];,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,123,        values = new double[capacity];,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,124,        states = new byte[capacity];,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,125,        this.missingEntries = missingEntries;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,126,        mask   = capacity - 1;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,127,    },0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,153,        if (expectedSize == 0) {,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,156,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,157,        final int powerOfTwo = Integer.highestOneBit(capacity);,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,158,        if (powerOfTwo == capacity) {,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,159,            return capacity;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,259,"        return findInsertionIndex(keys, states, key, mask);",0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,272,        final int hash = hashOf(key);,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,273,        int index = hash & mask;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,274,        if (states[index] == FREE) {,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,275,            return index;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,410,        int index = findInsertionIndex(key);,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,411,        double previous = missingEntries;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,412,        boolean newMapping = true;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,413,        if (index < 0) {,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,418,        keys[index]   = key;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,419,        states[index] = FULL;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,420,        values[index] = value;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,421,        if (newMapping) {,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,422,            ++size;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,423,            if (shouldGrowTable()) {,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,426,            ++count;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,428,        return previous;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,469,        return size > (mask + 1) * LOAD_FACTOR;,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,478,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,0.08333,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,479,        return h ^ (h >>> 7) ^ (h >>> 4);,0.08333,0,,0
org/apache/commons/math/util/FastMath,49,3757,            return y;,0.08333,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,220,        return FastMath.abs(value) < epsilon;,0.08333,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,422,        return virtualSize;,0.08333,0,,0
org/apache/commons/math/util/FastMath,49,3724,        if (x != x) { // NaN,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3728,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3732,        y = (long) x;,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3733,        if (x < 0 && y != x) {,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3737,        if (y == 0) {,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3741,        return y;,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3751,        if (x != x) { // NaN,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3755,        y = floor(x);,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3756,        if (y == x) {,0.07692,0,,0
org/apache/commons/math/util/FastMath,49,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.07143,0,,0
org/apache/commons/math/util/FastMath,49,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,98,    private static final double FACT[] = new double[20];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,101,    private static final double LN_MANT[][] = new double[1024][];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,110,    private static final double LN_SPLIT_COEF[][] = {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,130,    private static final double LN_QUICK_COEF[][] = {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,143,    private static final double LN_HI_PREC_COEF[][] = {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,153,    private static final double SINE_TABLE_A[] = new double[14];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,156,    private static final double SINE_TABLE_B[] = new double[14];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,159,    private static final double COSINE_TABLE_A[] = new double[14];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,162,    private static final double COSINE_TABLE_B[] = new double[14];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,171,    private static final long RECIP_2PI[] = new long[] {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,192,    private static final long PI_O_4_BITS[] = new long[] {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,233,        FACT[0] = 1.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,234,        for (i = 1; i < FACT.length; i++) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,235,            FACT[i] = FACT[i-1] * i;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,238,        double tmp[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,239,        double recip[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,242,        for (i = 0; i < 750; i++) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,243,"            expint(i, tmp);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,247,            if (i != 0) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,249,"                splitReciprocal(tmp, recip);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,251,                EXP_INT_TABLE_B[750-i] = recip[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,257,"            slowexp(i/1024.0, tmp);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,263,        for (i = 0; i < LN_MANT.length; i++) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,265,            LN_MANT[i] = slowLog(d);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,269,        buildSinCosTables();,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,270,    },0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1012,        final double xs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1013,        final double ys[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1014,        final double facts[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1015,        final double as[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1016,"        split(x, xs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1017,        ys[0] = ys[1] = 0.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1019,        for (int i = 19; i >= 0; i--) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1020,"            splitMult(xs, ys, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1021,            ys[0] = as[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1022,            ys[1] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1024,"            split(FACT[i], as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1025,"            splitReciprocal(as, facts);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1027,"            splitAdd(ys, facts, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1028,            ys[0] = as[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1029,            ys[1] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1032,        if (result != null) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1033,            result[0] = ys[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1034,            result[1] = ys[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1037,        return ys[0] + ys[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1046,        if (d < 8e298 && d > -8e298) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1047,            final double a = d * HEX_40000000;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1048,            split[0] = (d + a) - a;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1049,            split[1] = d - split[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1050,        } else {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1055,    },0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1062,        final double c = a[0] + a[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1063,        final double d = -(c - a[0] - a[1]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1065,        if (c < 8e298 && c > -8e298) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1066,            double z = c * HEX_40000000;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1067,            a[0] = (c + z) - z;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1068,            a[1] = c - a[0] + d;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1069,        } else {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1070,            double z = c * 9.31322574615478515625E-10;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1071,            a[0] = (c + z - c) * HEX_40000000;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1072,            a[1] = c - a[0] + d;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1074,    },0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1082,        ans[0] = a[0] * b[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1086,        resplit(ans);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1087,    },0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1095,        ans[0] = a[0] + b[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1096,        ans[1] = a[1] + b[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1098,        resplit(ans);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1099,    },0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1120,        final double b = 1.0/4194304.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1121,        final double a = 1.0 - b;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1123,        if (in[0] == 0.0) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1128,        result[0] = a / in[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1132,            result[1] = 0.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1136,        resplit(result);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1138,        for (int i = 0; i < 2; i++) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1143,            err = err * (result[0] + result[1]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1145,            result[1] += err;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1147,    },0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1155,        final double xs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1156,        final double ys[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1157,        final double zs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1160,"        split(a[0], xs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1161,"        split(b[0], ys);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1162,"        splitMult(xs, ys, zs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1164,        result[0] = zs[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1165,        result[1] = zs[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1168,"        split(b[1], ys);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1169,"        splitMult(xs, ys, zs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1171,        double tmp = result[0] + zs[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1173,        result[0] = tmp;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1174,        tmp = result[0] + zs[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1176,        result[0] = tmp;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1179,"        split(a[1], xs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1180,"        split(b[0], ys);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1181,"        splitMult(xs, ys, zs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1183,        tmp = result[0] + zs[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1185,        result[0] = tmp;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1186,        tmp = result[0] + zs[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1188,        result[0] = tmp;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1191,"        split(a[1], xs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1192,"        split(b[1], ys);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1193,"        splitMult(xs, ys, zs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1195,        tmp = result[0] + zs[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1197,        result[0] = tmp;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1198,        tmp = result[0] + zs[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1200,        result[0] = tmp;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1201,    },0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1210,        final double xs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1211,        final double as[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1212,        final double ys[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1221,        xs[0] = 2.718281828459045;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1222,        xs[1] = 1.4456468917292502E-16;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1224,"        split(1.0, ys);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1226,        while (p > 0) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1227,            if ((p & 1) != 0) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1228,"                quadMult(ys, xs, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1229,                ys[0] = as[0]; ys[1] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1232,"            quadMult(xs, xs, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1233,            xs[0] = as[0]; xs[1] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1235,            p >>= 1;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1238,        if (result != null) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1239,            result[0] = ys[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1240,            result[1] = ys[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1242,            resplit(result);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1245,        return ys[0] + ys[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1743,        double x[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1744,        double x2[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1745,        double y[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1746,        double a[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1748,"        split(xi, x);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1751,        x[0] += 1.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1752,        resplit(x);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1753,"        splitReciprocal(x, a);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1754,        x[0] -= 2.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1755,        resplit(x);,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1756,"        splitMult(x, a, y);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1757,        x[0] = y[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1758,        x[1] = y[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1761,"        splitMult(x, x, x2);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1767,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1768,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1770,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1771,"            splitMult(y, x2, a);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1772,            y[0] = a[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1773,            y[1] = a[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1775,            y[0] = a[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1776,            y[1] = a[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1779,"        splitMult(y, x, a);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1780,        y[0] = a[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1781,        y[1] = a[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1783,        return y;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1793,        final double xs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1794,        final double ys[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1795,        final double facts[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1796,        final double as[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1797,"        split(x, xs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1798,        ys[0] = ys[1] = 0.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1800,        for (int i = 19; i >= 0; i--) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1801,"            splitMult(xs, ys, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1802,            ys[0] = as[0]; ys[1] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1804,            if ( (i & 1) == 0) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1805,                continue;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1808,"            split(FACT[i], as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1809,"            splitReciprocal(as, facts);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1811,            if ( (i & 2) != 0 ) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1812,                facts[0] = -facts[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1813,                facts[1] = -facts[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1816,"            splitAdd(ys, facts, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1817,            ys[0] = as[0]; ys[1] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1820,        if (result != null) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1821,            result[0] = ys[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1822,            result[1] = ys[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1825,        return ys[0] + ys[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1836,        final double xs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1837,        final double ys[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1838,        final double facts[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1839,        final double as[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1840,"        split(x, xs);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1841,        ys[0] = ys[1] = 0.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1843,        for (int i = 19; i >= 0; i--) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1844,"            splitMult(xs, ys, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1845,            ys[0] = as[0]; ys[1] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1847,            if ( (i & 1) != 0) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1848,                continue;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1851,"            split(FACT[i], as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1852,"            splitReciprocal(as, facts);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1854,            if ( (i & 2) != 0 ) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1855,                facts[0] = -facts[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1856,                facts[1] = -facts[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1859,"            splitAdd(ys, facts, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1860,            ys[0] = as[0]; ys[1] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1863,        if (result != null) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1864,            result[0] = ys[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1865,            result[1] = ys[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1868,        return ys[0] + ys[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1874,        final double result[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1877,        for (int i = 0; i < 7; i++) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1878,            double x = i / 8.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1880,"            slowSin(x, result);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1881,            SINE_TABLE_A[i] = result[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1882,            SINE_TABLE_B[i] = result[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1884,"            slowCos(x, result);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1885,            COSINE_TABLE_A[i] = result[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1886,            COSINE_TABLE_B[i] = result[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1890,        for (int i = 7; i < 14; i++) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1891,            double xs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1892,            double ys[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1893,            double as[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1894,            double bs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1895,            double temps[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1897,            if ( (i & 1) == 0) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1899,                xs[0] = SINE_TABLE_A[i/2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1900,                xs[1] = SINE_TABLE_B[i/2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1901,                ys[0] = COSINE_TABLE_A[i/2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1902,                ys[1] = COSINE_TABLE_B[i/2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1905,"                splitMult(xs, ys, result);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1906,                SINE_TABLE_A[i] = result[0] * 2.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1907,                SINE_TABLE_B[i] = result[1] * 2.0;,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1910,"                splitMult(ys, ys, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1911,"                splitMult(xs, xs, temps);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1912,                temps[0] = -temps[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1913,                temps[1] = -temps[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1914,"                splitAdd(as, temps, result);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1915,                COSINE_TABLE_A[i] = result[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1916,                COSINE_TABLE_B[i] = result[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1918,                xs[0] = SINE_TABLE_A[i/2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1919,                xs[1] = SINE_TABLE_B[i/2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1920,                ys[0] = COSINE_TABLE_A[i/2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1921,                ys[1] = COSINE_TABLE_B[i/2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1922,                as[0] = SINE_TABLE_A[i/2+1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1923,                as[1] = SINE_TABLE_B[i/2+1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1924,                bs[0] = COSINE_TABLE_A[i/2+1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1925,                bs[1] = COSINE_TABLE_B[i/2+1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1928,"                splitMult(xs, bs, temps);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1929,"                splitMult(ys, as, result);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1930,"                splitAdd(result, temps, result);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1931,                SINE_TABLE_A[i] = result[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1932,                SINE_TABLE_B[i] = result[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1935,"                splitMult(ys, bs, result);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1936,"                splitMult(xs, as, temps);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1937,                temps[0] = -temps[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1938,                temps[1] = -temps[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1939,"                splitAdd(result, temps, result);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1940,                COSINE_TABLE_A[i] = result[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1941,                COSINE_TABLE_B[i] = result[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1946,        for (int i = 0; i < 14; i++) {,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1947,            double xs[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1948,            double ys[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1949,            double as[] = new double[2];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1951,            as[0] = COSINE_TABLE_A[i];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1952,            as[1] = COSINE_TABLE_B[i];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1954,"            splitReciprocal(as, ys);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1956,            xs[0] = SINE_TABLE_A[i];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1957,            xs[1] = SINE_TABLE_B[i];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1959,"            splitMult(xs, ys, as);",0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1961,            TANGENT_TABLE_A[i] = as[0];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1962,            TANGENT_TABLE_B[i] = as[1];,0.05263,0,,0
org/apache/commons/math/util/FastMath,49,1965,    },0.05263,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,42,public abstract class AbstractRealVector implements RealVector {,0.02941,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,577,    protected class SparseEntryIterator implements Iterator<Entry> {,0.02941,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,95,"        this(DEFAULT_EXPECTED_SIZE, Double.NaN);",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,96,    },0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,111,"        this(expectedSize, Double.NaN);",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,112,    },0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,154,            return 1;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,161,        return nextPowerOfTwo(capacity);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,170,        return Integer.highestOneBit(i) << 1;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,183,            return values[index];,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,190,        int j = index;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,191,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,192,"            j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,193,            index = j & mask;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,194,"            if (containsKey(key, index)) {",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,195,                return values[index];,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,199,        return missingEntries;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,216,        if (states[index] == FREE) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,217,            return false;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,220,        int j = index;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,221,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,222,"            j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,223,            index = j & mask;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,224,"            if (containsKey(key, index)) {",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,225,                return true;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,229,        return false;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,250,        return hash & 0x7fffffff;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,276,        } else if (states[index] == FULL && keys[index] == key) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,277,            return changeIndexSign(index);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,280,        int perturb = perturb(hash);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,281,        int j = index;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,282,        if (states[index] == FULL) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,284,"                j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,285,                index = j & mask;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,286,                perturb >>= PERTURB_SHIFT;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,288,                if (states[index] != FULL || keys[index] == key) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,289,                    break;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,294,        if (states[index] == FREE) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,295,            return index;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,296,        } else if (states[index] == FULL) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,299,            return changeIndexSign(index);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,302,        final int firstRemoved = index;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,304,"            j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,305,            index = j & mask;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,307,            if (states[index] == FREE) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,308,                return firstRemoved;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,309,            } else if (states[index] == FULL && keys[index] == key) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,310,                return changeIndexSign(index);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,313,            perturb >>= PERTURB_SHIFT;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,326,        return (j << 2) + j + perturb + 1;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,335,        return -index - 1;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,343,        return size;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,360,        if (states[index] == FREE) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,361,            return missingEntries;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,364,        int j = index;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,365,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,366,"            j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,367,            index = j & mask;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,368,"            if (containsKey(key, index)) {",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,369,                return doRemove(index);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,373,        return missingEntries;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,414,            index = changeIndexSign(index);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,415,            previous = values[index];,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,416,            newMapping = false;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,424,                growTable();,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,437,        final int oldLength      = states.length;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,438,        final int[] oldKeys      = keys;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,439,        final double[] oldValues = values;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,440,        final byte[] oldStates   = states;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,442,        final int newLength = RESIZE_MULTIPLIER * oldLength;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,443,        final int[] newKeys = new int[newLength];,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,444,        final double[] newValues = new double[newLength];,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,445,        final byte[] newStates = new byte[newLength];,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,446,        final int newMask = newLength - 1;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,447,        for (int i = 0; i < oldLength; ++i) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,448,            if (oldStates[i] == FULL) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,449,                final int key = oldKeys[i];,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,450,"                final int index = findInsertionIndex(newKeys, newStates, key, newMask);",0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,451,                newKeys[index]   = key;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,452,                newValues[index] = oldValues[i];,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,453,                newStates[index] = FULL;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,457,        mask   = newMask;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,458,        keys   = newKeys;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,459,        values = newValues;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,460,        states = newStates;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,462,    },0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,595,        stream.defaultReadObject();,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,596,        count = 0;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,597,    },0.0,0,,0
org/apache/commons/math/util/FastMath,49,275,    private FastMath() {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,276,    },0.0,0,,0
org/apache/commons/math/util/FastMath,49,288,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,0.0,0,,0
org/apache/commons/math/util/FastMath,49,289,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math/util/FastMath,49,291,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,292,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math/util/FastMath,49,293,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,302,        return Math.sqrt(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,310,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,311,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,314,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,315,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,318,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,319,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,322,      double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,323,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,324,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,326,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,328,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,329,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,331,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,332,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,333,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,336,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,337,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,338,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,339,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,342,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,344,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,347,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,348,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,349,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,350,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,351,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,352,      ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,354,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,355,      result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,356,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,364,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,365,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,366,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,369,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,370,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,373,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,374,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,377,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,378,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,381,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,382,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,383,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,388,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,389,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,390,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,392,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,393,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,395,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,396,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,397,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,400,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,401,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,402,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,403,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,406,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,408,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,410,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,411,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,414,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,415,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,416,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,417,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,418,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,419,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,421,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,422,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,423,      },0.0,0,,0
org/apache/commons/math/util/FastMath,49,425,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,426,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,428,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,429,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,432,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,433,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,434,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,435,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,436,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,437,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,438,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,440,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,441,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,442,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,444,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,447,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,49,448,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,49,451,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,452,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,453,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,454,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,455,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,456,          ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,458,          result = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,459,          result *= 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,462,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,463,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,466,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,474,      boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,476,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,477,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,480,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,481,          return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,484,      if (x < -20) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,485,          return -1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,488,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,489,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,492,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,493,          x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,494,          negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,498,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,499,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,501,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,503,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,504,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,507,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,508,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,509,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,510,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,511,          na = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,514,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,515,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,516,          temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,517,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,518,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,520,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,521,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,522,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,525,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,526,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,527,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,528,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,531,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,534,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,536,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,538,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,539,      },0.0,0,,0
org/apache/commons/math/util/FastMath,49,541,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,543,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,545,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,546,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,549,          double na = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,550,          double nb = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,553,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,554,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,555,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,556,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,557,          da = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,559,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,560,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,561,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,564,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,565,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,566,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,567,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,570,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,573,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,575,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,577,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,580,      if (negate) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,581,          result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,584,      return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,592,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,601,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,602,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,603,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,604,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,608,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,609,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,611,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,612,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,613,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,614,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,615,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,616,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,617,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,619,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,623,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,633,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,634,        if (a < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,635,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,636,            a = -a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,640,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,641,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,643,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,644,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,645,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,646,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,647,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,648,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,649,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,651,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,655,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,665,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,49,674,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math/util/FastMath,49,682,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,690,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,698,        return Math.random();,0.0,0,,0
org/apache/commons/math/util/FastMath,49,722,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,741,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,742,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,744,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,745,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,746,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,747,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,749,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,752,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,754,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math/util/FastMath,49,755,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,756,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,757,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,759,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,762,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,764,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math/util/FastMath,49,765,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,766,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,767,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,769,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,772,            intVal++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,774,            intPartA = EXP_INT_TABLE_A[750-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,775,            intPartB = EXP_INT_TABLE_B[750-intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,777,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,779,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,781,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,782,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,783,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,784,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,786,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,789,            intPartA = EXP_INT_TABLE_A[750+intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,790,            intPartB = EXP_INT_TABLE_B[750+intVal];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,797,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,798,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,799,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,805,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,814,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,815,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,816,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,817,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,818,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,825,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,826,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,832,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,834,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,835,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,837,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,840,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,842,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,843,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,846,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,854,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,863,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math/util/FastMath,49,864,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,867,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,870,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,871,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,872,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,873,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,875,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,876,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,877,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,878,                return ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,885,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,887,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,888,            x = -x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,889,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,893,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,894,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,895,            double tempB = EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,897,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,898,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,899,            tempA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,901,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,902,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,903,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,905,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,910,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,911,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,912,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,913,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,914,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,915,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,917,        double za = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,918,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,919,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,920,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,922,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,923,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,924,        zb += za - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,925,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,928,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,930,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,931,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,932,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,934,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,935,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,936,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,938,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,939,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,940,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,944,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,945,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,946,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,948,        temp = ya + za;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,950,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,951,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,953,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,955,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,956,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,958,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,960,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,961,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,963,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,965,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,966,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,967,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,968,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,969,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,970,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,971,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,973,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,974,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,975,            zb = denom - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,977,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,988,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math/util/FastMath,49,989,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math/util/FastMath,49,992,            ya = -ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,993,            yb = -rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,996,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,997,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,998,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1001,        return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1051,            final double a = d * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1052,            split[0] = (d + a - d) * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1053,            split[1] = d - split[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1124,            in[0] = in[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1125,            in[1] = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1256,"        return log(x, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,1266,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1267,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1269,        long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1273,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1274,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1275,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1278,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1283,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1284,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1285,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1288,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1292,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1294,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1296,            if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1298,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1299,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1302,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1306,            bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1307,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1308,                exp--;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1309,                bits <<= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1314,        if (exp == -1 || exp == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1315,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1320,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1321,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1322,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1323,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1324,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1325,                xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1326,                xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1328,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1329,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1331,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1333,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1334,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1336,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1337,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1338,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1341,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1342,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1344,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1345,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1346,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1350,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1351,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1353,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1354,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1355,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1357,                return ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1362,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1373,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1375,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1376,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1378,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1380,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1381,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1382,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1383,            double xa = aa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1384,            double xb = ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1387,            double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1388,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1389,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1390,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1393,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1394,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1396,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1398,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1399,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1401,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1402,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1403,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1406,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1407,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1409,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1410,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1411,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1415,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1416,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1424,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1425,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1426,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1429,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1430,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1431,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1432,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1433,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1434,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1435,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1452,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1453,        double b = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1454,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1455,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1456,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1457,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1459,        c = a + lnza;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1460,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1461,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1462,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1464,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1465,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1466,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1467,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1469,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1470,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1471,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1472,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1474,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1475,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1476,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1477,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1479,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1480,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1481,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1484,        return a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1493,        if (x == -1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1494,            return x/0.0;   // -Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1497,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1498,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1501,        if (x>1e-6 || x<-1e-6) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1502,            double xpa = 1.0 + x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1503,            double xpb = -(xpa - 1.0 - x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1505,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1507,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,1508,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1509,                return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1514,            double fx1 = xpb/xpa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1516,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1517,            epsilon = epsilon * fx1;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1519,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1523,        double y = x * 0.333333333333333 - 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1524,        y = y * x + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1525,        y = y * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1527,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1535,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1537,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,1538,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1539,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1542,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1543,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1544,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1546,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1547,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1549,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1560,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1562,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1563,            return 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1566,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1567,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1571,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1572,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1573,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1575,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1577,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1578,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1581,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1582,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1585,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1586,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1590,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1591,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1593,            if (y > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1594,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1597,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1600,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1601,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1602,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1604,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1605,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1607,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1611,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1612,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1613,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1616,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1617,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1619,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1623,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1624,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1625,                return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1628,            if (y < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1629,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1630,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1631,                    return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1634,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1637,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1638,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1639,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1640,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1643,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1647,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1649,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1650,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1653,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1654,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1656,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1661,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1663,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1664,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,1667,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1669,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,1671,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1678,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1679,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1680,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1681,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1682,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1683,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1684,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1685,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1686,            yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1690,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,1691,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1692,            return lores;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1695,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1696,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1699,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1700,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1701,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1702,        lna = tmp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1705,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1706,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1708,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1709,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1711,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1712,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1713,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1714,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1715,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1716,        z = z * lnb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1718,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,1720,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1975,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1977,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1978,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1979,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1980,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1983,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1985,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1995,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1997,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1998,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,1999,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2000,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2001,        p *= x2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2003,        return p;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2014,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2015,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2018,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2019,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2020,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2021,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2024,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2025,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2026,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2027,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2030,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2031,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2032,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2033,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2059,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2060,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2062,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2063,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2064,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2065,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2066,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2068,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2069,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2070,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2071,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2072,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2074,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2089,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2116,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2117,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2119,            c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2120,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2121,            a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2122,            b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2125,        result = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2127,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2138,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2139,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2141,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2142,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2143,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2145,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2158,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2159,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2162,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2163,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2164,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2165,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2168,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2169,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2170,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2171,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2174,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2175,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2176,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2177,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2202,        double a = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2203,        double b = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2206,        double t = sintA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2207,        double c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2208,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2209,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2210,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2212,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2213,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2214,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2215,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2216,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2218,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2219,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2221,        double sina = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2222,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2226,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2228,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2229,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2230,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2231,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2232,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2234,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2235,        c = a + t;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2236,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2237,        a = c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2238,        b = b + d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2240,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2241,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2243,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2244,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2246,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2248,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2249,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2263,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2266,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2267,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2268,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2270,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2271,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2272,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2275,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2276,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2277,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2279,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2282,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2283,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2284,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2287,            err += xbadj;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2290,        return est+err;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2307,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2308,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2311,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2312,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2315,        exponent++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2316,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2322,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2323,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2325,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2326,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2327,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2328,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2329,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2331,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2332,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2333,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2337,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2338,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2340,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2341,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2343,        long ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2344,        long bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2345,        long bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2346,        long ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2348,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2349,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2351,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2352,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2353,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2356,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2358,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2361,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2362,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2364,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2365,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2367,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2370,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2372,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2376,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2377,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2378,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2379,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2380,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2383,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2385,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2386,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2387,        prodB += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2388,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2390,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2392,            prodA++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2396,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2397,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2399,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2400,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2401,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2403,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2415,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2418,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2419,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2420,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2423,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2424,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2426,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2427,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2429,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2430,        bd = b * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2431,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2432,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2434,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2435,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2437,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2438,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2439,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2442,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2444,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2447,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2448,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2450,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2451,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2453,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2456,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2458,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2462,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2463,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2464,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2465,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2466,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2469,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2471,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2472,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2473,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2474,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2476,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2478,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2482,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2483,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2484,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2485,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2486,        ac = a * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2487,        bc = b * c;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2488,        ad = a * d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2491,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2493,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2494,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2495,        prod2B += ac;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2496,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2498,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2500,            prod2A++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2504,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2505,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2507,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2508,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2511,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2512,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2513,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2514,    },0.0,0,,0
org/apache/commons/math/util/FastMath,49,2522,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2523,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2525,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2528,        xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2529,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2530,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2531,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2535,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2536,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2537,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2538,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2540,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2543,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2544,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2548,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2552,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2553,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2554,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2555,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2556,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2557,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2562,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2568,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2569,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2570,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2572,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2573,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2574,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2575,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2577,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2578,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2579,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2580,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2582,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2583,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2589,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2590,            },0.0,0,,0
org/apache/commons/math/util/FastMath,49,2591,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2592,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2593,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2596,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2597,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2600,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2602,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2604,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2606,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2608,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2610,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2620,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2623,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2624,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2625,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2628,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2629,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2633,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2634,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2638,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2639,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2640,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2641,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2642,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2643,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2648,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2654,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2655,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2656,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2658,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2659,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2660,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2661,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2663,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2664,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2665,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2666,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2668,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2669,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2675,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2676,            },0.0,0,,0
org/apache/commons/math/util/FastMath,49,2677,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2678,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2679,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2685,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2687,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2689,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2691,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2693,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2695,                return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2705,        boolean negative = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2706,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2709,        double xa = x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2710,        if (x < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2711,            negative = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2712,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2716,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2717,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2718,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2719,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2721,            return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2724,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2725,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2729,        double xb = 0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2730,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2734,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2735,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2736,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2737,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2738,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2739,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2744,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2750,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2751,                remA = xa + a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2752,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2754,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2755,                double b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2756,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2757,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2759,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2760,                b = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2761,                remA = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2762,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2764,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2765,                    break;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2771,                k--;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2772,            },0.0,0,,0
org/apache/commons/math/util/FastMath,49,2773,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2774,            xa = remA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2775,            xb = remB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2778,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2780,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2781,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2783,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2784,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2785,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2787,            xa = a + b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2788,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2789,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2790,            negative ^= true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2794,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2795,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2797,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2800,        if (negative) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2801,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2804,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2813,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2823,        boolean negate = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2826,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2827,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2830,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2832,            xa = -xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2833,            xb = -xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2834,            negate = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2837,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2838,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2842,        if (xa < 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2843,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2845,            double temp = 1.0/xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2846,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2848,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2849,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2850,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2852,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2853,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2854,        epsA = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2857,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2858,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2859,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2860,        xa = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2861,        xb += yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2864,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2867,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2869,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2870,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2871,        } else {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2872,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2873,            double za = 1.0 + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2874,            double zb = -(za - 1.0 - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2875,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2876,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2877,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2878,            za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2880,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2881,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2883,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2884,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2885,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2887,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2888,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2889,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2892,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2894,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2895,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2899,        epsA = ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2900,        epsB = yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2903,        double epsA2 = epsA*epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2914,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2915,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2916,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2917,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2918,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2919,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2920,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2923,        ya = epsA;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2925,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2926,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2927,        ya = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2930,        yb += epsB / (1.0 + epsA * epsA);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2936,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2937,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2938,        temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2939,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2940,        za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2942,        result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2943,        resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2945,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2947,            final double pia = 1.5707963267948966*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2948,            final double pib = 6.123233995736766E-17*2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2950,            za = pia - result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2951,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2952,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2954,            result = za + zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2955,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2959,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2960,            result = -result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2963,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2973,        if (x !=x || y != y) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2974,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2977,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2978,            double result = x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2979,            double invx = 1.0/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2980,            double invy = 1.0/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2982,            if (invx == 0.0) { // X is infinite,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2983,                if (x > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2984,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2986,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,2990,            if (x < 0.0 || invx < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2991,                if (y < 0.0 || invy < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2992,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2994,                    return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,2997,                return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3003,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3004,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3005,                return Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3008,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3009,                return Math.PI*3.0/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3012,            return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3015,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3016,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3017,                return -Math.PI/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3020,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3021,                return -Math.PI*3.0/4.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3024,            return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3027,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3028,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3029,                return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3032,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3033,                return -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3037,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math/util/FastMath,49,3039,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3040,                return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3043,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3044,                return -Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3050,        if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3051,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3052,                return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3055,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3056,                return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3061,        final double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3062,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3063,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,3066,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3067,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3070,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3071,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3073,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3075,        double temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3076,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3077,        ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3079,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3080,"            ra = copySign(0.0, y);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,3084,"        double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,3086,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3094,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3095,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3098,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3099,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3102,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3103,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3106,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3107,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3110,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3111,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3117,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3118,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3119,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3122,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3123,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3126,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3127,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3129,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3130,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3132,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3133,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3134,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3138,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3139,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3140,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3141,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3144,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3147,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3150,      double r = x/y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3151,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3152,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3153,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3155,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3156,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3158,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3159,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3160,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3162,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,3170,      if (x != x) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3171,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3174,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3175,          return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3178,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3179,          return Math.PI;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3182,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3183,          return 0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3186,      if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3187,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3193,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3194,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3195,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3198,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3199,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3202,      ya = -ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3203,      yb = -yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3205,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3206,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3208,      temp = za + yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3209,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3210,      za = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3213,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3214,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3215,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3216,      yb = y - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3219,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3222,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3223,      y = ya+yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3224,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3227,      double r = y/x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3230,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3231,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3234,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3235,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3237,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3238,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3240,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3241,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3242,      ra = temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3244,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,3253,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3254,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3255,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3257,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3258,          if (x == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3259,              return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3263,          subnormal = true;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3264,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3265,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3266,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3269,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3271,          return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3275,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3278,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3282,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3285,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3286,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3287,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3288,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3289,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3291,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3296,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3297,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3298,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3301,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3302,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3303,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3305,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3306,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3307,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3308,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3309,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3310,      za = temp2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3312,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3313,      za = za * ya;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3315,      double na = xs - za;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3316,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3317,      nb -= zb;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3319,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3322,      est *= p2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3324,      if (subnormal) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3325,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3328,      return est;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3338,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3339,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3343,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3344,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3346,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3347,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3349,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3350,        if (result == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3351,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3353,        return result;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3363,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3364,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3368,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3369,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3371,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3372,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3374,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3383,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3392,        return (x < 0l) ? -x : x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3401,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3419,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3420,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3422,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3431,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3432,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3434,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3446,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3447,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3451,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3452,            return d;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3454,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3455,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3457,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3458,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3462,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3463,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3464,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3465,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3468,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3470,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3472,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3474,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3475,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3479,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3482,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3483,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3484,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3486,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3488,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3492,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3496,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3499,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3500,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3501,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3503,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3504,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3506,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3507,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3509,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3512,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3513,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3515,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3530,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3531,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3535,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3536,            return f;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3538,        if (n < -277) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3539,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3541,        if (n > 276) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3542,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3546,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3547,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3548,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3549,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3552,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3554,        if (n < 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3556,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3558,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3559,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3563,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3566,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3567,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3568,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3570,                    mantissa++;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3572,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3576,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3580,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3583,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3584,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3585,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3587,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3588,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3590,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3591,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3593,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3596,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3597,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3599,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3639,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3640,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3641,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3642,            return direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3643,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3644,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3645,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3646,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3651,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3652,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3653,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3654,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3656,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3695,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3696,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3697,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3698,            return (float) direction;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3699,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3700,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3701,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3702,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3707,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3708,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3709,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3710,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3712,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3725,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3729,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3734,            y--;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3738,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3752,            return x;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3760,        y += 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3762,        if (y == 0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3763,            return x*y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3766,        return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3774,        double y = floor(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3775,        double d = x - y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3777,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3778,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3779,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3781,            return y+1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3783,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3784,            return y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3788,        long z = (long) y;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3789,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3797,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3805,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3814,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3823,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3832,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3833,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3835,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3836,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3839,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3840,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3844,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3845,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3846,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3848,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3857,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3858,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3860,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3861,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3864,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3865,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3869,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3870,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3871,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3873,        return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3882,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3891,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3900,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3901,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3903,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3904,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3907,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3908,            return Float.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3912,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3913,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3914,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3916,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3925,        if (a > b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3926,            return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3928,        if (a < b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3929,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3932,        if (a != b) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3933,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3937,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3938,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3939,            return b;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3941,        return a;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3959,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3960,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3961,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3962,            return Double.NaN;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3965,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3966,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3967,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3969,                return abs(x);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3970,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3972,                return abs(y);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3976,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3979,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,3980,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,3983,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,3986,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math/util/FastMath,49,4014,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math/util/FastMath,49,4026,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4027,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4028,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4029,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4031,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4043,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4044,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4045,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4046,            return magnitude;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4048,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4061,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math/util/FastMath,49,4074,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,507,            } catch (NoSuchElementException nsee) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,530,                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,533,                throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,547,                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,550,                throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,564,                throw MathRuntimeException.createConcurrentModificationException(LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING);,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,575,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,576,                next = -2;,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,577,                if (current < 0) {,0.0,0,,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,49,578,                    throw MathRuntimeException.createNoSuchElementException(LocalizedFormats.ITERATOR_EXHAUSTED);,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,38,    private final ExceptionContext context = new ExceptionContext();,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,44,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,45,    },0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,55,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,56,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,57,    },0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,61,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,67,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathArithmeticException,49,73,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,49,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,49,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,49,48,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalNumberException,49,54,        return argument;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,49,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,49,37,    private final ExceptionContext context = new ExceptionContext();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,49,45,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,49,46,    },0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,49,50,        return context;,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,49,56,        return context.getMessage();,0.0,0,,0
org/apache/commons/math/exception/MathIllegalArgumentException,49,62,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math/exception/OutOfRangeException,49,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,,0
org/apache/commons/math/exception/OutOfRangeException,49,47,    },0.0,0,,0
org/apache/commons/math/exception/OutOfRangeException,49,62,"        super(specific, wrong, lo, hi);",0.0,0,,0
org/apache/commons/math/exception/OutOfRangeException,49,63,        this.lo = lo;,0.0,0,,0
org/apache/commons/math/exception/OutOfRangeException,49,64,        this.hi = hi;,0.0,0,,0
org/apache/commons/math/exception/OutOfRangeException,49,65,    },0.0,0,,0
org/apache/commons/math/exception/OutOfRangeException,49,71,        return lo;,0.0,0,,0
org/apache/commons/math/exception/OutOfRangeException,49,77,        return hi;,0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,49,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,49,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,49,46,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,49,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,49,57,    },0.0,0,,0
org/apache/commons/math/exception/DimensionMismatchException,49,63,        return dimension;,0.0,0,,0
org/apache/commons/math/linear/RealLinearOperator,49,53,public abstract class RealLinearOperator {,0.0,0,,0
org/apache/commons/math/linear/RealLinearOperator,49,75,        if (x.length != getColumnDimension()) {,0.0,0,,0
org/apache/commons/math/linear/RealLinearOperator,49,76,"            throw new DimensionMismatchException(x.length, getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/RealLinearOperator,49,78,"        final RealVector y = operate(new ArrayRealVector(x, false));",0.0,0,,0
org/apache/commons/math/linear/RealLinearOperator,49,79,        if (y instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/RealLinearOperator,49,80,            return ((ArrayRealVector) y).getDataRef();,0.0,0,,0
org/apache/commons/math/linear/RealLinearOperator,49,82,            return y.getData();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,589,        protected SparseEntryIterator() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,590,            dim = getDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,591,            current = new EntryImpl();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,592,            next = new EntryImpl();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,593,            if (next.getValue() == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,594,                advance(next);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,596,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,602,            if (e == null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,603,                return;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,606,                e.setIndex(e.getIndex() + 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,607,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,608,            if (e.getIndex() >= dim) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,609,                e.setIndex(-1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,611,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,615,            return next.getIndex() >= 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,620,            int index = next.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,621,            if (index < 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,622,                throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,624,            current.setIndex(index);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,625,            advance(next);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,626,            return current;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,631,            throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,577,    protected class SparseEntryIterator implements Iterator<Entry> {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,52,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,53,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,65,"            throw new DimensionMismatchException(d, n);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,78,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,85,        checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,86,        checkIndex(index + v.getDimension() - 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,87,"        setSubVector(index, v.getData());",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,88,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,92,        checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,93,        checkIndex(index + v.length - 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,94,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,95,"            setEntry(i + index, v[i]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,97,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,101,        double[] result = v.clone();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,102,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,104,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,105,            result[e.getIndex()] += e.getValue();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,107,"        return new ArrayRealVector(result, false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,112,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,113,            double[] values = ((ArrayRealVector)v).getDataRef();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,114,            return add(values);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,116,        RealVector result = v.copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,117,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,119,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,120,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,121,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,122,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,123,        return result;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,128,        double[] result = v.clone();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,129,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,131,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,132,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,133,            result[index] = e.getValue() - result[index];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,134,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,135,"        return new ArrayRealVector(result, false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,140,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,141,            double[] values = ((ArrayRealVector)v).getDataRef();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,142,            return add(values);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,144,        RealVector result = v.copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,145,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,147,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,148,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,149,"            v.setEntry(index, e.getValue() - result.getEntry(index));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,150,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,151,        return result;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,156,        return copy().mapAddToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,161,        if (d != 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,162,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,164,        return this;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,172,"        return dotProduct(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,177,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,178,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,179,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,181,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,182,            d += e.getValue() * v.getEntry(e.getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,184,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,189,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,190,        final double vNorm = v.getNorm();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,192,        if (norm == 0 ||,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,194,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,196,        return dotProduct(v) / (norm * vNorm);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,201,"        return cosine(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,206,"        return ebeDivide(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,211,"        return ebeMultiply(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,216,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,217,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,218,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,220,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,221,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,222,            d += diff * diff;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,223,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,224,        return FastMath.sqrt(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,229,        double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,230,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,232,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,233,            final double value = e.getValue();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,234,            sum += value * value;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,235,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,236,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,241,        double norm = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,242,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,244,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,245,            norm += FastMath.abs(e.getValue());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,247,        return norm;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,252,        double norm = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,253,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,255,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,256,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,258,        return norm;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,263,"        return getDistance(new ArrayRealVector(v,false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,268,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,269,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,270,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,272,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,273,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,275,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,280,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,281,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,282,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,284,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,285,            d += FastMath.abs(e.getValue() - v[e.getIndex()]);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,287,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,292,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,293,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,294,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,296,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,297,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,299,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,304,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,305,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,306,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,308,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,309,"            d = FastMath.max(FastMath.abs(e.getValue() - v[e.getIndex()]), d);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,311,        return d;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,319,        int minIndex    = -1;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,320,        double minValue = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,321,        Iterator<Entry> iterator = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,322,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,323,            final Entry entry = iterator.next();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,324,            if (entry.getValue() <= minValue) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,325,                minIndex = entry.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,326,                minValue = entry.getValue();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,328,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,329,        return minIndex;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,336,        final int minIndex = getMinIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,337,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,345,        int maxIndex    = -1;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,346,        double maxValue = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,347,        Iterator<Entry> iterator = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,348,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,349,            final Entry entry = iterator.next();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,350,            if (entry.getValue() >= maxValue) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,351,                maxIndex = entry.getIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,352,                maxValue = entry.getValue();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,354,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,355,        return maxIndex;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,362,        final int maxIndex = getMaxIndex();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,363,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,369,        return copy().mapMultiplyToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,374,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,379,        return copy().mapSubtractToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,384,        return mapAddToSelf(-d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,389,        return copy().mapDivideToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,394,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,400,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,401,"            product = new OpenMapRealMatrix(this.getDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,404,"            product = new Array2DRowRealMatrix(this.getDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,407,        Iterator<Entry> thisIt = sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,408,        Entry thisE = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,409,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,410,            Iterator<Entry> otherIt = v.sparseIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,411,            Entry otherE = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,412,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,413,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,416,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,418,        return product;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,424,"        return outerProduct(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,429,"        return projection(new ArrayRealVector(v, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,434,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,435,        Entry e = null;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,436,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,437,            e.setValue(value);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,439,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,443,        int dim = getDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,444,        double[] values = new double[dim];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,445,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,446,            values[i] = getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,448,        return values;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,453,        return toArray();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,458,        RealVector copy = copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,459,        copy.unitize();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,460,        return copy;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,465,        mapDivideToSelf(getNorm());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,466,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,470,        return new SparseEntryIterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,475,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,476,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,504,        return copy().mapToSelf(function);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,509,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,511,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,512,            e.setValue(function.value(e.getValue()));,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,514,        return this;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,519,"        return copy().combineToSelf(a, b, y);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,524,"        return copy().combineToSelf(a, b, y);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,529,"        return combineToSelf(a, b, new ArrayRealVector(y, false));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,534,        checkVectorDimensions(y);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,535,        for (int i = 0; i < getDimension(); i++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,536,            final double xi = getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,537,            final double yi = y.getEntry(i);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,538,"            setEntry(i, a * xi + b * yi);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,540,        return this;,0.0,0,,0
org/apache/commons/math/linear/RealVector,49,78,    public abstract class Entry {,0.0,0,,0
org/apache/commons/math/linear/RealVector,49,100,            return index;,0.0,0,,0
org/apache/commons/math/linear/RealVector,49,108,            this.index = index;,0.0,0,,0
org/apache/commons/math/linear/RealVector,49,109,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,547,        public EntryImpl() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,548,            setIndex(0);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,549,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,554,            return getEntry(getIndex());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,560,"            setEntry(getIndex(), newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,561,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,323,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,44,    protected AbstractRealMatrix() {},0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,54,        if (rowDimension < 1) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,55,            throw new NotStrictlyPositiveException(rowDimension);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,57,        if (columnDimension < 1) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,58,            throw new NotStrictlyPositiveException(columnDimension);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,60,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,73,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,74,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,76,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,77,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,82,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,90,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,91,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,93,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,94,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,99,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,104,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,105,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,107,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,108,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,109,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,113,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,118,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,119,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,121,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,122,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,123,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,127,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,135,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,136,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,137,        final int nSum  = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,139,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,140,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,141,                double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,142,                for (int i = 0; i < nSum; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,145,"                out.setEntry(row, col, sum);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,149,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,154,        return m.multiply(this);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,159,        if (p < 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,163,        if (!isSquare()) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,167,        if (p == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,171,        if (p == 1) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,172,            return this.copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,175,        final int power = p - 1;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,186,        int maxI = -1;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,189,            if (binaryRepresentation[i] == '1') {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,190,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,191,                nonZeroPositions.add(pos);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,194,                if (maxI == -1) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,195,                    maxI = pos;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,201,        results[0] = this.copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,203,        for (int i = 1; i <= maxI; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,204,            results[i] = results[i-1].multiply(results[i-1]);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,207,        RealMatrix result = this.copy();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,209,        for (Integer i : nonZeroPositions) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,210,            result = result.multiply(results[i]);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,211,        },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,213,        return result;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,220,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,221,            final double[] dataI = data[i];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,222,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,223,"                dataI[j] = getEntry(i, j);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,227,        return data;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,299,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,301,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,302,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,307,        return subMatrix;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,316,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,328,        return subMatrix;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,336,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,337,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,338,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,369,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,374,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,375,        if ((destination.length < selectedRows.length) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,382,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,383,            final double[] destinationI = destination[i];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,384,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,388,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,393,        MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,394,        final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,395,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,396,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,399,        final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,400,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,404,        for (int r = 1; r < nRows; ++r) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,405,            if (subMatrix[r].length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,410,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,411,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,415,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,416,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,420,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,424,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,425,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,426,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,427,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,428,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,431,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,436,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,437,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,438,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,440,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,444,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,445,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,447,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,451,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,452,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,453,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,454,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,455,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,458,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,463,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,464,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,465,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,471,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,472,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,474,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,478,"        return new ArrayRealVector(getRow(row), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,483,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,484,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,485,        if (vector.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,489,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,490,"            setEntry(row, i, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,492,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,496,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,501,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,502,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,503,        if (vector.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,504,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,507,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,508,"            setEntry(i, column, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,510,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,514,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,515,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,516,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,517,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,518,"            out[i] = getEntry(row, i);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,521,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,526,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,527,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,528,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,529,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,531,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,532,"            setEntry(row, i, array[i]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,534,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,538,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,539,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,540,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,541,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,542,"            out[i] = getEntry(i, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,545,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,550,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,551,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,552,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,555,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,556,"            setEntry(i, column, array[i]);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,558,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,574,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,575,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,576,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,587,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,592,        return getColumnDimension() == getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,615,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,616,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,617,        if (nRows != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,618,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,620,        double trace = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,621,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,622,"            trace += getEntry(i, i);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,624,        return trace;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,630,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,631,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,632,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,633,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,636,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,637,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,638,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,639,            for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,640,"                sum += getEntry(row, i) * v[i];",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,642,            out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,645,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,652,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,653,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,654,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,655,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,656,            if (v.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,657,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,660,            final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,661,            for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,662,                double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,663,                for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,664,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,666,                out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,669,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,676,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,677,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,678,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,679,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,682,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,683,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,684,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,685,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,686,"                sum += getEntry(i, col) * v[i];",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,688,            out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,691,        return out;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,697,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,698,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,700,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,701,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,702,            if (v.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,703,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,706,            final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,707,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,708,                double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,709,                for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,710,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,712,                out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,715,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,721,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,722,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,723,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,724,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,725,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,726,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,727,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,728,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,731,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,736,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,737,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,738,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,739,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,740,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,741,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,744,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,751,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,752,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,754,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,755,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,756,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,757,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,758,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,761,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,768,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,769,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,771,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,772,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,773,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,776,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,781,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,782,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,783,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,784,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,785,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,786,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,787,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,788,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,791,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,796,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,797,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,798,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,799,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,800,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,801,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,804,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,811,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,812,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,814,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,815,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,816,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,817,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,818,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,821,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,828,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,829,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,831,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,832,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,833,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,836,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,841,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,846,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,853,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,860,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,869,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,870,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,871,        final StringBuffer res = new StringBuffer();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,872,        String fullClassName = getClass().getName();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,873,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,874,"        res.append(shortClassName).append(""{"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,876,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,877,            if (i > 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,878,"                res.append("","");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,880,"            res.append(""{"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,881,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,882,                if (j > 0) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,883,"                    res.append("","");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,885,"                res.append(getEntry(i, j));",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,887,"            res.append(""}"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,890,"        res.append(""}"");",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,891,        return res.toString();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,904,        if (object == this ) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,905,            return true;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,907,        if (object instanceof RealMatrix == false) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,908,            return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,910,        RealMatrix m = (RealMatrix) object;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,911,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,912,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,913,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,914,            return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,916,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,917,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,918,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,919,                    return false;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,923,        return true;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,933,        int ret = 7;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,934,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,935,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,936,        ret = ret * 31 + nRows;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,937,        ret = ret * 31 + nCols;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,938,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,939,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,940,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,944,        return ret;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,904,        protected OpenMapSparseIterator() {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,905,            iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,906,            current = new OpenMapEntry(iter);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,907,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,911,            return iter.hasNext();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,916,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,917,            return current;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,922,"            throw new UnsupportedOperationException(""Not supported"");",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,897,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,56,"        this(0, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,57,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,65,"        this(dimension, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,66,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,86,"    protected OpenMapRealVector(OpenMapRealVector v, int resize) {",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,87,        virtualSize = v.getDimension() + resize;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,88,        entries = new OpenIntToDoubleHashMap(v.entries);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,89,        epsilon = v.epsilon;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,90,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,99,"        this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,100,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,110,"    public OpenMapRealVector(int dimension, int expectedSize, double epsilon) {",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,111,        virtualSize = dimension;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,112,"        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,113,        this.epsilon = epsilon;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,114,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,123,"        this(values, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,124,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,133,"    public OpenMapRealVector(double[] values, double epsilon) {",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,134,        virtualSize = values.length;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,135,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,136,        this.epsilon = epsilon;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,137,        for (int key = 0; key < values.length; key++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,138,            double value = values[key];,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,139,            if (!isDefaultValue(value)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,140,"                entries.put(key, value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,143,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,152,"        this(values, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,153,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,162,"    public OpenMapRealVector(Double[] values, double epsilon) {",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,163,        virtualSize = values.length;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,164,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,165,        this.epsilon = epsilon;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,166,        for (int key = 0; key < values.length; key++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,167,            double value = values[key].doubleValue();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,168,            if (!isDefaultValue(value)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,169,"                entries.put(key, value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,172,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,190,    public OpenMapRealVector(RealVector v) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,191,        virtualSize = v.getDimension();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,192,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,193,        epsilon = DEFAULT_ZERO_TOLERANCE;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,194,        for (int key = 0; key < virtualSize; key++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,195,            double value = v.getEntry(key);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,196,            if (!isDefaultValue(value)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,197,"                entries.put(key, value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,200,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,226,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,227,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,228,            return add((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,230,            return super.add(v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,244,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,245,        boolean copyThis = entries.size() > v.entries.size();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,246,        OpenMapRealVector res = copyThis ? this.copy() : v.copy();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,247,        Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,248,        OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,249,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,250,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,251,            int key = iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,252,            if (randomAccess.containsKey(key)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,253,"                res.setEntry(key, randomAccess.get(key) + iter.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,255,"                res.setEntry(key, iter.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,257,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,258,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,267,"        OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,268,        Iterator iter = v.entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,269,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,270,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,271,"            res.setEntry(iter.key() + virtualSize, iter.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,273,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,278,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,279,            return append((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,281,        return append(v.getData());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,286,"        OpenMapRealVector res = new OpenMapRealVector(this, 1);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,287,"        res.setEntry(virtualSize, d);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,288,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,293,"        OpenMapRealVector res = new OpenMapRealVector(this, a.length);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,294,        for (int i = 0; i < a.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,295,"            res.setEntry(i + virtualSize, a[i]);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,297,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,306,        return new OpenMapRealVector(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,319,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,320,        boolean thisIsSmaller  = entries.size() < v.entries.size();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,321,        Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,322,        OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,323,        double d = 0;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,324,        while(iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,325,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,326,            d += iter.value() * larger.get(iter.key());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,328,        return d;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,334,        if(v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,335,            return dotProduct((OpenMapRealVector)v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,337,            return super.dotProduct(v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,343,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,344,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,345,        Iterator iter = res.entries.iterator();,0.0,1,,0
org/apache/commons/math/linear/OpenMapRealVector,49,346,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,347,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,348,"            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,350,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,356,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,357,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,358,        Iterator iter = res.entries.iterator();,0.0,1,,0
org/apache/commons/math/linear/OpenMapRealVector,49,359,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,360,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,361,"            res.setEntry(iter.key(), iter.value() / v[iter.key()]);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,363,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,375,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,381,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,382,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,383,        Iterator iter = res.entries.iterator();,0.0,1,,0
org/apache/commons/math/linear/OpenMapRealVector,49,384,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,385,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,386,"            res.setEntry(iter.key(), iter.value() * v[iter.key()]);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,388,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,393,        checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,394,        checkIndex(index + n - 1);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,395,        OpenMapRealVector res = new OpenMapRealVector(n);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,396,        int end = index + n;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,397,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,398,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,399,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,400,            int key = iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,401,            if (key >= index && key < end) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,402,"                res.setEntry(key - index, iter.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,404,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,405,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,411,        double[] res = new double[virtualSize];,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,412,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,413,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,414,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,415,            res[iter.key()] = iter.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,417,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,434,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,435,        double res = 0;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,436,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,437,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,438,            int key = iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,440,            delta = iter.value() - v.getEntry(key);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,441,            res += delta * delta;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,442,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,443,        iter = v.getEntries().iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,444,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,445,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,446,            int key = iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,447,            if (!entries.containsKey(key)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,448,                final double value = iter.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,449,                res += value * value;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,451,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,452,        return FastMath.sqrt(res);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,458,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,459,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,460,            return getDistance((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,462,        return getDistance(v.getData());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,468,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,469,        double res = 0;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,470,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,471,            double delta = entries.get(i) - v[i];,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,472,            res += delta * delta;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,474,        return FastMath.sqrt(res);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,493,        double max = 0;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,494,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,495,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,496,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,497,            double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,498,            max += delta;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,499,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,500,        iter = v.getEntries().iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,501,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,502,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,503,            int key = iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,504,            if (!entries.containsKey(key)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,505,                double delta = FastMath.abs(iter.value());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,506,                max +=  FastMath.abs(delta);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,508,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,509,        return max;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,515,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,516,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,517,            return getL1Distance((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,519,        return getL1Distance(v.getData());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,525,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,526,        double max = 0;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,527,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,528,            double delta = FastMath.abs(getEntry(i) - v[i]);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,529,            max += delta;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,531,        return max;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,541,        double max = 0;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,542,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,543,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,544,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,545,            double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,546,            if (delta > max) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,547,                max = delta;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,549,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,550,        iter = v.getEntries().iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,551,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,552,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,553,            int key = iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,554,            if (!entries.containsKey(key)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,555,                if (iter.value() > max) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,556,                    max = iter.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,559,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,560,        return max;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,566,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,567,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,568,            return getLInfDistance((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,570,        return getLInfDistance(v.getData());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,576,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,577,        double max = 0;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,578,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,579,            double delta = FastMath.abs(getEntry(i) - v[i]);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,580,            if (delta > max) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,581,                max = delta;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,584,        return max;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,589,        boolean infiniteFound = false;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,590,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,591,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,592,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,593,            final double value = iter.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,594,            if (Double.isNaN(value)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,595,                return false;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,597,            if (Double.isInfinite(value)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,598,                infiniteFound = true;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,600,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,601,        return infiniteFound;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,606,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,607,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,608,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,609,            if (Double.isNaN(iter.value())) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,610,                return true;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,613,        return false;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,619,        return copy().mapAddToSelf(d);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,625,        for (int i = 0; i < virtualSize; i++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,626,"            setEntry(i, getEntry(i) + d);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,628,        return this;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,634,        final int n = v.length;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,635,"        RealMatrix res = new OpenMapRealMatrix(virtualSize, n);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,636,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,637,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,638,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,639,            int row = iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,640,            double value = iter.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,641,            for (int col = 0; col < n; col++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,642,"                res.setEntry(row, col, value * v[col]);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,644,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,645,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,650,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,651,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,657,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,658,        return (OpenMapRealVector) projection(new OpenMapRealVector(v));,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,674,        checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,675,        checkIndex(index + v.getDimension() - 1);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,676,"        setSubVector(index, v.getData());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,677,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,682,        checkIndex(index);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,683,        checkIndex(index + v.length - 1);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,684,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,685,"            setEntry(i + index, v[i]);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,687,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,692,        for (int i = 0; i < virtualSize; i++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,693,"            setEntry(i, value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,695,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,706,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,707,        OpenMapRealVector res = copy();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,708,        Iterator iter = v.getEntries().iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,709,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,710,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,711,            int key = iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,712,            if (entries.containsKey(key)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,713,"                res.setEntry(key, entries.get(key) - iter.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,715,"                res.setEntry(key, -iter.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,717,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,718,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,724,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,725,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,726,            return subtract((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,728,        return subtract(v.getData());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,734,        checkVectorDimensions(v.length);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,735,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,736,        for (int i = 0; i < v.length; i++) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,737,            if (entries.containsKey(i)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,738,"                res.setEntry(i, entries.get(i) - v[i]);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,740,"                res.setEntry(i, -v[i]);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,743,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,750,        OpenMapRealVector res = copy();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,751,        res.unitize();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,752,        return res;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,758,        double norm = getNorm();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,759,        if (isDefaultValue(norm)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,760,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,762,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,763,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,764,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,765,"            entries.put(iter.key(), iter.value() / norm);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,767,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,772,        return getData();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,783,        final int prime = 31;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,784,        int result = 1;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,786,        temp = Double.doubleToLongBits(epsilon);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,787,        result = prime * result + (int) (temp ^ (temp >>> 32));,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,788,        result = prime * result + virtualSize;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,789,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,790,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,791,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,792,            temp = Double.doubleToLongBits(iter.value());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,793,            result = prime * result + (int) (temp ^ (temp >>32));,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,795,        return result;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,806,        if (this == obj) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,807,            return true;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,809,        if (!(obj instanceof OpenMapRealVector)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,810,            return false;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,812,        OpenMapRealVector other = (OpenMapRealVector) obj;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,813,        if (virtualSize != other.virtualSize) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,814,            return false;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,816,        if (Double.doubleToLongBits(epsilon) !=,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,818,            return false;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,820,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,821,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,822,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,823,            double test = other.getEntry(iter.key());,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,824,            if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,825,                return false;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,827,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,828,        iter = other.getEntries().iterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,829,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,830,            iter.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,831,            double test = iter.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,832,            if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,833,                return false;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,835,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,836,        return true;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,845,        return (double)entries.size()/(double)getDimension();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,851,        return new OpenMapSparseIterator();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,868,        protected OpenMapEntry(Iterator iter) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,869,            this.iter = iter;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,870,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,875,            return iter.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,881,"            entries.put(iter.key(), value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,882,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealVector,49,887,            return iter.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,48,"        super(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,49,        this.rows = rowDimension;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,50,        this.columns = columnDimension;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,51,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,52,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,59,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,60,        this.rows = matrix.rows;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,61,        this.columns = matrix.columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,62,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,63,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,68,        return new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,74,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,80,        return columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,94,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,96,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,97,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,98,            iterator.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,99,            final int row = iterator.key() / columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,100,            final int col = iterator.key() - row * columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,101,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,102,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,104,        return out;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,112,            return subtract((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,113,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,114,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,128,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,130,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,131,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,132,            iterator.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,133,            final int row = iterator.key() / columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,134,            final int col = iterator.key() - row * columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,135,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,136,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,138,        return out;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,145,            return multiply((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,146,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,149,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,151,            final int outCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,152,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,153,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,154,                iterator.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,155,                final double value = iterator.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,156,                final int key      = iterator.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,157,                final int i        = key / columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,158,                final int k        = key % columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,159,                for (int j = 0; j < outCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,160,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,162,            },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,164,            return out;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,179,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,181,        final int outCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,182,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,183,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,184,            iterator.advance();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,185,            final double value = iterator.value();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,186,            final int key      = iterator.key();,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,187,            final int i        = key / columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,188,            final int k        = key % columns;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,189,            for (int j = 0; j < outCols; ++j) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,190,"                final int rightKey = m.computeKey(k, j);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,191,                if (m.entries.containsKey(rightKey)) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,192,"                    final int outKey = out.computeKey(i, j);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,193,                    final double outValue =,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,195,                    if (outValue == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,196,                        out.entries.remove(outKey);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,198,"                        out.entries.put(outKey, outValue);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,202,        },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,204,        return out;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,210,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,211,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,212,"        return entries.get(computeKey(row, column));",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,218,        return rows;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,224,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,225,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,226,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,227,"            entries.remove(computeKey(row, column));",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,229,"            entries.put(computeKey(row, column), value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,231,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,236,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,237,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,238,"        final int key = computeKey(row, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,239,        final double value = entries.get(key) + increment;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,240,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,241,            entries.remove(key);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,243,"            entries.put(key, value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,245,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,250,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,251,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,252,"        final int key = computeKey(row, column);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,253,        final double value = entries.get(key) * factor;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,254,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,255,            entries.remove(key);,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,257,"            entries.put(key, value);",0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,259,    },0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,268,        return row * columns + column;,0.0,0,,0
org/apache/commons/math/linear/OpenMapRealMatrix,49,30,public class OpenMapRealMatrix extends AbstractRealMatrix,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,66,    public Array2DRowRealMatrix() {},0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,77,"        super(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,78,        data = new double[rowDimension][columnDimension];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,79,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,95,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,96,        copyIn(d);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,97,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,116,"    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,117,        if (copyArray) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,118,            copyIn(d);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,120,            if (d == null) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,121,                throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,123,            final int nRows = d.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,124,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,125,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,127,            final int nCols = d[0].length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,128,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,129,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,131,            for (int r = 1; r < nRows; r++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,132,                if (d[r].length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,133,"                    throw new DimensionMismatchException(d[r].length, nCols);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,136,            data = d;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,138,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,147,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,148,        final int nRows = v.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,149,        data = new double[nRows][1];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,150,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,151,            data[row][0] = v[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,153,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,159,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,165,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,178,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,180,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,181,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,182,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,183,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,184,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,185,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,186,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,187,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,188,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,192,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,205,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,207,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,208,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,209,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,210,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,211,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,212,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,213,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,214,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,215,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,219,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,232,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,234,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,235,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,236,        final int nSum = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,237,        final double[][] outData = new double[nRows][nCols];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,238,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,239,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,240,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,241,            for (int col = 0; col < nCols; col++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,242,                double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,243,                for (int i = 0; i < nSum; i++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,244,                    sum += dataRow[i] * m.data[i][col];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,246,                outDataRow[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,250,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,257,        return copyOut();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,266,        return data;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,273,        if (data == null) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,274,            if (row > 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,275,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,277,            if (column > 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,278,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,280,            MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,281,            final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,282,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,283,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,286,            final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,287,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,288,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,290,            data = new double[subMatrix.length][nCols];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,291,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,292,                if (subMatrix[i].length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,293,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,295,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,297,        } else {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,298,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,301,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,307,        return data[row][column];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,313,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,314,        data[row][column] = value;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,315,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,320,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,321,        data[row][column] += increment;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,322,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,327,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,328,        data[row][column] *= factor;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,329,    },0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,334,        return (data == null) ? 0 : data.length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,340,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,346,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,347,        final int nCols = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,348,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,349,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,351,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,352,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,353,            final double[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,354,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,355,            for (int i = 0; i < nCols; i++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,356,                sum += dataRow[i] * v[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,358,            out[row] = sum;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,360,        return out;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,366,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,367,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,368,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,369,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,372,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,373,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,374,            double sum = 0;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,375,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,376,                sum += data[i][col] * v[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,378,            out[col] = sum;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,381,        return out;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,388,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,389,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,390,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,391,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,392,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,393,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,394,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,397,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,403,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,404,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,405,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,406,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,407,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,408,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,409,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,412,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,420,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,421,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,423,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,424,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,425,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,426,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,429,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,437,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,438,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,440,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,441,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,442,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,443,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,446,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,452,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,453,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,454,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,455,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,456,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,457,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,458,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,461,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,467,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,468,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,469,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,470,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,471,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,472,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,475,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,483,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,484,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,486,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,487,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,488,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,489,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,492,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,500,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,501,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,503,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,504,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,505,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,508,        return visitor.end();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,517,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,518,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,520,        for (int i = 0; i < nRows; i++) {,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,521,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,523,        return out;,0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,537,"        setSubMatrix(in, 0, 0);",0.0,0,,0
org/apache/commons/math/linear/Array2DRowRealMatrix,49,538,    },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,247,                this.endRow = endRow;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,248,                columnSum   = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,249,                maxColSum   = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,250,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,254,                columnSum += FastMath.abs(value);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,255,                if (row == endRow) {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,257,                    columnSum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,259,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,263,                return maxColSum;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,476,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,479,            private int i = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,482,            private EntryImpl e = new EntryImpl();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,486,                return i < dim;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,491,                e.setIndex(i++);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,492,                return e;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealVector,49,497,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,279,                sum = 0;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,280,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,284,                sum += value * value;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,285,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,289,                return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,582,"                out.setEntry(column, row, value);",0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,583,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,358,                this.startRow    = startRow;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,359,                this.startColumn = startColumn;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,360,            },0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,365,                destination[row - startRow][column - startColumn] = value;,0.0,0,,0
org/apache/commons/math/linear/AbstractRealMatrix,49,366,            },0.0,0,,0
