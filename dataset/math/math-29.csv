project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,2.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,2.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",2.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,2.0,1,,1
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);",1.8,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,1.8,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,1.8,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,1.8,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,1.8,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,360,        checkVectorDimensions(v.getDimension());,1.33333,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,        int perturb = perturb(hash);,1.28571,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,        int j = index;,1.28571,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,1.28571,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,        if (states[index] == FREE) {,1.28571,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,        return (j << 2) + j + perturb + 1;,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,        final int hash  = hashOf(key);,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {",1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,            return doRemove(index);,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,        keys[index]   = 0;,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,        values[index] = missingEntries;,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,        return previous;,1.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,592,            entries.remove(index);,1.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,210,            return true;,0.9,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,421,                growTable();,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,434,        final int oldLength      = states.length;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,435,        final int[] oldKeys      = keys;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,436,        final double[] oldValues = values;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,437,        final byte[] oldStates   = states;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,439,        final int newLength = RESIZE_MULTIPLIER * oldLength;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,440,        final int[] newKeys = new int[newLength];,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,441,        final double[] newValues = new double[newLength];,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,442,        final byte[] newStates = new byte[newLength];,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,443,        final int newMask = newLength - 1;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,444,        for (int i = 0; i < oldLength; ++i) {,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,445,            if (oldStates[i] == FULL) {,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,446,                final int key = oldKeys[i];,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,447,"                final int index = findInsertionIndex(newKeys, newStates, key, newMask);",0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,448,                newKeys[index]   = key;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,449,                newValues[index] = oldValues[i];,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,450,                newStates[index] = FULL;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,454,        mask   = newMask;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,455,        keys   = newKeys;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,456,        values = newValues;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,457,        states = newStates;,0.81818,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,459,    },0.81818,0,,0
org/apache/commons/math3/linear/RealVector,29,180,    },0.81818,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,179,    public OpenMapRealVector(OpenMapRealVector v) {,0.64286,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,180,        virtualSize = v.getDimension();,0.64286,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,0.64286,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,182,        epsilon = v.epsilon;,0.64286,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,183,    },0.64286,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,591,        } else if (entries.containsKey(index)) {,0.64286,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,207,        final int hash  = hashOf(key);,0.6,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,208,        int index = hash & mask;,0.6,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,209,"        if (containsKey(key, index)) {",0.6,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,208,        return entries;,0.6,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,130,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,131,        final int length = source.keys.length;,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,132,        keys = new int[length];,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,133,"        System.arraycopy(source.keys, 0, keys, 0, length);",0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,134,        values = new double[length];,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,135,"        System.arraycopy(source.values, 0, values, 0, length);",0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,136,        states = new byte[length];,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,137,"        System.arraycopy(source.states, 0, states, 0, length);",0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,138,        missingEntries = source.missingEntries;,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,139,        size  = source.size;,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,140,        mask  = source.mask;,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,141,        count = source.count;,0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,142,    },0.5625,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,526,            if (referenceCount != count) {,0.45,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,529,            if (current < 0) {,0.45,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,532,            return keys[current];,0.45,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,274,            return changeIndexSign(index);,0.42857,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,332,        return -index - 1;,0.42857,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,411,            index = changeIndexSign(index);,0.42857,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,412,            previous = values[index];,0.42857,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,413,            newMapping = false;,0.42857,0,,0
org/apache/commons/math3/linear/RealVector,29,176,        int d = getDimension();,0.42857,0,,0
org/apache/commons/math3/linear/RealVector,29,177,        if (d != n) {,0.42857,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,273,        } else if (states[index] == FULL && keys[index] == key) {,0.3913,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,238,        return new Iterator();,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,37,public class OpenIntToDoubleHashMap implements Serializable {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,495,        private Iterator() {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,498,            referenceCount = count;,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,501,            next = -1;,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,503,                advance();,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,506,            },0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,508,        },0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,481,    public class Iterator {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,515,            return next >= 0;,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,543,            if (referenceCount != count) {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,546,            if (current < 0) {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,549,            return values[current];,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,560,            if (referenceCount != count) {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,565,            current = next;,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,569,                while (states[++next] != FULL) {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,577,            },0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,572,            } catch (ArrayIndexOutOfBoundsException e) {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,573,                next = -2;,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,574,                if (current < 0) {,0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,579,        },0.34615,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,183,        if (states[index] == FREE) {,0.33333,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,184,            return missingEntries;,0.33333,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,343,        OpenMapRealVector res = new OpenMapRealVector(this);,0.33333,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,0.33333,1,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,350,        while (iter.hasNext()) {,0.33333,1,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,351,            iter.advance();,0.33333,1,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,352,"            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",0.33333,1,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,354,        return res;,0.33333,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,34,public class OpenMapRealVector extends SparseRealVector,0.32143,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,589,        if (!isDefaultValue(value)) {,0.28125,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,590,"            entries.put(index, value);",0.28125,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,594,    },0.28125,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,588,        checkIndex(index);,0.26471,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,449,        return entries.get(index);,0.25714,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,342,        checkVectorDimensions(v.getDimension());,0.25,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,177,        final int hash  = hashOf(key);,0.24324,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,178,        int index = hash & mask;,0.24324,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,179,"        if (containsKey(key, index)) {",0.24324,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,382,        return (key != 0 || states[index] == FULL) && keys[index] == key;,0.24324,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,448,        checkIndex(index);,0.23077,0,,0
org/apache/commons/math3/linear/RealVector,29,194,    },0.2093,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,140,"                entries.put(key, value);",0.18,0,,0
org/apache/commons/math3/linear/RealVector,29,189,        if (index < 0 ||,0.16981,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,256,"        return findInsertionIndex(keys, states, key, mask);",0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,269,        final int hash = hashOf(key);,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,270,        int index = hash & mask;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,271,        if (states[index] == FREE) {,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,272,            return index;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,407,        int index = findInsertionIndex(key);,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,408,        double previous = missingEntries;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,409,        boolean newMapping = true;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,410,        if (index < 0) {,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,415,        keys[index]   = key;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,416,        states[index] = FULL;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,417,        values[index] = value;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,418,        if (newMapping) {,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,419,            ++size;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,420,            if (shouldGrowTable()) {,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,423,            ++count;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,425,        return previous;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,466,        return size > (mask + 1) * LOAD_FACTOR;,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,475,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,0.15517,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,476,        return h ^ (h >>> 7) ^ (h >>> 4);,0.15517,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,123,"        this(values, DEFAULT_ZERO_TOLERANCE);",0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,124,    },0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,133,"    public OpenMapRealVector(double[] values, double epsilon) {",0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,134,        virtualSize = values.length;,0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,135,        entries = new OpenIntToDoubleHashMap(0.0);,0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,136,        this.epsilon = epsilon;,0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,137,        for (int key = 0; key < values.length; key++) {,0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,138,            double value = values[key];,0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,139,            if (!isDefaultValue(value)) {,0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,143,    },0.13846,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,401,        return virtualSize;,0.12676,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,100,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,101,    },0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,117,                                  final double missingEntries) {,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,118,        final int capacity = computeCapacity(expectedSize);,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,119,        keys   = new int[capacity];,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,120,        values = new double[capacity];,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,121,        states = new byte[capacity];,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,122,        this.missingEntries = missingEntries;,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,123,        mask   = capacity - 1;,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,124,    },0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,150,        if (expectedSize == 0) {,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,153,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,154,        final int powerOfTwo = Integer.highestOneBit(capacity);,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,155,        if (powerOfTwo == capacity) {,0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,156,            return capacity;,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,113,    private static final double LN_QUICK_COEF[][] = {,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,126,    private static final double LN_HI_PREC_COEF[][] = {,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,139,    private static final double SINE_TABLE_A[] =,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,158,    private static final double SINE_TABLE_B[] =,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,177,    private static final double COSINE_TABLE_A[] =,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,196,    private static final double COSINE_TABLE_B[] =,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,216,    private static final double TANGENT_TABLE_A[] =,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,235,    private static final double TANGENT_TABLE_B[] =,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,254,    private static final long RECIP_2PI[] = new long[] {,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,275,    private static final long PI_O_4_BITS[] = new long[] {,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3334,        if (x != x) { // NaN,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3342,        y = (long) x;,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3343,        if (x < 0 && y != x) {,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3347,        if (y == 0) {,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3351,        return y;,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3361,        if (x != x) { // NaN,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3365,        y = floor(x);,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3366,        if (y == x) {,0.12329,0,,0
org/apache/commons/math3/util/FastMath,29,3367,            return y;,0.12329,0,,0
org/apache/commons/math3/linear/RealVector,29,59,public abstract class RealVector {,0.12329,0,,0
org/apache/commons/math3/linear/RealVector,29,1049,    protected class SparseEntryIterator implements Iterator<Entry> {,0.12329,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,220,        return FastMath.abs(value) < epsilon;,0.12329,0,,0
org/apache/commons/math3/linear/SparseRealVector,29,25,public abstract class SparseRealVector extends RealVector {},0.12329,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,180,            return values[index];,0.02632,0,,0
org/apache/commons/math3/util/FastMath,29,3747,    private static class ExpFracTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3776,        },0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,92,"        this(DEFAULT_EXPECTED_SIZE, Double.NaN);",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,93,    },0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,108,"        this(expectedSize, Double.NaN);",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,109,    },0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,151,            return 1;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,158,        return nextPowerOfTwo(capacity);,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,167,        return Integer.highestOneBit(i) << 1;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,187,        int j = index;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,188,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,189,"            j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,190,            index = j & mask;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,191,"            if (containsKey(key, index)) {",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,192,                return values[index];,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,196,        return missingEntries;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,213,        if (states[index] == FREE) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,214,            return false;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,217,        int j = index;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,218,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,219,"            j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,220,            index = j & mask;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,221,"            if (containsKey(key, index)) {",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,222,                return true;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,226,        return false;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,286,                    break;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,293,        } else if (states[index] == FULL) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,296,            return changeIndexSign(index);,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,299,        final int firstRemoved = index;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,301,"            j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,302,            index = j & mask;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,304,            if (states[index] == FREE) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,305,                return firstRemoved;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,306,            } else if (states[index] == FULL && keys[index] == key) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,307,                return changeIndexSign(index);,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,310,            perturb >>= PERTURB_SHIFT;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,340,        return size;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,357,        if (states[index] == FREE) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,358,            return missingEntries;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,361,        int j = index;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,362,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,363,"            j = probe(perturb, j);",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,364,            index = j & mask;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,365,"            if (containsKey(key, index)) {",0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,366,                return doRemove(index);,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,370,        return missingEntries;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,592,        stream.defaultReadObject();,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,593,        count = 0;,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,594,    },0.0,0,,0
org/apache/commons/math3/util/FastMath,29,349,    private FastMath() {},0.0,0,,0
org/apache/commons/math3/util/FastMath,29,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,362,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,364,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,366,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,375,        return Math.sqrt(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,383,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,384,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,392,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,393,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,396,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,397,          return exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,400,      double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,401,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,402,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,404,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,409,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,410,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,411,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,414,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,415,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,416,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,417,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,422,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,425,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,426,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,427,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,428,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,429,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,430,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,432,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,433,      result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,434,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,442,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,443,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,444,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,452,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,453,          return exp(x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,456,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,457,          return -exp(-x)/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,460,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,461,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,464,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,465,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,466,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,471,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,472,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,473,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,478,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,479,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,480,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,483,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,484,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,485,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,486,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,491,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,493,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,494,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,497,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,498,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,499,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,500,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,501,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,502,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,504,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,505,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,506,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,29,508,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,509,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,515,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,516,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,518,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,519,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,520,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,521,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,523,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,524,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,525,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,530,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,534,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,535,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,536,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,537,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,538,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,539,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,541,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,542,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,545,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,546,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,549,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,557,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,559,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,560,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,569,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,570,          return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,573,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,574,          return -1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,577,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,578,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,581,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,582,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,583,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,587,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,588,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,596,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,597,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,598,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,599,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,600,          na = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,603,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,604,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,605,          temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,606,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,607,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,609,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,610,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,611,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,614,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,615,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,616,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,617,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,623,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,625,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,627,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,628,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,29,630,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,632,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,638,          double na = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,639,          double nb = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,642,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,643,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,644,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,645,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,646,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,648,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,649,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,650,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,653,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,654,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,655,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,656,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,662,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,664,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,666,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,669,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,670,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,673,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,689,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,690,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,691,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,692,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,696,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,699,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,700,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,702,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,704,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,711,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,719,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,720,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,721,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,722,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,726,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,729,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,730,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,732,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,734,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,741,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,783,        return Math.random();,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,807,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,826,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,827,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,829,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,830,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,831,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,832,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,834,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,837,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,840,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,844,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,847,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,850,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,854,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,857,            intVal++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,862,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,864,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,866,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,867,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,869,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,871,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,899,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,902,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,910,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,917,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,919,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,922,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,925,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,927,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,931,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,939,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,949,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,955,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,956,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,957,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,962,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,963,                return ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,970,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,972,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,973,            x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,974,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,978,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,982,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,983,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,984,            tempA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,986,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,987,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,988,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,990,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,995,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,999,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1000,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1002,        double za = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1003,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1004,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1005,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1007,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1008,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1009,        zb += za - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1010,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1013,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1015,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1017,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1019,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1021,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1023,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1025,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1029,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1030,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1031,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1033,        temp = ya + za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1035,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1036,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1038,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1040,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1041,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1043,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1045,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1046,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1048,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1050,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1051,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1053,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1054,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1055,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1056,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1058,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1059,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1060,            zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1073,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1077,            ya = -ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1078,            yb = -rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1081,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1082,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1083,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1086,        return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1096,"        return log(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1113,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1114,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1115,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1118,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1124,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1128,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1136,            if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1138,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1146,            bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1148,                exp--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1149,                bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1154,        if (exp == -1 || exp == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1160,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1161,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1162,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1163,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1164,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1165,                xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1166,                xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1173,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1176,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1177,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1178,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1184,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1185,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1186,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1190,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1193,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1194,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1195,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1197,                return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1215,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1216,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1218,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1220,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1221,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1222,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1223,            double xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1224,            double xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1227,            double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1229,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1230,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1238,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1239,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1241,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1242,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1243,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1249,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1250,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1251,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1255,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1256,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1264,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1265,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1266,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1269,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1273,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1274,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1275,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1292,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1293,        double b = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1294,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1295,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1296,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1297,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1299,        c = a + lnza;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1300,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1301,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1302,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1304,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1305,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1306,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1307,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1309,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1310,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1311,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1312,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1314,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1315,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1316,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1317,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1319,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1320,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1321,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1324,        return a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1333,        if (x == -1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1334,            return x/0.0;   // -Infinity,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1338,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1342,            double xpa = 1.0 + x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1345,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1349,                return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1354,            double fx1 = xpb/xpa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1357,            epsilon = epsilon * fx1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1364,        y = y * x + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1365,        y = y * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1367,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1375,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1377,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1379,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1386,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1409,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1420,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1422,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1423,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1426,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1427,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1431,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1435,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1442,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1446,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1447,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1449,            if (y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1450,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1453,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1456,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1457,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1458,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1460,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1461,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1463,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1467,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1468,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1469,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1472,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1473,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1475,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1480,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1481,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1484,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1485,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1487,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1490,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1493,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1494,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1499,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1505,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1506,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1509,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1510,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1512,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1517,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1520,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1523,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1527,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1534,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1535,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1536,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1537,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1538,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1542,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1546,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1548,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1551,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1552,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1555,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1556,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1557,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1558,        lna = tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1561,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1564,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1565,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1567,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1568,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1569,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1570,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1571,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1572,        z = z * lnb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1574,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1576,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1588,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1590,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1596,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1598,        return p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1608,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1610,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1614,        p *= x2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1616,        return p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1637,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1638,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1639,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1646,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1672,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1673,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1675,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1676,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1677,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1678,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1679,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1681,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1682,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1683,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1684,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1685,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1729,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1732,            c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1733,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1734,            a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1735,            b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1738,        result = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1740,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1751,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1754,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1755,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1756,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1758,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1781,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1782,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1783,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1790,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1815,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1816,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1819,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1820,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1821,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1822,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1823,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1825,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1826,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1827,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1828,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1829,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1834,        double sina = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1835,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1839,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1841,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1842,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1843,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1844,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1845,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1847,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1848,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1849,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1850,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1851,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1856,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1857,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1859,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1876,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1879,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1880,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1881,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1883,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1885,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1892,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1895,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1896,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1897,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1900,            err += xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1903,        return est+err;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1925,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1928,        exponent++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1929,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1935,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1936,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1938,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1945,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1950,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1951,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1953,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1954,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1956,        long ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1957,        long bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1958,        long bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1959,        long ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1961,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1962,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1969,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1971,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1977,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1978,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1983,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1985,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1989,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1990,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1991,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1992,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1993,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2000,        prodB += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2003,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2005,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2009,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2010,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2012,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2013,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2014,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2031,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2032,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2033,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2036,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2037,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2042,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2043,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2044,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2045,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2047,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2055,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2057,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2063,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2069,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2071,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2077,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2078,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2079,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2086,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2089,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2091,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2095,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2096,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2099,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2100,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2101,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2108,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2111,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2113,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2120,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2124,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2125,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2126,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2127,    },0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2135,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2136,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2138,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2141,        xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2142,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2143,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2144,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2148,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2149,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2150,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2151,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2153,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2157,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2161,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2165,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2166,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2167,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2168,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2169,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2170,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2175,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2181,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2182,                remA = xa + a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2183,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2185,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2186,                double b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2187,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2188,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2190,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2191,                b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2192,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2193,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2195,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2196,                    break;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2202,                k--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2203,            },0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2204,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2205,            xa = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2206,            xb = remB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2209,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2210,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2213,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2215,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2217,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2219,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2221,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2223,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2233,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2236,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2237,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2238,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2242,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2246,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2247,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2251,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2252,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2253,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2254,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2255,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2256,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2261,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2267,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2268,                remA = xa + a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2269,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2271,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2272,                double b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2273,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2274,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2276,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2277,                b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2278,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2279,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2281,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2282,                    break;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2288,                k--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2289,            },0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2290,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2291,            xa = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2292,            xb = remB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2298,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2300,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2302,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2304,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2306,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2308,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2318,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2319,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2322,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2323,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2324,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2325,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2329,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2330,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2331,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2332,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2334,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2338,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2342,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2343,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2347,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2348,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2349,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2350,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2351,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2352,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2357,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2363,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2364,                remA = xa + a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2365,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2367,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2368,                double b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2369,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2370,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2372,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2373,                b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2374,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2375,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2377,                if (remA > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2378,                    break;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2384,                k--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2385,            },0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2386,            quadrant = k & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2387,            xa = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2388,            xb = remB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2391,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2393,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2394,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2396,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2397,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2398,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2400,            xa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2401,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2402,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2403,            negative ^= true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2407,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2408,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2410,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2413,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2414,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2417,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2426,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2436,        boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2443,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2445,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2446,            xb = -xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2447,            negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2450,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2451,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2455,        if (xa < 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2458,            final double oneOverXa = 1 / xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2463,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2465,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2466,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2467,        epsA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2470,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2471,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2472,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2473,        xa = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2474,        xb += yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2477,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2482,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2483,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2484,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2486,            double za = 1d + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2487,            double zb = -(za - 1d - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2489,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2490,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2491,            za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2493,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2494,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2496,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2497,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2498,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2500,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2501,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2502,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2507,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2508,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2512,        epsA = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2513,        epsB = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2516,        final double epsA2 = epsA * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2527,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2528,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2529,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2530,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2531,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2532,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2533,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2536,        ya = epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2538,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2539,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2540,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2543,        yb += epsB / (1d + epsA * epsA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2546,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2547,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2548,        temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2549,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2550,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2552,        double result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2553,        double resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2555,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2557,            final double pia = 1.5707963267948966 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2558,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2560,            za = pia - result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2561,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2562,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2564,            result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2565,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2569,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2570,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2573,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2583,        if (x != x || y != y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2584,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2587,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2588,            final double result = x * y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2589,            final double invx = 1d / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2590,            final double invy = 1d / y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2592,            if (invx == 0) { // X is infinite,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2593,                if (x > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2594,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2596,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2600,            if (x < 0 || invx < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2601,                if (y < 0 || invy < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2602,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2604,                    return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2607,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2613,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2614,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2615,                return Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2618,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2619,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2622,            return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2625,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2626,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2627,                return -Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2630,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2631,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2634,            return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2637,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2638,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2639,                return 0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2642,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2643,                return -0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2647,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2649,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2650,                return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2653,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2654,                return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2660,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2661,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2662,                return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2665,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2666,                return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2671,        final double r = y / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2673,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2676,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2677,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2680,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2681,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2685,        final double temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2686,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2687,        ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2690,"            ra = copySign(0d, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2694,"        final double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2696,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2704,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2705,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2708,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2709,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2712,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2713,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2716,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2717,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2721,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2727,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2728,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2729,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2732,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2733,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2736,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2737,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2739,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2740,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2742,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2743,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2744,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2748,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2749,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2750,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2751,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2757,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2760,      double r = x/y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2761,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2762,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2763,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2768,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2769,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2770,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2772,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2780,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2781,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2784,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2785,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2788,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2789,          return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2792,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2793,          return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2796,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2797,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2803,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2804,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2805,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2808,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2809,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2812,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2813,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2815,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2816,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2818,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2819,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2820,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2823,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2824,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2825,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2826,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2832,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2833,      y = ya+yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2834,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2837,      double r = y/x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2840,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2841,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2844,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2845,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2850,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2851,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2852,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2854,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2863,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2865,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2867,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2868,          if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2869,              return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2873,          subnormal = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2874,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2875,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2879,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2881,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2885,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2895,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2896,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2897,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2898,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2899,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2901,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2906,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2907,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2908,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2911,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2912,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2913,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2915,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2916,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2917,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2918,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2919,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2920,      za = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2922,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2923,      za = za * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2925,      double na = xs - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2926,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2927,      nb -= zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2929,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2932,      est *= p2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2934,      if (subnormal) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2935,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2938,      return est;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2949,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2953,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2954,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2956,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2957,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2960,        if (result == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2961,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2963,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2974,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2978,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2979,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2981,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2982,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,2993,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3002,        return (x < 0l) ? -x : x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3029,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3030,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3041,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3042,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3056,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3062,            return d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3064,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3065,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3067,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3072,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3073,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3075,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3078,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3080,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3082,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3085,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3089,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3093,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3094,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3096,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3098,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3102,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3106,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3109,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3110,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3111,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3113,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3114,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3116,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3122,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3140,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3146,            return f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3148,        if (n < -277) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3149,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3151,        if (n > 276) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3156,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3157,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3158,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3159,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3162,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3164,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3166,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3169,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3173,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3177,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3178,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3180,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3182,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3186,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3190,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3193,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3194,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3195,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3197,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3198,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3200,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3206,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3250,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3251,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3252,            return direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3253,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3255,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3261,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3262,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3263,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3306,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3307,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3308,            return (float) direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3309,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3311,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3317,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3318,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3319,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3335,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3339,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3344,            y--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3348,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3362,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3370,        y += 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3372,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3373,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3376,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3384,        double y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3385,        double d = x - y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3387,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3388,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3389,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3391,            return y+1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3393,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3394,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3398,        long z = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3399,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3407,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3415,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3424,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3433,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3442,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3443,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3445,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3446,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3449,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3450,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3454,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3455,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3456,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3458,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3467,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3468,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3470,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3471,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3474,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3475,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3479,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3480,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3481,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3483,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3492,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3501,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3510,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3511,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3513,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3514,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3517,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3518,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3522,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3523,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3524,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3526,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3535,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3536,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3538,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3539,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3542,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3543,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3547,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3548,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3549,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3551,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3570,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3572,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3575,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3576,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3577,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3579,                return abs(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3580,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3582,                return abs(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3586,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3589,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3590,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3596,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3636,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3637,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3639,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3641,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3653,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3654,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3656,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3658,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3693,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3705,    },0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,504,            } catch (NoSuchElementException nsee) {,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,527,                throw new ConcurrentModificationException();,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,530,                throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,544,                throw new ConcurrentModificationException();,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,547,                throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,561,                throw new ConcurrentModificationException();,0.0,0,,0
org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,575,                    throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3780,    private static class lnMant {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3796,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3708,    private static class ExpIntTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,29,3743,        },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,44,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,46,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,56,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,57,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,58,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,59,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,63,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,69,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,29,75,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,29,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,29,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,29,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,29,54,        return argument;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,29,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,29,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,29,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,29,47,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,29,51,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,29,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,29,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,29,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,29,54,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,29,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,29,70,        this.min = min;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,29,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,29,72,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,29,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,29,85,        return min;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,29,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,29,47,    },0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,29,62,"        super(specific, wrong, lo, hi);",0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,29,63,        this.lo = lo;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,29,64,        this.hi = hi;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,29,65,    },0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,29,71,        return lo;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,29,77,        return hi;,0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,29,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,29,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,29,46,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,29,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,29,57,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,29,63,        return dimension;,0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,29,37,"        super(value, 0, true);",0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,29,38,    },0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,29,47,"        super(specific, value, 0, true);",0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,29,48,    },0.0,0,,0
org/apache/commons/math3/linear/RealLinearOperator,29,53,public abstract class RealLinearOperator {,0.0,0,,0
org/apache/commons/math3/linear/RealLinearOperator,29,94,        throw new UnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealLinearOperator,29,107,        return false;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1151,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1153,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1157,                        return i.hasNext();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1162,                        e.setIndex(i.next().getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1163,                        return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1168,                        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1134,        return new RealVector() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1435,            class UnmodifiableEntry extends Entry {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1138,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1144,                return v.map(function);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1150,                final Iterator<Entry> i = v.iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1151,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1176,                final Iterator<Entry> i = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1178,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1203,                return v.copy();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1209,                return v.add(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1215,                return v.subtract(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1221,                return v.mapAdd(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1227,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1233,                return v.mapSubtract(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1239,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1245,                return v.mapMultiply(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1251,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1257,                return v.mapDivide(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1263,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1269,                return v.ebeMultiply(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1275,                return v.ebeDivide(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1281,                return v.dotProduct(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1287,                return v.cosine(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1293,                return v.getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1299,                return v.getL1Norm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1305,                return v.getLInfNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1311,                return v.getDistance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1317,                return v.getL1Distance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1323,                return v.getLInfDistance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1329,                return v.unitVector();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1335,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1341,                return v.projection(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1347,                return v.outerProduct(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1353,                return v.getEntry(index);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1359,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1365,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1371,                return v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1377,                return v.append(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1383,                return v.append(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1389,"                return v.getSubVector(index, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1395,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1401,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1407,                return v.toArray();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1413,                return v.isNaN();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1419,                return v.isInfinite();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1425,"                return v.combine(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1431,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,99,"        setEntry(index, getEntry(index) + increment);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,100,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,165,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,166,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,178,"            throw new DimensionMismatchException(d, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,191,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,205,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,206,        if ((start < 0) || (start >= dim)) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,207,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,210,        if ((end < 0) || (end >= dim)) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,211,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,214,        if (end < start) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,216,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,219,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,231,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,232,        RealVector result = v.copy();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,233,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,234,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,235,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,236,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,237,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,238,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,239,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,252,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,253,        RealVector result = v.mapMultiply(-1d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,254,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,255,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,256,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,257,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,258,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,259,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,260,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,271,        return copy().mapAddToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,282,        if (d != 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,283,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,285,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,304,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,305,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,306,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,307,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,308,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,309,            d += e.getValue() * v.getEntry(e.getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,310,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,311,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,322,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,323,        final double vNorm = v.getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,325,        if (norm == 0 ||,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,327,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,329,        return dotProduct(v) / (norm * vNorm);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,367,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,368,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,369,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,370,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,371,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,372,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,373,            d += diff * diff;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,374,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,375,        return FastMath.sqrt(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,389,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,390,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,391,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,392,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,393,            final double value = e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,394,            sum += value * value;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,395,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,396,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,410,        double norm = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,411,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,412,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,413,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,414,            norm += FastMath.abs(e.getValue());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,415,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,416,        return norm;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,430,        double norm = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,431,        Iterator<Entry> it = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,432,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,433,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,434,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,435,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,436,        return norm;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,451,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,452,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,453,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,454,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,455,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,456,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,457,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,458,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,476,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,477,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,478,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,479,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,480,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,481,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,482,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,483,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,493,        int minIndex    = -1;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,494,        double minValue = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,495,        Iterator<Entry> iterator = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,496,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,497,            final Entry entry = iterator.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,498,            if (entry.getValue() <= minValue) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,499,                minIndex = entry.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,500,                minValue = entry.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,502,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,503,        return minIndex;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,513,        final int minIndex = getMinIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,514,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,524,        int maxIndex    = -1;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,525,        double maxValue = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,526,        Iterator<Entry> iterator = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,527,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,528,            final Entry entry = iterator.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,529,            if (entry.getValue() >= maxValue) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,530,                maxIndex = entry.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,531,                maxValue = entry.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,533,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,534,        return maxIndex;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,544,        final int maxIndex = getMaxIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,545,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,557,        return copy().mapMultiplyToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,568,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,579,        return copy().mapSubtractToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,590,        return mapAddToSelf(-d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,601,        return copy().mapDivideToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,612,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,623,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,624,"            product = new OpenMapRealMatrix(this.getDimension(),",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,627,"            product = new Array2DRowRealMatrix(this.getDimension(),",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,630,        Iterator<Entry> thisIt = sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,631,        while (thisIt.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,632,            final Entry thisE = thisIt.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,633,            Iterator<Entry> otherIt = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,634,            while (otherIt.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,635,                final Entry otherE = otherIt.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,636,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,638,            },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,639,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,641,        return product;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,661,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,662,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,663,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,664,            e.setValue(value);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,665,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,666,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,676,        int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,677,        double[] values = new double[dim];,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,678,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,679,            values[i] = getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,681,        return values;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,692,        RealVector copy = copy();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,693,        copy.unitize();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,694,        return copy;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,705,        mapDivideToSelf(getNorm());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,706,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,724,        return new SparseEntryIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,738,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,739,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,776,        return copy().mapToSelf(function);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,793,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,794,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,795,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,796,            e.setValue(function.value(e.getValue()));,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,797,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,798,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,815,"        return copy().combineToSelf(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,831,        checkVectorDimensions(y);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,832,        for (int i = 0; i < getDimension(); i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,833,            final double xi = getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,834,            final double yi = y.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,835,"            setEntry(i, a * xi + b * yi);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,837,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,851,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,852,"        visitor.start(dim, 0, dim - 1);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,853,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,854,"            visitor.visit(i, getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,856,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,873,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,874,"        visitor.start(getDimension(), start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,875,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,876,"            visitor.visit(i, getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,878,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,893,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,912,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,925,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,926,"        visitor.start(dim, 0, dim - 1);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,927,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,928,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,930,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,947,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,948,"        visitor.start(getDimension(), start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,949,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,950,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,952,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,967,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,986,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1134,        return new RealVector() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,995,        public Entry() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,996,            setIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,997,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1005,            return getEntry(getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1014,"            setEntry(getIndex(), value);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1015,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1023,            return index;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1032,            this.index = index;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1033,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1435,            class UnmodifiableEntry extends Entry {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1439,                    return v.getEntry(getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1445,                    throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,323,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,44,    protected AbstractRealMatrix() {},0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,54,        if (rowDimension < 1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,55,            throw new NotStrictlyPositiveException(rowDimension);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,57,        if (columnDimension < 1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,58,            throw new NotStrictlyPositiveException(columnDimension);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,60,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,73,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,74,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,76,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,77,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,82,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,90,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,91,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,93,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,94,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,99,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,104,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,105,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,107,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,108,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,109,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,113,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,118,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,119,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,121,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,122,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,123,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,127,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,135,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,136,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,137,        final int nSum  = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,139,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,140,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,141,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,142,                for (int i = 0; i < nSum; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,145,"                out.setEntry(row, col, sum);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,149,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,154,        return m.multiply(this);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,159,        if (p < 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,163,        if (!isSquare()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,167,        if (p == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,171,        if (p == 1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,172,            return this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,175,        final int power = p - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,186,        int maxI = -1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,189,            if (binaryRepresentation[i] == '1') {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,190,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,191,                nonZeroPositions.add(pos);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,194,                if (maxI == -1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,195,                    maxI = pos;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,201,        results[0] = this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,203,        for (int i = 1; i <= maxI; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,204,            results[i] = results[i-1].multiply(results[i-1]);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,207,        RealMatrix result = this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,209,        for (Integer i : nonZeroPositions) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,210,            result = result.multiply(results[i]);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,211,        },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,213,        return result;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,220,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,221,            final double[] dataI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,222,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,223,"                dataI[j] = getEntry(i, j);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,227,        return data;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,299,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,301,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,302,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,307,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,316,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,328,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,336,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,337,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,338,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,369,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,374,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,375,        if ((destination.length < selectedRows.length) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,382,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,383,            final double[] destinationI = destination[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,384,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,388,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,393,        MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,394,        final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,395,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,396,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,399,        final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,400,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,404,        for (int r = 1; r < nRows; ++r) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,405,            if (subMatrix[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,410,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,411,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,415,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,416,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,420,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,424,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,425,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,426,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,427,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,428,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,431,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,436,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,437,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,438,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,440,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,444,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,445,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,447,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,451,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,452,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,453,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,454,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,455,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,458,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,463,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,464,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,465,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,471,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,472,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,474,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,478,"        return new ArrayRealVector(getRow(row), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,483,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,484,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,485,        if (vector.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,489,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,490,"            setEntry(row, i, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,492,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,496,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,501,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,502,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,503,        if (vector.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,504,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,507,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,508,"            setEntry(i, column, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,510,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,514,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,515,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,516,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,517,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,518,"            out[i] = getEntry(row, i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,521,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,526,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,527,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,528,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,529,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,531,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,532,"            setEntry(row, i, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,534,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,538,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,539,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,540,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,541,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,542,"            out[i] = getEntry(i, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,545,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,550,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,551,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,552,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,555,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,556,"            setEntry(i, column, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,558,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,568,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,569,"        setEntry(row, column, getEntry(row, column) + increment);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,570,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,574,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,575,"        setEntry(row, column, getEntry(row, column) * factor);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,576,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,580,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,581,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,582,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,583,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,593,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,598,        return getColumnDimension() == getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,621,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,622,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,623,        if (nRows != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,624,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,626,        double trace = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,627,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,628,"            trace += getEntry(i, i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,630,        return trace;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,635,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,636,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,637,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,638,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,641,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,642,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,643,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,644,            for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,645,"                sum += getEntry(row, i) * v[i];",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,647,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,650,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,657,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,658,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,659,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,660,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,661,            if (v.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,662,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,665,            final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,666,            for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,667,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,668,                for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,669,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,671,                out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,674,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,681,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,682,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,683,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,684,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,687,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,688,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,689,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,690,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,691,"                sum += getEntry(i, col) * v[i];",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,693,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,696,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,702,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,703,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,705,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,706,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,707,            if (v.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,708,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,711,            final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,712,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,713,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,714,                for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,715,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,717,                out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,720,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,726,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,727,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,728,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,729,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,730,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,731,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,732,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,733,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,736,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,741,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,742,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,743,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,744,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,745,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,746,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,749,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,756,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,757,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,759,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,760,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,761,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,762,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,763,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,766,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,773,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,774,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,776,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,777,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,778,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,781,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,786,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,787,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,788,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,789,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,790,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,791,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,792,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,793,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,796,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,801,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,802,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,803,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,804,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,805,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,806,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,809,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,816,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,817,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,819,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,820,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,821,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,822,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,823,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,826,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,836,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,837,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,838,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,841,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,846,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,851,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,858,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,865,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,874,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,875,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,876,        final StringBuffer res = new StringBuffer();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,877,        String fullClassName = getClass().getName();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,878,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,879,"        res.append(shortClassName).append(""{"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,881,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,882,            if (i > 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,883,"                res.append("","");",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,885,"            res.append(""{"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,886,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,887,                if (j > 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,888,"                    res.append("","");",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,890,"                res.append(getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,892,"            res.append(""}"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,895,"        res.append(""}"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,896,        return res.toString();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,909,        if (object == this ) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,910,            return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,912,        if (object instanceof RealMatrix == false) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,913,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,915,        RealMatrix m = (RealMatrix) object;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,916,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,917,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,918,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,919,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,921,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,922,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,923,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,924,                    return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,928,        return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,938,        int ret = 7;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,939,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,940,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,941,        ret = ret * 31 + nRows;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,942,        ret = ret * 31 + nCols;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,943,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,944,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,945,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,949,        return ret;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,812,        protected OpenMapSparseIterator() {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,813,            iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,814,            current = new OpenMapEntry(iter);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,815,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,819,            return iter.hasNext();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,824,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,825,            return current;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,830,"            throw new UnsupportedOperationException(""Not supported"");",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,805,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,56,"        this(0, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,57,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,65,"        this(dimension, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,66,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,74,"    public OpenMapRealVector(int dimension, double epsilon) {",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,75,        virtualSize = dimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,76,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,77,        this.epsilon = epsilon;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,78,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,86,"    protected OpenMapRealVector(OpenMapRealVector v, int resize) {",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,87,        virtualSize = v.getDimension() + resize;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,88,        entries = new OpenIntToDoubleHashMap(v.entries);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,89,        epsilon = v.epsilon;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,90,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,99,"        this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,100,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,110,"    public OpenMapRealVector(int dimension, int expectedSize, double epsilon) {",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,111,        virtualSize = dimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,112,"        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,113,        this.epsilon = epsilon;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,114,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,152,"        this(values, DEFAULT_ZERO_TOLERANCE);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,153,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,162,"    public OpenMapRealVector(Double[] values, double epsilon) {",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,163,        virtualSize = values.length;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,164,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,165,        this.epsilon = epsilon;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,166,        for (int key = 0; key < values.length; key++) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,167,            double value = values[key].doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,168,            if (!isDefaultValue(value)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,169,"                entries.put(key, value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,172,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,190,    public OpenMapRealVector(RealVector v) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,191,        virtualSize = v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,192,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,193,        epsilon = DEFAULT_ZERO_TOLERANCE;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,194,        for (int key = 0; key < virtualSize; key++) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,195,            double value = v.getEntry(key);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,196,            if (!isDefaultValue(value)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,197,"                entries.put(key, value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,200,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,226,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,227,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,228,            return add((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,230,            return super.add(v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,244,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,245,        boolean copyThis = entries.size() > v.entries.size();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,246,        OpenMapRealVector res = copyThis ? this.copy() : v.copy();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,247,        Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,248,        OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,249,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,250,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,251,            int key = iter.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,252,            if (randomAccess.containsKey(key)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,253,"                res.setEntry(key, randomAccess.get(key) + iter.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,255,"                res.setEntry(key, iter.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,257,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,258,        return res;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,267,"        OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,268,        Iterator iter = v.entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,269,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,270,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,271,"            res.setEntry(iter.key() + virtualSize, iter.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,273,        return res;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,279,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,280,            return append((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,282,"            final OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,283,            for (int i = 0; i < v.getDimension(); i++) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,284,"                res.setEntry(i + virtualSize, v.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,286,            return res;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,293,"        OpenMapRealVector res = new OpenMapRealVector(this, 1);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,294,"        res.setEntry(virtualSize, d);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,295,        return res;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,304,        return new OpenMapRealVector(this);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,317,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,318,        boolean thisIsSmaller  = entries.size() < v.entries.size();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,319,        Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,320,        OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,321,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,322,        while(iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,323,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,324,            d += iter.value() * larger.get(iter.key());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,326,        return d;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,332,        if(v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,333,            return dotProduct((OpenMapRealVector)v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,335,            return super.dotProduct(v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,380,        checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,381,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,382,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,384,        checkIndex(index + n - 1);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,385,        OpenMapRealVector res = new OpenMapRealVector(n);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,386,        int end = index + n;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,387,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,388,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,389,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,390,            int key = iter.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,391,            if (key >= index && key < end) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,392,"                res.setEntry(key - index, iter.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,394,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,395,        return res;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,413,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,414,        double res = 0;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,415,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,416,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,417,            int key = iter.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,419,            delta = iter.value() - v.getEntry(key);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,420,            res += delta * delta;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,421,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,422,        iter = v.getEntries().iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,423,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,424,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,425,            int key = iter.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,426,            if (!entries.containsKey(key)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,427,                final double value = iter.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,428,                res += value * value;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,430,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,431,        return FastMath.sqrt(res);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,437,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,438,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,439,            return getDistance((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,441,            return super.getDistance(v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,462,        double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,463,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,464,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,465,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,466,            double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,467,            max += delta;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,468,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,469,        iter = v.getEntries().iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,470,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,471,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,472,            int key = iter.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,473,            if (!entries.containsKey(key)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,474,                double delta = FastMath.abs(iter.value());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,475,                max +=  FastMath.abs(delta);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,477,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,478,        return max;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,484,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,485,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,486,            return getL1Distance((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,488,            return super.getL1Distance(v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,499,        double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,500,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,501,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,502,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,503,            double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,504,            if (delta > max) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,505,                max = delta;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,507,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,508,        iter = v.getEntries().iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,509,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,510,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,511,            int key = iter.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,512,            if (!entries.containsKey(key)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,513,                if (iter.value() > max) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,514,                    max = iter.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,517,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,518,        return max;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,524,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,525,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,526,            return getLInfDistance((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,528,            return super.getLInfDistance(v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,535,        boolean infiniteFound = false;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,536,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,537,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,538,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,539,            final double value = iter.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,540,            if (Double.isNaN(value)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,541,                return false;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,543,            if (Double.isInfinite(value)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,544,                infiniteFound = true;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,546,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,547,        return infiniteFound;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,553,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,554,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,555,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,556,            if (Double.isNaN(iter.value())) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,557,                return true;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,560,        return false;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,566,        return copy().mapAddToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,572,        for (int i = 0; i < virtualSize; i++) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,573,"            setEntry(i, getEntry(i) + d);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,575,        return this;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,581,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,582,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,599,        checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,600,        checkIndex(index + v.getDimension() - 1);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,601,        for (int i = 0; i < v.getDimension(); i++) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,602,"            setEntry(i + index, v.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,604,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,609,        for (int i = 0; i < virtualSize; i++) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,610,"            setEntry(i, value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,612,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,623,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,624,        OpenMapRealVector res = copy();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,625,        Iterator iter = v.getEntries().iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,626,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,627,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,628,            int key = iter.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,629,            if (entries.containsKey(key)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,630,"                res.setEntry(key, entries.get(key) - iter.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,632,"                res.setEntry(key, -iter.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,634,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,635,        return res;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,641,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,642,        if (v instanceof OpenMapRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,643,            return subtract((OpenMapRealVector) v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,645,            return super.subtract(v);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,652,        OpenMapRealVector res = copy();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,653,        res.unitize();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,654,        return res;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,660,        double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,661,        if (isDefaultValue(norm)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,662,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,664,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,665,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,666,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,667,"            entries.put(iter.key(), iter.value() / norm);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,669,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,674,        double[] res = new double[virtualSize];,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,675,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,676,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,677,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,678,            res[iter.key()] = iter.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,680,        return res;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,691,        final int prime = 31;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,692,        int result = 1;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,694,        temp = Double.doubleToLongBits(epsilon);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,695,        result = prime * result + (int) (temp ^ (temp >>> 32));,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,696,        result = prime * result + virtualSize;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,697,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,698,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,699,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,700,            temp = Double.doubleToLongBits(iter.value());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,701,            result = prime * result + (int) (temp ^ (temp >>32));,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,703,        return result;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,714,        if (this == obj) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,715,            return true;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,717,        if (!(obj instanceof OpenMapRealVector)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,718,            return false;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,720,        OpenMapRealVector other = (OpenMapRealVector) obj;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,721,        if (virtualSize != other.virtualSize) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,722,            return false;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,724,        if (Double.doubleToLongBits(epsilon) !=,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,726,            return false;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,728,        Iterator iter = entries.iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,729,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,730,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,731,            double test = other.getEntry(iter.key());,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,732,            if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,733,                return false;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,735,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,736,        iter = other.getEntries().iterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,737,        while (iter.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,738,            iter.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,739,            double test = iter.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,740,            if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,741,                return false;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,743,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,744,        return true;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,753,        return (double)entries.size()/(double)getDimension();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,759,        return new OpenMapSparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,776,        protected OpenMapEntry(Iterator iter) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,777,            this.iter = iter;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,778,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,783,            return iter.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,789,"            entries.put(iter.key(), value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,790,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealVector,29,795,            return iter.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,49,"        super(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,50,        long lRow = rowDimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,51,        long lCol = columnDimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,52,        if (lRow * lCol >= Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,53,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,55,        this.rows = rowDimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,56,        this.columns = columnDimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,57,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,58,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,65,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,66,        this.rows = matrix.rows;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,67,        this.columns = matrix.columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,68,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,69,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,74,        return new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,80,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,86,        return columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,100,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,102,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,103,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,104,            iterator.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,105,            final int row = iterator.key() / columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,106,            final int col = iterator.key() - row * columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,107,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,108,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,110,        return out;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,118,            return subtract((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,119,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,120,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,134,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,136,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,137,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,138,            iterator.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,139,            final int row = iterator.key() / columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,140,            final int col = iterator.key() - row * columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,141,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,142,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,144,        return out;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,151,            return multiply((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,152,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,155,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,157,            final int outCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,158,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,159,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,160,                iterator.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,161,                final double value = iterator.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,162,                final int key      = iterator.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,163,                final int i        = key / columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,164,                final int k        = key % columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,165,                for (int j = 0; j < outCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,166,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,168,            },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,170,            return out;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,185,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,187,        final int outCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,188,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,189,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,190,            iterator.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,191,            final double value = iterator.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,192,            final int key      = iterator.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,193,            final int i        = key / columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,194,            final int k        = key % columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,195,            for (int j = 0; j < outCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,196,"                final int rightKey = m.computeKey(k, j);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,197,                if (m.entries.containsKey(rightKey)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,198,"                    final int outKey = out.computeKey(i, j);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,199,                    final double outValue =,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,201,                    if (outValue == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,202,                        out.entries.remove(outKey);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,204,"                        out.entries.put(outKey, outValue);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,208,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,210,        return out;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,216,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,217,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,218,"        return entries.get(computeKey(row, column));",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,224,        return rows;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,230,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,231,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,232,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,233,"            entries.remove(computeKey(row, column));",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,235,"            entries.put(computeKey(row, column), value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,237,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,242,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,243,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,244,"        final int key = computeKey(row, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,245,        final double value = entries.get(key) + increment;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,246,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,247,            entries.remove(key);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,249,"            entries.put(key, value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,251,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,256,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,257,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,258,"        final int key = computeKey(row, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,259,        final double value = entries.get(key) * factor;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,260,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,261,            entries.remove(key);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,263,"            entries.put(key, value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,265,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,274,        return row * columns + column;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,29,31,public class OpenMapRealMatrix extends AbstractRealMatrix,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,45,    public Array2DRowRealMatrix() {},0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,56,"        super(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,57,        data = new double[rowDimension][columnDimension];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,58,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,75,        copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,76,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,95,"    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,96,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,97,            copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,99,            if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,100,                throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,102,            final int nRows = d.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,103,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,104,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,106,            final int nCols = d[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,107,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,108,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,110,            for (int r = 1; r < nRows; r++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,111,                if (d[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,112,"                    throw new DimensionMismatchException(d[r].length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,115,            data = d;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,117,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,126,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,127,        final int nRows = v.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,128,        data = new double[nRows][1];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,129,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,130,            data[row][0] = v[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,132,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,138,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,144,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,157,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,159,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,160,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,161,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,162,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,163,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,164,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,165,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,166,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,167,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,171,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,184,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,186,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,187,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,188,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,189,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,190,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,191,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,192,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,193,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,194,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,198,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,211,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,213,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,214,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,215,        final int nSum = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,217,        final double[][] outData = new double[nRows][nCols];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,219,        final double[] mCol = new double[nSum];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,220,        final double[][] mData = m.data;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,223,        for (int col = 0; col < nCols; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,226,            for (int mRow = 0; mRow < nSum; mRow++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,227,                mCol[mRow] = mData[mRow][col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,230,            for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,231,                final double[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,232,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,233,                for (int i = 0; i < nSum; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,234,                    sum += dataRow[i] * mCol[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,236,                outData[row][col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,240,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,246,        return copyOut();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,255,        return data;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,262,        if (data == null) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,263,            if (row > 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,264,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,266,            if (column > 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,267,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,269,            MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,270,            final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,271,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,272,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,275,            final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,276,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,277,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,279,            data = new double[subMatrix.length][nCols];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,280,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,281,                if (subMatrix[i].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,282,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,286,        } else {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,287,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,290,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,296,        return data[row][column];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,303,        data[row][column] = value;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,304,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,309,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,310,        data[row][column] += increment;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,311,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,316,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,317,        data[row][column] *= factor;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,318,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,323,        return (data == null) ? 0 : data.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,335,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,336,        final int nCols = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,337,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,338,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,340,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,341,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,342,            final double[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,343,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,344,            for (int i = 0; i < nCols; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,345,                sum += dataRow[i] * v[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,347,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,349,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,355,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,356,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,357,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,358,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,361,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,362,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,363,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,364,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,365,                sum += data[i][col] * v[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,367,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,370,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,377,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,378,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,379,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,380,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,381,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,382,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,383,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,386,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,392,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,393,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,395,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,396,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,397,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,398,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,401,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,409,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,410,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,412,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,413,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,414,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,415,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,418,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,426,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,427,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,429,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,430,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,431,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,432,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,435,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,441,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,442,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,443,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,444,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,445,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,446,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,447,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,450,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,456,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,457,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,459,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,460,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,461,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,464,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,472,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,473,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,475,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,476,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,477,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,478,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,481,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,489,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,490,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,492,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,493,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,494,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,497,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,506,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,507,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,509,        for (int i = 0; i < nRows; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,510,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,512,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,526,"        setSubMatrix(in, 0, 0);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,29,527,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,56,    public ArrayRealVector() {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,57,        data = new double[0];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,58,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,65,    public ArrayRealVector(int size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,66,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,67,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,75,"    public ArrayRealVector(int size, double preset) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,76,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,77,"        Arrays.fill(data, preset);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,78,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,86,    public ArrayRealVector(double[] d) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,87,        data = d.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,88,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,104,"    public ArrayRealVector(double[] d, boolean copyArray) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,105,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,106,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,108,        data = copyArray ? d.clone() :  d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,109,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,121,"    public ArrayRealVector(double[] d, int pos, int size) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,122,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,123,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,125,        if (d.length < pos + size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,126,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,128,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,129,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,130,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,137,    public ArrayRealVector(Double[] d) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,138,        data = new double[d.length];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,139,        for (int i = 0; i < d.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,140,            data[i] = d[i].doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,142,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,154,"    public ArrayRealVector(Double[] d, int pos, int size) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,155,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,156,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,158,        if (d.length < pos + size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,159,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,161,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,162,        for (int i = pos; i < pos + size; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,163,            data[i - pos] = d[i].doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,165,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,173,    public ArrayRealVector(RealVector v) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,174,        if (v == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,175,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,177,        data = new double[v.getDimension()];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,178,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,179,            data[i] = v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,181,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,190,"        this(v, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,191,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,200,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,201,        data = deep ? v.data.clone() : v.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,202,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,209,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,210,        data = new double[v1.data.length + v2.data.length];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,211,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,212,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,213,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,220,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,221,        final int l1 = v1.data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,222,        final int l2 = v2.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,223,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,224,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,225,        for (int i = 0; i < l2; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,226,            data[l1 + i] = v2.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,228,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,235,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,236,        final int l1 = v1.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,237,        final int l2 = v2.data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,238,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,239,        for (int i = 0; i < l1; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,240,            data[i] = v1.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,242,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,243,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,250,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,251,        final int l1 = v1.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,252,        final int l2 = v2.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,253,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,254,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,255,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,256,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,263,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,264,        final int l1 = v1.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,265,        final int l2 = v2.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,266,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,267,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,268,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,269,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,276,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,277,        final int l1 = v1.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,278,        final int l2 = v2.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,279,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,280,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,281,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,282,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,287,"        return new ArrayRealVector(this, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,293,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,294,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,295,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,296,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,297,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,298,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,299,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,300,                resultData[i] = data[i] + vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,302,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,304,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,305,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,306,            Iterator<Entry> it = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,307,            while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,308,                final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,309,                out[e.getIndex()] += e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,310,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,311,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,318,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,319,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,320,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,321,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,322,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,323,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,324,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,325,                resultData[i] = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,327,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,329,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,330,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,331,            Iterator<Entry> it = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,332,            while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,333,                final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,334,                out[e.getIndex()] -= e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,335,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,336,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,343,        return copy().mapToSelf(function);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,349,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,350,            data[i] = function.value(data[i]);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,352,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,358,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,359,            data[i] = data[i] + d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,361,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,367,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,368,            data[i] = data[i] - d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,370,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,376,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,377,            data[i] = data[i] * d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,379,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,385,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,386,            data[i] = data[i] / d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,388,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,394,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,395,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,396,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,397,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,398,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,399,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,400,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,401,                resultData[i] = data[i] * vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,403,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,405,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,406,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,407,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,408,                out[i] *= v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,410,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,417,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,418,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,419,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,420,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,421,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,422,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,423,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,424,                resultData[i] = data[i] / vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,426,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,428,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,429,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,430,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,431,                out[i] /= v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,433,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,444,        return data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,450,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,451,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,452,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,453,            double dot = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,454,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,455,                dot += data[i] * vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,457,            return dot;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,459,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,460,            double dot = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,461,            Iterator<Entry> it = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,462,            while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,463,                final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,464,                dot += data[e.getIndex()] * e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,465,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,466,            return dot;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,473,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,474,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,475,            sum += a * a;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,477,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,483,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,484,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,485,            sum += FastMath.abs(a);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,487,        return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,493,        double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,494,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,495,"            max = FastMath.max(max, FastMath.abs(a));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,497,        return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,503,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,504,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,505,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,506,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,507,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,508,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,509,                sum += delta * delta;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,511,            return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,513,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,514,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,515,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,516,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,517,                sum += delta * delta;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,519,            return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,526,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,527,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,528,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,529,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,530,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,531,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,532,                sum += FastMath.abs(delta);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,534,            return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,536,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,537,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,538,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,539,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,540,                sum += FastMath.abs(delta);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,542,            return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,549,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,550,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,551,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,552,            double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,553,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,554,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,555,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,557,            return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,559,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,560,            double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,561,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,562,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,563,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,565,            return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,572,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,573,        if (norm == 0) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,574,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,576,        return mapDivide(norm);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,582,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,583,        if (norm == 0) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,584,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,586,        mapDivideToSelf(norm);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,587,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,592,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,598,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,599,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,600,            final int m = data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,601,            final int n = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,602,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,603,            for (int i = 0; i < m; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,604,                for (int j = 0; j < n; j++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,605,"                    out.setEntry(i, j, data[i] * vData[j]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,608,            return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,610,            final int m = data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,611,            final int n = v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,612,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,613,            for (int i = 0; i < m; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,614,                for (int j = 0; j < n; j++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,615,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,618,            return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,626,            return data[index];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,627,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,628,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,636,        return data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,643,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,644,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,645,"            return new ArrayRealVector(this, v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,656,"        return new ArrayRealVector(this, v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,662,        final double[] out = new double[data.length + 1];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,663,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,664,        out[data.length] = in;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,665,"        return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,671,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,672,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,674,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,676,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,680,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,677,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,678,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,679,            checkIndex(index + n - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,681,        return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,688,            data[index] = value;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,691,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,689,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,690,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,692,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,698,        data[index] += increment;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,702,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,699,        } catch(IndexOutOfBoundsException e){,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,700,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,703,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,708,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,709,"            setSubVector(index, ((ArrayRealVector) v).data);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,712,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,713,                    data[i] = v.getEntry(i - index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,718,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,715,            } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,716,                checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,717,                checkIndex(index + v.getDimension() - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,720,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,732,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,736,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,733,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,734,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,735,            checkIndex(index + v.length - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,737,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,742,"        Arrays.fill(data, value);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,743,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,748,        return data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,754,        return DEFAULT_FORMAT.format(this);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,766,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,767,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,778,        if (data.length != n) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,779,"            throw new DimensionMismatchException(data.length, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,781,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,791,        for (double v : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,792,            if (Double.isNaN(v)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,793,                return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,796,        return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,808,        if (isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,809,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,812,        for (double v : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,813,            if (Double.isInfinite(v)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,814,                return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,818,        return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,837,        if (this == other) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,838,            return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,841,        if (!(other instanceof RealVector)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,842,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,845,        RealVector rhs = (RealVector) other;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,846,        if (data.length != rhs.getDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,847,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,850,        if (rhs.isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,851,            return this.isNaN();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,854,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,855,            if (data[i] != rhs.getEntry(i)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,856,                return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,859,        return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,870,        if (isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,871,            return 9;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,873,        return MathUtils.hash(data);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,879,"        return copy().combineToSelf(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,885,        if (y instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,886,            final double[] yData = ((ArrayRealVector) y).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,887,            checkVectorDimensions(yData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,888,            for (int i = 0; i < this.data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,889,                data[i] = a * data[i] + b * yData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,891,        } else {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,892,            checkVectorDimensions(y);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,893,            for (int i = 0; i < this.data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,894,                data[i] = a * data[i] + b * y.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,897,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,903,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,904,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,905,"            visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,907,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,914,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,915,"        visitor.start(data.length, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,916,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,917,"            visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,919,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,929,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,940,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,946,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,947,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,948,"            data[i] = visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,950,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,957,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,958,"        visitor.start(data.length, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,959,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,960,"            data[i] = visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,962,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,972,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,983,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,29,39,public class ArrayRealVector extends RealVector implements Serializable {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,247,                this.endRow = endRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,248,                columnSum   = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,249,                maxColSum   = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,250,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,254,                columnSum += FastMath.abs(value);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,255,                if (row == endRow) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,257,                    columnSum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,259,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,263,                return maxColSum;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1058,        protected SparseEntryIterator() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1059,            dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1060,            current = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1061,            next = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1062,            if (next.getValue() == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1063,                advance(next);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1065,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1073,            if (e == null) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1074,                return;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1077,                e.setIndex(e.getIndex() + 1);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1078,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1079,            if (e.getIndex() >= dim) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1080,                e.setIndex(-1);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1082,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1086,            return next.getIndex() >= 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1091,            int index = next.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1092,            if (index < 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1093,                throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1095,            current.setIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1096,            advance(next);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1097,            return current;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1102,            throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1049,    protected class SparseEntryIterator implements Iterator<Entry> {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,279,                sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,280,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,284,                sum += value * value;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,285,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,289,                return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,583,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,588,"                out.setEntry(column, row, value);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,589,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,358,                this.startRow    = startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,359,                this.startColumn = startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,360,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,365,                destination[row - startRow][column - startColumn] = value;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,29,366,            },0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,739,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,742,            private int i = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,745,            private Entry e = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,749,                return i < dim;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,754,                e.setIndex(i++);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,755,                return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,760,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1178,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1180,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1184,                        return i.hasNext();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1189,                        e.setIndex(i.next().getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1190,                        return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,29,1195,                        throw new MathUnsupportedOperationException();,0.0,0,,0
