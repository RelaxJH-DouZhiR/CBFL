project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,0.125,0,,0
org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0.125,0,,0
org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0.125,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,0.09091,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0.09091,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,0.09091,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,0.09091,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,0.09091,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,0.09091,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,0.09091,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0.04348,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",0.04348,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,0.04348,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,0.04348,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.04348,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.04348,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",0.04348,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,268,                final int qStart = jBlock * BLOCK_SIZE;,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,271,                blocks[blockIndex] = new double[iHeight * jWidth];,0.04,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,272,                ++blockIndex;,0.04,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,159,        double[] target  = new double[observations.size()];,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,162,        for (WeightedObservedPoint point : observations) {,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,164,            weights[i] = point.getWeight();,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,165,            ++i;,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,166,        },0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,169,        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,0.03846,0,,0
org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,193,        },0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,0.03846,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));",0.03704,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,93,    },0.03704,0,,0
org/apache/commons/math3/fitting/WeightedObservedPoint,14,75,        return y;,0.03704,0,,0
org/apache/commons/math3/fitting/WeightedObservedPoint,14,45,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",0.03571,0,,0
org/apache/commons/math3/fitting/WeightedObservedPoint,14,46,        this.weight = weight;,0.03571,0,,0
org/apache/commons/math3/fitting/WeightedObservedPoint,14,47,        this.x      = x;,0.03571,0,,0
org/apache/commons/math3/fitting/WeightedObservedPoint,14,48,        this.y      = y;,0.03571,0,,0
org/apache/commons/math3/fitting/WeightedObservedPoint,14,49,    },0.03571,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,63,    public CurveFitter(final MultivariateVectorOptimizer optimizer) {,0.03448,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,64,        this.optimizer = optimizer;,0.03448,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,65,        observations = new ArrayList<WeightedObservedPoint>();,0.03448,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,66,    },0.03448,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,156,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0.02381,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,157,    },0.02381,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,268,        super(null); // No custom convergence criterion.,0.01639,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,269,        this.initialStepBoundFactor = initialStepBoundFactor;,0.01639,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,270,        this.costRelativeTolerance = costRelativeTolerance;,0.01639,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,271,        this.parRelativeTolerance = parRelativeTolerance;,0.01639,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,272,        this.orthoTolerance = orthoTolerance;,0.01639,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,273,        this.qrRankingThreshold = threshold;,0.01639,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,274,    },0.01639,0,,0
org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,35,    public ModelFunctionJacobian(MultivariateMatrixFunction j) {,0.01176,0,,0
org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,36,        jacobian = j;,0.01176,0,,0
org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,37,    },0.01176,0,,0
org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,35,    public ModelFunction(MultivariateVectorFunction m) {,0.01163,0,,0
org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,36,        model = m;,0.01163,0,,0
org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,37,    },0.01163,0,,0
org/apache/commons/math3/util/FastMath,14,3421,        return (a <= b) ? a : b;,0.01163,0,,0
org/apache/commons/math3/util/MathUtils,14,264,        if (o == null) {,0.01163,0,,0
org/apache/commons/math3/util/MathUtils,14,267,    },0.01163,0,,0
org/apache/commons/math3/util/CompositeFormat,14,43,        return getDefaultNumberFormat(Locale.getDefault());,0.01163,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,41,    public Weight(double[] weight) {,0.01163,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,42,        final int dim = weight.length;,0.01163,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",0.01163,1,,0
org/apache/commons/math3/optim/nonlinear/vector/Target,14,38,    public Target(double[] observations) {,0.01163,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Target,14,39,        target = observations.clone();,0.01163,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Target,14,40,    },0.01163,0,,0
org/apache/commons/math3/optim/MaxEval,14,35,    public MaxEval(int max) {,0.01163,0,,0
org/apache/commons/math3/optim/MaxEval,14,36,        if (max <= 0) {,0.01163,0,,0
org/apache/commons/math3/optim/MaxEval,14,40,        maxEval = max;,0.01163,0,,0
org/apache/commons/math3/optim/MaxEval,14,41,    },0.01163,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",0.01163,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,117,    },0.01163,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,215,        return getInstance(Locale.getDefault());,0.01163,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0.01163,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0.01163,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,81,        return (rows * columns <= 4096) ?,0.01163,0,,0
org/apache/commons/math3/util/FastMath,14,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,115,    private static final double LN_QUICK_COEF[][] = {,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,128,    private static final double LN_HI_PREC_COEF[][] = {,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,141,    private static final double SINE_TABLE_A[] =,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,160,    private static final double SINE_TABLE_B[] =,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,179,    private static final double COSINE_TABLE_A[] =,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,198,    private static final double COSINE_TABLE_B[] =,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,218,    private static final double TANGENT_TABLE_A[] =,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,237,    private static final double TANGENT_TABLE_B[] =,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,256,    private static final long RECIP_2PI[] = new long[] {,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,277,    private static final long PI_O_4_BITS[] = new long[] {,0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.01149,0,,0
org/apache/commons/math3/util/FastMath,14,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.01149,0,,0
org/apache/commons/math3/util/CompositeFormat,14,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.01149,0,,0
org/apache/commons/math3/util/CompositeFormat,14,55,        nf.setMaximumFractionDigits(10);,0.01149,0,,0
org/apache/commons/math3/util/CompositeFormat,14,56,        return nf;,0.01149,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,67,        throws NotStrictlyPositiveException {,0.01149,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,68,        if (rowDimension < 1) {,0.01149,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,71,        if (columnDimension < 1) {,0.01149,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,74,    },0.01149,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,0.01149,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0.01149,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,51,    },0.01149,0,,0
org/apache/commons/math3/linear/RealLinearOperator,14,53,public abstract class RealLinearOperator {,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,101,    },0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,133,                            final NumberFormat format) {,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,134,        this.prefix            = prefix;,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,135,        this.suffix            = suffix;,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,136,        this.rowPrefix         = rowPrefix;,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,137,        this.rowSuffix         = rowSuffix;,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,138,        this.rowSeparator      = rowSeparator;,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,139,        this.columnSeparator   = columnSeparator;,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,140,        this.format            = format;,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,142,        this.format.setGroupingUsed(false);,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,143,    },0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,207,        return format;,0.01149,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.01149,0,,0
org/apache/commons/math3/util/Precision,14,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0.01124,0,,0
org/apache/commons/math3/util/Precision,14,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,0.01124,0,,0
org/apache/commons/math3/util/Precision,14,78,    },0.01124,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,48,        super(checker);,0.01111,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,49,    },0.01111,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,48,        super(checker);,0.01111,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,49,    },0.01111,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,47,    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {,0.01111,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,48,        this.checker = checker;,0.01111,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,50,"        evaluations = new Incrementor(0, new MaxEvalCallback());",0.01111,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,51,"        iterations = new Incrementor(0, new MaxIterCallback());",0.01111,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,52,    },0.01111,0,,0
org/apache/commons/math3/util/Incrementor,14,80,                       MaxCountExceededCallback cb) {,0.01111,0,,0
org/apache/commons/math3/util/Incrementor,14,41,    private int count = 0;,0.01111,0,,0
org/apache/commons/math3/util/Incrementor,14,81,        if (cb == null){,0.01111,0,,0
org/apache/commons/math3/util/Incrementor,14,84,        maximalCount = max;,0.01111,0,,0
org/apache/commons/math3/util/Incrementor,14,85,        maxCountCallback = cb;,0.01111,0,,0
org/apache/commons/math3/util/Incrementor,14,86,    },0.01111,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,191,    private static class MaxEvalCallback,0.01111,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,53,        super(checker);,0.01111,1,,1
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },0.01111,1,,1
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,50,        super(checker);,0.01111,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,51,    },0.01111,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,206,    private static class MaxIterCallback,0.01111,0,,0
org/apache/commons/math3/fitting/PolynomialFitter,14,54,"        return fit(maxEval, new PolynomialFunction.Parametric(), guess);",0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,79,"        addObservedPoint(1.0, x, y);",0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,80,    },0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,102,        observations.add(observed);,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,103,    },0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,112,        return observations.toArray(new WeightedObservedPoint[observations.size()]);,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,119,        observations.clear();,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,120,    },0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,180,        return optimum.getPointRef();,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,51,public class CurveFitter<T extends ParametricUnivariateFunction> {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,62,        super.incrementEvaluationCount();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,63,        return model.value(params);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,88,        parseOptimizationData(optData);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,90,        checkParameters();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,92,        return super.optimize(optData);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,101,        return weightMatrix.copy();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,110,        return target.clone();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,119,        return target.length;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,136,        for (OptimizationData data : optData) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,137,            if (data instanceof ModelFunction) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,138,                model = ((ModelFunction) data).getModelFunction();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,139,                continue;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,141,            if (data instanceof Target) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,142,                target = ((Target) data).getTarget();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,143,                continue;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,145,            if (data instanceof Weight) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,146,                weightMatrix = ((Weight) data).getWeight();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,147,                continue;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,150,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,159,        if (target.length != weightMatrix.getColumnDimension()) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,160,"            throw new DimensionMismatchException(target.length,",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,163,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,35,public abstract class MultivariateVectorOptimizer,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,66,        parseOptimizationData(optData);,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,68,        checkParameters();,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,70,        return super.optimize(optData);,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,86,        for (OptimizationData data : optData) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,87,            if (data instanceof InitialGuess) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,88,                start = ((InitialGuess) data).getInitialGuess();,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,89,                continue;,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,91,            if (data instanceof SimpleBounds) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,92,                final SimpleBounds bounds = (SimpleBounds) data;,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,93,                lowerBound = bounds.getLower();,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,94,                upperBound = bounds.getUpper();,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,95,                continue;,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,98,    },0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,106,        return start == null ? null : start.clone();,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,112,        return lowerBound == null ? null : lowerBound.clone();,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,118,        return upperBound == null ? null : upperBound.clone();,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,125,        if (start != null) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,126,            final int dim = start.length;,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,127,            if (lowerBound != null) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,128,                if (lowerBound.length != dim) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,129,"                    throw new DimensionMismatchException(lowerBound.length, dim);",0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,131,                for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,132,                    final double v = start[i];,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,133,                    final double lo = lowerBound[i];,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,134,                    if (v < lo) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,135,"                        throw new NumberIsTooSmallException(v, lo, true);",0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,139,            if (upperBound != null) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,140,                if (upperBound.length != dim) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,141,"                    throw new DimensionMismatchException(upperBound.length, dim);",0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,143,                for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,144,                    final double v = start[i];,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,145,                    final double hi = upperBound[i];,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,146,                    if (v > hi) {,0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,147,"                        throw new NumberIsTooLargeException(v, hi, true);",0.0,0,,0
org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,152,    },0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,60,        return evaluations.getMaximalCount();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,72,        return evaluations.getCount();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,81,        return iterations.getMaximalCount();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,93,        return iterations.getCount();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,102,        return checker;,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,123,        parseOptimizationData(optData);,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,125,        evaluations.resetCount();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,126,        iterations.resetCount();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,128,        return doOptimize();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,147,        evaluations.incrementCount();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,148,    },0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,158,        iterations.incrementCount();,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,159,    },0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,175,        for (OptimizationData data : optData) {,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,176,            if (data instanceof MaxEval) {,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,177,                evaluations.setMaximalCount(((MaxEval) data).getMaxEval());,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,178,                continue;,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,180,            if (data instanceof MaxIter) {,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,181,                iterations.setMaximalCount(((MaxIter) data).getMaxIter());,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,182,                continue;,0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,185,    },0.0,0,,0
org/apache/commons/math3/fitting/WeightedObservedPoint,14,66,        return x;,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,220,                        final double[][] jacobian = new double[observations.size()][];,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,221,                        int i = 0;,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,222,                        for (WeightedObservedPoint observed : observations) {,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,223,"                            jacobian[i++] = f.gradient(observed.getX(), point);",0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,224,                        },0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,225,                        return jacobian;,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,184,    private class TheoreticalValuesFunction {,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,203,                        final double[] values = new double[observations.size()];,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,204,                        int i = 0;,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,205,                        for (WeightedObservedPoint observed : observations) {,0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,206,"                            values[i++] = f.value(observed.getX(), point);",0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,207,                        },0.0,0,,0
org/apache/commons/math3/fitting/CurveFitter,14,209,                        return values;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,45,        return model;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,45,        return jacobian;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,353,    private FastMath() {},0.0,0,,0
org/apache/commons/math3/util/FastMath,14,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,366,            return d; // These are un-normalised - don't try to convert,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,368,        long xl = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,369,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,370,        return Double.longBitsToDouble(xl);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,379,        return Math.sqrt(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,387,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,388,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,396,      if (x > 20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,397,          if (x >= LOG_MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,399,              final double t = exp(0.5 * x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,400,              return (0.5 * t) * t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,402,              return 0.5 * exp(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,404,      } else if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,405,          if (x <= -LOG_MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,407,              final double t = exp(-0.5 * x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,408,              return (0.5 * t) * t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,410,              return 0.5 * exp(-x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,414,      final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,415,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,416,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,418,"      exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,420,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,423,      double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,424,      double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,425,      double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,428,      double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,429,      temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,430,      double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,431,      double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,436,      recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,439,      temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,440,      yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,441,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,442,      temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,443,      yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,444,      ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,446,      double result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,447,      result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,448,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,456,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,457,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,458,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,466,      if (x > 20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,467,          if (x >= LOG_MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,469,              final double t = exp(0.5 * x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,470,              return (0.5 * t) * t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,472,              return 0.5 * exp(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,474,      } else if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,475,          if (x <= -LOG_MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,477,              final double t = exp(-0.5 * x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,478,              return (-0.5 * t) * t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,480,              return -0.5 * exp(-x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,484,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,485,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,488,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,489,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,490,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,495,      if (x > 0.25) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,496,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,497,"          exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,499,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,502,          double temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,503,          double yaa = ya + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,504,          double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,507,          double recip = 1.0/ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,508,          temp = recip * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,509,          double recipa = recip + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,510,          double recipb = recip - recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,515,          recipb += -yb * recip * recip;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,517,          recipa = -recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,518,          recipb = -recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,521,          temp = ya + recipa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,522,          yb += -(temp - ya - recipa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,523,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,524,          temp = ya + recipb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,525,          yb += -(temp - ya - recipb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,526,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,528,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,529,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,530,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,14,532,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,533,"          expm1(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,535,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,539,          double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,540,          double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,541,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,542,          double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,543,          double temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,544,          double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,545,          double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,547,          temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,548,          double za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,549,          double zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,554,          rb += yb*denomr;                        // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,555,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,558,          temp = ya + ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,559,          yb += -(temp - ya - ra);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,560,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,561,          temp = ya + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,562,          yb += -(temp - ya - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,563,          ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,565,          result = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,566,          result *= 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,569,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,570,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,573,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,581,      boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,583,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,584,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,593,      if (x > 20.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,594,          return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,597,      if (x < -20) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,598,          return -1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,601,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,602,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,605,      if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,606,          x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,607,          negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,611,      if (x >= 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,612,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,614,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,616,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,620,          double na = -1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,621,          double nb = -(na + 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,622,          double temp = na + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,623,          nb += -(temp - na - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,624,          na = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,627,          double da = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,628,          double db = -(da - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,629,          temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,630,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,631,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,633,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,634,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,635,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,638,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,639,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,640,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,641,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,647,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,649,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,651,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,652,      },0.0,0,,0
org/apache/commons/math3/util/FastMath,14,654,          double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,656,"          expm1(x*2.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,658,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,662,          double na = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,663,          double nb = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,666,          double da = 2.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,667,          double db = -(da - 2.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,668,          double temp = da + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,669,          db += -(temp - da - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,670,          da = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,672,          temp = da * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,673,          double daa = da + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,674,          double dab = da - daa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,677,          double ratio = na/da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,678,          temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,679,          double ratioa = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,680,          double ratiob = ratio - ratioa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,686,          ratiob += nb / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,688,          ratiob += -db * na / da / da;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,690,          result = ratioa + ratiob;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,693,      if (negate) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,694,          result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,697,      return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,713,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,714,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,715,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,716,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,720,        if (a > 0.167) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,723,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,724,            if (a > 0.097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,726,            } else if (a > 0.036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,728,            } else if (a > 0.0036) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,735,        return negative ? -absAsinh : absAsinh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,743,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,744,        if (a < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,745,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,746,            a = -a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,750,        if (a > 0.15) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,753,            final double a2 = a * a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,754,            if (a > 0.087) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,756,            } else if (a > 0.031) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,758,            } else if (a > 0.003) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,765,        return negative ? -absAtanh : absAtanh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,807,        return Math.random();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,831,"        return exp(x, 0.0, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,850,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,851,            intVal = (int) -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,853,            if (intVal > 746) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,854,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,855,                    hiPrec[0] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,856,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,858,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,861,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,864,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,865,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,866,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,868,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,871,            if (intVal == 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,874,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,875,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,876,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,878,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,881,            intVal++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,886,            intVal = -intVal;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,888,            intVal = (int) x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,890,            if (intVal > 709) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,891,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,893,                    hiPrec[1] = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,895,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,923,        double z = 0.04168701738764507;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,924,        z = z * epsilon + 0.1666666505023083;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,925,        z = z * epsilon + 0.5000000000042687;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,926,        z = z * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,927,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,934,        double tempA = intPartA * fracPartA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,941,        final double tempC = tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,943,        if (extra != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,944,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,946,            result = tempC*z + tempB + tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,949,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,951,            hiPrec[0] = tempA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,952,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,955,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,963,"      return expm1(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,972,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,973,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,976,        if (x <= -1.0 || x >= 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,979,            double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,980,"            exp(x, 0.0, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,981,            if (x > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,982,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,984,                final double ra = -1.0 + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,985,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,986,                rb += hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,987,                return ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,994,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,996,        if (x < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,997,            x = -x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,998,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1002,            int intFrac = (int) (x * 1024.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1003,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1004,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1006,            double temp = tempA + tempB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1007,            tempB = -(temp - tempA - tempB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1008,            tempA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1010,            temp = tempA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1011,            baseA = tempA + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1012,            baseB = tempB + (tempA - baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1014,            epsilon = x - intFrac/1024.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1019,        double zb = 0.008336750013465571;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1020,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1021,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1022,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1023,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1024,        zb = zb * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1026,        double za = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1027,        double temp = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1028,        zb = -(temp - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1029,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1031,        temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1032,        temp = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1033,        zb += za - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1034,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1037,        double ya = za * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1039,        temp = ya + za * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1040,        double yb = -(temp - ya - za * baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1041,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1043,        temp = ya + zb * baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1044,        yb += -(temp - ya - zb * baseA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1045,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1047,        temp = ya + zb * baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1048,        yb += -(temp - ya - zb*baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1049,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1053,        temp = ya + baseA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1054,        yb += -(temp - baseA - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1055,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1057,        temp = ya + za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1059,        yb += -(temp - ya - za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1060,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1062,        temp = ya + baseB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1064,        yb += -(temp - ya - baseB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1065,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1067,        temp = ya + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1069,        yb += -(temp - ya - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1070,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1072,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1074,            double denom = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1075,            double denomr = 1.0 / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1076,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1077,            double ratio = ya * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1078,            temp = ratio * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1079,            final double ra = ratio + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1080,            double rb = ratio - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1082,            temp = denom * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1083,            za = denom + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1084,            zb = denom - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1086,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1097,            rb += yb * denomr;                      // numerator,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1098,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1101,            ya = -ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1102,            yb = -rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1105,        if (hiPrecOut != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1106,            hiPrecOut[0] = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1107,            hiPrecOut[1] = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1110,        return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1120,"        return log(x, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1130,        if (x==0) { // Handle special case of +0/-0,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1131,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1133,        long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1137,            if (x != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1138,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1139,                    hiPrec[0] = Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1142,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1147,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1148,            if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1149,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1152,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1156,        int exp = (int)(bits >> 52)-1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1160,            if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1162,                if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1163,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1166,                return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1170,            bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1171,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1172,                --exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1173,                bits <<= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1178,        if (exp == -1 || exp == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1184,                double xa = x - 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1185,                double xb = xa - x + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1186,                double tmp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1187,                double aa = xa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1188,                double ab = xa - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1189,                xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1190,                xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1193,                double ya = lnCoef_last[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1194,                double yb = lnCoef_last[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1198,                    aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1199,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1201,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1202,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1203,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1207,                    aa = ya + lnCoef_i[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1208,                    ab = yb + lnCoef_i[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1210,                    tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1211,                    ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1212,                    yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1216,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1217,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1219,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1220,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1221,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1223,                return ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1241,        double lnza = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1242,        double lnzb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1244,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1246,            double tmp = epsilon * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1247,            double aa = epsilon + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1248,            double ab = epsilon - aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1249,            double xa = aa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1250,            double xb = ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1253,            final double numer = bits & 0x3ffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1255,            aa = numer - xa*denom - xb * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1256,            xb += aa / denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1260,            double ya = lnCoef_last[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1261,            double yb = lnCoef_last[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1265,                aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1266,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1268,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1269,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1270,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1274,                aa = ya + lnCoef_i[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1275,                ab = yb + lnCoef_i[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1277,                tmp = aa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1278,                ya = aa + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1279,                yb = aa - ya + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1283,            aa = ya * xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1284,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1292,            lnza = aa + ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1293,            lnzb = -(lnza - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1294,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1297,            lnza = -0.16624882440418567;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1299,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1301,            lnza = lnza * epsilon + -0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1302,            lnza = lnza * epsilon + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1303,            lnza = lnza * epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1320,        double a = LN_2_A*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1321,        double b = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1322,        double c = a+lnm[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1323,        double d = -(c-a-lnm[0]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1324,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1325,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1327,        c = a + lnza;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1328,        d = -(c - a - lnza);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1329,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1330,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1332,        c = a + LN_2_B*exp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1333,        d = -(c - a - LN_2_B*exp);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1334,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1335,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1337,        c = a + lnm[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1338,        d = -(c - a - lnm[1]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1339,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1340,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1342,        c = a + lnzb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1343,        d = -(c - a - lnzb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1344,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1345,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1347,        if (hiPrec != null) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1348,            hiPrec[0] = a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1349,            hiPrec[1] = b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1352,        return a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1362,        if (x == -1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1363,            return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1366,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1367,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1370,        if (x > 1e-6 ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1372,            final double xpa = 1 + x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1373,            final double xpb = -(xpa - 1 - x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1375,            final double[] hiPrec = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1376,"            final double lores = log(xpa, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1377,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1378,                return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1383,            final double fx1 = xpb / xpa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1384,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1385,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1388,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1389,            return y * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1398,        final double hiPrec[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1400,"        final double lores = log(x, hiPrec);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1401,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1402,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1405,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1406,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1407,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1409,        final double rln10a = 0.4342944622039795;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1410,        final double rln10b = 1.9699272335463627E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1412,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1432,        return log(x) / log(base);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1443,        final double lns[] = new double[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1445,        if (y == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1446,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1449,        if (x != x) { // X is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1450,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1454,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1455,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1456,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1458,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1460,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1461,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1464,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1465,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1469,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1470,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1472,            if (y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1473,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1476,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1479,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1480,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1481,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1483,            if (y < 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1484,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1486,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1490,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1491,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1492,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1495,            if (x * x > 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1496,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1498,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1502,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1503,            if (y != y) { // y is NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1504,                return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1507,            if (y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1508,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1509,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1510,                    return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1513,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1516,            if (y > 0)  {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1517,                long yi = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1518,                if (y == yi && (yi & 1) == 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1519,                    return Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1522,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1526,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1528,            if (x * x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1529,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1532,            if (x * x < 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1533,                return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1535,                return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1540,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1542,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1543,"                return pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1546,            if (y == (long) y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1548,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1550,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1557,        if (y < 8e298 && y > -8e298) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1558,            double tmp1 = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1559,            ya = y + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1560,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1561,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1562,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1563,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1564,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1565,            yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1569,"        final double lores = log(x, lns);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1571,            return lores;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1574,        double lna = lns[0];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1575,        double lnb = lns[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1578,        double tmp1 = lna * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1579,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1580,        lnb += lna - tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1581,        lna = tmp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1584,        final double aa = lna * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1587,        lna = aa+ab;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1588,        lnb = -(lna - aa - ab);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1590,        double z = 1.0 / 120.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1591,        z = z * lnb + (1.0 / 24.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1592,        z = z * lnb + (1.0 / 6.0);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1593,        z = z * lnb + 0.5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1594,        z = z * lnb + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1595,        z = z * lnb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1597,"        final double result = exp(lna, z, null);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1599,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1613,        if (e == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1614,            return 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1615,        } else if (e < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1616,            e = -e;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1617,            d = 1.0 / d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1622,        final int splitFactor = 0x8000001;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1623,        final double cd       = splitFactor * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1624,        final double d1High   = cd - (cd - d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1625,        final double d1Low    = d - d1High;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1628,        double resultHigh = 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1629,        double resultLow  = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1632,        double d2p     = d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1633,        double d2pHigh = d1High;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1634,        double d2pLow  = d1Low;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1636,        while (e != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1638,            if ((e & 0x1) != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1641,                final double tmpHigh = resultHigh * d2p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1642,                final double cRH     = splitFactor * resultHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1643,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1644,                final double rHL     = resultHigh - rHH;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1646,                resultHigh = tmpHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1647,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1652,            final double tmpHigh = d2pHigh * d2p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1653,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1655,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1657,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1660,            d2p     = d2pHigh + d2pLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1662,            e = e >> 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1664,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1666,        return resultHigh + resultLow;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1678,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1680,        double p = 2.7553817452272217E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1681,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1682,        p = p * x2 + 0.008333333333329196;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1683,        p = p * x2 + -0.16666666666666666;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1686,        p = p * x2 * x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1688,        return p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1698,        double x2 = x*x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1700,        double p = 2.479773539153719E-5;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1701,        p = p * x2 + -0.0013888888689039883;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1702,        p = p * x2 + 0.041666666666621166;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1703,        p = p * x2 + -0.49999999999999994;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1704,        p *= x2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1706,        return p;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1717,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1721,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1722,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1723,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1724,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1727,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1728,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1729,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1730,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1733,        final double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1734,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1735,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1736,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1762,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1763,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1765,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1766,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1767,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1768,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1769,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1771,        t = costA * sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1772,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1773,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1774,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1775,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1819,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1822,            c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1823,            d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1824,            a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1825,            b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1828,        result = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1830,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1841,        final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1842,        final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1844,        final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1845,        double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1846,        b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1848,"        return sinQ(a, b);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1861,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1862,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1865,        final double sintA = SINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1866,        final double sintB = SINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1867,        final double costA = COSINE_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1868,        final double costB = COSINE_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1871,        double sinEpsA = epsilon;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1872,        double sinEpsB = polySine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1873,        final double cosEpsA = 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1874,        final double cosEpsB = polyCosine(epsilon);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1877,        double temp = sinEpsA * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1878,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1879,        sinEpsB +=  sinEpsA - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1880,        sinEpsA = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1905,        double a = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1906,        double b = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1909,        double t = sintA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1910,        double c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1911,        double d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1912,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1913,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1915,        t = costA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1916,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1917,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1918,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1919,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1921,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1922,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1924,        double sina = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1925,        double sinb = -(sina - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1929,        a = b = c = d = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1931,        t = costA*cosEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1932,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1933,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1934,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1935,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1937,        t = -sintA*sinEpsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1938,        c = a + t;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1939,        d = -(c - a - t);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1940,        a = c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1941,        b = b + d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1943,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1944,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1946,        double cosa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1947,        double cosb = -(cosa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1949,        if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1951,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1952,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1966,        double est = sina/cosa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1969,        temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1970,        double esta = (est + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1971,        double estb =  est - esta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1973,        temp = cosa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1974,        double cosaa = (cosa + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1975,        double cosab =  cosa - cosaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1978,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1979,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1980,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1982,        if (xb != 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1985,            double xbadj = xb + est*est*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1986,            if (cotanFlag) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1987,                xbadj = -xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1990,            err += xbadj;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,1993,        return est+err;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2010,        long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2011,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2014,        inbits &= 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2015,        inbits |= 0x0010000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2018,        exponent++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2019,        inbits <<= 11;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2025,        int idx = exponent >> 6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2026,        int shift = exponent - (idx << 6);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2028,        if (shift != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2029,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2030,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2031,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2032,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2034,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2035,            shpiA = RECIP_2PI[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2036,            shpiB = RECIP_2PI[idx+1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2040,        long a = inbits >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2041,        long b = inbits & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2043,        long c = shpiA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2044,        long d = shpiA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2046,        long ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2047,        long bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2048,        long bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2049,        long ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2051,        long prodB = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2052,        long prodA = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2054,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2055,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2056,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2059,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2061,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2064,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2065,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2067,        prodB = prodB + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2068,        prodA = prodA + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2070,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2073,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2075,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2079,        c = shpiB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2080,        d = shpiB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2081,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2082,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2083,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2086,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2088,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2089,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2090,        prodB += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2091,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2093,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2095,            prodA++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2099,        c = shpi0 >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2100,        d = shpi0 & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2102,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2103,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2104,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2106,        prodA += bd + ((bc + ad) << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2118,        int intPart = (int)(prodA >>> 62);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2121,        prodA <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2122,        prodA |= prodB >>> 62;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2123,        prodB <<= 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2126,        a = prodA >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2127,        b = prodA & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2129,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2130,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2132,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2133,        bd = b * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2134,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2135,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2137,        long prod2B = bd + (ad << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2138,        long prod2A = ac + (ad >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2140,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2141,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2142,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2145,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2147,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2150,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2151,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2153,        prod2B = prod2B + (bc << 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2154,        prod2A = prod2A + (bc >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2156,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2159,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2161,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2165,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2166,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2167,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2168,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2169,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2172,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2174,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2175,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2176,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2177,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2179,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2181,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2185,        a = prodB >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2186,        b = prodB & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2187,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2188,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2189,        ac = a * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2190,        bc = b * c;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2191,        ad = a * d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2194,        ac = ac + ((bc + ad) >>> 32);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2196,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2197,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2198,        prod2B += ac;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2199,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2201,        if ( (bita && bitb) ||,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2203,            prod2A++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2207,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2208,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2210,        double sumA = tmpA + tmpB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2211,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2214,        result[0] = intPart;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2215,        result[1] = sumA * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2216,        result[2] = sumB * 2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2217,    },0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2226,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2227,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2229,        double xb = 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2232,        xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2233,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2234,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2235,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2239,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2240,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2241,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2242,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2244,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2248,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2252,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2256,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2257,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2258,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2259,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2260,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2261,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2262,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2263,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2264,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2265,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2268,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2269,            quadrant ^= 2;  // Flip bit 1,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2272,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2274,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2276,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2278,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2280,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2282,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2293,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2296,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2297,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2298,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2302,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2306,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2307,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2311,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2312,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2313,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2314,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2315,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2316,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2317,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2318,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2319,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2320,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2326,        switch (quadrant) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2328,"                return cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2330,"                return -sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2332,"                return -cosQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2334,"                return sinQ(xa, xb);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2336,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2347,        boolean negative = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2348,        int quadrant = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2351,        double xa = x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2352,        if (x < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2353,            negative = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2354,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2358,        if (xa == 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2359,            long bits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2360,            if (bits < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2361,                return -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2363,            return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2366,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2367,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2371,        double xb = 0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2372,        if (xa > 3294198.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2376,            double reduceResults[] = new double[3];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2377,"            reducePayneHanek(xa, reduceResults);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2378,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2379,            xa = reduceResults[1];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2380,            xb = reduceResults[2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2381,        } else if (xa > 1.5707963267948966) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2382,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2383,            quadrant = cw.getK() & 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2384,            xa = cw.getRemA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2385,            xb = cw.getRemB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2388,        if (xa > 1.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2390,            final double pi2a = 1.5707963267948966;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2391,            final double pi2b = 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2393,            final double a = pi2a - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2394,            double b = -(a - pi2a + xa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2395,            b += pi2b - xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2397,            xa = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2398,            xb = -(xa - a - b);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2399,            quadrant ^= 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2400,            negative ^= true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2404,        if ((quadrant & 1) == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2405,"            result = tanQ(xa, xb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2407,"            result = -tanQ(xa, xb, true);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2410,        if (negative) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2411,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2414,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2423,"        return atan(x, 0.0, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2433,        boolean negate = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2437,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2440,        if (xa < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2442,            xa = -xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2443,            xb = -xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2444,            negate = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2447,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2448,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2452,        if (xa < 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2453,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2455,            final double oneOverXa = 1 / xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2460,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2462,        double temp = epsA + epsB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2463,        epsB = -(temp - epsA - epsB);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2464,        epsA = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2467,        temp = xa * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2468,        double ya = xa + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2469,        double yb = xb + xa - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2470,        xa = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2471,        xb += yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2474,        if (idx == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2479,            ya = epsA * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2480,            yb = epsB * denom;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2481,        } else {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2482,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2483,            double za = 1d + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2484,            double zb = -(za - 1d - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2485,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2486,            temp = za + temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2487,            zb += -(temp - za - temp2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2488,            za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2490,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2491,            ya = epsA / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2493,            temp = ya * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2494,            final double yaa = (ya + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2495,            final double yab = ya - yaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2497,            temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2498,            final double zaa = (za + temp) - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2499,            final double zab = za - zaa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2502,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2504,            yb += -epsA * zb / za / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2505,            yb += epsB / za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2509,        epsA = ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2510,        epsB = yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2513,        final double epsA2 = epsA * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2524,        yb = 0.07490822288864472;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2525,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2526,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2527,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2528,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2529,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2530,        yb = yb * epsA2 * epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2533,        ya = epsA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2535,        temp = ya + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2536,        yb = -(temp - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2537,        ya = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2540,        yb += epsB / (1d + epsA * epsA);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2543,        double za = EIGHTHS[idx] + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2544,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2545,        temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2546,        zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2547,        za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2549,        double result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2550,        double resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2552,        if (leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2554,            final double pia = 1.5707963267948966 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2555,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2557,            za = pia - result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2558,            zb = -(za - pia + result);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2559,            zb += pib - resultb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2561,            result = za + zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2562,            resultb = -(result - za - zb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2566,        if (negate ^ leftPlane) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2567,            result = -result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2570,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2580,        if (x != x || y != y) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2581,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2584,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2585,            final double result = x * y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2586,            final double invx = 1d / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2587,            final double invy = 1d / y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2589,            if (invx == 0) { // X is infinite,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2590,                if (x > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2591,                    return y; // return +/- 0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2593,"                    return copySign(Math.PI, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2597,            if (x < 0 || invx < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2598,                if (y < 0 || invy < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2599,                    return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2601,                    return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2604,                return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2610,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2611,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2612,                return Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2615,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2616,                return Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2619,            return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2622,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2623,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2624,                return -Math.PI * F_1_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2627,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2628,                return -Math.PI * F_3_4;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2631,            return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2634,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2635,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2636,                return 0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2639,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2640,                return -0d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2644,        if (x == Double.NEGATIVE_INFINITY),0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2646,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2647,                return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2650,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2651,                return -Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2657,        if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2658,            if (y > 0 || 1 / y > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2659,                return Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2662,            if (y < 0 || 1 / y < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2663,                return -Math.PI * F_1_2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2668,        final double r = y / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2669,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2670,"            return atan(r, 0, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2673,        double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2674,        double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2677,        final double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2678,        final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2680,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2682,        final double temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2683,        rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2684,        ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2686,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2687,"            ra = copySign(0d, y);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2691,"        final double result = atan(ra, rb, x < 0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2693,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2701,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2702,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2705,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2706,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2709,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2710,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2713,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2714,          return -Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2717,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2718,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2724,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2725,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2726,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2729,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2730,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2733,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2734,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2736,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2737,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2739,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2740,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2741,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2745,      y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2746,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2747,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2748,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2751,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2754,      double dx = zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2757,      double r = x/y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2758,      temp = r * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2759,      double ra = r + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2760,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2762,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2763,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2765,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2766,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2767,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2769,"      return atan(ra, rb, false);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2777,      if (x != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2778,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2781,      if (x > 1.0 || x < -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2782,          return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2785,      if (x == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2786,          return Math.PI;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2789,      if (x == 1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2790,          return 0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2793,      if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2794,          return Math.PI/2.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2800,      double temp = x * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2801,      final double xa = x + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2802,      final double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2805,      double ya = xa*xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2806,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2809,      ya = -ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2810,      yb = -yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2812,      double za = 1.0 + ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2813,      double zb = -(za - 1.0 - ya);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2815,      temp = za + yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2816,      zb += -(temp - za - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2817,      za = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2820,      double y = sqrt(za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2821,      temp = y * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2822,      ya = y + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2823,      yb = y - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2826,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2829,      yb += zb / (2.0*y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2830,      y = ya+yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2831,      yb = -(y - ya - yb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2834,      double r = y/x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2837,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2838,          return Math.PI/2; // so return the appropriate value,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2841,      double ra = doubleHighPart(r);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2842,      double rb = r - ra;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2844,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2845,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2847,      temp = ra + rb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2848,      rb = -(temp - ra - rb);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2849,      ra = temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2851,"      return atan(ra, rb, x<0);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2860,      long inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2861,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2862,      boolean subnormal = false;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2864,      if (exponent == -1023) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2865,          if (x == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2866,              return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2870,          subnormal = true;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2871,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2872,          inbits = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2873,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2876,      if (exponent == 1024) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2878,          return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2882,      int exp3 = exponent / 3;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2885,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2889,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2892,      double est = -0.010714690733195933;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2893,      est = est * mant + 0.0875862700108075;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2894,      est = est * mant + -0.3058015757857271;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2895,      est = est * mant + 0.7249995199969751;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2896,      est = est * mant + 0.5039018405998233;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2898,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2903,      final double xs = x / (p2*p2*p2);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2904,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2905,      est += (xs - est*est*est) / (3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2908,      double temp = est * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2909,      double ya = est + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2910,      double yb = est - ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2912,      double za = ya * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2913,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2914,      temp = za * HEX_40000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2915,      double temp2 = za + temp - temp;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2916,      zb += za - temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2917,      za = temp2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2919,      zb = za * yb + ya * zb + zb * yb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2920,      za = za * ya;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2922,      double na = xs - za;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2923,      double nb = -(na - xs + za);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2924,      nb -= zb;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2926,      est += (na+nb)/(3*est*est);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2929,      est *= p2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2931,      if (subnormal) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2932,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2935,      return est;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2946,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2950,        final double facta = 0.01745329052209854;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2951,        final double factb = 1.997844754509471E-9;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2953,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2954,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2956,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2957,        if (result == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2958,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2960,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2970,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2971,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2975,        final double facta = 57.2957763671875;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2976,        final double factb = 3.145894820876798E-6;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2978,        double xa = doubleHighPart(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2979,        double xb = x - xa;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2990,        return (x < 0) ? -x : x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,2999,        return (x < 0l) ? -x : x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3008,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3026,        if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3027,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3029,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3038,        if (Float.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3039,            return Float.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3041,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3053,        if ((n > -1023) && (n < 1024)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3054,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3058,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3059,            return d;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3061,        if (n < -2098) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3062,            return (d > 0) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3064,        if (n > 2097) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3065,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3069,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3070,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3071,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3072,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3075,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3077,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3079,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3081,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3082,            } else if (scaledExponent > -53) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3086,                mantissa = mantissa | (1L << 52);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3089,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3090,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3091,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3093,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3095,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3099,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3103,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3106,                while ((mantissa >>> 52) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3107,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3108,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3110,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3111,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3113,                if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3114,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3116,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3119,            } else if (scaledExponent < 2047) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3120,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3122,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3137,        if ((n > -127) && (n < 128)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3138,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3142,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3143,            return f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3145,        if (n < -277) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3146,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3148,        if (n > 276) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3149,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3153,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3154,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3155,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3156,        int mantissa   = bits & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3159,        int scaledExponent = exponent + n;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3161,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3163,            if (scaledExponent > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3165,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3166,            } else if (scaledExponent > -24) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3170,                mantissa = mantissa | (1 << 23);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3173,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3174,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3175,                if (mostSignificantLostBit != 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3177,                    mantissa++;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3179,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3183,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3187,            if (exponent == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3190,                while ((mantissa >>> 23) != 1) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3191,                    mantissa = mantissa << 1;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3192,                    --scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3194,                ++scaledExponent;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3195,                mantissa = mantissa & 0x007fffff;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3197,                if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3198,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3200,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3203,            } else if (scaledExponent < 255) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3204,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3206,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3246,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3247,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3248,        } else if (d == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3249,            return direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3250,        } else if (Double.isInfinite(d)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3251,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3252,        } else if (d == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3253,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3258,        final long bits = Double.doubleToLongBits(d);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3259,        final long sign = bits & 0x8000000000000000L;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3260,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3261,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3263,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3302,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3303,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3304,        } else if (f == direction) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3305,            return (float) direction;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3306,        } else if (Float.isInfinite(f)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3307,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3308,        } else if (f == 0f) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3309,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3314,        final int bits = Float.floatToIntBits(f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3315,        final int sign = bits & 0x80000000;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3316,        if ((direction < f) ^ (sign == 0)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3317,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3319,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3331,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3332,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3335,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3336,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3339,        y = (long) x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3340,        if (x < 0 && y != x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3341,            y--;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3344,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3345,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3348,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3358,        if (x != x) { // NaN,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3359,            return x;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3362,        y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3363,        if (y == x) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3364,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3367,        y += 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3369,        if (y == 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3370,            return x*y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3373,        return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3381,        double y = floor(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3382,        double d = x - y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3384,        if (d > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3385,            if (y == -1.0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3386,                return -0.0; // Preserve sign of operand,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3388,            return y+1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3390,        if (d < 0.5) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3391,            return y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3395,        long z = (long) y;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3396,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3404,        return (long) floor(x + 0.5);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3412,        return (int) floor(x + 0.5f);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3430,        return (a <= b) ? a : b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3439,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3440,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3442,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3443,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3446,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3447,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3451,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3452,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3453,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3455,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3464,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3465,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3467,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3468,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3471,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3472,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3476,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3477,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3478,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3480,        return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3489,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3498,        return (a <= b) ? b : a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3507,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3508,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3510,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3511,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3514,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3515,            return Float.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3519,        int bits = Float.floatToRawIntBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3520,        if (bits == 0x80000000) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3521,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3523,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3532,        if (a > b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3533,            return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3535,        if (a < b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3536,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3539,        if (a != b) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3540,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3544,        long bits = Double.doubleToRawLongBits(a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3545,        if (bits == 0x8000000000000000L) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3546,            return b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3548,        return a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3566,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3567,            return Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3568,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3569,            return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3572,            final int expX = getExponent(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3573,            final int expY = getExponent(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3574,            if (expX > expY + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3576,                return abs(x);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3577,            } else if (expY > expX + 27) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3579,                return abs(y);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3583,                final int middleExp = (expX + expY) / 2;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3586,"                final double scaledX = scalb(x, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3587,"                final double scaledY = scalb(y, -middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3590,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3593,"                return scalb(scaledH, middleExp);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3621,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3633,        long m = Double.doubleToLongBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3634,        long s = Double.doubleToLongBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3635,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3636,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3638,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3650,        int m = Float.floatToIntBits(magnitude);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3651,        int s = Float.floatToIntBits(sign);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3652,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3653,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3655,        return -magnitude; // flip sign,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3668,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3681,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3690,        PrintStream out = System.out;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3691,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3692,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3693,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3694,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3695,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3696,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3697,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3698,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3699,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3700,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3701,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3702,    },0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,53,        this(0);,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,54,    },0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,62,"        this(max,",0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,69,    },0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,82,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,96,        maximalCount = max;,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,97,    },0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,105,        return maximalCount;,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,114,        return count;,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,125,        return count < maximalCount;,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,136,        for (int i = 0; i < value; i++) {,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,137,            incrementCount();,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,139,    },0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,155,        if (++count > maximalCount) {,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,156,            maxCountCallback.trigger(maximalCount);,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,158,    },0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,164,        count = 0;,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,165,    },0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,14,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,14,42,    },0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,14,50,"        super(pattern, arguments);",0.0,0,,0
org/apache/commons/math3/exception/NullArgumentException,14,51,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,14,44,                                        Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,14,45,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,14,46,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,14,47,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,14,51,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,14,57,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalArgumentException,14,63,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/util/Pair,14,45,"    public Pair(K k, V v) {",0.0,0,,0
org/apache/commons/math3/util/Pair,14,46,        key = k;,0.0,0,,0
org/apache/commons/math3/util/Pair,14,47,        value = v;,0.0,0,,0
org/apache/commons/math3/util/Pair,14,48,    },0.0,0,,0
org/apache/commons/math3/util/Pair,14,56,"        this(entry.getKey(), entry.getValue());",0.0,0,,0
org/apache/commons/math3/util/Pair,14,57,    },0.0,0,,0
org/apache/commons/math3/util/Pair,14,65,        return key;,0.0,0,,0
org/apache/commons/math3/util/Pair,14,74,        return value;,0.0,0,,0
org/apache/commons/math3/util/Pair,14,84,        return key;,0.0,0,,0
org/apache/commons/math3/util/Pair,14,94,        return value;,0.0,0,,0
org/apache/commons/math3/util/Pair,14,106,        if (this == o) {,0.0,0,,0
org/apache/commons/math3/util/Pair,14,107,            return true;,0.0,0,,0
org/apache/commons/math3/util/Pair,14,109,        if (!(o instanceof Pair)) {,0.0,0,,0
org/apache/commons/math3/util/Pair,14,110,            return false;,0.0,0,,0
org/apache/commons/math3/util/Pair,14,112,"            Pair<?, ?> oP = (Pair<?, ?>) o;",0.0,0,,0
org/apache/commons/math3/util/Pair,14,113,            return (key == null ?,0.0,0,,0
org/apache/commons/math3/util/Pair,14,129,        int result = key == null ? 0 : key.hashCode();,0.0,0,,0
org/apache/commons/math3/util/Pair,14,131,        final int h = value == null ? 0 : value.hashCode();,0.0,0,,0
org/apache/commons/math3/util/Pair,14,132,        result = 37 * result + h ^ (h >>> 16);,0.0,0,,0
org/apache/commons/math3/util/Pair,14,134,        return result;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3777,    private static class lnMant {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3793,        },0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,63,             new MaxCountExceededCallback() {,0.0,0,,0
org/apache/commons/math3/util/Incrementor,14,66,                     throw new MaxCountExceededException(max);,0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,14,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,14,43,    },0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,14,53,                                     Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,14,54,"        getContext().addMessage(specific, max, args);",0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,14,55,        this.max = max;,0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,14,56,    },0.0,0,,0
org/apache/commons/math3/exception/MaxCountExceededException,14,62,        return max;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,45,                                     Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,46,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,47,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,60,        super(cause);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,61,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,62,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,63,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,70,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,74,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,80,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalStateException,14,86,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/util/Precision,14,83,    private Precision() {},0.0,0,,0
org/apache/commons/math3/util/Precision,14,96,"        if (equals(x, y, eps)) {",0.0,0,,0
org/apache/commons/math3/util/Precision,14,97,            return 0;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,98,        } else if (x < y) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,99,            return -1;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,101,        return 1;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,122,"        if (equals(x, y, maxUlps)) {",0.0,0,,0
org/apache/commons/math3/util/Precision,14,123,            return 0;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,124,        } else if (x < y) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,125,            return -1;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,127,        return 1;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,139,"        return equals(x, y, 1);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,,0
org/apache/commons/math3/util/Precision,14,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,203,        int xInt = Float.floatToIntBits(x);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,204,        int yInt = Float.floatToIntBits(y);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,207,        if (xInt < 0) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,208,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,210,        if (yInt < 0) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,211,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,214,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,216,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,244,"        return equals(x, y, 1);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,,0
org/apache/commons/math3/util/Precision,14,288,"        if (equals(x, y, 1)) {",0.0,0,,0
org/apache/commons/math3/util/Precision,14,289,            return true;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,292,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));",0.0,0,,0
org/apache/commons/math3/util/Precision,14,293,        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,295,        return relativeDifference <= eps;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,310,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,331,        long xInt = Double.doubleToLongBits(x);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,332,        long yInt = Double.doubleToLongBits(y);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,335,        if (xInt < 0) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,336,            xInt = SGN_MASK - xInt;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,338,        if (yInt < 0) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,339,            yInt = SGN_MASK - yInt;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,360,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,395,            return (new BigDecimal,0.0,0,,0
org/apache/commons/math3/util/Precision,14,399,        } catch (NumberFormatException ex) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,400,            if (Double.isInfinite(x)) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,401,                return x;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,403,                return Double.NaN;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,418,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,436,"        final float sign = FastMath.copySign(1f, x);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,437,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,,0
org/apache/commons/math3/util/Precision,14,438,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,,0
org/apache/commons/math3/util/Precision,14,458,        switch (roundingMethod) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,460,            if (sign == -1) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,461,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,14,463,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,14,465,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,467,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,14,468,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,470,            if (sign == -1) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,471,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,14,473,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,14,475,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,477,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,478,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,479,            if (fraction > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,480,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,482,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,484,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,487,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,488,            if (fraction > 0.5) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,489,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,490,            } else if (fraction < 0.5) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,491,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,494,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,,0
org/apache/commons/math3/util/Precision,14,496,                    unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,498,                    unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,501,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,504,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/util/Precision,14,505,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,506,            if (fraction >= 0.5) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,507,                unscaled = FastMath.ceil(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,509,                unscaled = FastMath.floor(unscaled);,0.0,0,,0
org/apache/commons/math3/util/Precision,14,511,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,514,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,,0
org/apache/commons/math3/util/Precision,14,515,                throw new MathArithmeticException();,0.0,0,,0
org/apache/commons/math3/util/Precision,14,519,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,,0
org/apache/commons/math3/util/Precision,14,520,            break;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,522,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,,0
org/apache/commons/math3/util/Precision,14,533,        return unscaled;,0.0,0,,0
org/apache/commons/math3/util/Precision,14,553,        return x + originalDelta - x;,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,43,    public MathArithmeticException() {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,44,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,46,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,56,                                   Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,57,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,58,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,59,    },0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,63,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,69,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathArithmeticException,14,75,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3808,        CodyWaite(double xa) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3811,            int k = (int)(xa * 0.6366197723675814);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3817,                double a = -k * 1.570796251296997;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3818,                remA = xa + a;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3819,                remB = -(remA - xa - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3821,                a = -k * 7.549789948768648E-8;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3822,                double b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3823,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3824,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3826,                a = -k * 6.123233995736766E-17;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3827,                b = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3828,                remA = a + b;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3829,                remB += -(remA - b - a);,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3831,                if (remA > 0) {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3832,                    break;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3838,                --k;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3839,            },0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3841,            this.finalK = k;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3842,            this.finalRemA = remA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3843,            this.finalRemB = remB;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3844,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3850,            return finalK;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3856,            return finalRemA;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3862,            return finalRemB;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,47,    private MathUtils() {},0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,57,        return new Double(value).hashCode();,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,68,        return Arrays.hashCode(value);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,113,        final double p = FastMath.abs(period);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,129,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,131,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,132,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,134,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,136,            return (byte) -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,152,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,154,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,155,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,157,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,159,            return (short) -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,175,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,177,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,178,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,180,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,182,            return -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,198,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,200,            return magnitude;,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,201,        } else if (sign >= 0 &&,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,203,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,205,            return -magnitude; // Flip sign.,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,217,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,218,            throw new NotFiniteNumberException(x);,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,220,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,231,        for (int i = 0; i < val.length; i++) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,232,            final double x = val[i];,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,233,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,237,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,251,        if (o == null) {,0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,252,"            throw new NullArgumentException(pattern, args);",0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,254,    },0.0,0,,0
org/apache/commons/math3/util/MathUtils,14,265,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,14,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,14,41,    },0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,14,53,"        super(specific, wrong, args);",0.0,0,,0
org/apache/commons/math3/exception/NotFiniteNumberException,14,54,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,14,46,"        super(pattern, wrong, arguments);",0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,14,47,        argument = wrong;,0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,14,48,    },0.0,0,,0
org/apache/commons/math3/exception/MathIllegalNumberException,14,54,        return argument;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,34,    private CompositeFormat() {},0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,68,"        parseNextCharacter(source, pos);",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,69,        pos.setIndex(pos.getIndex() - 1);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,70,    },0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,81,         int index = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,82,         final int n = source.length();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,83,         char ret = 0;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,85,         if (index < n) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,88,                 c = source.charAt(index++);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,89,             } while (Character.isWhitespace(c) && index < n);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,90,             pos.setIndex(index);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,92,             if (index < n) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,93,                 ret = c;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,97,         return ret;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,111,        Number ret = null;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,113,        StringBuilder sb = new StringBuilder();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,114,        sb.append('(');,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,115,        sb.append(value);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,116,        sb.append(')');,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,118,        final int n = sb.length();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,119,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,120,        final int endIndex = startIndex + n;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,121,        if (endIndex < source.length()) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,123,                ret = Double.valueOf(value);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,124,                pos.setIndex(endIndex);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,128,        return ret;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,143,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,144,"        Number number = format.parse(source, pos);",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,145,        final int endIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,148,        if (startIndex == endIndex) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,150,            final double[] special = {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,153,            for (int i = 0; i < special.length; ++i) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,154,"                number = parseNumber(source, special[i], pos);",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,155,                if (number != null) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,156,                    break;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,161,        return number;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,175,        final int startIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,176,        final int endIndex = startIndex + expected.length();,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,177,        if ((startIndex >= source.length()) ||,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,181,            pos.setIndex(startIndex);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,182,            pos.setErrorIndex(startIndex);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,183,            return false;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,187,        pos.setIndex(endIndex);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,188,        return true;,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,212,            toAppendTo.append('(');,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,213,            toAppendTo.append(value);,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,214,            toAppendTo.append(')');,0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,216,"            format.format(value, toAppendTo, pos);",0.0,0,,0
org/apache/commons/math3/util/CompositeFormat,14,218,        return toAppendTo;,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3744,    private static class ExpFracTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3773,        },0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3705,    private static class ExpIntTable {,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,,0
org/apache/commons/math3/util/FastMath,14,3740,        },0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,398,            final double[] gradient = new double[parameters.length];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,399,            double xn = 1.0;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,400,            for (int i = 0; i < parameters.length; ++i) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,401,                gradient[i] = xn;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,402,                xn *= x;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,404,            return gradient;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,409,"            return PolynomialFunction.evaluate(parameters, x);",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,73,            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,76,            --n;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,103,        return coefficients.length - 1;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,115,        return coefficients.clone();,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,133,            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,137,            result = argument * result + coefficients[j];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,150,        MathUtils.checkNotNull(coefficients);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,151,        int n = coefficients.length;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,152,        if (n == 0) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,153,            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,155,        DerivativeStructure result =,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,157,        for (int j = n - 2; j >= 0; j--) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,158,            result = result.multiply(t).add(coefficients[j]);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,160,        return result;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,171,"        final int lowLength  = FastMath.min(coefficients.length, p.coefficients.length);",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,172,"        final int highLength = FastMath.max(coefficients.length, p.coefficients.length);",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,175,        double[] newCoefficients = new double[highLength];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,176,        for (int i = 0; i < lowLength; ++i) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,177,            newCoefficients[i] = coefficients[i] + p.coefficients[i];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,179,        System.arraycopy((coefficients.length < p.coefficients.length) ?,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,185,        return new PolynomialFunction(newCoefficients);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,196,"        int lowLength  = FastMath.min(coefficients.length, p.coefficients.length);",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,197,"        int highLength = FastMath.max(coefficients.length, p.coefficients.length);",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,200,        double[] newCoefficients = new double[highLength];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,201,        for (int i = 0; i < lowLength; ++i) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,202,            newCoefficients[i] = coefficients[i] - p.coefficients[i];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,204,        if (coefficients.length < p.coefficients.length) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,205,            for (int i = lowLength; i < highLength; ++i) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,206,                newCoefficients[i] = -p.coefficients[i];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,209,"            System.arraycopy(coefficients, lowLength, newCoefficients, lowLength,",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,213,        return new PolynomialFunction(newCoefficients);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,222,        double[] newCoefficients = new double[coefficients.length];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,223,        for (int i = 0; i < coefficients.length; ++i) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,224,            newCoefficients[i] = -coefficients[i];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,226,        return new PolynomialFunction(newCoefficients);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,236,        double[] newCoefficients = new double[coefficients.length + p.coefficients.length - 1];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,238,        for (int i = 0; i < newCoefficients.length; ++i) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,239,            newCoefficients[i] = 0.0;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,240,"            for (int j = FastMath.max(0, i + 1 - p.coefficients.length);",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,241,"                 j < FastMath.min(coefficients.length, i + 1);",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,243,                newCoefficients[i] += coefficients[j] * p.coefficients[i-j];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,242,                 ++j) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,247,        return new PolynomialFunction(newCoefficients);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,260,        MathUtils.checkNotNull(coefficients);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,261,        int n = coefficients.length;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,262,        if (n == 0) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,263,            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,265,        if (n == 1) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,266,            return new double[]{0};,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,268,        double[] result = new double[n - 1];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,269,        for (int i = n - 1; i > 0; i--) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,270,            result[i - 1] = i * coefficients[i];,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,272,        return result;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,281,        return new PolynomialFunction(differentiate(coefficients));,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,290,        return polynomialDerivative();,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,310,        StringBuilder s = new StringBuilder();,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,311,        if (coefficients[0] == 0.0) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,312,            if (coefficients.length == 1) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,313,"                return ""0"";",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,316,            s.append(toString(coefficients[0]));,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,319,        for (int i = 1; i < coefficients.length; ++i) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,320,            if (coefficients[i] != 0) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,321,                if (s.length() > 0) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,322,                    if (coefficients[i] < 0) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,323,"                        s.append("" - "");",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,325,"                        s.append("" + "");",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,328,                    if (coefficients[i] < 0) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,329,"                        s.append(""-"");",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,333,                double absAi = FastMath.abs(coefficients[i]);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,334,                if ((absAi - 1) != 0) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,335,                    s.append(toString(absAi));,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,336,                    s.append(' ');,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,339,"                s.append(""x"");",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,340,                if (i > 1) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,341,                    s.append('^');,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,342,                    s.append(Integer.toString(i));,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,347,        return s.toString();,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,357,        final String c = Double.toString(coeff);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,358,"        if (c.endsWith("".0"")) {",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,359,"            return c.substring(0, c.length() - 2);",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,361,            return c;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,368,        final int prime = 31;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,369,        int result = 1;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,370,        result = prime * result + Arrays.hashCode(coefficients);,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,371,        return result;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,377,        if (this == obj) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,378,            return true;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,380,        if (!(obj instanceof PolynomialFunction)) {,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,381,            return false;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,383,        PolynomialFunction other = (PolynomialFunction) obj;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,384,"        if (!Arrays.equals(coefficients, other.coefficients)) {",0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,385,            return false;,0.0,0,,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,387,        return true;,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,14,37,        this(LocalizedFormats.NO_DATA);,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,14,38,    },0.0,0,,0
org/apache/commons/math3/exception/NoDataException,14,45,        super(specific);,0.0,0,,0
org/apache/commons/math3/exception/NoDataException,14,46,    },0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,198,            throw new TooManyEvaluationsException(max);,0.0,0,,0
org/apache/commons/math3/exception/TooManyEvaluationsException,14,37,        super(max);,0.0,0,,0
org/apache/commons/math3/exception/TooManyEvaluationsException,14,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0.0,0,,0
org/apache/commons/math3/exception/TooManyEvaluationsException,14,39,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,44,        for (int i = 0; i < dim; i++) {,0.0,1,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,45,"            weightMatrix.setEntry(i, i, weight[i]);",0.0,1,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,47,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,54,    public Weight(RealMatrix weight) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,55,        if (weight.getColumnDimension() != weight.getRowDimension()) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,56,"            throw new NonSquareMatrixException(weight.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,60,        weightMatrix = weight.copy();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,61,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Weight,14,69,        return weightMatrix.copy();,0.0,0,,0
org/apache/commons/math3/linear/NonSquareMatrixException,14,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",0.0,0,,0
org/apache/commons/math3/linear/NonSquareMatrixException,14,41,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,14,44,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,14,45,        dimension = expected;,0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,14,46,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,14,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,14,57,    },0.0,0,,0
org/apache/commons/math3/exception/DimensionMismatchException,14,63,        return dimension;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/Target,14,48,        return target.clone();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,65,        return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,76,        final ArrayRealVector r = new ArrayRealVector(residuals);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,77,        return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,92,        return FastMath.sqrt(getChiSquare() / getTargetSize());,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,102,        return cost * cost;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,111,        return weightMatrixSqrt.copy();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,120,        this.cost = cost;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,121,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,142,        final RealMatrix j = computeWeightedJacobian(params);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,145,        final RealMatrix jTj = j.transpose().multiply(j);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,148,        final DecompositionSolver solver,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,150,        return solver.getInverse().getData();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,169,        final int nC = params.length;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,170,        final double[] sig = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,171,"        final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,172,        for (int i = 0; i < nC; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,173,            sig[i] = FastMath.sqrt(cov[i][i]);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,175,        return sig;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,201,        parseOptimizationData(optData);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,203,        return super.optimize(optData);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,222,        final double[] target = getTarget();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,223,        if (objectiveValue.length != target.length) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,224,"            throw new DimensionMismatchException(target.length,",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,228,        final double[] residuals = new double[target.length];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,229,        for (int i = 0; i < target.length; i++) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,230,            residuals[i] = target[i] - objectiveValue[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,233,        return residuals;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,250,        for (OptimizationData data : optData) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,251,            if (data instanceof Weight) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,252,                weightMatrixSqrt = squareRoot(((Weight) data).getWeight());,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,255,                break;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,258,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,267,            final EigenDecomposition dec = new EigenDecomposition(m);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,268,            return dec.getSquareRoot();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,42,public abstract class AbstractLeastSquaresOptimizer,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,60,        return jacobian.value(params);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,87,        parseOptimizationData(optData);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,89,        return super.optimize(optData);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,105,        for (OptimizationData data : optData) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,106,            if (data instanceof ModelFunctionJacobian) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,107,                jacobian = ((ModelFunctionJacobian) data).getModelFunctionJacobian();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,110,                break;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,113,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,39,public abstract class JacobianMultivariateVectorOptimizer,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,57,"        this(true, checker);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,58,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,68,        super(checker);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,69,        this.useLU = useLU;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,70,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,75,        final ConvergenceChecker<PointVectorValuePair> checker,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,79,        if (checker == null) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,80,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,83,        final double[] targetValues = getTarget();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,84,        final int nR = targetValues.length; // Number of observed data.,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,86,        final RealMatrix weightMatrix = getWeight();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,88,        final double[] residualsWeights = new double[nR];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,89,        for (int i = 0; i < nR; i++) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,90,"            residualsWeights[i] = weightMatrix.getEntry(i, i);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,93,        final double[] currentPoint = getStartPoint();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,94,        final int nC = currentPoint.length;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,97,        PointVectorValuePair current = null;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,98,        int iter = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,99,        for (boolean converged = false; !converged;) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,100,            ++iter;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,103,            PointVectorValuePair previous = current;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,105,            final double[] currentObjective = computeObjectiveValue(currentPoint);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,106,            final double[] currentResiduals = computeResiduals(currentObjective);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,107,            final RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,108,"            current = new PointVectorValuePair(currentPoint, currentObjective);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,111,            final double[]   b = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,112,            final double[][] a = new double[nC][nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,113,            for (int i = 0; i < nR; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,115,                final double[] grad   = weightedJacobian.getRow(i);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,116,                final double weight   = residualsWeights[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,117,                final double residual = currentResiduals[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,120,                final double wr = weight * residual;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,121,                for (int j = 0; j < nC; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,122,                    b[j] += wr * grad[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,126,                for (int k = 0; k < nC; ++k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,127,                    double[] ak = a[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,128,                    double wgk = weight * grad[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,129,                    for (int l = 0; l < nC; ++l) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,130,                        ak[l] += wgk * grad[l];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,137,                RealMatrix mA = new BlockRealMatrix(a);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,138,                DecompositionSolver solver = useLU ?,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,141,"                final double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,143,                for (int i = 0; i < nC; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,144,                    currentPoint[i] += dX[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,148,            },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,146,            } catch (SingularMatrixException e) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,147,                throw new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,151,            if (previous != null) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,152,"                converged = checker.converged(iter, previous, current);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,153,                if (converged) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,154,                    setCost(computeCost(currentResiduals));,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,155,                    return current;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,158,        },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,160,        throw new MathInternalError();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,14,46,public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,14,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,14,54,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,14,68,"        super(specific, wrong, min);",0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,14,70,        this.min = min;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,14,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,14,72,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,14,78,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooSmallException,14,85,        return min;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,14,50,        this(boundIsAllowed ?,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,14,54,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,14,67,"        super(specific, wrong, max);",0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,14,69,        this.max = max;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,14,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,14,71,    },0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,14,77,        return boundIsAllowed;,0.0,0,,0
org/apache/commons/math3/exception/NumberIsTooLargeException,14,84,        return max;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,60,public abstract class RealVector {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1159,    @Deprecated,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,99,"        setEntry(index, getEntry(index) + increment);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,100,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,165,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,166,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,177,        int d = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,178,        if (d != n) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,179,"            throw new DimensionMismatchException(d, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,181,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,190,        if (index < 0 ||,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,195,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,208,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,209,        if ((start < 0) || (start >= dim)) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,210,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,213,        if ((end < 0) || (end >= dim)) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,214,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,217,        if (end < start) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,219,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,222,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,234,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,235,        RealVector result = v.copy();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,236,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,237,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,238,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,239,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,240,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,241,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,242,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,255,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,256,        RealVector result = v.mapMultiply(-1d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,257,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,258,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,259,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,260,            final int index = e.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,261,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,262,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,263,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,274,        return copy().mapAddToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,285,        if (d != 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,286,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,288,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,307,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,308,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,309,        final int n = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,310,        for (int i = 0; i < n; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,311,            d += getEntry(i) * v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,313,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,329,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,330,        final double vNorm = v.getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,332,        if (norm == 0 ||,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,334,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,336,        return dotProduct(v) / (norm * vNorm);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,396,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,397,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,398,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,399,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,400,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,401,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,402,            d += diff * diff;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,403,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,404,        return FastMath.sqrt(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,418,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,419,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,420,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,421,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,422,            final double value = e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,423,            sum += value * value;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,424,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,425,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,439,        double norm = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,440,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,441,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,442,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,443,            norm += FastMath.abs(e.getValue());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,444,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,445,        return norm;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,459,        double norm = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,460,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,461,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,462,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,463,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,464,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,465,        return norm;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,481,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,482,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,483,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,484,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,485,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,486,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,487,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,488,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,507,        checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,508,        double d = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,509,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,510,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,511,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,512,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,513,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,514,        return d;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,524,        int minIndex    = -1;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,525,        double minValue = Double.POSITIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,526,        Iterator<Entry> iterator = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,527,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,528,            final Entry entry = iterator.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,529,            if (entry.getValue() <= minValue) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,530,                minIndex = entry.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,531,                minValue = entry.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,533,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,534,        return minIndex;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,544,        final int minIndex = getMinIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,545,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,555,        int maxIndex    = -1;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,556,        double maxValue = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,557,        Iterator<Entry> iterator = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,558,        while (iterator.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,559,            final Entry entry = iterator.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,560,            if (entry.getValue() >= maxValue) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,561,                maxIndex = entry.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,562,                maxValue = entry.getValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,564,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,565,        return maxIndex;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,575,        final int maxIndex = getMaxIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,576,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,588,        return copy().mapMultiplyToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,599,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,610,        return copy().mapSubtractToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,621,        return mapAddToSelf(-d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,632,        return copy().mapDivideToSelf(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,643,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,653,        final int m = this.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,654,        final int n = v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,656,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,657,"            product = new OpenMapRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,659,"            product = new Array2DRowRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,661,        for (int i = 0; i < m; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,662,            for (int j = 0; j < n; j++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,663,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,666,        return product;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,681,        final double norm2 = v.dotProduct(v);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,682,        if (norm2 == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,683,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,685,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,694,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,695,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,696,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,697,            e.setValue(value);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,698,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,699,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,709,        int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,710,        double[] values = new double[dim];,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,711,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,712,            values[i] = getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,714,        return values;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,725,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,726,        if (norm == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,727,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,729,        return mapDivide(norm);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,739,        final double norm = getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,740,        if (norm == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,741,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,743,        mapDivideToSelf(getNorm());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,744,    },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,767,        return new SparseEntryIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,781,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,782,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,827,        return copy().mapToSelf(function);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,844,        Iterator<Entry> it = iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,845,        while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,846,            final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,847,            e.setValue(function.value(e.getValue()));,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,848,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,849,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,867,"        return copy().combineToSelf(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,884,        checkVectorDimensions(y);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,885,        for (int i = 0; i < getDimension(); i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,886,            final double xi = getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,887,            final double yi = y.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,888,"            setEntry(i, a * xi + b * yi);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,890,        return this;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,904,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,905,"        visitor.start(dim, 0, dim - 1);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,906,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,907,"            visitor.visit(i, getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,909,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,928,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,929,"        visitor.start(getDimension(), start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,930,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,931,"            visitor.visit(i, getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,933,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,949,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,970,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,984,        final int dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,985,"        visitor.start(dim, 0, dim - 1);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,986,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,987,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,989,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1008,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1009,"        visitor.start(getDimension(), start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1010,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1011,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1013,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1029,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1050,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1125,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1138,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1249,        return new RealVector() {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,56,    public ArrayRealVector() {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,57,        data = new double[0];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,58,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,65,    public ArrayRealVector(int size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,66,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,67,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,75,"    public ArrayRealVector(int size, double preset) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,76,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,77,"        Arrays.fill(data, preset);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,78,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,85,    public ArrayRealVector(double[] d) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,86,        data = d.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,87,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,104,        throws NullArgumentException {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,105,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,106,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,108,        data = copyArray ? d.clone() :  d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,109,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,122,"        throws NullArgumentException, NumberIsTooLargeException {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,123,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,124,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,126,        if (d.length < pos + size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,127,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,129,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,130,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,131,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,138,    public ArrayRealVector(Double[] d) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,139,        data = new double[d.length];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,140,        for (int i = 0; i < d.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,141,            data[i] = d[i].doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,143,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,156,"        throws NullArgumentException, NumberIsTooLargeException {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,157,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,158,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,160,        if (d.length < pos + size) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,161,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,163,        data = new double[size];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,164,        for (int i = pos; i < pos + size; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,165,            data[i - pos] = d[i].doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,167,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,175,    public ArrayRealVector(RealVector v) throws NullArgumentException {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,176,        if (v == null) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,177,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,179,        data = new double[v.getDimension()];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,180,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,181,            data[i] = v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,183,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,192,"        this(v, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,193,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,203,        data = deep ? v.data.clone() : v.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,204,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,211,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,212,        data = new double[v1.data.length + v2.data.length];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,213,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,214,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,215,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,222,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,223,        final int l1 = v1.data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,224,        final int l2 = v2.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,225,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,226,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,227,        for (int i = 0; i < l2; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,228,            data[l1 + i] = v2.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,230,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,237,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,238,        final int l1 = v1.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,239,        final int l2 = v2.data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,240,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,241,        for (int i = 0; i < l1; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,242,            data[i] = v1.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,244,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,245,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,252,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,253,        final int l1 = v1.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,254,        final int l2 = v2.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,255,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,256,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,257,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,258,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,265,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,266,        final int l1 = v1.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,267,        final int l2 = v2.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,268,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,269,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,270,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,271,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,278,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,279,        final int l1 = v1.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,280,        final int l2 = v2.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,281,        data = new double[l1 + l2];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,282,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,283,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,284,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,289,"        return new ArrayRealVector(this, true);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,296,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,297,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,298,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,299,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,300,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,301,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,302,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,303,                resultData[i] = data[i] + vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,305,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,307,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,308,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,309,            Iterator<Entry> it = v.iterator();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,310,            while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,311,                final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,312,                out[e.getIndex()] += e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,313,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,314,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,322,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,323,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,324,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,325,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,326,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,327,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,328,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,329,                resultData[i] = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,331,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,333,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,334,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,335,            Iterator<Entry> it = v.iterator();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,336,            while (it.hasNext()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,337,                final Entry e = it.next();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,338,                out[e.getIndex()] -= e.getValue();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,339,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,340,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,347,        return copy().mapToSelf(function);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,353,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,354,            data[i] = function.value(data[i]);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,356,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,362,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,363,            data[i] = data[i] + d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,365,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,371,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,372,            data[i] = data[i] - d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,374,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,380,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,381,            data[i] = data[i] * d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,383,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,389,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,390,            data[i] = data[i] / d;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,392,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,399,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,400,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,401,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,402,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,403,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,404,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,405,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,406,                resultData[i] = data[i] * vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,408,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,410,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,411,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,412,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,413,                out[i] *= v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,415,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,423,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,424,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,425,            final int dim = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,426,            checkVectorDimensions(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,427,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,428,            double[] resultData = result.data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,429,            for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,430,                resultData[i] = data[i] / vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,432,            return result;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,434,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,435,            double[] out = data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,436,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,437,                out[i] /= v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,439,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,450,        return data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,456,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,457,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,458,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,459,            double dot = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,460,            for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,461,                dot += data[i] * vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,463,            return dot;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,465,        return super.dotProduct(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,471,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,472,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,473,            sum += a * a;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,475,        return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,481,        double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,482,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,483,            sum += FastMath.abs(a);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,485,        return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,491,        double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,492,        for (double a : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,493,"            max = FastMath.max(max, FastMath.abs(a));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,495,        return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,501,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,502,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,503,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,504,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,505,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,506,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,507,                sum += delta * delta;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,509,            return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,511,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,512,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,513,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,514,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,515,                sum += delta * delta;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,517,            return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,525,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,526,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,527,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,528,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,529,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,530,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,531,                sum += FastMath.abs(delta);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,533,            return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,535,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,536,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,537,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,538,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,539,                sum += FastMath.abs(delta);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,541,            return sum;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,549,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,550,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,551,            checkVectorDimensions(vData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,552,            double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,553,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,554,                final double delta = data[i] - vData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,555,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,557,            return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,559,            checkVectorDimensions(v);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,560,            double max = 0;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,561,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,562,                final double delta = data[i] - v.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,563,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,565,            return max;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,572,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,573,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,574,            final int m = data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,575,            final int n = vData.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,576,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,577,            for (int i = 0; i < m; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,578,                for (int j = 0; j < n; j++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,579,"                    out.setEntry(i, j, data[i] * vData[j]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,582,            return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,584,            final int m = data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,585,            final int n = v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,586,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,587,            for (int i = 0; i < m; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,588,                for (int j = 0; j < n; j++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,589,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,592,            return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,600,            return data[index];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,601,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,602,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,610,        return data.length;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,617,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,618,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,619,"            return new ArrayRealVector(this, v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,630,"        return new ArrayRealVector(this, v);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,636,        final double[] out = new double[data.length + 1];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,637,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,638,        out[data.length] = in;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,639,"        return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,646,        if (n < 0) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,647,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,649,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,651,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,655,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,652,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,653,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,654,            checkIndex(index + n - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,656,        return out;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,663,            data[index] = value;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,666,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,664,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,665,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,667,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,674,        data[index] += increment;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,678,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,675,        } catch(IndexOutOfBoundsException e){,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,676,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,679,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,685,        if (v instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,686,"            setSubVector(index, ((ArrayRealVector) v).data);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,689,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,690,                    data[i] = v.getEntry(i - index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,695,            },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,692,            } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,693,                checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,694,                checkIndex(index + v.getDimension() - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,697,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,710,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,714,        },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,711,        } catch (IndexOutOfBoundsException e) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,712,            checkIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,713,            checkIndex(index + v.length - 1);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,715,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,720,"        Arrays.fill(data, value);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,721,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,726,        return data.clone();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,732,        return DEFAULT_FORMAT.format(this);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,745,        checkVectorDimensions(v.getDimension());,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,746,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,758,        if (data.length != n) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,759,"            throw new DimensionMismatchException(data.length, n);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,761,    },0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,771,        for (double v : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,772,            if (Double.isNaN(v)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,773,                return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,776,        return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,788,        if (isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,789,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,792,        for (double v : data) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,793,            if (Double.isInfinite(v)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,794,                return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,798,        return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,804,        if (this == other) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,805,            return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,808,        if (!(other instanceof RealVector)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,809,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,812,        RealVector rhs = (RealVector) other;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,813,        if (data.length != rhs.getDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,814,            return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,817,        if (rhs.isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,818,            return this.isNaN();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,821,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,822,            if (data[i] != rhs.getEntry(i)) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,823,                return false;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,826,        return true;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,834,        if (isNaN()) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,835,            return 9;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,837,        return MathUtils.hash(data);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,844,"        return copy().combineToSelf(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,851,        if (y instanceof ArrayRealVector) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,852,            final double[] yData = ((ArrayRealVector) y).data;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,853,            checkVectorDimensions(yData.length);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,854,            for (int i = 0; i < this.data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,855,                data[i] = a * data[i] + b * yData[i];,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,857,        } else {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,858,            checkVectorDimensions(y);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,859,            for (int i = 0; i < this.data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,860,                data[i] = a * data[i] + b * y.getEntry(i);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,863,        return this;,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,869,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,870,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,871,"            visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,873,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,881,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,882,"        visitor.start(data.length, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,883,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,884,"            visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,886,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,896,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,908,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,914,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,915,        for (int i = 0; i < data.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,916,"            data[i] = visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,918,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,926,"        checkIndices(start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,927,"        visitor.start(data.length, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,928,        for (int i = start; i <= end; i++) {,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,929,"            data[i] = visitor.visit(i, data[i]);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,931,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,941,        return walkInDefaultOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,953,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,,0
org/apache/commons/math3/linear/ArrayRealVector,14,39,public class ArrayRealVector extends RealVector implements Serializable {,0.0,0,,0
org/apache/commons/math3/exception/ConvergenceException,14,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0.0,0,,0
org/apache/commons/math3/exception/ConvergenceException,14,38,    },0.0,0,,0
org/apache/commons/math3/exception/ConvergenceException,14,48,                                Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/ConvergenceException,14,49,"        getContext().addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/ConvergenceException,14,50,    },0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,44,"        this(point, value, true);",0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,45,    },0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,58,        super(copyArray ?,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,66,    },0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,74,        final double[] p = getKey();,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,75,        return p == null ? null : p.clone();,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,84,        return getKey();,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,94,        final double[] v = super.getValue();,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,95,        return v == null ? null : v.clone();,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,105,        return super.getValue();,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,113,"        return new DataTransferObject(getKey(), getValue());",0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,31,"public class PointVectorValuePair extends Pair<double[], double[]> implements Serializable {",0.0,0,,0
org/apache/commons/math3/exception/TooManyIterationsException,14,37,        super(max);,0.0,0,,0
org/apache/commons/math3/exception/TooManyIterationsException,14,38,        getContext().addMessage(LocalizedFormats.ITERATIONS);,0.0,0,,0
org/apache/commons/math3/exception/TooManyIterationsException,14,39,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,175,"        this(100, checker, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,176,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,206,        super(checker);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,207,        this.initialStepBoundFactor = initialStepBoundFactor;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,208,        this.costRelativeTolerance = costRelativeTolerance;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,209,        this.parRelativeTolerance = parRelativeTolerance;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,210,        this.orthoTolerance = orthoTolerance;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,211,        this.qrRankingThreshold = threshold;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,212,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,235,"        this(100,",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,238,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,279,        final int nR = getTarget().length; // Number of observed data.,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,280,        final double[] currentPoint = getStartPoint();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,281,        final int nC = currentPoint.length; // Number of parameters.,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,284,"        solvedCols  = FastMath.min(nR, nC);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,285,        diagR       = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,286,        jacNorm     = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,287,        beta        = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,288,        permutation = new int[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,289,        lmDir       = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,292,        double   delta   = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,293,        double   xNorm   = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,294,        double[] diag    = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,295,        double[] oldX    = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,296,        double[] oldRes  = new double[nR];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,297,        double[] oldObj  = new double[nR];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,298,        double[] qtf     = new double[nR];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,299,        double[] work1   = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,300,        double[] work2   = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,301,        double[] work3   = new double[nC];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,303,        final RealMatrix weightMatrixSqrt = getWeightSquareRoot();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,306,        double[] currentObjective = computeObjectiveValue(currentPoint);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,307,        double[] currentResiduals = computeResiduals(currentObjective);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,308,"        PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,309,        double currentCost = computeCost(currentResiduals);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,312,        lmPar = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,313,        boolean firstIteration = true;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,314,        int iter = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,315,        final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,317,            ++iter;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,318,            final PointVectorValuePair previous = current;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,321,            qrDecomposition(computeWeightedJacobian(currentPoint));,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,323,            weightedResidual = weightMatrixSqrt.operate(currentResiduals);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,324,            for (int i = 0; i < nR; i++) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,325,                qtf[i] = weightedResidual[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,329,            qTy(qtf);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,333,            for (int k = 0; k < solvedCols; ++k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,334,                int pk = permutation[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,335,                weightedJacobian[k][pk] = diagR[pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,338,            if (firstIteration) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,341,                xNorm = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,342,                for (int k = 0; k < nC; ++k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,343,                    double dk = jacNorm[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,344,                    if (dk == 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,345,                        dk = 1.0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,347,                    double xk = dk * currentPoint[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,348,                    xNorm  += xk * xk;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,349,                    diag[k] = dk;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,351,                xNorm = FastMath.sqrt(xNorm);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,354,                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,358,            double maxCosine = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,359,            if (currentCost != 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,360,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,361,                    int    pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,362,                    double s  = jacNorm[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,363,                    if (s != 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,364,                        double sum = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,365,                        for (int i = 0; i <= j; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,366,                            sum += weightedJacobian[i][pj] * qtf[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,368,"                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * currentCost));",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,372,            if (maxCosine <= orthoTolerance) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,374,                setCost(currentCost);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,375,                return current;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,379,            for (int j = 0; j < nC; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,380,"                diag[j] = FastMath.max(diag[j], jacNorm[j]);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,384,            for (double ratio = 0; ratio < 1.0e-4;) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,387,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,388,                    int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,389,                    oldX[pj] = currentPoint[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,391,                final double previousCost = currentCost;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,392,                double[] tmpVec = weightedResidual;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,393,                weightedResidual = oldRes;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,394,                oldRes    = tmpVec;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,395,                tmpVec    = currentObjective;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,396,                currentObjective = oldObj;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,397,                oldObj    = tmpVec;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,400,"                determineLMParameter(qtf, delta, diag, work1, work2, work3);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,403,                double lmNorm = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,404,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,405,                    int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,406,                    lmDir[pj] = -lmDir[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,407,                    currentPoint[pj] = oldX[pj] + lmDir[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,408,                    double s = diag[pj] * lmDir[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,409,                    lmNorm  += s * s;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,411,                lmNorm = FastMath.sqrt(lmNorm);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,413,                if (firstIteration) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,414,"                    delta = FastMath.min(delta, lmNorm);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,418,                currentObjective = computeObjectiveValue(currentPoint);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,419,                currentResiduals = computeResiduals(currentObjective);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,420,"                current = new PointVectorValuePair(currentPoint, currentObjective);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,421,                currentCost = computeCost(currentResiduals);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,424,                double actRed = -1.0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,425,                if (0.1 * currentCost < previousCost) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,426,                    double r = currentCost / previousCost;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,427,                    actRed = 1.0 - r * r;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,432,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,433,                    int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,434,                    double dirJ = lmDir[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,435,                    work1[j] = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,436,                    for (int i = 0; i <= j; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,437,                        work1[i] += weightedJacobian[i][pj] * dirJ;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,440,                double coeff1 = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,441,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,442,                    coeff1 += work1[j] * work1[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,444,                double pc2 = previousCost * previousCost;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,445,                coeff1 = coeff1 / pc2;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,446,                double coeff2 = lmPar * lmNorm * lmNorm / pc2;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,447,                double preRed = coeff1 + 2 * coeff2;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,448,                double dirDer = -(coeff1 + coeff2);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,451,                ratio = (preRed == 0) ? 0 : (actRed / preRed);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,454,                if (ratio <= 0.25) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,455,                    double tmp =,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,457,                        if ((0.1 * currentCost >= previousCost) || (tmp < 0.1)) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,458,                            tmp = 0.1;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,460,"                        delta = tmp * FastMath.min(delta, 10.0 * lmNorm);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,461,                        lmPar /= tmp;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,462,                } else if ((lmPar == 0) || (ratio >= 0.75)) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,463,                    delta = 2 * lmNorm;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,464,                    lmPar *= 0.5;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,468,                if (ratio >= 1.0e-4) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,470,                    firstIteration = false;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,471,                    xNorm = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,472,                    for (int k = 0; k < nC; ++k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,473,                        double xK = diag[k] * currentPoint[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,474,                        xNorm += xK * xK;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,476,                    xNorm = FastMath.sqrt(xNorm);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,479,                    if (checker != null) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,481,"                        if (checker.converged(iter, previous, current)) {",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,482,                            setCost(currentCost);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,483,                            return current;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,488,                    currentCost = previousCost;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,489,                    for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,490,                        int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,491,                        currentPoint[pj] = oldX[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,493,                    tmpVec    = weightedResidual;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,494,                    weightedResidual = oldRes;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,495,                    oldRes    = tmpVec;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,496,                    tmpVec    = currentObjective;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,497,                    currentObjective = oldObj;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,498,                    oldObj    = tmpVec;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,500,"                    current = new PointVectorValuePair(currentPoint, currentObjective);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,504,                if ((FastMath.abs(actRed) <= costRelativeTolerance &&,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,508,                    setCost(currentCost);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,509,                    return current;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,514,                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,515,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,517,                } else if (delta <= 2.2204e-16 * xNorm) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,518,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,520,                } else if (maxCosine <= 2.2204e-16)  {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,521,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,524,            },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,525,        },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,552,        final int nC = weightedJacobian[0].length;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,556,        for (int j = 0; j < rank; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,557,            lmDir[permutation[j]] = qy[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,559,        for (int j = rank; j < nC; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,560,            lmDir[permutation[j]] = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,562,        for (int k = rank - 1; k >= 0; --k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,563,            int pk = permutation[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,564,            double ypk = lmDir[pk] / diagR[pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,565,            for (int i = 0; i < k; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,566,                lmDir[permutation[i]] -= ypk * weightedJacobian[i][pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,568,            lmDir[pk] = ypk;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,573,        double dxNorm = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,574,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,575,            int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,576,            double s = diag[pj] * lmDir[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,577,            work1[pj] = s;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,578,            dxNorm += s * s;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,580,        dxNorm = FastMath.sqrt(dxNorm);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,581,        double fp = dxNorm - delta;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,582,        if (fp <= 0.1 * delta) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,583,            lmPar = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,584,            return;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,591,        double parl = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,592,        if (rank == solvedCols) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,593,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,594,                int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,595,                work1[pj] *= diag[pj] / dxNorm;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,597,            sum2 = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,598,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,599,                int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,600,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,601,                for (int i = 0; i < j; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,602,                    sum += weightedJacobian[i][pj] * work1[permutation[i]];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,604,                double s = (work1[pj] - sum) / diagR[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,605,                work1[pj] = s;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,606,                sum2 += s * s;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,608,            parl = fp / (delta * sum2);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,612,        sum2 = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,613,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,614,            int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,615,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,616,            for (int i = 0; i <= j; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,617,                sum += weightedJacobian[i][pj] * qy[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,619,            sum /= diag[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,620,            sum2 += sum * sum;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,622,        double gNorm = FastMath.sqrt(sum2);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,623,        double paru = gNorm / delta;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,624,        if (paru == 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,626,"            paru = 2.2251e-308 / FastMath.min(delta, 0.1);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,631,"        lmPar = FastMath.min(paru, FastMath.max(lmPar, parl));",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,632,        if (lmPar == 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,633,            lmPar = gNorm / dxNorm;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,636,        for (int countdown = 10; countdown >= 0; --countdown) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,639,            if (lmPar == 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,640,"                lmPar = FastMath.max(2.2251e-308, 0.001 * paru);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,642,            double sPar = FastMath.sqrt(lmPar);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,643,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,644,                int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,645,                work1[pj] = sPar * diag[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,647,"            determineLMDirection(qy, work1, work2, work3);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,649,            dxNorm = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,650,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,651,                int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,652,                double s = diag[pj] * lmDir[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,653,                work3[pj] = s;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,654,                dxNorm += s * s;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,656,            dxNorm = FastMath.sqrt(dxNorm);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,657,            double previousFP = fp;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,658,            fp = dxNorm - delta;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,662,            if ((FastMath.abs(fp) <= 0.1 * delta) ||,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,664,                return;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,668,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,669,                int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,670,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,672,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,673,                int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,674,                work1[pj] /= work2[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,675,                double tmp = work1[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,676,                for (int i = j + 1; i < solvedCols; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,677,                    work1[permutation[i]] -= weightedJacobian[i][pj] * tmp;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,680,            sum2 = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,681,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,682,                double s = work1[permutation[j]];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,683,                sum2 += s * s;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,685,            double correction = fp / (delta * sum2);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,688,            if (fp > 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,689,"                parl = FastMath.max(parl, lmPar);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,690,            } else if (fp < 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,691,"                paru = FastMath.min(paru, lmPar);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,695,"            lmPar = FastMath.max(parl, lmPar + correction);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,698,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,725,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,726,            int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,727,            for (int i = j + 1; i < solvedCols; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,728,                weightedJacobian[i][pj] = weightedJacobian[j][permutation[i]];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,730,            lmDir[j] = diagR[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,731,            work[j]  = qy[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,735,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,739,            int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,740,            double dpj = diag[pj];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,741,            if (dpj != 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,742,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,744,            lmDiag[j] = dpj;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,749,            double qtbpj = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,750,            for (int k = j; k < solvedCols; ++k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,751,                int pk = permutation[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,755,                if (lmDiag[k] != 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,759,                    double rkk = weightedJacobian[k][pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,760,                    if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,761,                        final double cotan = rkk / lmDiag[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,762,                        sin   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,763,                        cos   = sin * cotan;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,764,                    } else {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,765,                        final double tan = lmDiag[k] / rkk;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,766,                        cos = 1.0 / FastMath.sqrt(1.0 + tan * tan);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,767,                        sin = cos * tan;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,772,                    weightedJacobian[k][pk] = cos * rkk + sin * lmDiag[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,773,                    final double temp = cos * work[k] + sin * qtbpj;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,774,                    qtbpj = -sin * work[k] + cos * qtbpj;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,775,                    work[k] = temp;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,778,                    for (int i = k + 1; i < solvedCols; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,779,                        double rik = weightedJacobian[i][pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,780,                        final double temp2 = cos * rik + sin * lmDiag[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,781,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,782,                        weightedJacobian[i][pk] = temp2;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,789,            lmDiag[j] = weightedJacobian[j][permutation[j]];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,790,            weightedJacobian[j][permutation[j]] = lmDir[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,795,        int nSing = solvedCols;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,796,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,797,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,798,                nSing = j;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,800,            if (nSing < solvedCols) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,801,                work[j] = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,804,        if (nSing > 0) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,805,            for (int j = nSing - 1; j >= 0; --j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,806,                int pj = permutation[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,807,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,808,                for (int i = j + 1; i < nSing; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,809,                    sum += weightedJacobian[i][pj] * work[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,811,                work[j] = (work[j] - sum) / lmDiag[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,816,        for (int j = 0; j < lmDir.length; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,817,            lmDir[permutation[j]] = work[j];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,819,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,848,        weightedJacobian = jacobian.scalarMultiply(-1).getData();,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,850,        final int nR = weightedJacobian.length;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,851,        final int nC = weightedJacobian[0].length;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,854,        for (int k = 0; k < nC; ++k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,855,            permutation[k] = k;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,856,            double norm2 = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,857,            for (int i = 0; i < nR; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,858,                double akk = weightedJacobian[i][k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,859,                norm2 += akk * akk;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,861,            jacNorm[k] = FastMath.sqrt(norm2);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,865,        for (int k = 0; k < nC; ++k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,868,            int nextColumn = -1;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,869,            double ak2 = Double.NEGATIVE_INFINITY;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,870,            for (int i = k; i < nC; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,871,                double norm2 = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,872,                for (int j = k; j < nR; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,873,                    double aki = weightedJacobian[j][permutation[i]];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,874,                    norm2 += aki * aki;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,876,                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,877,"                    throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,",0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,880,                if (norm2 > ak2) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,881,                    nextColumn = i;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,882,                    ak2        = norm2;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,885,            if (ak2 <= qrRankingThreshold) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,886,                rank = k;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,887,                return;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,889,            int pk                  = permutation[nextColumn];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,890,            permutation[nextColumn] = permutation[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,891,            permutation[k]          = pk;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,894,            double akk   = weightedJacobian[k][pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,895,            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,896,            double betak = 1.0 / (ak2 - akk * alpha);,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,897,            beta[pk]     = betak;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,900,            diagR[pk]        = alpha;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,901,            weightedJacobian[k][pk] -= alpha;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,904,            for (int dk = nC - 1 - k; dk > 0; --dk) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,905,                double gamma = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,906,                for (int j = k; j < nR; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,907,                    gamma += weightedJacobian[j][pk] * weightedJacobian[j][permutation[k + dk]];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,909,                gamma *= betak;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,910,                for (int j = k; j < nR; ++j) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,911,                    weightedJacobian[j][permutation[k + dk]] -= gamma * weightedJacobian[j][pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,915,        rank = solvedCols;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,916,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,924,        final int nR = weightedJacobian.length;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,925,        final int nC = weightedJacobian[0].length;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,927,        for (int k = 0; k < nC; ++k) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,928,            int pk = permutation[k];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,929,            double gamma = 0;,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,930,            for (int i = k; i < nR; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,931,                gamma += weightedJacobian[i][pk] * y[i];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,933,            gamma *= beta[pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,934,            for (int i = k; i < nR; ++i) {,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,935,                y[i] -= gamma * weightedJacobian[i][pk];,0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,938,    },0.0,0,,0
org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,107,public class LevenbergMarquardtOptimizer,0.0,0,,0
org/apache/commons/math3/optim/MaxIter,14,35,    public MaxIter(int max) {,0.0,0,,0
org/apache/commons/math3/optim/MaxIter,14,36,        if (max <= 0) {,0.0,0,,0
org/apache/commons/math3/optim/MaxIter,14,37,            throw new NotStrictlyPositiveException(max);,0.0,0,,0
org/apache/commons/math3/optim/MaxIter,14,40,        maxIter = max;,0.0,0,,0
org/apache/commons/math3/optim/MaxIter,14,41,    },0.0,0,,0
org/apache/commons/math3/optim/MaxIter,14,49,        return maxIter;,0.0,0,,0
org/apache/commons/math3/optim/MaxIter,14,60,        return new MaxIter(Integer.MAX_VALUE);,0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,14,38,"        super(value, 0, false);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,14,39,    },0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,14,48,"        super(specific, value, 0, false);",0.0,0,,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,14,49,    },0.0,0,,0
org/apache/commons/math3/optim/BaseOptimizer,14,213,            throw new TooManyIterationsException(max);,0.0,0,,0
org/apache/commons/math3/optim/InitialGuess,14,35,    public InitialGuess(double[] startPoint) {,0.0,0,,0
org/apache/commons/math3/optim/InitialGuess,14,36,        init = startPoint.clone();,0.0,0,,0
org/apache/commons/math3/optim/InitialGuess,14,37,    },0.0,0,,0
org/apache/commons/math3/optim/InitialGuess,14,45,        return init.clone();,0.0,0,,0
org/apache/commons/math3/optim/MaxEval,14,37,            throw new NotStrictlyPositiveException(max);,0.0,0,,0
org/apache/commons/math3/optim/MaxEval,14,49,        return maxEval;,0.0,0,,0
org/apache/commons/math3/optim/MaxEval,14,60,        return new MaxEval(Integer.MAX_VALUE);,0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,42,                        double[] uB) {,0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,43,        lower = lB.clone();,0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,44,        upper = uB.clone();,0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,45,    },0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,53,        return lower.clone();,0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,61,        return upper.clone();,0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,73,        final double[] lB = new double[dim];,0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,74,"        Arrays.fill(lB, Double.NEGATIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,75,        final double[] uB = new double[dim];,0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,76,"        Arrays.fill(uB, Double.POSITIVE_INFINITY);",0.0,0,,0
org/apache/commons/math3/optim/SimpleBounds,14,78,"        return new SimpleBounds(lB, uB);",0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,135,"        public DataTransferObject(final double[] point, final double[] value) {",0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,136,            this.point = point.clone();,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,137,            this.value = value.clone();,0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,138,        },0.0,0,,0
org/apache/commons/math3/optim/PointVectorValuePair,14,144,"            return new PointVectorValuePair(point, value, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,675,            super(BigFraction.ZERO);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,676,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,682,            data = new double[rows][columns];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,683,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,688,            data[row][column] = value.doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,689,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,697,"            return new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,670,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,630,            super(Fraction.ZERO);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,631,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,637,            data = new double[rows][columns];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,638,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,643,            data[row][column] = value.doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,644,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,652,"            return new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,625,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,413,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,426,                this.startRow    = startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,427,                this.startColumn = startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,428,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,433,                destination[row - startRow][column - startColumn] = value;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,434,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,53,    protected AbstractFieldMatrix() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,54,        field = null;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,55,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,61,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,62,        this.field = field;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,63,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,77,        throws NotStrictlyPositiveException {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,78,        if (rowDimension <= 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,79,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,82,        if (columnDimension <= 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,83,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,86,        this.field = field;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,87,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,100,        if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,101,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,103,        if (d.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,104,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,106,        if (d[0].length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,107,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,109,        return d[0][0].getField();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,122,        if (d.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,123,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,125,        return d[0].getField();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,143,        if (columns < 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,144,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,145,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,147,        T[][] array =,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,149,        for (int i = 0; i < array.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,150,"            Arrays.fill(array[i], field.getZero());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,152,        return array;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,167,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,168,"        Arrays.fill(array, field.getZero());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,169,        return array;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,174,        return field;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,189,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,191,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,192,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,193,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,194,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,195,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,196,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,200,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,207,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,209,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,210,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,211,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,212,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,213,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,214,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,218,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,224,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,225,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,226,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,227,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,228,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,229,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,233,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,238,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,239,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,240,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,241,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,242,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,243,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,247,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,254,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,256,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,257,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,258,        final int nSum  = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,259,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,260,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,261,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,262,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,263,                for (int i = 0; i < nSum; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,264,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,266,"                out.setEntry(row, col, sum);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,270,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,276,        return m.multiply(this);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,282,        if (p < 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,283,            throw new NotPositiveException(p);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,286,        if (!isSquare()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,287,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,290,        if (p == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,291,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,294,        if (p == 1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,295,            return this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,298,        final int power = p - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,307,        final char[] binaryRepresentation = Integer.toBinaryString(power),0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,309,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,311,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,312,            if (binaryRepresentation[i] == '1') {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,313,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,314,                nonZeroPositions.add(pos);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,318,        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,321,"        results.add(0, this.copy());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,323,        for (int i = 1; i < binaryRepresentation.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,324,            final FieldMatrix<T> s = results.get(i - 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,325,            final FieldMatrix<T> r = s.multiply(s);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,326,"            results.add(i, r);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,329,        FieldMatrix<T> result = this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,331,        for (Integer i : nonZeroPositions) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,332,            result = result.multiply(results.get(i));,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,333,        },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,335,        return result;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,340,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,342,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,343,            final T[] dataI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,344,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,345,"                dataI[j] = getEntry(i, j);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,349,        return data;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,356,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,358,        final FieldMatrix<T> subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,360,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,361,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,362,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,366,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,376,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,379,        final FieldMatrix<T> subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,381,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,391,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,402,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,403,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,404,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,405,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,406,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,413,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,438,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,445,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,446,        if ((destination.length < selectedRows.length) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,448,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,455,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,456,            final T[] destinationI = destination[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,457,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,458,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,462,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,469,        if (subMatrix == null) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,470,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,472,        final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,473,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,474,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,477,        final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,478,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,479,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,482,        for (int r = 1; r < nRows; ++r) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,483,            if (subMatrix[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,484,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,488,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,489,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,490,        checkRowIndex(nRows + row - 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,491,        checkColumnIndex(nCols + column - 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,493,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,494,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,495,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,498,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,502,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,503,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,504,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,505,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,506,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,509,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,516,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,517,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,518,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,520,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,524,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,525,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,528,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,534,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,535,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,536,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,537,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,538,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,541,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,548,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,549,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,550,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,552,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,556,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,557,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,560,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,565,"        return new ArrayFieldVector<T>(field, getRow(row), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,571,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,572,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,573,        if (vector.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,574,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,577,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,578,"            setEntry(row, i, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,581,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,586,"        return new ArrayFieldVector<T>(field, getColumn(column), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,593,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,594,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,595,        if (vector.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,596,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,599,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,600,"            setEntry(i, column, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,603,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,607,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,608,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,609,"        final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,610,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,611,"            out[i] = getEntry(row, i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,614,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,621,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,622,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,623,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,624,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,626,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,627,"            setEntry(row, i, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,630,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,634,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,635,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,636,"        final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,637,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,638,"            out[i] = getEntry(i, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,641,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,648,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,649,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,650,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,651,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,653,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,654,"            setEntry(i, column, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,656,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,672,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,673,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,674,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,675,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,683,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,688,        return getColumnDimension() == getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,699,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,700,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,701,        if (nRows != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,702,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,704,        T trace = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,705,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,706,"            trace = trace.add(getEntry(i, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,708,        return trace;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,714,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,715,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,716,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,717,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,720,"        final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,721,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,722,            T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,723,            for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,724,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,726,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,729,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,736,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,737,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,738,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,739,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,740,            if (v.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,741,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,744,"            final T[] out = buildArray(field, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,745,            for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,746,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,747,                for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,748,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,750,                out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,753,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,760,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,761,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,762,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,763,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,766,"        final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,767,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,768,            T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,769,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,770,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,772,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,775,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,782,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,783,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,784,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,785,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,786,            if (v.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,787,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,790,"            final T[] out = buildArray(field, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,791,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,792,                T sum = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,793,                for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,794,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,796,                out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,799,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,805,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,806,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,807,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,808,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,809,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,810,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,811,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,812,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,815,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,820,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,821,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,822,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,823,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,824,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,825,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,828,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,836,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,837,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,839,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,840,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,841,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,842,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,843,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,846,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,854,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,855,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,857,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,858,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,859,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,862,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,867,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,868,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,869,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,870,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,871,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,872,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,873,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,874,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,877,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,882,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,883,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,884,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,885,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,886,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,887,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,890,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,898,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,899,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,901,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,902,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,903,"                final T oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,904,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,905,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,908,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,916,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,917,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,919,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,920,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,921,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,924,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,929,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,934,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,942,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,950,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,959,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,960,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,961,        final StringBuffer res = new StringBuffer();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,962,        String fullClassName = getClass().getName();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,963,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,964,"        res.append(shortClassName).append(""{"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,966,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,967,            if (i > 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,968,"                res.append("","");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,970,"            res.append(""{"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,971,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,972,                if (j > 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,973,"                    res.append("","");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,975,"                res.append(getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,977,"            res.append(""}"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,980,"        res.append(""}"");",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,981,        return res.toString();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,994,        if (object == this ) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,995,            return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,997,        if (object instanceof FieldMatrix<?> == false) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,998,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1000,        FieldMatrix<?> m = (FieldMatrix<?>) object;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1001,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1002,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1003,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1004,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1006,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1007,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1008,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1009,                    return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1013,        return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1023,        int ret = 322562;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1024,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1025,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1026,        ret = ret * 31 + nRows;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1027,        ret = ret * 31 + nCols;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1028,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1029,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1030,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1033,        return ret;,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1043,        if (row < 0 || row >= getRowDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1044,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1047,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1057,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1058,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1061,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1078,        checkRowIndex(startRow);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1079,        checkRowIndex(endRow);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1080,        if (endRow < startRow) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1081,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1085,        checkColumnIndex(startColumn);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1086,        checkColumnIndex(endColumn);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1087,        if (endColumn < startColumn) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1088,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1091,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1105,        if (selectedRows == null ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1107,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1109,        if (selectedRows.length == 0 ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1111,            throw new NoDataException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1114,        for (final int row : selectedRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1115,            checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1117,        for (final int column : selectedColumns) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1118,            checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1120,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1131,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1133,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1136,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1147,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1149,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1152,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1163,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1164,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,1166,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,369,                this.startRow    = startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,370,                this.startColumn = startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,371,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,376,                destination[row - startRow][column - startColumn] = value;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,377,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,56,    protected AbstractRealMatrix() {},0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,69,            throw new NotStrictlyPositiveException(rowDimension);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,72,            throw new NotStrictlyPositiveException(columnDimension);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,81,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,82,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,84,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,85,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,90,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,98,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,99,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,101,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,102,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,107,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,112,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,113,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,115,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,116,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,121,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,126,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,127,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,129,        for (int row = 0; row < rowCount; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,130,            for (int col = 0; col < columnCount; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,131,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,135,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,143,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,144,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,145,        final int nSum  = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,146,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,147,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,148,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,149,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,150,                for (int i = 0; i < nSum; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,153,"                out.setEntry(row, col, sum);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,157,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,163,        return m.multiply(this);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,169,        if (p < 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,173,        if (!isSquare()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,177,        if (p == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,178,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,181,        if (p == 1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,182,            return this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,185,        final int power = p - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,194,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,195,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,196,        int maxI = -1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,198,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,199,            if (binaryRepresentation[i] == '1') {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,200,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,201,                nonZeroPositions.add(pos);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,204,                if (maxI == -1) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,205,                    maxI = pos;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,210,        RealMatrix[] results = new RealMatrix[maxI + 1];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,211,        results[0] = this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,213,        for (int i = 1; i <= maxI; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,214,            results[i] = results[i-1].multiply(results[i-1]);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,217,        RealMatrix result = this.copy();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,219,        for (Integer i : nonZeroPositions) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,220,            result = result.multiply(results[i]);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,221,        },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,223,        return result;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,228,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,230,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,231,            final double[] dataI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,232,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,233,"                dataI[j] = getEntry(i, j);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,237,        return data;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,310,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,312,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,313,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,318,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,327,        final RealMatrix subMatrix =,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,339,        return subMatrix;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,349,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,350,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,351,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,380,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,388,        if ((destination.length < selectedRows.length) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,394,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,395,            final double[] destinationI = destination[i];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,396,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,400,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,406,        MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,407,        final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,408,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,409,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,412,        final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,413,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,414,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,417,        for (int r = 1; r < nRows; ++r) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,418,            if (subMatrix[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,423,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,424,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,428,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,429,            for (int j = 0; j < nCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,430,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,433,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,437,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,438,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,439,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,440,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,441,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,444,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,450,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,451,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,452,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,458,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,459,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,461,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,466,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,467,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,468,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,469,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,470,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,473,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,479,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,480,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,481,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,487,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,488,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,490,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,495,"        return new ArrayRealVector(getRow(row), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,501,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,502,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,503,        if (vector.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,507,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,508,"            setEntry(row, i, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,510,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,515,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,521,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,522,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,523,        if (vector.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,524,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,527,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,528,"            setEntry(i, column, vector.getEntry(i));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,530,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,534,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,535,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,536,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,537,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,538,"            out[i] = getEntry(row, i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,541,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,547,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,548,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,549,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,550,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,552,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,553,"            setEntry(row, i, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,555,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,559,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,560,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,561,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,562,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,563,"            out[i] = getEntry(i, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,566,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,572,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,573,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,574,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,575,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,577,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,578,"            setEntry(i, column, array[i]);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,580,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,585,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,586,"        setEntry(row, column, getEntry(row, column) + increment);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,587,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,592,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,593,"        setEntry(row, column, getEntry(row, column) * factor);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,594,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,598,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,599,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,600,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,611,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,616,        return getColumnDimension() == getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,637,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,638,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,639,        if (nRows != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,640,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,642,        double trace = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,643,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,644,"            trace += getEntry(i, i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,646,        return trace;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,652,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,653,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,654,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,655,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,658,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,659,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,660,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,661,            for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,662,"                sum += getEntry(row, i) * v[i];",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,664,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,667,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,675,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,676,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,677,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,678,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,679,            if (v.getDimension() != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,680,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,683,            final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,684,            for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,685,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,686,                for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,687,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,689,                out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,692,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,699,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,700,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,701,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,702,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,705,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,706,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,707,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,708,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,709,"                sum += getEntry(i, col) * v[i];",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,711,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,714,        return out;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,720,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,721,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,723,            final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,724,            final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,725,            if (v.getDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,726,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,729,            final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,730,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,731,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,732,                for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,733,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,735,                out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,738,"            return new ArrayRealVector(out, false);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,744,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,745,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,746,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,747,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,748,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,749,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,750,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,751,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,754,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,759,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,760,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,761,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,762,        for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,763,            for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,764,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,767,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,775,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,776,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,778,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,779,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,780,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,781,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,782,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,785,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,793,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,794,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,796,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,797,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,798,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,801,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,806,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,807,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,808,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,809,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,810,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,811,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,812,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,813,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,816,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,821,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,822,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,823,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,824,        for (int column = 0; column < columns; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,825,            for (int row = 0; row < rows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,826,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,829,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,837,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,838,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,840,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,841,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,842,"                final double oldValue = getEntry(row, column);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,843,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,844,"                setEntry(row, column, newValue);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,847,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,855,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,856,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,858,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,859,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,860,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,863,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,868,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,873,        return walkInRowOrder(visitor);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,882,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,891,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,900,        final StringBuilder res = new StringBuilder();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,901,        String fullClassName = getClass().getName();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,902,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,903,        res.append(shortClassName);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,904,        res.append(DEFAULT_FORMAT.format(this));,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,905,        return res.toString();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,918,        if (object == this ) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,919,            return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,921,        if (object instanceof RealMatrix == false) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,922,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,924,        RealMatrix m = (RealMatrix) object;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,925,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,926,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,927,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,928,            return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,930,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,931,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,932,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,933,                    return false;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,937,        return true;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,947,        int ret = 7;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,948,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,949,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,950,        ret = ret * 31 + nRows;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,951,        ret = ret * 31 + nCols;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,952,        for (int row = 0; row < nRows; ++row) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,953,            for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,954,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,958,        return ret;,0.0,0,,0
org/apache/commons/math3/linear/RealLinearOperator,14,95,        throw new UnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealLinearOperator,14,108,        return false;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,48,    public Array2DRowRealMatrix() {},0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,61,"        super(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,62,        data = new double[rowDimension][columnDimension];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,63,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,80,        copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,81,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,101,        NullArgumentException {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,102,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,103,            copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,105,            if (d == null) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,106,                throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,108,            final int nRows = d.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,109,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,110,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,112,            final int nCols = d[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,113,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,114,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,116,            for (int r = 1; r < nRows; r++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,117,                if (d[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,118,"                    throw new DimensionMismatchException(d[r].length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,121,            data = d;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,123,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,132,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,133,        final int nRows = v.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,134,        data = new double[nRows][1];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,135,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,136,            data[row][0] = v[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,138,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,151,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,165,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,167,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,168,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,169,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,170,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,171,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,172,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,173,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,174,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,175,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,179,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,192,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,194,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,195,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,196,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,197,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,198,            final double[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,199,            final double[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,200,            final double[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,201,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,202,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,206,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,219,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,221,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,222,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,223,        final int nSum = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,225,        final double[][] outData = new double[nRows][nCols];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,227,        final double[] mCol = new double[nSum];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,228,        final double[][] mData = m.data;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,231,        for (int col = 0; col < nCols; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,234,            for (int mRow = 0; mRow < nSum; mRow++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,235,                mCol[mRow] = mData[mRow][col];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,238,            for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,239,                final double[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,240,                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,241,                for (int i = 0; i < nSum; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,242,                    sum += dataRow[i] * mCol[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,244,                outData[row][col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,248,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,254,        return copyOut();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,263,        return data;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,272,        if (data == null) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,273,            if (row > 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,274,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,276,            if (column > 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,277,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,279,            MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,280,            final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,281,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,282,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,285,            final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,286,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,287,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,289,            data = new double[subMatrix.length][nCols];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,290,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,291,                if (subMatrix[i].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,292,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,296,        } else {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,297,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,300,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,307,        return data[row][column];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,315,        data[row][column] = value;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,316,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,323,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,324,        data[row][column] += increment;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,325,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,332,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,333,        data[row][column] *= factor;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,334,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,339,        return (data == null) ? 0 : data.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,352,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,353,        final int nCols = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,354,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,355,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,357,        final double[] out = new double[nRows];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,358,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,359,            final double[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,360,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,361,            for (int i = 0; i < nCols; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,362,                sum += dataRow[i] * v[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,364,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,366,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,373,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,374,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,375,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,376,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,379,        final double[] out = new double[nCols];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,380,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,381,            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,382,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,383,                sum += data[i][col] * v[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,385,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,388,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,395,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,396,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,397,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,398,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,399,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,400,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,401,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,404,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,410,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,411,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,413,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,414,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,415,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,416,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,419,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,428,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,429,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,431,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,432,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,433,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,434,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,437,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,446,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,447,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,449,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,450,            final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,451,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,452,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,455,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,461,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,462,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,463,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,464,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,465,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,466,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,467,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,470,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,476,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,477,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,478,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,479,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,480,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,481,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,484,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,493,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,494,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,496,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,497,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,498,                final double[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,499,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,502,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,511,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,512,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,514,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,515,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,516,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,519,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,528,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,531,        for (int i = 0; i < nRows; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,534,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,547,"        setSubMatrix(in, 0, 0);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,14,548,    },0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,14,37,"        super(value, 0, true);",0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,14,38,    },0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,14,47,"        super(specific, value, 0, true);",0.0,0,,0
org/apache/commons/math3/exception/NotPositiveException,14,48,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,14,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,14,48,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,14,54,        return getWrongDimension(0);,0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,14,60,        return getExpectedDimension(0);,0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,14,66,        return getWrongDimension(1);,0.0,0,,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,14,72,        return getExpectedDimension(1);,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,46,    },0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,59,"        super(specific, wrong, expected);",0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,60,        this.wrong = wrong.clone();,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,61,        this.expected = expected.clone();,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,62,    },0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,68,        return wrong.clone();,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,74,        return expected.clone();,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,82,        return wrong[index];,0.0,0,,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,14,89,        return expected[index];,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,14,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,14,47,    },0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,14,62,"        super(specific, wrong, lo, hi);",0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,14,63,        this.lo = lo;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,14,64,        this.hi = hi;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,14,65,    },0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,14,71,        return lo;,0.0,0,,0
org/apache/commons/math3/exception/OutOfRangeException,14,77,        return hi;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,257,                this.endRow = endRow;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,258,                columnSum   = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,259,                maxColSum   = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,260,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,264,                columnSum += FastMath.abs(value);,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,265,                if (row == endRow) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,266,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,267,                    columnSum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,269,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,273,                return maxColSum;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1630,            class UnmodifiableEntry extends Entry {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1634,                    return v.getEntry(getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1646,                    throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1059,        public Entry() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1060,            setIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1061,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1069,            return getEntry(getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1078,"            setEntry(getIndex(), value);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1079,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1087,            return index;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1096,            this.index = index;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1097,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1249,        return new RealVector() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1630,            class UnmodifiableEntry extends Entry {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1258,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1264,                return v.map(function);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1270,                final Iterator<Entry> i = v.iterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1271,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1301,                final Iterator<Entry> i = v.sparseIterator();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1303,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1334,                return v.copy();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1341,                return v.add(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1348,                return v.subtract(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1354,                return v.mapAdd(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1366,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1372,                return v.mapSubtract(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1384,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1390,                return v.mapMultiply(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1402,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1408,                return v.mapDivide(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1420,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1427,                return v.ebeMultiply(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1434,                return v.ebeDivide(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1441,                return v.dotProduct(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1448,                return v.cosine(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1454,                return v.getNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1460,                return v.getL1Norm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1466,                return v.getLInfNorm();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1473,                return v.getDistance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1480,                return v.getL1Distance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1487,                return v.getLInfDistance(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1493,                return v.unitVector();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1504,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1510,                return v.outerProduct(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1516,                return v.getEntry(index);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1528,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1540,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1546,                return v.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1552,                return v.append(w);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1558,                return v.append(d);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1565,"                return v.getSubVector(index, n);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1577,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1589,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1595,                return v.toArray();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1601,                return v.isNaN();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1607,                return v.isInfinite();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1614,"                return v.combine(a, b, y);",0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1626,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,44,        this(LocalizedFormats.UNSUPPORTED_OPERATION);,0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,45,    },0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,52,                                             Object ... args) {,0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,53,        context = new ExceptionContext(this);,0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,54,"        context.addMessage(pattern, args);",0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,55,    },0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,59,        return context;,0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,65,        return context.getMessage();,0.0,0,,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,14,71,        return context.getLocalizedMessage();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,102,"        super(field, rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,103,        this.rows    = rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,104,        this.columns = columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,107,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,108,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,111,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,112,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,130,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,152,"        super(extractField(blockData), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,153,        this.rows    = rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,154,        this.columns = columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,157,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,158,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,160,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,162,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,165,            blocks = blockData;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,168,        int index = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,169,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,170,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,171,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,172,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,173,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,176,                if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,177,                    blocks[index] = blockData[index].clone();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,181,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,210,        final int rows         = rawData.length;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,211,        final int columns      = rawData[0].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,212,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,213,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,216,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,217,            final int length = rawData[i].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,218,            if (length != columns) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,219,"                throw new DimensionMismatchException(columns, length);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,224,        final Field<T> field = extractField(rawData);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,225,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,226,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,227,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,228,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,229,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,230,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,231,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,232,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,233,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,234,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,237,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,238,                blocks[blockIndex] = block;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,241,                int index = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,242,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,243,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,244,                    index += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,247,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,251,        return blocks;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,271,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,272,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,274,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,275,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,276,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,277,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,278,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,279,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,280,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,281,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,282,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,283,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,284,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,285,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,289,        return blocks;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,297,"        return new BlockFieldMatrix<T>(getField(), rowDimension,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,306,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,309,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,310,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,313,        return copied;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,321,            return add((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,322,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,325,            checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,327,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,330,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,331,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,332,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,335,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,336,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,337,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,338,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,339,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,340,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,341,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,342,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,343,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,344,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,345,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,350,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,355,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,371,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,373,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,376,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,377,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,378,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,379,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,380,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,381,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,385,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,393,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,394,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,397,            checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,399,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,402,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,403,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,404,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,407,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,408,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,409,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,410,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,411,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,412,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,413,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,414,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,415,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,416,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,417,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,422,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,427,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,441,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,443,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,446,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,447,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,448,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,449,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,450,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,451,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,455,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,461,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,464,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,465,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,466,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,467,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,468,                outBlock[k] = tBlock[k].add(d);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,472,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,479,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,482,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,483,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,484,            final T[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,485,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,486,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,490,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,498,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,499,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,502,            checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,504,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,505,            final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,508,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,509,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,511,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,512,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,514,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,516,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,517,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,520,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,523,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,524,                        final int kWidth      = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,525,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,526,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,527,                        int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,528,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,529,                            final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,530,                            final int lEnd   = lStart + kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,531,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,532,                                T sum = zero;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,533,                                int r = rStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,534,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,535,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,536,                                    ++r;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,538,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,539,                                ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,545,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,550,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,565,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,567,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,568,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,571,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,572,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,574,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,575,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,577,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,578,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,579,                final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,580,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,581,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,584,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,587,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,588,                    final int kWidth = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,589,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,590,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,591,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,592,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,593,                        final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,594,                        final int lEnd   = lStart + kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,595,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,596,                            T sum = zero;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,597,                            int l = lStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,598,                            int n = nStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,599,                            while (l < lEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,600,                                sum = sum.,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,605,                                l += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,606,                                n += jWidth4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,608,                            while (l < lEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,609,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,610,                                n += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,612,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,613,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,619,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,623,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,630,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,631,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,633,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,634,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,635,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,636,            int regularPos   = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,637,            int lastPos      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,638,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,639,                final T[] dataP = data[p];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,640,                int blockIndex = iBlock * blockColumns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,641,                int dataPos    = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,642,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,643,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,644,                    dataPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,646,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,647,                regularPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,648,                lastPos    += lastColumns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,652,        return data;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,662,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,665,        final BlockFieldMatrix<T> out =,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,669,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,670,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,671,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,672,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,675,        int pBlock = blockStartRow;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,676,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,677,            final int iHeight = out.blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,678,            int qBlock = blockStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,679,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,680,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,683,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,684,                final T[] outBlock = out.blocks[outIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,685,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,686,                final int      width    = blockWidth(qBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,688,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,689,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,690,                if (heightExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,692,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,694,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,695,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,699,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,703,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,707,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,711,                    } else {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,713,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,717,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,724,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,726,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,727,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,731,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,735,                    } else {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,737,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,743,                ++qBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,745,            ++pBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,748,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,771,        final int length = srcEndColumn - srcStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,772,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,773,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,774,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,775,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,776,            srcPos += srcWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,777,            dstPos += dstWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,779,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,788,        MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,789,        final int refLength = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,790,        if (refLength == 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,791,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,793,        final int endRow    = row + subMatrix.length - 1;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,794,        final int endColumn = column + refLength - 1;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,795,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,796,        for (final T[] subRow : subMatrix) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,797,            if (subRow.length != refLength) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,798,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,803,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,804,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,805,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,806,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,809,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,810,            final int iHeight  = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,811,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,812,"            final int iStart   = FastMath.max(row,    firstRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,813,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,815,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,816,                final int jWidth      = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,817,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,818,"                final int jStart      = FastMath.max(column,    firstColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,819,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,820,                final int jLength     = jEnd - jStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,823,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,824,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,825,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,832,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,838,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,839,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,842,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,843,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,844,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,845,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,846,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,847,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,848,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,849,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,850,            final int available  = outBlock.length - outIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,851,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,852,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,853,                outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,854,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,855,                outIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,857,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,858,                outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,862,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,870,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,873,        },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,871,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,872,"            super.setRowMatrix(row, matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,874,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,889,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,890,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,891,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,893,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,899,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,900,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,901,        int mBlockIndex  = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,902,        int mIndex       = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,903,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,904,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,905,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,906,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,907,            final int available  = mBlock.length - mIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,908,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,909,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,910,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,911,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,912,                mIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,914,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,915,                mIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,918,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,924,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,925,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,928,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,929,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,930,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,931,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,932,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,933,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,934,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,935,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,936,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,937,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,938,                if (outIndex >= outBlock.length) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,939,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,940,                    outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,942,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,946,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,954,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,957,        },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,955,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,956,"            super.setColumnMatrix(column, matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,958,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,973,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,974,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,975,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,977,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,983,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,984,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,985,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,986,        int mBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,987,        int mIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,988,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,989,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,990,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,991,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,992,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,993,                if (mIndex >= mBlock.length) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,994,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,995,                    mIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,997,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1000,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1006,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1007,"        final T[] outData = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1010,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1011,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1012,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1013,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1014,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1015,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1016,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1017,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1020,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1028,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1031,        },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1029,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1030,"            super.setRowVector(row, vector);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1032,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1038,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1039,"        final T[] outData = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1042,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1043,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1044,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1045,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1046,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1047,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1048,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1049,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1050,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1054,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1062,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1065,        },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1063,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1064,"            super.setColumnVector(column, vector);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1066,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1071,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1072,"        final T[] out = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1075,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1076,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1077,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1078,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1079,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1080,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1081,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1082,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1085,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1092,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1093,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1094,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1095,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1099,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1100,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1101,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1102,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1103,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1104,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1105,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1106,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1108,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1113,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1114,"        final T[] out = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1117,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1118,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1119,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1120,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1121,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1122,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1123,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1124,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1125,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1129,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1136,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1137,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1138,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1139,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1143,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1144,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1145,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1146,        int outIndex      = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1147,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1148,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1149,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1150,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1151,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1154,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1160,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1161,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1163,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1164,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1165,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1168,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1175,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1176,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1178,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1179,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1180,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1183,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1184,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1190,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1191,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1193,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1194,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1195,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1197,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1199,        blockIJ[k] = blockIJ[k].add(increment);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1200,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1206,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1207,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1209,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1210,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1211,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1213,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1215,        blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1216,    },0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1221,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1222,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1223,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1226,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1227,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1228,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1231,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1232,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1233,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1234,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1235,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1236,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1237,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1238,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1239,                    final int lInc = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1240,                    int l = p - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1241,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1242,                        outBlock[k] = tBlock[l];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1243,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1244,                        l+= lInc;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1249,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1254,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1260,        return rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1266,        return columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1272,        if (v.length != columns) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1273,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1275,"        final T[] out = buildArray(getField(), rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1276,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1279,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1280,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1281,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1282,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1283,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1284,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1285,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1286,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1287,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1288,                    T sum = zero;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1289,                    int q = qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1290,                    while (q < qEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1291,                        sum = sum.,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1296,                        k += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1297,                        q += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1299,                    while (q < qEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1300,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1302,                    out[p] = out[p].add(sum);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1307,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1314,        if (v.length != rows) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1315,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1317,"        final T[] out = buildArray(getField(), columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1318,        final T zero = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1321,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1322,            final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1323,            final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1324,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1325,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1326,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1327,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1328,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1329,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1330,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1331,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1332,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1333,                    int k = q - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1334,                    T sum = zero;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1335,                    int p = pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1336,                    while (p < pEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1337,                        sum = sum.,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1342,                        k += jWidth4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1343,                        p += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1345,                    while (p < pEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1346,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1347,                        k += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1349,                    out[q] = out[q].add(sum);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1354,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1360,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1361,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1362,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1363,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1364,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1365,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1366,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1367,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1368,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1369,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1370,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1371,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1372,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1373,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1378,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1384,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1385,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1386,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1387,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1388,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1389,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1390,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1391,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1392,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1393,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1394,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1395,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1396,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1397,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1402,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1411,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1412,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1413,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1414,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1415,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1416,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1417,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1418,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1419,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1420,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1421,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1422,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1423,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1424,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1425,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1426,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1427,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1432,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1441,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1442,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1443,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1444,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1445,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1446,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1447,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1448,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1449,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1450,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1451,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1452,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1453,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1454,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1455,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1456,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1457,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1462,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1468,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1469,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1470,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1471,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1472,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1473,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1474,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1475,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1476,                final T[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1477,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1478,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1479,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1480,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1481,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1484,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1487,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1493,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1494,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1495,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1496,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1497,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1498,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1499,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1500,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1501,                final T[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1502,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1503,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1504,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1505,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1506,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1509,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1512,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1521,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1522,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1523,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1524,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1525,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1526,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1527,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1528,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1529,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1530,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1531,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1532,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1533,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1534,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1535,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1536,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1537,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1542,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1552,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1553,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1554,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1555,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1556,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1557,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1558,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1559,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1560,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1561,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1562,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1563,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1564,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1565,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1566,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1567,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1572,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1581,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockFieldMatrix,14,1590,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,782,        return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,785,            private int i = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,788,            private Entry e = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,792,                return i < dim;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,797,                if (i < dim) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,798,                    e.setIndex(i++);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,799,                    return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,801,                    throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,811,                throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,289,                sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,290,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,294,                sum += value * value;,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,295,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,299,                return FastMath.sqrt(sum);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,75,    },0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,83,    },0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,93,"        this(prefix, suffix, separator,",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,95,    },0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,106,"                            final String separator, final NumberFormat format) {",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,107,        this.prefix      = prefix;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,108,        this.suffix      = suffix;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,109,        this.separator   = separator;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,110,        trimmedPrefix    = prefix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,111,        trimmedSuffix    = suffix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,112,        trimmedSeparator = separator.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,113,        this.format      = format;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,114,    },0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,122,        return NumberFormat.getAvailableLocales();,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,130,        return prefix;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,138,        return suffix;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,146,        return separator;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,154,        return format;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,162,        return getInstance(Locale.getDefault());,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,195,        pos.setBeginIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,196,        pos.setEndIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,199,        toAppendTo.append(prefix);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,202,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,203,            if (i > 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,204,                toAppendTo.append(separator);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,210,        toAppendTo.append(suffix);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,212,        return toAppendTo;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,224,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,225,"        final ArrayRealVector result = parse(source, parsePosition);",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,226,        if (parsePosition.getIndex() == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,227,"            throw new MathParseException(source,",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,231,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,242,        int initialIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,247,            return null;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,251,        List<Number> components = new ArrayList<Number>();,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,252,        for (boolean loop = true; loop;){,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,254,            if (!components.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,257,                    loop = false;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,261,            if (loop) {,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,264,                if (component != null) {,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,265,                    components.add(component);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,269,                    pos.setIndex(initialIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,270,                    return null;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,272,            },0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,279,            return null;,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,283,        double[] data = new double[components.size()];,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,284,        for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,285,            data[i] = components.get(i).doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/RealVectorFormat,14,287,"        return new ArrayRealVector(data, false);",0.0,0,,0
org/apache/commons/math3/exception/MathParseException,14,42,                              Class<?> type) {,0.0,0,,0
org/apache/commons/math3/exception/MathParseException,14,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",0.0,0,,0
org/apache/commons/math3/exception/MathParseException,14,45,    },0.0,0,,0
org/apache/commons/math3/exception/MathParseException,14,53,                              int position) {,0.0,0,,0
org/apache/commons/math3/exception/MathParseException,14,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,",0.0,0,,0
org/apache/commons/math3/exception/MathParseException,14,56,    },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,606,"                out.setEntry(column, row, value);",0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,607,            },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1169,        protected SparseEntryIterator() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1170,            dim = getDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1171,            current = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1172,            next = new Entry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1173,            if (next.getValue() == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1174,                advance(next);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1176,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1184,            if (e == null) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1185,                return;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1188,                e.setIndex(e.getIndex() + 1);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1189,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1190,            if (e.getIndex() >= dim) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1191,                e.setIndex(-1);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1193,        },0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1197,            return next.getIndex() >= 0;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1202,            int index = next.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1203,            if (index < 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1204,                throw new NoSuchElementException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1206,            current.setIndex(index);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1207,            advance(next);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1208,            return current;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1217,            throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1159,    @Deprecated,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,90,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,92,    },0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,151,        return NumberFormat.getAvailableLocales();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,159,        return prefix;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,167,        return suffix;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,175,        return rowPrefix;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,183,        return rowSuffix;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,191,        return rowSeparator;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,199,        return columnSeparator;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,234,"        return format(m, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,248,        pos.setBeginIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,249,        pos.setEndIndex(0);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,252,        toAppendTo.append(prefix);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,255,        final int rows = matrix.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,256,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,257,            toAppendTo.append(rowPrefix);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,258,            for (int j = 0; j < matrix.getColumnDimension(); ++j) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,259,                if (j > 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,260,                    toAppendTo.append(columnSeparator);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,262,"                CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,264,            toAppendTo.append(rowSuffix);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,265,            if (i < rows - 1) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,266,                toAppendTo.append(rowSeparator);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,271,        toAppendTo.append(suffix);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,273,        return toAppendTo;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,285,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,286,"        final RealMatrix result = parse(source, parsePosition);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,287,        if (parsePosition.getIndex() == 0) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,288,"            throw new MathParseException(source,",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,292,        return result;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,303,        int initialIndex = pos.getIndex();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,305,        final String trimmedPrefix = prefix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,306,        final String trimmedSuffix = suffix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,307,        final String trimmedRowPrefix = rowPrefix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,308,        final String trimmedRowSuffix = rowSuffix.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,309,        final String trimmedColumnSeparator = columnSeparator.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,310,        final String trimmedRowSeparator = rowSeparator.trim();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,313,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,314,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,315,            return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,319,        List<List<Number>> matrix = new ArrayList<List<Number>>();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,320,        List<Number> rowComponents = new ArrayList<Number>();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,321,        for (boolean loop = true; loop;){,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,323,            if (!rowComponents.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,324,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,325,"                if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,326,                    if (trimmedRowSuffix.length() != 0 &&,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,328,                        return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,330,"                        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,331,"                        if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,332,                            matrix.add(rowComponents);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,333,                            rowComponents = new ArrayList<Number>();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,334,                            continue;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,336,                            loop = false;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,341,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,342,                if (trimmedRowPrefix.length() != 0 &&,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,344,                    return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,348,            if (loop) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,349,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,350,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,351,                if (component != null) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,352,                    rowComponents.add(component);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,354,                    if (rowComponents.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,355,                        loop = false;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,359,                        pos.setIndex(initialIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,360,                        return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,363,            },0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,367,        if (!rowComponents.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,368,            matrix.add(rowComponents);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,372,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,373,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,374,            return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,378,        if (matrix.isEmpty()) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,379,            pos.setIndex(initialIndex);,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,380,            return null;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,384,        double[][] data = new double[matrix.size()][];,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,385,        int row = 0;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,386,        for (List<Number> rowList : matrix) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,387,            data[row] = new double[rowList.size()];,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,388,            for (int i = 0; i < rowList.size(); i++) {,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,389,                data[row][i] = rowList.get(i).doubleValue();,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,391,            row++;,0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,392,        },0.0,0,,0
org/apache/commons/math3/linear/RealMatrixFormat,14,393,        return MatrixUtils.createRealMatrix(data);,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1271,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1273,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1277,                        return i.hasNext();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1282,                        e.setIndex(i.next().getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1283,                        return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1293,                        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1303,                return new Iterator<Entry>() {,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1305,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1309,                        return i.hasNext();,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1314,                        e.setIndex(i.next().getIndex());,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1315,                        return e;,0.0,0,,0
org/apache/commons/math3/linear/RealVector,14,1326,                        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,675,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,679,"                out.setEntry(column, row, value);",0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,680,            },0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,,0
org/apache/commons/math3/linear/AbstractRealMatrix,14,334,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,64,        super();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,65,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,103,        return (rows * columns <= 4096) ?,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,130,        if (data == null ||,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,132,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,134,        return (data.length * data[0].length <= 4096) ?,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,159,        if (data == null ||,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,161,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,163,        return (data.length * data[0].length <= 4096) ?,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,176,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,177,        for (int i = 0; i < dimension; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,178,"            m.setEntry(i, i, 1.0);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,180,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,195,        final T zero = field.getZero();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,196,        final T one  = field.getOne();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,198,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,199,        for (int row = 0; row < dimension; row++) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,200,            final T[] dRow = d[row];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,201,"            Arrays.fill(dRow, zero);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,202,            dRow[row] = one;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,204,"        return new Array2DRowFieldMatrix<T>(field, d, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,217,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,218,"            m.setEntry(i, i, diagonal[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,220,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,234,        final FieldMatrix<T> m =,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,236,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,237,"            m.setEntry(i, i, diagonal[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,239,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,252,        if (data == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,253,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,255,"        return new ArrayRealVector(data, true);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,270,        if (data == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,271,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,273,        if (data.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,274,            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,276,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,290,        if (rowData == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,291,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,293,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,294,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,295,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,296,"            m.setEntry(0, i, rowData[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,298,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,314,        if (rowData == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,315,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,317,        final int nCols = rowData.length;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,318,        if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,319,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,321,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,322,        for (int i = 0; i < nCols; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,323,"            m.setEntry(0, i, rowData[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,325,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,339,        if (columnData == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,340,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,342,        final int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,343,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,344,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,345,"            m.setEntry(i, 0, columnData[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,347,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,363,        if (columnData == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,364,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,366,        final int nRows = columnData.length;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,367,        if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,368,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,370,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,371,        for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,372,"            m.setEntry(i, 0, columnData[i]);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,374,        return m;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,391,        final int rows = matrix.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,392,        if (rows != matrix.getColumnDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,393,            if (raiseException) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,394,"                throw new NonSquareMatrixException(rows, matrix.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,396,                return false;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,399,        for (int i = 0; i < rows; i++) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,400,            for (int j = i + 1; j < rows; j++) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,401,"                final double mij = matrix.getEntry(i, j);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,402,"                final double mji = matrix.getEntry(j, i);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,403,                if (FastMath.abs(mij - mji) >,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,405,                    if (raiseException) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,406,"                        throw new NonSymmetricMatrixException(i, j, relativeTolerance);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,408,                        return false;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,413,        return true;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,427,"        isSymmetricInternal(matrix, eps, true);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,428,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,440,"        return isSymmetricInternal(matrix, eps, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,455,"        checkRowIndex(m, row);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,456,"        checkColumnIndex(m, column);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,457,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,468,        if (row < 0 ||,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,470,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,473,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,484,        if (column < 0 || column >= m.getColumnDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,485,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,488,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,507,"        checkRowIndex(m, startRow);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,508,"        checkRowIndex(m, endRow);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,509,        if (endRow < startRow) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,510,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,514,"        checkColumnIndex(m, startColumn);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,515,"        checkColumnIndex(m, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,516,        if (endColumn < startColumn) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,517,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,522,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,541,        if (selectedRows == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,542,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,544,        if (selectedColumns == null) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,545,            throw new NullArgumentException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,547,        if (selectedRows.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,548,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,550,        if (selectedColumns.length == 0) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,551,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,554,        for (final int row : selectedRows) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,555,"            checkRowIndex(m, row);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,557,        for (final int column : selectedColumns) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,558,"            checkColumnIndex(m, column);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,560,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,572,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,574,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,577,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,589,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,591,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,594,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,608,"            throw new DimensionMismatchException(left.getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,611,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,619,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,620,        m.walkInOptimizedOrder(converter);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,621,        return converter.getConvertedMatrix();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,664,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,665,        m.walkInOptimizedOrder(converter);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,666,        return converter.getConvertedMatrix();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,744,        final int n = vector.getDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,745,        oos.writeInt(n);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,746,        for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,747,            oos.writeDouble(vector.getEntry(i));,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,749,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,775,            final int n = ois.readInt();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,776,            final double[] data = new double[n];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,777,            for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,778,                data[i] = ois.readDouble();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,782,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,785,            final java.lang.reflect.Field f =,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,787,            f.setAccessible(true);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,788,"            f.set(instance, vector);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,798,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,790,        } catch (NoSuchFieldException nsfe) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,791,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,792,            ioe.initCause(nsfe);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,793,            throw ioe;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,794,        } catch (IllegalAccessException iae) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,795,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,796,            ioe.initCause(iae);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,797,            throw ioe;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,800,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,845,        final int n = matrix.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,846,        final int m = matrix.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,847,        oos.writeInt(n);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,848,        oos.writeInt(m);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,849,        for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,850,            for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,851,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,854,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,880,            final int n = ois.readInt();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,881,            final int m = ois.readInt();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,882,            final double[][] data = new double[n][m];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,883,            for (int i = 0; i < n; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,884,                final double[] dataI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,885,                for (int j = 0; j < m; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,886,                    dataI[j] = ois.readDouble();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,891,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,894,            final java.lang.reflect.Field f =,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,896,            f.setAccessible(true);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,897,"            f.set(instance, matrix);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,907,        },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,899,        } catch (NoSuchFieldException nsfe) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,900,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,901,            ioe.initCause(nsfe);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,902,            throw ioe;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,903,        } catch (IllegalAccessException iae) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,904,            IOException ioe = new IOException();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,905,            ioe.initCause(iae);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,906,            throw ioe;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,908,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,931,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,932,            throw new DimensionMismatchException(,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,936,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,937,"            throw new NonSquareMatrixException(rm.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,940,        int rows = rm.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,941,        for( int i = 0 ; i < rows ; i++ ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,942,"            double diag = rm.getEntry(i, i);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,943,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,944,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,946,            double bi = b.getEntry(i)/diag;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,947,"            b.setEntry(i,  bi );",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,948,            for( int j = i+1; j< rows; j++ ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,949,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,952,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,976,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,977,            throw new DimensionMismatchException(,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,981,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,982,"            throw new NonSquareMatrixException(rm.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,985,        int rows = rm.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,986,        for( int i = rows-1 ; i >-1 ; i-- ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,987,"            double diag = rm.getEntry(i, i);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,988,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,989,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,991,            double bi = b.getEntry(i)/diag;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,992,"            b.setEntry(i,  bi );",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,993,            for( int j = i-1; j>-1; j-- ){,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,994,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,997,    },0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1013,        final int n = m.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1014,        if (m.getColumnDimension() != n) {,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1015,"            throw new NonSquareMatrixException(m.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1019,        final int splitIndex1 = splitIndex + 1;,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1021,"        final RealMatrix a = m.getSubMatrix(0, splitIndex, 0, splitIndex);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1022,"        final RealMatrix b = m.getSubMatrix(0, splitIndex, splitIndex1, n - 1);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1023,"        final RealMatrix c = m.getSubMatrix(splitIndex1, n - 1, 0, splitIndex);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1024,"        final RealMatrix d = m.getSubMatrix(splitIndex1, n - 1, splitIndex1, n - 1);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1026,        final SingularValueDecomposition aDec = new SingularValueDecomposition(a);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1027,        final RealMatrix aInv = aDec.getSolver().getInverse();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1029,        final SingularValueDecomposition dDec = new SingularValueDecomposition(d);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1030,        final RealMatrix dInv = dDec.getSolver().getInverse();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1032,        final RealMatrix tmp1 = a.subtract(b.multiply(dInv).multiply(c));,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1033,        final SingularValueDecomposition tmp1Dec = new SingularValueDecomposition(tmp1);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1034,        final RealMatrix result00 = tmp1Dec.getSolver().getInverse();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1036,        final RealMatrix tmp2 = d.subtract(c.multiply(aInv).multiply(b));,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1037,        final SingularValueDecomposition tmp2Dec = new SingularValueDecomposition(tmp2);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1038,        final RealMatrix result11 = tmp2Dec.getSolver().getInverse();,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1040,        final RealMatrix result01 = aInv.multiply(b).multiply(result11).scalarMultiply(-1);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1041,        final RealMatrix result10 = dInv.multiply(c).multiply(result00).scalarMultiply(-1);,0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1043,"        final RealMatrix result = new Array2DRowRealMatrix(n, n);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1044,"        result.setSubMatrix(result00.getData(), 0, 0);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1045,"        result.setSubMatrix(result01.getData(), 0, splitIndex1);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1046,"        result.setSubMatrix(result10.getData(), splitIndex1, 0);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1047,"        result.setSubMatrix(result11.getData(), splitIndex1, splitIndex1);",0.0,0,,0
org/apache/commons/math3/linear/MatrixUtils,14,1049,        return result;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,108,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,127,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,128,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,149,"        super(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,150,        this.rows = rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,151,        this.columns = columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,154,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,155,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,157,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,159,            blocks = new double[blockRows * blockColumns][];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,162,            blocks = blockData;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,165,        int index = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,166,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,167,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,168,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,169,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,170,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,173,                if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,174,                    blocks[index] = blockData[index].clone();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,178,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,203,        final int rows = rawData.length;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,204,        final int columns = rawData[0].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,205,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,206,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,209,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,210,            final int length = rawData[i].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,211,            if (length != columns) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,212,"                throw new DimensionMismatchException(columns, length);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,217,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,218,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,219,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,220,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,221,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,222,            final int iHeight = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,223,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,224,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,225,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,226,                final int jWidth = qEnd - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,229,                final double[] block = new double[iHeight * jWidth];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,230,                blocks[blockIndex] = block;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,233,                int index = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,234,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,235,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,236,                    index += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,238,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,242,        return blocks;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,276,        return blocks;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,284,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,291,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,294,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,295,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,298,        return copied;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,306,            return add((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,307,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,309,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,311,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,314,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,315,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,316,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,319,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,320,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,321,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,322,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,323,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,324,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,325,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,326,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,327,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,328,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,329,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,333,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,337,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,352,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,354,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,357,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,358,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,359,            final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,360,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,361,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,362,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,366,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,374,            return subtract((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,375,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,377,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,379,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,382,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,383,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,384,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,387,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,388,                    final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,389,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,390,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,391,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,392,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,393,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,394,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,395,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,396,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,397,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,401,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,405,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,420,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,422,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,425,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,426,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,427,            final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,428,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,429,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,430,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,434,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,444,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,445,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,446,            final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,447,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,448,                outBlock[k] = tBlock[k] + d;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,452,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,458,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,461,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,462,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,463,            final double[] tBlock = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,464,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,465,                outBlock[k] = tBlock[k] * d;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,469,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,477,            return multiply((BlockRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,478,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,480,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,482,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,485,            int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,486,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,487,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,488,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,490,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,491,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,492,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,495,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,498,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,499,                        final int kWidth = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,500,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,501,                        final int rStart = kBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,502,                        int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,503,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,504,                            final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,505,                            final int lEnd = lStart + kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,506,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,507,                                double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,508,                                int r = rStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,509,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,510,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,511,                                    ++r;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,513,                                outBlock[k] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,514,                                ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,519,                    ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,523,            return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,537,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,539,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,542,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,543,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,545,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,546,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,548,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,549,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,550,                final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,551,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,552,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,555,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,558,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,559,                    final int kWidth = blockWidth(kBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,560,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,561,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,562,                    int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,563,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,564,                        final int lStart = (p - pStart) * kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,565,                        final int lEnd = lStart + kWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,566,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,567,                            double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,568,                            int l = lStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,569,                            int n = nStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,570,                            while (l < lEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,571,                                sum += tBlock[l] * mBlock[n] +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,575,                                l += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,576,                                n += jWidth4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,578,                            while (l < lEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,579,                                sum += tBlock[l++] * mBlock[n];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,580,                                n += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,582,                            outBlock[k] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,583,                            ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,588,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,592,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,598,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,599,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,601,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,602,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,603,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,604,            int regularPos = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,605,            int lastPos = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,606,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,607,                final double[] dataP = data[p];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,608,                int blockIndex = iBlock * blockColumns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,609,                int dataPos = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,610,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,611,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,612,                    dataPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,614,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,615,                regularPos += BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,616,                lastPos    += lastColumns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,620,        return data;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,626,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,627,        double maxColSum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,628,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,629,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,630,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,631,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,632,                final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,633,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,634,                for (int j = 0; j < jWidth; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,635,                    double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,636,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,637,                        sum += FastMath.abs(block[i * jWidth + j]);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,639,                    colSums[j] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,642,            for (int j = 0; j < jWidth; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,643,"                maxColSum = FastMath.max(maxColSum, colSums[j]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,646,        return maxColSum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,652,        double sum2 = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,653,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,654,            for (final double entry : blocks[blockIndex]) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,655,                sum2 += entry * entry;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,658,        return FastMath.sqrt(sum2);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,668,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,671,        final BlockRealMatrix out =,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,675,        final int blockStartRow = startRow / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,676,        final int rowsShift = startRow % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,677,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,678,        final int columnsShift = startColumn % BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,681,        int pBlock = blockStartRow;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,682,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,683,            final int iHeight = out.blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,684,            int qBlock = blockStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,685,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,686,                final int jWidth = out.blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,689,                final int outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,690,                final double[] outBlock = out.blocks[outIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,691,                final int index = pBlock * blockColumns + qBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,692,                final int width = blockWidth(qBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,694,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,695,                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,696,                if (heightExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,698,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,700,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,701,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,705,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,709,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,713,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,717,                    } else {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,719,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,723,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,730,                    if (widthExcess > 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,732,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,733,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,737,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,741,                    } else {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,743,"                        copyBlockPart(blocks[index], width,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,749,                ++qBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,751,            ++pBlock;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,754,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,777,        final int length = srcEndColumn - srcStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,778,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,779,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,780,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,781,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,782,            srcPos += srcWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,783,            dstPos += dstWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,785,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,794,        MathUtils.checkNotNull(subMatrix);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,795,        final int refLength = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,796,        if (refLength == 0) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,797,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,799,        final int endRow = row + subMatrix.length - 1;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,800,        final int endColumn = column + refLength - 1;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,801,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,802,        for (final double[] subRow : subMatrix) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,803,            if (subRow.length != refLength) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,804,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,809,        final int blockStartRow = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,810,        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,811,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,812,        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,815,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,816,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,817,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,818,"            final int iStart = FastMath.max(row,    firstRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,819,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,821,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,822,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,823,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,824,"                final int jStart = FastMath.max(column,    firstColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,825,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,826,                final int jLength = jEnd - jStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,829,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,830,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,831,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,838,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,844,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,845,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,848,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,849,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,850,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,851,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,852,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,853,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,854,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,855,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,856,            final int available = outBlock.length - outIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,857,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,858,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,859,                outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,860,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,861,                outIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,863,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,864,                outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,868,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,876,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,879,        },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,877,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,878,"            super.setRowMatrix(row, matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,880,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,895,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,896,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,897,        if ((matrix.getRowDimension() != 1) ||,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,899,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,905,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,906,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,907,        int mBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,908,        int mIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,909,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,910,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,911,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,912,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,913,            final int available  = mBlock.length - mIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,914,            if (jWidth > available) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,915,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,916,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,917,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,918,                mIndex = jWidth - available;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,920,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,921,                mIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,924,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,930,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,931,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,934,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,935,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,936,        final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,937,        int outBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,938,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,939,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,940,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,941,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,942,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,943,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,944,                if (outIndex >= outBlock.length) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,945,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,946,                    outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,948,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,952,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,960,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,963,        },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,961,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,962,"            super.setColumnMatrix(column, matrix);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,964,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,979,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,980,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,981,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,983,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,989,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,990,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,991,        final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,992,        int mBlockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,993,        int mIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,994,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,995,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,996,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,997,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,998,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,999,                if (mIndex >= mBlock.length) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1000,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1001,                    mIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1003,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1006,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1012,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1013,        final double[] outData = new double[columns];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1016,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1017,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1018,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1019,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1020,            final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1021,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1022,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1023,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1026,"        return new ArrayRealVector(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1034,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1037,        },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1035,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1036,"            super.setRowVector(row, vector);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1038,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1044,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1045,        final double[] outData = new double[rows];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1048,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1049,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1050,        final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1051,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1052,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1053,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1054,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1055,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1056,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1060,"        return new ArrayRealVector(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1068,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1071,        },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1069,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1070,"            super.setColumnVector(column, vector);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1072,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1077,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1078,        final double[] out = new double[columns];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1081,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1082,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1083,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1084,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1085,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1086,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1087,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1088,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1091,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1098,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1099,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1100,        if (array.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1101,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1105,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1106,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1107,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1108,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1109,            final int jWidth     = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1110,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1111,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1112,            outIndex += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1114,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1119,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1120,        final double[] out = new double[rows];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1123,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1124,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1125,        final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1126,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1127,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1128,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1129,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1130,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1131,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1135,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1142,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1143,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1144,        if (array.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1145,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1149,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1150,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1151,        final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1152,        int outIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1153,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1154,            final int iHeight = blockHeight(iBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1155,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1156,            for (int i = 0; i < iHeight; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1157,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1160,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1167,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1168,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1169,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1171,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1178,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1179,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1180,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1181,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1183,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1184,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1191,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1192,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1193,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1194,        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1196,        blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1197,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1204,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1205,        final int iBlock = row / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1206,        final int jBlock = column / BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1207,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1209,        blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1210,    },0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1215,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1216,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1217,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1220,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1221,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1222,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1224,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1225,                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1226,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1227,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1228,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1229,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1230,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1231,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1232,                    final int lInc = pEnd - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1233,                    int l = p - pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1234,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1235,                        outBlock[k] = tBlock[l];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1236,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1237,                        l+= lInc;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1241,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1245,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1251,        return rows;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1257,        return columns;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1264,        if (v.length != columns) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1265,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1267,        final double[] out = new double[rows];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1270,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1271,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1272,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1273,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1274,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1275,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1276,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1277,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1278,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1279,                    double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1280,                    int q = qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1281,                    while (q < qEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1282,                        sum += block[k]     * v[q]     +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1286,                        k += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1287,                        q += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1289,                    while (q < qEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1290,                        sum += block[k++] * v[q++];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1292,                    out[p] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1297,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1304,        if (v.length != rows) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1305,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1307,        final double[] out = new double[columns];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1310,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1311,            final int jWidth  = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1312,            final int jWidth2 = jWidth  + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1313,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1314,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1315,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1316,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1317,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1318,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1319,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1320,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1321,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1322,                    int k = q - qStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1323,                    double sum = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1324,                    int p = pStart;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1325,                    while (p < pEnd - 3) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1326,                        sum += block[k]           * v[p]     +,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1330,                        k += jWidth4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1331,                        p += 4;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1333,                    while (p < pEnd) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1334,                        sum += block[k] * v[p++];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1335,                        k += jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1337,                    out[q] += sum;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1342,        return out;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1348,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1349,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1350,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1351,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1352,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1353,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1354,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1355,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1356,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1357,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1358,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1359,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1360,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1361,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1366,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1372,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1373,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1374,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1375,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1376,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1377,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1378,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1379,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1380,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1381,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1382,                    int k = (p - pStart) * jWidth;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1383,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1384,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1385,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1390,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1399,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1400,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1401,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1402,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1403,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1404,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1405,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1406,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1407,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1408,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1409,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1410,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1411,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1412,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1413,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1414,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1415,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1420,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1429,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1430,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1431,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1432,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1433,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1434,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1435,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1436,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1437,                    final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1438,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1439,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1440,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1441,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1442,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1443,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1444,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1445,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1450,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1457,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1458,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1459,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1460,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1461,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1462,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1463,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1464,                final double[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1465,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1466,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1467,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1468,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1469,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1472,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1475,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1481,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1482,        int blockIndex = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1483,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1484,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1485,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1486,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1487,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1488,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1489,                final double[] block = blocks[blockIndex];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1490,                int k = 0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1491,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1492,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1493,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1494,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1497,                ++blockIndex;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1500,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1510,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1511,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1512,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1513,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1514,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1515,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1516,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1517,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1518,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1519,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1520,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1521,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1522,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1523,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1524,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1525,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1526,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1531,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1541,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1542,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1543,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1544,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1545,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1546,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1547,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1548,                final int jWidth = blockWidth(jBlock);,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1549,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1550,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1551,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1552,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1553,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1554,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1555,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1556,"                        visitor.visit(p, q, block[k]);",0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1557,                        ++k;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1562,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1571,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,1580,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,,0
org/apache/commons/math3/linear/BlockRealMatrix,14,72,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,58,        super(field);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,59,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,72,"        super(field, rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,73,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,74,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,92,"        this(extractField(d), d);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,93,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,112,        super(field);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,113,        copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,114,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,134,"        this(extractField(d), d, copyArray);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,135,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,155,        super(field);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,156,        if (copyArray) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,157,            copyIn(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,159,            MathUtils.checkNotNull(d);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,160,            final int nRows = d.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,161,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,162,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,164,            final int nCols = d[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,165,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,166,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,168,            for (int r = 1; r < nRows; r++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,169,                if (d[r].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,170,"                    throw new DimensionMismatchException(nCols, d[r].length);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,173,            data = d;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,175,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,186,"        this(extractField(v), v);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,187,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,198,        super(field);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,199,        final int nRows = v.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,200,"        data = buildArray(getField(), nRows, 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,201,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,202,            data[row][0] = v[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,204,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,211,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,217,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,231,        checkAdditionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,233,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,234,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,235,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,236,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,237,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,238,            final T[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,239,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,240,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,241,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,245,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,259,        checkSubtractionCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,261,        final int rowCount    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,262,        final int columnCount = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,263,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,264,        for (int row = 0; row < rowCount; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,265,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,266,            final T[] mRow       = m.data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,267,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,268,            for (int col = 0; col < columnCount; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,269,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,273,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,288,        checkMultiplicationCompatible(m);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,290,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,291,        final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,292,        final int nSum = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,293,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,294,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,295,            final T[] dataRow    = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,296,            final T[] outDataRow = outData[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,297,            for (int col = 0; col < nCols; col++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,298,                T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,299,                for (int i = 0; i < nSum; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,300,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,302,                outDataRow[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,306,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,313,        return copyOut();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,323,        return data;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,332,        if (data == null) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,333,            if (row > 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,334,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,336,            if (column > 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,337,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,339,            final int nRows = subMatrix.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,340,            if (nRows == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,341,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,344,            final int nCols = subMatrix[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,345,            if (nCols == 0) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,346,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,348,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,349,            for (int i = 0; i < data.length; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,350,                if (subMatrix[i].length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,351,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,353,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,355,        } else {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,356,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,359,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,365,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,366,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,368,        return data[row][column];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,375,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,376,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,378,        data[row][column] = value;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,379,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,385,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,386,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,388,        data[row][column] = data[row][column].add(increment);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,389,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,395,        checkRowIndex(row);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,396,        checkColumnIndex(column);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,398,        data[row][column] = data[row][column].multiply(factor);,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,399,    },0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,404,        return (data == null) ? 0 : data.length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,416,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,417,        final int nCols = this.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,418,        if (v.length != nCols) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,419,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,421,"        final T[] out = buildArray(getField(), nRows);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,422,        for (int row = 0; row < nRows; row++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,423,            final T[] dataRow = data[row];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,424,            T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,425,            for (int i = 0; i < nCols; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,426,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,428,            out[row] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,430,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,436,        final int nRows = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,437,        final int nCols = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,438,        if (v.length != nRows) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,439,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,442,"        final T[] out = buildArray(getField(), nCols);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,443,        for (int col = 0; col < nCols; ++col) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,444,            T sum = getField().getZero();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,445,            for (int i = 0; i < nRows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,446,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,448,            out[col] = sum;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,451,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,457,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,458,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,459,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,460,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,461,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,462,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,463,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,466,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,472,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,473,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,475,        for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,476,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,477,            for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,478,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,481,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,490,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,491,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,493,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,494,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,495,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,496,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,499,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,509,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,511,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,512,            final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,513,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,514,"                visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,517,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,523,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,524,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,525,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,526,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,527,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,528,                final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,529,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,532,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,538,        final int rows    = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,539,        final int columns = getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,540,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,541,        for (int j = 0; j < columns; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,542,            for (int i = 0; i < rows; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,543,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,546,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,555,"    checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,556,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,558,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,559,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,560,                final T[] rowI = data[i];,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,561,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,564,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,573,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,574,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,576,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,577,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,578,"                visitor.visit(i, j, data[i][j]);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,581,        return visitor.end();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,590,        final int nRows = this.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,591,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,593,        for (int i = 0; i < nRows; i++) {,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,594,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,596,        return out;,0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,610,"        setSubMatrix(in, 0, 0);",0.0,0,,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,14,611,    },0.0,0,,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,14,48,"        super(LocalizedFormats.NON_SYMMETRIC_MATRIX, row, column, threshold);",0.0,0,,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,14,49,        this.row = row;,0.0,0,,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,14,50,        this.column = column;,0.0,0,,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,14,51,        this.threshold = threshold;,0.0,0,,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,14,52,    },0.0,0,,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,14,58,        return row;,0.0,0,,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,14,64,        return column;,0.0,0,,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,14,70,        return threshold;,0.0,0,,0
org/apache/commons/math3/exception/ZeroException,14,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,,0
org/apache/commons/math3/exception/ZeroException,14,38,    },0.0,0,,0
org/apache/commons/math3/exception/ZeroException,14,47,"        super(specific, 0, arguments);",0.0,0,,0
org/apache/commons/math3/exception/ZeroException,14,48,    },0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,44,    public DiagonalMatrix() {},0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,56,"        super(dimension, dimension);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,57,        data = new double[dimension];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,58,    },0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,67,    public DiagonalMatrix(final double[] d) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,68,        data = d.clone();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,69,    },0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,83,"    public DiagonalMatrix(final double[] d, final boolean copyArray) {",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,84,        data = copyArray ? d.clone() : d;,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,85,    },0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,97,        if (rowDimension != columnDimension) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,98,"            throw new DimensionMismatchException(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,101,        return new DiagonalMatrix(rowDimension);,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,107,        return new DiagonalMatrix(data);,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,121,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,123,        final int dim = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,124,        final double[] outData = new double[dim];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,125,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,126,            outData[i] = data[i] + m.data[i];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,129,"        return new DiagonalMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,142,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,144,        final int dim = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,145,        final double[] outData = new double[dim];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,146,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,147,            outData[i] = data[i] - m.data[i];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,150,"        return new DiagonalMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,163,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,165,        final int dim = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,166,        final double[] outData = new double[dim];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,167,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,168,            outData[i] = data[i] * m.data[i];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,171,"        return new DiagonalMatrix(outData, false);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,184,        if (m instanceof DiagonalMatrix) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,185,            return multiply((DiagonalMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,187,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,188,            final int nRows = m.getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,189,            final int nCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,190,            final double[][] product = new double[nRows][nCols];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,191,            for (int r = 0; r < nRows; r++) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,192,                for (int c = 0; c < nCols; c++) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,193,"                    product[r][c] = data[r] * m.getEntry(r, c);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,196,"            return new Array2DRowRealMatrix(product, false);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,203,        final int dim = getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,204,        final double[][] out = new double[dim][dim];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,206,        for (int i = 0; i < dim; i++) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,207,            out[i][i] = data[i];,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,210,        return out;,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,219,        return data;,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,230,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,237,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,238,        return row == column ? data[row] : 0;,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,248,        if (row != column) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,249,            throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,251,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,252,        data[row] = value;,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,253,    },0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,264,        if (row != column) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,265,            throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,267,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,268,        data[row] += increment;,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,269,    },0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,280,        if (row != column) {,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,281,            throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,283,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,284,        data[row] *= factor;,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,285,    },0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,290,        return data == null ? 0 : data.length;,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,296,        return getRowDimension();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,303,"        return multiply(new DiagonalMatrix(v, false)).getDataRef();",0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,310,        return operate(v);,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,317,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,324,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,333,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,342,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,349,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,356,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,365,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/DiagonalMatrix,14,374,        throw new MathUnsupportedOperationException();,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,381,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,,0
org/apache/commons/math3/linear/AbstractFieldMatrix,14,386,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,63,"        super(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,64,        long lRow = rowDimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,65,        long lCol = columnDimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,66,        if (lRow * lCol >= Integer.MAX_VALUE) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,67,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,69,        this.rows = rowDimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,70,        this.columns = columnDimension;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,71,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,72,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,79,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,80,        this.rows = matrix.rows;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,81,        this.columns = matrix.columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,82,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,83,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,88,        return new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,100,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,106,        return columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,120,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,122,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,123,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,124,            iterator.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,125,            final int row = iterator.key() / columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,126,            final int col = iterator.key() - row * columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,127,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,128,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,130,        return out;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,139,            return subtract((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,140,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,141,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,155,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,157,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,158,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,159,            iterator.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,160,            final int row = iterator.key() / columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,161,            final int col = iterator.key() - row * columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,162,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,163,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,165,        return out;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,179,            return multiply((OpenMapRealMatrix) m);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,180,        } catch (ClassCastException cce) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,182,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,184,            final int outCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,185,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,186,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,187,                iterator.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,188,                final double value = iterator.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,189,                final int key      = iterator.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,190,                final int i        = key / columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,191,                final int k        = key % columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,192,                for (int j = 0; j < outCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,193,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,195,            },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,197,            return out;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,214,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,216,        final int outCols = m.getColumnDimension();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,217,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,218,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,219,            iterator.advance();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,220,            final double value = iterator.value();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,221,            final int key      = iterator.key();,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,222,            final int i        = key / columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,223,            final int k        = key % columns;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,224,            for (int j = 0; j < outCols; ++j) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,225,"                final int rightKey = m.computeKey(k, j);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,226,                if (m.entries.containsKey(rightKey)) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,227,"                    final int outKey = out.computeKey(i, j);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,228,                    final double outValue =,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,230,                    if (outValue == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,231,                        out.entries.remove(outKey);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,233,"                        out.entries.put(outKey, outValue);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,237,        },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,239,        return out;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,245,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,246,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,247,"        return entries.get(computeKey(row, column));",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,253,        return rows;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,260,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,261,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,262,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,263,"            entries.remove(computeKey(row, column));",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,265,"            entries.put(computeKey(row, column), value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,267,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,273,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,274,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,275,"        final int key = computeKey(row, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,276,        final double value = entries.get(key) + increment;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,277,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,278,            entries.remove(key);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,280,"            entries.put(key, value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,282,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,288,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,289,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,290,"        final int key = computeKey(row, column);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,291,        final double value = entries.get(key) * factor;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,292,        if (value == 0.0) {,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,293,            entries.remove(key);,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,295,"            entries.put(key, value);",0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,297,    },0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,306,        return row * columns + column;,0.0,0,,0
org/apache/commons/math3/linear/OpenMapRealMatrix,14,39,@Deprecated,0.0,0,,0
