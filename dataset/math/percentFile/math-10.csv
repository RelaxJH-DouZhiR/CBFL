dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,0,0,0,6,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,1,0,1,2,0,0,0,0,3,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },4,0,0,0,1,0,0,0,0,4,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",18,2,1,1,2,0,0,0,0,22,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,            this.numerator = (int) p1;,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,            this.denominator = (int) q1;,0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,4,0,0,0,0,2,4,0,0,10,15,3,0.23529,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",10,2,0,1,2,1,14,0,0,28,34,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,329,            numerator   = BigInteger.valueOf(p2);,8,3,0,1,2,0,0,0,0,12,37,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,330,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,328,        if (q2 < maxDenominator) {,6,1,0,1,3,0,0,0,0,8,26,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,335,    },8,2,0,0,1,0,0,0,0,10,1,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,271,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,272,        long overflow = Integer.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,34,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,273,        double r0 = value;,2,0,0,0,0,0,0,0,0,3,18,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,274,        long a0 = (long) FastMath.floor(r0);,2,0,0,2,4,0,6,0,0,8,36,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,275,        if (a0 > overflow) {,4,2,0,1,3,0,10,0,0,17,20,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,281,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,287,        long p0 = 1;,12,2,0,0,0,2,2,0,0,18,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,288,        long q0 = 0;,4,0,1,0,0,0,6,2,0,15,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,289,        long p1 = a0;,16,2,1,0,0,0,2,0,0,26,13,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,290,        long q1 = 1;,6,0,0,0,0,0,0,0,0,7,12,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,292,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,293,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,295,        int n = 0;,6,0,0,0,0,0,0,0,0,8,10,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,296,        boolean stop = false;,0,0,0,0,0,0,0,0,0,0,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,298,            ++n;,14,1,0,0,0,3,4,0,0,23,4,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,299,            final double r1 = 1.0 / (r0 - a0);,0,0,0,1,2,0,0,0,0,3,34,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,300,            final long a1 = (long) FastMath.floor(r1);,0,0,0,2,4,0,0,0,0,6,42,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,301,            p2 = (a1 * p1) + p0;,10,2,0,1,2,3,0,0,0,16,20,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,302,            q2 = (a1 * q1) + q0;,0,0,0,1,2,0,0,0,0,3,20,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,303,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,309,            final double convergent = (double) p2 / (double) q2;,2,0,0,2,4,0,0,0,0,3,52,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,310,            if ((n < maxIterations) &&,4,1,1,1,3,0,6,0,0,15,26,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,313,                p0 = p1;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,314,                p1 = p2;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,315,                q0 = q1;,6,1,0,0,0,0,0,0,0,7,8,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,316,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,317,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,318,                r0 = r1;,2,0,1,0,0,0,2,0,0,9,8,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,320,                stop = true;,6,0,0,0,0,0,0,0,0,9,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,322,        } while (!stop);,0,0,0,1,3,0,0,0,0,4,16,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,324,        if (n >= maxIterations) {,2,0,0,1,3,0,2,0,0,5,25,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3352,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.07273,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,768,        return denominator.intValue();,0,0,0,1,2,1,4,0,0,4,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,801,        return numerator.intValue();,0,0,0,1,2,1,4,0,0,4,28,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3338,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3342,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,14,4,0,1,3,0,0,0,0,20,46,3,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3346,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3347,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3351,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3355,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04819,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,1,3024,        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));,0,0,0,2,4,1,0,0,0,7,83,4,0.0404,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,220,                p0 = p1;,10,1,0,0,0,0,2,0,0,15,8,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,221,                p1 = p2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,222,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,223,                q1 = q2;,8,0,0,0,0,2,6,0,0,17,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,224,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,225,                r0 = r1;,14,4,0,0,0,0,6,0,0,26,8,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,366,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,374,        return numerator;,2,1,0,0,0,1,0,0,0,3,17,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,370,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,371,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,372,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,8,2,0,13,41,9,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",6,1,0,1,2,1,4,0,0,13,100,3,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,1,2,4,0,0,0,0,11,87,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",6,1,0,1,2,0,0,2,0,9,84,3,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,8,0,0,11,78,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,46,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,75,"    CONSTRAINT(""constraint""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,76,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",12,2,0,2,4,0,0,0,0,16,112,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,77,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",18,1,1,5,10,2,0,6,0,34,290,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,79,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",6,0,0,3,6,0,2,0,0,9,263,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,80,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,81,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,1,0,1,2,0,0,0,0,7,72,9,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,82,"    CROSSOVER_RATE(""crossover rate ({0})""),",4,0,0,3,6,3,0,0,0,8,39,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,83,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0,0,0,3,6,0,0,0,0,9,109,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,84,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,85,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0,0,0,1,2,0,0,0,0,3,94,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,86,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,87,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,88,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",18,2,0,3,6,2,0,2,0,25,52,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,89,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,90,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,91,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,92,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",0,0,0,2,4,0,0,0,0,6,88,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,93,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,94,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,95,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,1,0,1,2,0,4,0,0,8,64,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,96,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,97,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0,0,0,1,2,0,0,0,0,3,71,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,98,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,6,0,0,9,65,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,99,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,100,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,101,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,102,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,103,"    EVALUATION(""evaluation""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,104,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,105,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,106,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",4,1,0,12,24,0,0,0,0,7,175,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,107,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",4,0,0,3,6,0,0,0,0,5,85,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,108,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,109,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,110,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,111,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,112,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,113,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,114,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,115,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,116,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,117,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0,0,0,2,4,0,0,0,0,6,62,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,118,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,119,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,120,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,4,0,0,7,64,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,121,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,122,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,123,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,124,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,125,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,126,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,127,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,128,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",4,0,0,3,6,0,0,0,0,6,79,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,129,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,130,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,132,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,133,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,134,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,135,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,136,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0,0,0,3,6,0,0,0,0,9,105,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,137,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,138,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""multistep method needs at least {0} previous steps, got {1}""),",0,0,0,3,6,0,0,0,0,9,117,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,139,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0,0,0,2,4,0,0,0,0,6,66,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,140,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",4,0,0,2,4,3,0,0,0,8,50,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,141,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0,0,0,1,2,0,0,0,0,3,76,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,142,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,143,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,144,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,145,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",8,1,0,3,6,1,0,0,0,11,72,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,146,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",4,0,0,2,4,0,0,0,0,6,71,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,147,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,148,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,149,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,150,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",10,2,0,26,52,0,0,0,0,14,165,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,151,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,6,0,0,9,41,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,152,"    ITERATIONS(""iterations""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,153,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,154,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,155,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,156,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,157,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,158,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0,0,0,5,10,0,0,0,0,15,111,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,159,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,160,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,161,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,162,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",4,0,0,3,6,0,0,0,0,5,71,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,163,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,164,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,165,"    MUTATION_RATE(""mutation rate ({0})""),",2,0,0,3,6,0,0,0,0,3,37,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,166,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,167,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,168,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0,0,0,2,4,0,0,0,0,6,92,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,169,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,1,2,4,0,0,0,0,8,55,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,170,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,171,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,172,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0,0,0,3,6,0,0,0,0,9,79,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,173,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,174,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,175,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",14,2,0,3,6,0,0,0,0,18,82,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,176,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,177,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,178,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,179,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0,0,0,4,8,0,0,0,0,12,131,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,180,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,181,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,182,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",12,8,0,2,4,0,0,0,0,20,81,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,183,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,184,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,185,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,186,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,187,"    NORM(""Norm ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,188,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,189,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,190,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",10,2,0,5,10,0,0,0,0,13,93,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,191,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,192,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,4,0,0,7,88,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,193,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,194,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,195,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,196,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,197,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,198,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,1,0,1,2,0,4,0,0,7,72,6,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,199,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,200,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,201,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,8,0,0,11,73,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,202,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,71,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,203,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",6,4,1,3,6,0,0,0,0,24,58,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,204,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,205,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,206,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,207,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",4,0,0,3,6,0,0,0,0,5,85,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,208,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,209,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,210,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,4,0,0,10,34,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,211,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",4,0,0,3,6,0,0,0,0,5,49,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,212,"    MEAN(""mean ({0})""), /* keep */",14,4,0,3,6,0,0,0,0,20,30,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,213,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,214,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,56,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,215,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",4,1,0,3,6,0,0,0,0,6,65,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,216,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",10,5,1,2,5,0,0,0,0,20,53,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,217,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",4,2,1,3,6,0,0,0,0,12,69,0,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,218,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,219,"    POPULATION_SIZE(""population size ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,1,220,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.02186,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,8,4,0,3,6,1,2,0,0,16,42,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,6,2,0,1,2,1,0,0,0,9,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,2,0,0,2,4,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,            double tmp = mu - k * sigma;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,4,1,0,0,0,0,0,0,0,6,12,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,            tmp = mu + k * sigma;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,            if (tmp < upper) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,4,0,0,3,6,2,0,2,0,8,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,2,1,0,1,2,1,0,0,0,3,20,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,59,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,        if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,0,0,0,4,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,6,2,0,1,3,0,10,0,0,18,27,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,279,        if (!numericalVarianceIsCalculated) {,2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,280,            numericalVariance = calculateNumericalVariance();,0,0,0,1,2,0,0,0,0,3,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,281,            numericalVarianceIsCalculated = true;,16,2,0,0,0,0,0,0,0,19,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,283,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,292,        final double N = getPopulationSize();,2,0,0,1,2,1,2,0,0,5,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,293,        final double m = getNumberOfSuccesses();,0,0,0,1,2,0,0,0,0,3,40,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,294,        final double n = getSampleSize();,0,0,0,1,2,0,0,0,0,3,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,295,        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));,18,6,0,5,10,1,0,0,0,24,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,308,"        return FastMath.max(0,",0,0,0,0,1,1,4,0,0,4,22,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,321,"        return FastMath.min(getNumberOfSuccesses(), getSampleSize());",0,0,0,3,6,1,8,0,0,8,61,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,105,        int lower = getSupportLowerBound();,20,4,0,1,2,1,2,0,0,30,35,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,106,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,109,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,114,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,118,        int upper = getSupportUpperBound();,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,119,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,101,        if (p < 0.0 || p > 1.0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,161,        return numberOfSuccesses;,6,0,0,0,0,1,0,0,0,7,25,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,170,        return populationSize;,0,0,0,0,0,1,0,0,0,1,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,179,        return sampleSize;,2,0,0,0,0,1,0,0,0,2,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,2,0,1,1,2,1,4,0,0,13,77,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,115,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,128,    private static final double LN_HI_PREC_COEF[][] = {,12,4,0,2,5,1,0,0,0,18,51,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,141,    private static final double SINE_TABLE_A[] =,2,0,1,1,2,3,0,0,0,12,44,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,0,4,0,0,6,126,9,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3429,        return (a <= b) ? a : b;,0,1,0,1,2,1,12,0,0,13,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3497,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,63,"        this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);",0,0,0,2,4,0,0,0,0,6,70,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,84,        super(rng);,0,0,0,1,2,0,0,0,0,3,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,45,    private double numericalVariance = Double.NaN;,0,0,0,0,0,0,0,0,0,0,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,47,    private boolean numericalVarianceIsCalculated = false;,12,1,0,0,0,3,0,0,0,18,54,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,86,        if (populationSize <= 0) {,2,1,0,1,3,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,90,        if (numberOfSuccesses < 0) {,2,0,0,1,3,3,0,0,0,5,28,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,94,        if (sampleSize < 0) {,2,1,1,1,3,0,0,0,0,8,21,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,99,        if (numberOfSuccesses > populationSize) {,2,1,0,1,3,0,0,0,0,3,41,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,103,        if (sampleSize > populationSize) {,4,1,0,1,3,0,0,0,0,5,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,108,        this.numberOfSuccesses = numberOfSuccesses;,4,0,0,0,0,0,0,0,0,5,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,109,        this.populationSize = populationSize;,4,0,0,0,0,0,0,0,0,5,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,110,        this.sampleSize = sampleSize;,4,0,0,0,0,0,0,0,0,5,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,111,    },18,6,0,0,1,3,10,0,0,38,1,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,47,    @Deprecated,14,4,0,0,0,0,10,0,0,29,11,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,71,    protected AbstractIntegerDistribution(RandomGenerator rng) {,2,1,0,1,3,0,4,0,0,7,60,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,72,        random = rng;,4,1,1,0,0,0,10,0,0,20,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,73,    },4,1,1,0,1,1,0,0,0,10,1,12,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,57,"        super(K, M1, M2, M3);",0,0,0,1,2,0,0,0,0,3,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,2,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,99,        final int w = 32;,2,0,0,0,0,1,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,100,        final int r = (k + w - 1) / w;,14,4,0,1,2,3,0,0,0,21,30,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,101,        this.v      = new int[r];,4,0,1,1,2,0,0,0,0,7,25,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,102,        this.index  = 0;,2,0,1,0,0,0,0,0,0,8,16,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,108,        i1   = new int[r];,4,0,0,1,2,1,0,4,0,9,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,109,        i2   = new int[r];,6,1,1,1,2,0,0,0,0,10,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,111,        for (int j = 0; j < r; ++j) {,14,2,0,1,3,0,0,0,0,17,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,115,            i2[j]   = (j + m2)    % r;,14,4,1,2,4,3,4,0,0,36,26,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,120,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,122,    },2,1,0,0,1,0,0,0,0,3,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,156,            return;,12,1,0,0,0,4,0,0,0,17,7,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",10,0,0,2,4,0,18,0,0,29,65,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,161,        if (seed.length < v.length) {,8,1,0,1,3,0,0,0,0,9,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,162,            for (int i = seed.length; i < v.length; ++i) {,14,1,1,1,3,0,0,0,0,25,46,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,6,5,1,6,12,0,0,0,0,16,65,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,168,        index = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,1,0,7,14,1,8,0,0,16,71,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,2,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,41,        nextGaussian = Double.NaN;,14,1,1,0,0,0,0,2,0,23,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,195,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,196,    },0,0,0,0,1,0,6,0,0,6,1,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,132,    public RandomDataGenerator() {,0,0,0,1,3,0,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,119,    private RandomGenerator rand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,122,    private RandomGenerator secRand = null;,2,0,0,0,0,1,0,2,0,5,39,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,2,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,114,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,115,        delegate = new RandomDataGenerator();,2,0,0,1,2,0,0,2,0,5,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,2,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6134,    private FastMathLiteralArrays() {},2,0,0,2,4,1,0,0,0,3,34,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,29,    private static final double[] EXP_INT_A = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,1535,    private static final double[] EXP_INT_B = new double[] {,6,0,0,2,5,4,0,0,0,10,56,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,5103,    private static final double[][] LN_MANT = new double[][] {,2,0,0,4,9,3,0,0,0,5,58,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6142,        return EXP_INT_A.clone();,2,0,0,1,2,1,0,0,0,2,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6166,        return EXP_FRAC_B.clone();,4,1,0,1,2,2,4,0,0,10,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,2,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3723,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3755,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3756,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3758,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3826,        CodyWaite(double xa) {,4,0,0,1,3,0,0,0,0,4,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3829,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3835,                double a = -k * 1.570796251296997;,8,1,0,0,0,0,0,0,0,10,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3836,                remA = xa + a;,14,3,0,0,0,0,4,0,0,24,14,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3837,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3839,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3840,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3841,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3842,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3844,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3845,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3846,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3847,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3849,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3850,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3856,                --k;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3857,            },2,0,0,0,1,0,6,0,0,9,1,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3859,            this.finalK = k;,8,0,0,0,0,0,0,4,0,14,16,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3860,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3861,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3862,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3868,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3874,            return finalRemA;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3880,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3795,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3809,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,3811,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,359,    private FastMath() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,371,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,372,            return d; // These are un-normalised - don't try to convert,2,0,0,0,0,1,0,0,0,2,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,374,        long xl = Double.doubleToRawLongBits(d); // can take raw bits because just gonna convert it back,4,0,0,1,2,0,6,0,0,10,96,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,375,        xl = xl & MASK_30BITS; // Drop low order bits,2,0,0,0,0,0,0,0,0,3,45,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,376,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,0,0,0,4,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,393,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,394,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,402,      if (x > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,403,          if (x >= LOG_MAX_VALUE) {,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,405,              final double t = exp(0.5 * x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,406,              return (0.5 * t) * t;,6,2,0,1,2,1,0,0,0,8,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,408,              return 0.5 * exp(x);,2,1,0,1,2,2,4,0,0,8,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,410,      } else if (x < -20) {,2,1,0,1,4,0,0,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,411,          if (x <= -LOG_MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,413,              final double t = exp(-0.5 * x);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,414,              return (0.5 * t) * t;,4,2,0,1,2,1,0,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,416,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,420,      final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,421,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,422,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,424,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,426,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,427,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,429,      double temp = ya * HEX_40000000;,2,0,0,0,0,1,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,430,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,2,431,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,0,0,0,2,4,0,0,0,0,6,42,4,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,28,5,0,0,0,1,0,0,0,35,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,0,0,0,1,2,0,0,0,0,3,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,2,0,0,1,2,0,6,2,0,10,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,0,0,0,0,0,0,0,0,0,0,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,6,1,0,1,2,0,0,0,0,7,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,12,4,0,1,2,1,0,0,0,17,22,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,2,0,0,1,2,0,0,0,0,2,39,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,846,        double prodHighNext = prodHigh[1];,0,0,0,1,2,0,0,0,0,3,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,38,"        super(value, 0, false);",4,0,1,1,2,0,0,0,0,9,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,49,    },4,1,0,0,1,0,0,0,0,5,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,70,        this.min = min;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,71,        this.boundIsAllowed = boundIsAllowed;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,72,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,85,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,46,"        super(pattern, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,47,        argument = wrong;,6,0,0,0,0,0,0,0,0,7,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,54,        return argument;,10,1,0,0,0,1,0,0,0,12,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,46,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,5,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,45,        dimension = expected;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,46,    },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",10,0,1,1,2,0,0,0,0,15,67,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,0,0,0,0,1,0,0,0,0,1,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,89,        this.direction = direction;,6,0,0,0,0,1,0,0,0,8,27,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",0,0,0,3,6,0,0,0,0,9,57,4,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,0,0,1,2,1,0,0,0,4,29,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,0,0,0,1,2,0,0,0,0,3,49,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,0,0,0,1,2,0,0,0,0,3,53,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,0,0,0,1,2,1,0,0,0,4,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",8,0,0,3,6,0,6,2,0,16,58,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",6,0,0,1,2,1,0,4,0,11,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,2,2,0,0,5,51,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",0,0,0,0,1,1,0,0,0,2,41,4,0.12121,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,        final SubHyperplane<Euclidean1D> lowerCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,        if (Double.isInfinite(upper) && (upper > 0)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.11429,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,139,"        final Line line = new Line(start, end);",0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),",10,0,0,2,5,1,8,0,0,19,54,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,47,"        super(buildTree(lower, upper));",4,0,1,2,4,0,6,0,0,15,31,3,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,94,        if (Double.isInfinite(lower) && (lower < 0)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.10811,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,115,                   final Object attribute) {,0,0,0,0,2,0,0,0,0,2,25,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,116,        this.cut       = cut;,8,0,0,0,0,0,6,0,0,17,21,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,117,        this.plus      = plus;,2,0,0,0,0,0,0,0,0,2,22,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,118,        this.minus     = minus;,4,0,0,0,0,0,8,0,0,12,23,9,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,119,        this.parent    = null;,2,0,0,0,0,0,0,0,0,4,22,6,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,120,        this.attribute = attribute;,16,1,0,0,0,0,8,0,0,28,27,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,121,        plus.parent    = this;,0,0,0,0,0,0,0,0,0,0,22,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,122,        minus.parent   = this;,0,0,0,0,0,0,0,0,0,0,22,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,39,"        super(hyperplane, remainingRegion);",12,4,0,1,2,0,6,0,0,23,35,3,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,40,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,42,"    public OrientedPoint(final Vector1D location, final boolean direct) {",0,0,0,1,3,0,0,0,0,4,69,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,43,        this.location = location;,4,0,0,0,0,0,14,0,0,19,25,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,44,        this.direct   = direct;,0,0,0,0,0,0,0,0,0,0,23,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,4,74,"        return new SubOrientedPoint(this, null);",0,0,0,1,2,1,0,0,0,4,40,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,50,                                    final Region<T> remainingRegion) {,4,0,0,0,2,0,0,0,0,5,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,51,        this.hyperplane      = hyperplane;,4,0,0,0,0,0,0,0,0,5,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,52,        this.remainingRegion = remainingRegion;,0,0,0,0,0,0,0,0,0,0,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,53,    },0,0,0,0,1,0,8,0,0,8,1,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,65,    public Vector1D(double x) {,0,0,0,1,3,0,0,0,0,4,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,66,        this.x = x;,0,0,0,0,0,0,0,0,0,0,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,67,    },6,2,0,0,1,0,0,0,0,10,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,36,    public static final Vector1D ZERO = new Vector1D(0.0);,6,0,0,1,2,4,4,4,0,18,54,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,39,    public static final Vector1D ONE  = new Vector1D(1.0);,0,0,0,1,2,0,0,0,0,3,54,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,43,    public static final Vector1D NaN = new Vector1D(Double.NaN);,2,0,0,1,2,0,0,0,0,2,60,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,47,    public static final Vector1D POSITIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,51,    public static final Vector1D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,4,128,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,67,    protected AbstractRegion(final BSPTree<S> tree) {,0,0,0,1,3,0,0,0,0,4,49,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,68,        this.tree = tree;,0,0,0,0,0,0,0,0,0,0,17,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,4,69,    },8,0,0,0,1,0,0,0,0,11,1,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,115,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,128,    private static final double LN_HI_PREC_COEF[][] = {,8,2,0,2,5,3,12,0,0,28,51,1,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,160,    private static final double SINE_TABLE_B[] =,14,2,0,1,2,1,0,0,0,17,44,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,1,0,0,1,46,11,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,0,0,0,0,3,54,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,93,    public BSPTree(final Object attribute) {,0,0,0,1,3,0,0,0,0,4,40,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,94,        cut    = null;,6,0,0,0,0,0,0,0,0,6,14,5,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,95,        plus   = null;,2,0,0,0,0,0,0,0,0,3,14,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,96,        minus  = null;,2,0,0,0,0,0,0,0,0,3,14,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,97,        parent = null;,2,0,0,0,0,0,6,0,0,9,14,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,98,        this.attribute = attribute;,0,0,0,0,0,0,0,0,0,0,27,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,44,"    public SubLine(final Line line, final IntervalsSet remainingRegion) {",6,0,0,1,3,3,0,4,0,13,69,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,45,        this.line            = line;,2,0,0,0,0,1,0,0,0,3,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,46,        this.remainingRegion = remainingRegion;,4,0,0,0,0,0,0,0,0,5,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,47,    },2,0,0,0,1,0,6,0,0,9,1,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,896,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,897,        final double a1High     = ca1 - (ca1 - a1);,8,2,1,1,2,1,2,0,0,26,43,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,898,        final double a1Low      = a1 - a1High;,16,3,0,0,0,1,0,0,0,21,38,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,899,        final double cb1        = SPLIT_FACTOR * b1;,10,2,0,0,0,1,4,0,0,17,44,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,900,        final double b1High     = cb1 - (cb1 - b1);,2,1,1,1,2,0,0,0,0,8,43,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,901,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,904,        final double prod1High  = a1 * b1;,10,2,1,0,0,1,0,0,0,17,34,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,905,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,908,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,909,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,8,0,0,19,43,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,910,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,911,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,912,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,913,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,916,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,917,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,920,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,921,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,922,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,14,4,0,3,6,4,0,0,0,22,86,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,926,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,928,        if (Double.isNaN(result)) {,4,0,0,2,5,0,6,0,0,11,27,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,934,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,976,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,977,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,978,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,979,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,980,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,981,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,984,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,985,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,988,        final double ca2        = SPLIT_FACTOR * a2;,8,1,0,0,0,4,0,0,0,13,44,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,989,        final double a2High     = ca2 - (ca2 - a2);,10,3,0,1,2,1,0,0,0,14,43,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,990,        final double a2Low      = a2 - a2High;,2,1,0,0,0,0,0,0,0,3,38,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,991,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,992,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,993,        final double b2Low      = b2 - b2High;,8,1,0,0,0,0,0,0,0,10,38,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,996,        final double prod2High  = a2 * b2;,2,0,0,0,0,0,0,0,0,3,34,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,997,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1000,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1001,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1002,        final double a3Low      = a3 - a3High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1003,        final double cb3        = SPLIT_FACTOR * b3;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1004,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1005,        final double b3Low      = b3 - b3High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1008,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1009,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,24,8,0,3,6,1,4,0,0,38,110,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1012,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1013,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1014,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,18,5,0,3,6,1,0,0,0,26,86,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1017,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1018,        final double s123Prime  = s123High - prod3High;,8,1,0,0,0,1,0,0,0,11,47,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1019,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1023,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1025,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,1031,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,95,"    public Vector3D(double x, double y, double z) {",8,0,0,1,3,1,0,0,0,9,47,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,96,        this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,97,        this.y = y;,0,0,0,0,0,0,0,0,0,0,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,98,        this.z = z;,4,0,0,0,0,0,6,0,0,11,11,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,99,    },2,0,0,0,1,0,4,0,0,7,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,137,"    public Vector3D(double a, Vector3D u) {",14,1,0,1,3,1,0,2,0,19,39,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,138,        this.x = a * u.x;,8,1,1,0,0,0,0,0,0,21,17,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,139,        this.y = a * u.y;,0,0,0,0,0,0,0,0,0,0,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,140,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",10,0,0,1,3,1,0,4,0,15,65,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",12,1,0,1,2,0,8,0,0,22,58,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",10,0,0,1,2,0,8,0,0,19,58,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",2,0,0,1,2,3,0,4,0,9,60,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",2,0,0,1,2,3,0,4,0,10,62,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,71,    public static final Vector3D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,4,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",0,0,0,1,3,0,0,0,0,4,87,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,55,"        reset(p1, p2);",2,0,0,1,2,0,6,0,0,8,14,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,74,        final Vector3D delta = p2.subtract(p1);,2,0,0,1,2,1,6,2,0,11,39,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,75,        final double norm2 = delta.getNormSq();,2,0,0,1,2,1,4,0,0,7,39,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,81,    },0,0,1,0,1,0,4,0,0,6,1,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2664,            if (y < 0 || 1 / y < 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2665,                return -Math.PI * F_1_2;,6,1,1,0,0,1,0,0,0,13,24,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2660,            if (y > 0 || 1 / y > 0) {,6,5,0,1,3,0,0,0,0,11,25,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3587,                return abs(y);,0,0,0,1,2,1,4,0,0,4,14,11,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,200,            return null;,2,0,0,0,0,2,0,0,0,3,12,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,198,        final double d = sin * other.cos - other.sin * cos;,14,3,0,0,0,1,0,0,0,18,51,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,199,        if (FastMath.abs(d) < 1.0e-10) {,0,1,0,2,5,0,6,0,0,7,32,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,181,        Vector2D p2 = (Vector2D) point;,4,0,0,1,2,0,0,4,0,8,31,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,182,        return new Vector1D(cos * p2.getX() + sin * p2.getY());,4,3,0,3,6,1,8,2,0,17,55,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,4,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0,0,0,2,4,0,0,0,0,6,65,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,4,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,4,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2276,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2330,"                return cosQ(xa, xb);",2,0,0,1,2,1,6,0,0,8,20,3,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2582,        if (x != x || y != y) {,8,3,0,1,3,0,0,0,0,11,23,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2586,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2612,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2624,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2636,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2646,        if (x == Double.NEGATIVE_INFINITY),0,0,0,1,2,0,0,0,0,3,34,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2659,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3574,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3576,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,0,0,3,8,0,0,0,0,11,48,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3580,            final int expX = getExponent(x);,2,0,0,1,2,1,4,0,0,7,32,7,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3581,            final int expY = getExponent(y);,10,2,1,1,2,1,4,2,0,31,32,3,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3582,            if (expX > expY + 27) {,0,0,0,1,3,0,0,0,0,4,23,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3585,            } else if (expY > expX + 27) {,4,2,0,1,4,0,0,0,0,6,30,8,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3685,        return (int) ((Double.doubleToRawLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,4,8,1,6,0,0,9,69,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,81,"    public Line(final Vector2D p1, final Vector2D p2) {",6,0,0,1,3,3,0,4,0,13,51,2,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,82,"        reset(p1, p2);",0,0,0,1,2,0,6,0,0,6,14,5,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,83,    },4,0,0,0,1,0,0,0,0,5,1,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,129,        final double dx = p2.getX() - p1.getX();,2,1,0,2,4,1,8,0,0,12,40,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,130,        final double dy = p2.getY() - p1.getY();,2,1,0,2,4,1,8,0,0,12,40,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,131,"        final double d = FastMath.hypot(dx, dy);",2,0,0,1,2,1,8,0,0,11,40,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,132,        if (d == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,138,"            angle        = FastMath.PI + FastMath.atan2(-dy, -dx);",10,1,0,1,2,0,4,0,0,18,54,6,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,139,            cos          = FastMath.cos(angle);,2,0,0,1,2,0,6,0,0,9,35,6,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,140,            sin          = FastMath.sin(angle);,2,0,0,1,2,0,6,0,0,9,35,6,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,141,            originOffset = (p2.getX() * p1.getY() - p1.getX() * p2.getY()) / d;,0,0,0,5,10,0,0,0,0,15,67,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,4,143,    },2,1,0,0,1,0,0,0,0,3,1,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1680,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1682,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1683,        p = p * x2 + -1.9841269659586505E-4;,0,0,0,0,0,0,0,0,0,0,36,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1684,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1685,        p = p * x2 + -0.16666666666666666;,8,2,0,0,0,0,0,0,0,13,34,0,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1688,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1690,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1700,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1702,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1703,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1704,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1705,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1706,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1708,        return p;,4,0,0,0,0,1,0,0,0,5,9,0,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1719,        int idx = (int) ((xa * 8.0) + 0.5);,6,4,0,3,6,0,0,0,0,10,35,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1720,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1723,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1724,        final double sintB = SINE_TABLE_B[idx];,8,1,1,1,2,1,0,0,0,14,39,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1725,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1726,        final double costB = COSINE_TABLE_B[idx];,8,0,1,1,2,1,4,0,0,18,41,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1729,        double sinEpsA = epsilon;,6,1,0,0,0,0,0,0,0,7,25,13,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1730,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1731,        final double cosEpsA = 1.0;,6,1,0,0,0,1,0,0,0,8,27,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1732,        final double cosEpsB = polyCosine(epsilon);,4,0,0,1,2,1,0,2,0,7,43,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1735,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1736,        double temp2 = (sinEpsA + temp) - temp;,10,2,0,1,2,0,0,0,0,12,39,0,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1737,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1738,        sinEpsA = temp2;,4,0,0,0,0,0,6,0,0,12,16,1,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1764,        double a = 0;,0,1,0,0,0,0,4,0,0,5,13,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1765,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1767,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1768,        double c = a + t;,8,3,1,0,0,0,0,0,0,20,17,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1769,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1770,        a = c;,8,0,0,0,0,0,0,0,0,11,6,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1771,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1773,        t = costA * sinEpsA;,10,1,0,0,0,0,0,0,0,13,20,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1774,        c = a + t;,8,1,0,0,0,0,0,0,0,11,10,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1775,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1776,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1777,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1779,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1794,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1821,        if (xb != 0.0) {,4,1,1,1,3,1,0,0,0,10,16,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1822,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1824,            c = a + t;,2,0,0,0,0,0,0,0,0,3,10,2,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1825,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1826,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1827,            b = b + d;,0,0,1,0,0,0,4,0,0,6,10,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1830,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1832,        return result;,6,1,0,0,0,1,14,0,0,21,14,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1843,        final double pi2a = 1.5707963267948966;,6,0,0,0,0,1,0,0,0,9,39,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1844,        final double pi2b = 6.123233995736766E-17;,12,1,0,0,0,0,18,0,0,31,42,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1846,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1847,        double b = -(a - pi2a + xa);,2,0,0,1,2,1,4,0,0,7,28,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1848,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,1850,"        return sinQ(a, b);",2,0,1,1,2,1,0,0,0,5,18,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2228,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2229,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2231,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2234,        xa = x;,8,1,0,0,0,0,2,0,0,13,7,0,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2235,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2241,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,6,16,6,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2249,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2254,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2270,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2274,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2295,        int quadrant = 0;,10,1,0,0,0,0,0,0,0,12,17,6,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2298,        double xa = x;,18,6,1,0,0,0,0,0,0,29,14,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2299,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2303,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,4,0,0,17,49,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2308,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2309,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,2328,        switch (quadrant) {,8,1,0,1,3,0,0,0,0,9,19,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,83,        return remainingRegion;,2,0,0,0,0,1,0,0,0,2,23,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,68,"    public Vector2D(double x, double y) {",6,0,0,1,3,1,0,0,0,7,37,2,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,69,        this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,70,        this.y = y;,8,0,0,0,0,0,0,0,0,10,11,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,37,"    public static final Vector2D ZERO   = new Vector2D(0, 0);",2,0,0,1,2,3,0,4,0,9,57,2,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,41,"    public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);",10,0,0,1,2,3,0,4,0,17,72,2,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,45,    public static final Vector2D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,49,    public static final Vector2D NEGATIVE_INFINITY =,4,0,0,0,0,3,0,2,0,10,48,0,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,150,        return x;,10,1,0,0,0,1,0,0,0,13,9,3,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,4,158,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,3025,        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));,6,3,0,2,4,1,0,0,0,10,83,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,4,385,        return Math.sqrt(a);,8,3,0,1,2,2,0,0,0,12,20,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,4,72,        return hyperplane;,2,0,0,0,0,1,0,0,0,2,18,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,4,52,    private MathArrays() {},0,0,0,2,4,0,0,0,0,6,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,4,2,0,8,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,0,0,0,2,4,1,0,0,0,7,54,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,344,            Complex c = (Complex)other;,0,0,0,1,2,0,0,0,0,3,27,4,0.02273,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,345,            if (c.isNaN) {,10,1,1,1,3,0,4,2,0,22,14,1,0.02273,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,343,        if (other instanceof Complex){,2,0,1,1,3,1,0,0,0,7,30,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,340,        if (this == other) {,4,0,0,1,3,0,0,0,0,5,20,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,99,        this.real = real;,4,0,0,0,0,0,0,0,0,5,17,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,100,        this.imaginary = imaginary;,0,0,0,0,0,0,0,0,0,0,27,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,102,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,2,0,0,2,4,0,4,0,0,7,54,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,103,        isInfinite = !isNaN &&,6,1,0,0,0,1,0,0,0,8,22,6,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,59,"    public static final Complex I = new Complex(0.0, 1.0);",2,1,0,1,2,0,0,0,0,3,54,6,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,62,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",16,7,0,1,2,3,0,4,0,30,70,1,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,65,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,98,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,67,"    public static final Complex ONE = new Complex(1.0, 0.0);",0,0,0,1,2,0,0,0,0,3,56,4,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,69,"    public static final Complex ZERO = new Complex(0.0, 0.0);",0,0,0,1,2,0,0,2,0,3,57,5,0.00469,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,89,"        this(real, 0.0);",2,0,0,1,2,0,4,0,0,7,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,90,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,116,        if (isNaN) {,12,2,0,1,3,0,0,0,0,15,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,117,            return Double.NaN;,6,0,0,0,0,1,0,2,0,8,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,119,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,120,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,3,32,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,        if (mti >= N) { // generate N words at one time,0,0,0,1,3,0,0,0,0,4,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,22,7,0,1,2,0,0,0,0,30,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,            for (int k = 0; k < N - M; ++k) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,                mtNext = mt[k + 1];,0,0,0,1,2,0,0,0,0,3,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,2,0,1,2,4,0,0,0,0,7,50,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,            for (int k = N - M; k < N - 1; ++k) {,0,0,0,1,3,0,0,0,0,4,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0,0,0,2,4,0,0,0,0,6,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,5,10,0,0,0,0,15,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,14,3,0,0,0,0,0,0,0,18,8,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,        y = mt[mti++];,0,0,0,1,2,0,0,0,0,3,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,8,2,0,0,0,0,4,0,0,15,15,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,12,0,0,1,2,0,2,0,0,15,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,        y ^=  y >>> 18;,0,0,0,0,0,0,0,0,0,0,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,6,2,0,1,2,1,0,0,0,8,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",10,0,0,1,3,0,0,0,0,11,38,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,1,0,0,1,0,10,0,0,11,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,1,2,1,4,0,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,    private static class DoubleIndex implements Comparable<DoubleIndex> {,0,0,0,0,1,0,0,0,0,1,69,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,        public FitnessFunction() {,0,0,0,1,3,0,0,0,0,4,26,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,8,3,0,0,0,1,0,0,0,12,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,            isRepairMode = true;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },12,3,1,0,1,3,14,8,0,53,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,2,0,0,1,3,0,0,0,0,2,19,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,6,1,0,1,2,3,4,4,0,19,61,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,            this.valueRange = valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,        },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,            final double[] lB = CMAESOptimizer.this.getLowerBound();,0,0,0,2,4,0,0,0,0,6,56,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,6,0,0,2,4,1,2,0,0,9,56,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,4,1,0,2,4,0,0,0,0,5,47,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,4,2,1,3,7,0,0,0,0,18,19,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,6,0,0,6,26,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,4,0,0,0,0,1,0,0,0,5,16,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,            double penalty = 0;,0,0,0,0,0,0,0,0,0,0,19,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,8,0,0,0,1,3,8,2,0,22,31,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,2,0,0,2,4,0,0,0,0,3,53,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,        final double[] guess = getStartPoint();,0,0,0,2,4,0,0,0,0,6,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,        dimension = guess.length;,0,0,0,0,0,0,0,0,0,0,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,        initializeCMA(guess);,0,0,0,1,2,0,0,0,0,3,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,2,0,0,0,0,0,0,0,0,2,15,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,        double bestValue = fitfun.value(guess);,0,0,0,1,2,0,0,0,0,3,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,0,0,1,2,0,0,2,0,13,32,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,        PointValuePair lastResult = null;,0,0,0,0,0,0,0,0,0,0,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,        for (iterations = 1; iterations <= maxIterations; iterations++) {,0,0,0,1,3,0,0,0,0,4,65,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,49,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,2,0,0,2,4,3,0,4,0,9,44,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,            for (int k = 0; k < lambda; k++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,2,1,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,8,2,0,1,3,0,0,0,0,11,50,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,2,0,0,1,3,1,2,0,0,5,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,                },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,45,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,1,0,2,0,7,65,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,78,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,            xmean = bestArx.multiply(weights);,0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",14,2,0,2,4,2,30,4,0,53,78,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,10,1,0,1,2,0,0,0,0,13,51,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);",0,0,0,1,2,0,0,0,0,3,55,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,0,0,1,3,0,4,0,0,7,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));",0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,2,0,1,2,4,1,0,0,0,7,47,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,            final double worstFitness = fitness[arindex[arindex.length - 1]];,0,0,0,2,4,0,0,0,0,6,65,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,            if (bestValue > bestFitness) {,0,0,0,1,3,0,0,0,0,4,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,2,1,0,0,0,0,0,0,0,3,24,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,                lastResult = optimum;,0,0,0,0,0,0,0,0,0,0,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",2,0,0,2,5,0,0,0,0,3,65,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,                if (getConvergenceChecker() != null &&,0,0,0,1,3,0,0,0,0,4,38,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,4,1,0,1,3,0,0,0,0,5,57,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,52,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,10,1,0,2,4,0,0,0,0,12,39,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,4,0,0,1,3,0,10,0,0,15,37,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",8,3,1,5,11,1,8,0,0,28,68,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,2,1,1,0,0,0,0,0,0,13,6,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,                if (sigma * sqrtDiagC[i] > stopTolUpX) {,0,0,0,2,5,0,0,0,0,7,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,            final double historyBest = min(fitnessHistory);,0,0,0,1,2,0,0,0,0,3,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,4,0,0,1,2,1,4,0,0,9,48,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,2,2,0,0,1,0,0,0,0,4,21,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,6,1,0,0,1,1,6,0,0,14,41,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,2,0,3,7,0,14,0,0,16,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,2,0,0,2,5,0,0,0,0,3,38,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",4,3,0,1,3,1,8,2,0,18,59,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);",0,0,0,1,2,0,0,0,0,3,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,10,2,0,1,2,0,8,0,0,21,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,            if (generateStatistics) {,0,0,0,1,3,0,0,0,0,4,25,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,        return optimum;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,        if (lambda <= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,1,0,0,0,7,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,        for (int i = 0; i < guess.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,            sigmaArray[i][0] = inputSigma[i];,0,0,0,3,6,0,0,0,0,9,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",4,0,0,1,2,1,0,4,0,10,71,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,4,0,0,7,51,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,6,0,0,0,0,0,0,2,0,9,19,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,2,0,0,0,0,3,0,0,0,5,62,2,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,        logMu2 = Math.log(mu + 0.5);,0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,71,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,        double sumw = 0;,0,0,0,0,0,0,0,0,0,0,16,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,9,30,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);",0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,4,1,0,1,2,0,4,0,0,10,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,        cc = (4 + mueff / dimension) /,0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,14,4,0,2,4,0,0,0,0,20,44,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",4,7,0,1,5,0,8,0,0,20,52,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);,0,0,0,3,6,0,0,0,0,9,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /",0,0,0,1,3,0,0,0,0,4,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",6,3,0,2,4,0,4,0,0,14,54,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",10,4,0,2,4,1,12,0,0,28,64,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,2,1,0,1,2,0,6,0,0,10,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,2,0,0,1,2,0,6,0,0,9,73,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,4,1,0,1,2,0,4,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,        diagC = square(diagD);,0,0,0,1,2,0,0,0,0,3,22,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);",0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",2,0,0,1,2,0,4,0,0,7,57,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,0,0,0,5,10,0,0,0,0,15,70,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,16,2,0,3,6,1,0,0,0,20,64,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,6,0,0,1,2,0,0,0,0,6,70,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,        for (int i = 0; i < historySize; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,637,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,4,1,0,1,3,0,6,0,0,12,35,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,4,1,0,0,0,1,0,0,0,6,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,4,1,0,1,2,0,6,0,0,12,31,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,657,            pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));,0,0,0,5,10,0,0,0,0,15,91,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,0,0,1,1,3,0,0,0,0,5,41,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,805,            vals[i] = vals[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,2,0,1,1,2,0,0,0,0,5,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },4,1,0,0,1,0,0,0,0,6,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,817,        final DoubleIndex[] dis = new DoubleIndex[doubles.length];,0,0,0,2,4,0,0,0,0,6,58,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",2,0,1,3,6,0,0,2,0,13,40,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,821,        Arrays.sort(dis);,0,0,0,1,2,0,0,0,0,3,17,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,6,0,0,2,4,1,6,0,0,13,46,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,13,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,826,        return indices;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,982,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",2,0,0,4,8,0,0,0,0,2,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,996,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,15,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,38,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1010,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1013,"                double e = m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1014,                d[r][c] = e * e;,0,0,0,2,4,0,0,0,0,6,16,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,0,2,0,8,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,14,3,0,2,5,0,4,0,0,23,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1028,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",8,2,1,1,2,2,0,0,0,22,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,1,4,0,0,11,66,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,6,0,1,2,5,0,0,0,0,9,47,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1059,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,0,4,8,0,0,0,0,12,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,6,2,0,14,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,1,16,0,0,19,74,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1104,            for (int i = 0; i < m.getRowDimension(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",2,0,0,3,6,0,0,0,0,3,27,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,2,2,0,7,42,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,2,4,0,16,0,0,16,43,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },4,0,0,0,1,3,8,2,0,17,1,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1140,"            Arrays.fill(d[r], 1);",0,0,0,2,4,0,0,0,0,6,21,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1142,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,        final double[][] d = new double[n][m];,0,0,0,4,8,0,8,0,0,8,38,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,6,0,0,16,29,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1154,            if (r < m) {,0,0,0,1,3,0,0,0,0,4,12,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",4,0,0,1,2,1,0,2,0,6,38,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1177,        final int rd = mat.getRowDimension();,0,0,0,1,2,0,0,0,0,3,37,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,40,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,1,0,0,0,13,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1181,            for (int c = 0; c < m * cd; c++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,8,3,0,3,6,1,0,0,0,12,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,2,0,1,4,8,1,0,0,0,5,41,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,12,1,0,0,0,0,0,0,0,14,21,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,14,2,0,1,3,1,0,0,0,18,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,2,0,1,2,4,0,0,0,0,7,16,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,6,0,0,0,0,1,0,0,0,8,14,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,6,0,0,13,31,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,12,1,0,2,5,0,4,2,0,20,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,0,0,0,7,50,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,30,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,14,47,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,8,0,0,0,0,1,2,6,0,18,8,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1236,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1258,        double min = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,30,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,16,2,0,1,3,0,0,0,0,20,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,4,1,1,2,5,0,0,0,0,10,17,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1261,                min = m[r];,0,0,0,1,2,0,0,0,0,3,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,2,0,1,4,8,1,0,0,0,7,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,79,public class CMAESOptimizer,0,0,0,0,0,0,0,0,0,0,27,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,762,         final int[] output = new int[len];,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,763,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,2,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,4,0,0,1,2,1,2,0,0,8,42,0,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,82,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,10,1,0,1,3,3,0,4,0,19,45,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",8,3,0,1,2,0,4,0,0,16,48,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,98,        final int rowCount    = getRowDimension();,2,0,1,1,2,0,0,0,0,6,42,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,99,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,112,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,113,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,115,        for (int row = 0; row < rowCount; ++row) {,16,1,0,1,3,0,0,0,0,19,42,1,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,116,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,121,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,1,1,2,0,6,0,0,13,43,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,469,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,2,4,0,12,0,0,12,40,7,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,473,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,561,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,562,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,563,"            out[i] = getEntry(i, column);",2,0,0,2,4,1,14,0,0,17,29,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,566,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,289,                sum = 0;,6,2,0,0,0,0,0,0,0,8,8,5,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,290,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,294,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,295,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,338,        if (columnData == null) {,4,1,0,1,3,0,0,0,0,7,25,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,341,        final int nRows = columnData.length;,6,0,0,0,0,1,8,0,0,15,36,3,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,342,"        final RealMatrix m = createRealMatrix(nRows, 1);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,343,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,344,"            m.setEntry(i, 0, columnData[i]);",0,0,0,2,4,0,0,0,0,6,32,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,346,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,571,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,576,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,588,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,593,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1109,            final double[][] d = new double[m.getRowDimension()][1];,2,0,0,5,10,1,4,0,0,7,56,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1110,            for (int i = 0; i < m.getColumnDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,50,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1111,"                d[i][0] = m.getEntry(i, i);",0,0,0,3,6,0,0,0,0,9,27,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1113,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,7,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,579,            realEigenvalues[i] = main[i];,0,0,1,2,4,0,0,0,0,9,29,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,580,            e[i] = secondary[i];,0,0,1,2,4,0,0,0,0,9,20,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,612,                    double delta = FastMath.abs(realEigenvalues[m]) +,12,0,0,2,4,2,2,2,0,19,49,0,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,614,                    if (FastMath.abs(e[m]) + delta == delta) {,0,0,0,3,7,0,0,0,0,10,42,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,615,                        break;,0,1,1,0,0,0,0,0,0,9,6,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,619,                    if (its == maxIter) {,4,2,0,1,3,0,8,0,0,14,21,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,623,                    its++;,0,0,0,0,0,0,0,0,0,0,6,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,624,                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);,0,0,0,5,10,0,0,0,0,15,70,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,625,                    double t = FastMath.sqrt(1 + q * q);,6,2,0,1,2,0,4,0,0,12,36,11,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,626,                    if (q < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,627,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);,0,0,0,4,8,0,0,0,0,12,61,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,629,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);,8,4,1,4,8,1,0,0,0,26,61,2,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,631,                    double u = 0.0;,6,1,1,0,0,0,8,0,0,21,15,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,632,                    double s = 1.0;,2,0,0,0,0,0,0,0,0,2,15,11,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,633,                    double c = 1.0;,0,0,0,0,0,0,0,0,0,0,15,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,635,                    for (i = m - 1; i >= j; i--) {,10,2,0,1,3,0,0,0,0,14,30,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,636,                        double p = s * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,637,                        double h = c * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,638,                        if (FastMath.abs(p) >= FastMath.abs(q)) {,6,1,0,3,7,0,0,0,0,8,41,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,639,                            c = q / p;,8,1,0,0,0,3,0,0,0,13,10,1,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,640,                            t = FastMath.sqrt(c * c + 1.0);,0,0,0,1,2,0,0,0,0,3,31,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,641,                            e[i + 1] = p * t;,8,2,1,1,2,0,0,2,0,15,17,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,642,                            s = 1.0 / t;,0,0,0,0,0,0,0,0,0,0,12,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,643,                            c = c * s;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,645,                            s = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,646,                            t = FastMath.sqrt(s * s + 1.0);,6,2,0,1,2,0,4,0,0,13,31,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,647,                            e[i + 1] = q * t;,8,2,1,1,2,0,4,0,0,18,17,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,648,                            c = 1.0 / t;,28,12,0,0,0,0,0,0,0,42,12,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,649,                            s = s * c;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,651,                        if (e[i + 1] == 0.0) {,0,0,0,2,5,0,0,0,0,7,22,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,656,                        q = realEigenvalues[i + 1] - u;,8,2,1,1,2,0,0,2,0,15,31,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,657,                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;,0,0,0,2,4,0,0,0,0,6,47,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,658,                        u = s * t;,6,1,0,0,0,0,0,0,0,8,10,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,659,                        realEigenvalues[i + 1] = q + u;,6,2,1,1,2,0,0,0,0,11,31,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,660,                        q = c * t - h;,12,3,0,0,0,0,0,0,0,16,14,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,661,                        for (int ia = 0; ia < n; ia++) {,12,1,0,1,3,0,0,0,0,15,32,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,662,                            p = z[ia][i + 1];,4,1,1,2,4,0,0,0,0,10,17,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,663,                            z[ia][i + 1] = s * z[ia][i] + c * p;,12,4,1,4,8,1,0,4,0,32,36,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,664,                            z[ia][i] = c * z[ia][i] - s * p;,6,3,1,4,8,0,0,0,0,22,32,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,667,                    if (t == 0.0 && i >= j) {,0,0,0,1,3,0,0,0,0,4,25,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,670,                    realEigenvalues[j] -= u;,0,0,0,1,2,0,0,0,0,3,24,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,671,                    e[j] = q;,2,0,1,1,2,0,0,0,0,7,9,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,672,                    e[m] = 0.0;,0,0,1,1,2,0,0,0,0,5,11,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,682,                if (realEigenvalues[j] > p) {,2,1,1,2,5,0,0,0,0,7,29,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,683,                    k = j;,6,0,0,0,0,0,0,0,0,8,6,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,684,                    p = realEigenvalues[j];,6,1,1,1,2,0,0,0,0,13,23,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,688,                realEigenvalues[k] = realEigenvalues[i];,0,0,1,2,4,0,0,0,0,9,40,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,689,                realEigenvalues[i] = p;,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,690,                for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,691,                    p = z[j][i];,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,692,                    z[j][i] = z[j][k];,0,0,1,4,8,0,0,0,0,13,18,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,693,                    z[j][k] = p;,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,104,                final double[] hK = householderVectors[k - 1];,4,1,1,2,4,1,0,0,0,8,46,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,105,                qta[k][k] = 1;,0,0,1,2,4,0,0,0,0,7,14,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,106,                if (hK[k] != 0.0) {,0,1,1,2,5,0,0,0,0,5,19,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,107,                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);,4,3,1,3,6,1,0,0,0,14,52,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,108,                    double beta = 1.0 / secondary[k - 1];,4,2,1,1,2,0,0,0,0,8,37,11,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,109,                    qta[k][k] = 1 + beta * hK[k];,2,2,1,3,6,0,0,0,0,15,29,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,110,                    for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,111,                        qta[k][i] = beta * hK[i];,0,0,0,3,6,0,0,0,0,9,25,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,113,                    for (int j = k + 1; j < m; ++j) {,18,4,0,1,3,0,0,0,0,23,33,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,114,                        beta = 0;,6,0,0,0,0,0,0,0,0,8,9,5,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,115,                        for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,116,                            beta += qta[j][i] * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,118,                        beta *= inv;,4,0,0,0,0,0,0,0,0,5,12,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,119,                        qta[j][k] = beta * hK[k];,2,1,1,3,6,0,0,0,0,14,25,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,120,                        for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,121,                            qta[j][i] += beta * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,198,            final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,199,            main[k] = hK[k];,0,0,0,2,4,0,0,0,0,6,16,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,200,            double xNormSqr = 0;,6,1,0,0,0,0,0,0,0,8,20,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,201,            for (int j = k + 1; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,202,                final double c = hK[j];,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,203,                xNormSqr += c * c;,0,0,0,0,0,0,0,0,0,0,18,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,205,            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);,4,2,1,4,8,1,12,0,0,22,86,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,206,            secondary[k] = a;,2,0,1,1,2,0,0,0,0,7,17,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,207,            if (a != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,210,                hK[k + 1] -= a;,4,1,1,1,2,0,0,0,0,8,15,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,211,                final double beta = -1 / (a * hK[k + 1]);,6,1,0,2,4,0,0,0,0,8,41,6,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,217,"                Arrays.fill(z, k + 1, m, 0);",2,1,0,1,2,0,8,0,0,11,28,9,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,218,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,219,                    final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,220,                    final double hKI = hK[i];,0,1,1,1,2,0,0,0,0,8,25,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,221,                    double zI = hI[i] * hKI;,8,2,1,1,2,0,8,0,0,23,24,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,222,                    for (int j = i + 1; j < m; ++j) {,12,2,0,1,3,0,0,0,0,15,33,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,223,                        final double hIJ = hI[j];,2,0,1,1,2,1,0,0,0,7,25,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,224,                        zI   += hIJ * hK[j];,4,1,1,1,2,0,0,0,0,10,20,12,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,225,                        z[j] += hIJ * hKI;,6,2,1,1,2,0,0,4,0,22,18,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,227,                    z[i] = beta * (z[i] + zI);,4,2,1,3,6,0,0,0,0,15,26,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,231,                double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,9,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,232,                for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,233,                    gamma += z[i] * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,235,                gamma *= beta / 2;,12,2,0,0,0,0,0,0,0,16,18,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,238,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,239,                    z[i] -= gamma * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,244,                for (int i = k + 1; i < m; ++i) {,14,2,0,1,3,0,0,0,0,18,33,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,245,                    final double[] hI = householderVectors[i];,4,0,1,2,4,1,0,0,0,9,42,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,246,                    for (int j = i; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,247,                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];,0,0,0,5,10,0,0,0,0,15,37,4,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,400,"                final double mij = matrix.getEntry(i, j);",2,2,0,1,2,1,20,2,0,27,41,3,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,401,"                final double mji = matrix.getEntry(j, i);",2,0,0,1,2,1,8,0,0,11,41,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,402,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,17.30769,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,104,        if (Double.isNaN(nextGaussian)) {,2,0,0,2,5,0,0,0,0,3,33,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,106,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,107,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,108,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,110,            random       = r * FastMath.cos(alpha);,4,1,0,1,2,0,8,2,0,16,39,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,111,            nextGaussian = r * FastMath.sin(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,112,        } else {,4,0,0,0,2,0,0,0,0,5,8,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,114,            random = nextGaussian;,4,0,0,0,0,0,0,0,0,5,22,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,115,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,118,        return random;,0,0,0,0,0,1,0,0,0,1,14,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,560,            for (int i = 0; i < init.length; i++) {,12,1,0,1,3,0,0,4,0,19,39,1,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,561,                if (inputSigma[i] > uB[i] - lB[i]) {,2,3,1,4,9,0,0,0,0,17,36,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1184,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1185,                double xb = xa - x + 1.0;,0,0,0,0,0,0,0,0,0,0,25,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1186,                double tmp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,9,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1187,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1188,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1189,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1190,                xb = ab;,0,0,0,0,0,0,0,0,0,0,8,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0,0,0,2,4,0,0,0,0,6,69,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1193,                double ya = lnCoef_last[0];,2,0,0,1,2,1,0,0,0,3,27,2,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1194,                double yb = lnCoef_last[1];,0,0,0,1,2,0,0,0,0,3,27,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1198,                    aa = ya * xa;,14,1,0,0,0,0,0,0,0,16,13,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1199,                    ab = ya * xb + yb * xa + yb * xb;,14,6,0,0,0,0,18,0,0,39,33,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1201,                    tmp = aa * HEX_40000000;,14,2,0,0,0,0,0,0,0,18,24,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1202,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1203,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,2,0,1,2,4,1,0,0,0,7,43,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1207,                    aa = ya + lnCoef_i[0];,4,1,1,1,2,0,0,0,0,8,22,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1208,                    ab = yb + lnCoef_i[1];,10,4,1,1,2,0,0,0,0,20,22,3,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1210,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1211,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1212,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1216,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1217,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1219,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1220,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1221,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1223,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,17.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,90,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,91,        final int  low  = next(26);,10,1,0,1,2,1,2,2,0,16,27,3,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,92,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,534,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,535,            if (data instanceof Sigma) {,2,0,0,1,3,0,0,2,0,4,28,7,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,536,                inputSigma = ((Sigma) data).getSigma();,4,0,0,3,6,0,2,2,0,9,39,8,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,537,                continue;,8,1,0,0,0,0,0,0,0,10,9,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,539,            if (data instanceof PopulationSize) {,0,0,0,1,3,0,0,0,0,4,37,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,540,                lambda = ((PopulationSize) data).getPopulationSize();,4,0,0,3,6,0,2,2,0,9,53,8,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,541,                continue;,4,0,0,0,0,0,0,2,0,6,9,7,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,545,        checkParameters();,0,0,0,1,2,0,0,0,0,3,18,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,552,        final double[] init = getStartPoint();,0,0,0,2,4,0,0,0,0,6,38,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,553,        final double[] lB = getLowerBound();,12,1,0,2,4,1,2,0,0,17,36,3,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,554,        final double[] uB = getUpperBound();,2,0,0,2,4,1,2,0,0,5,36,4,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,556,        if (inputSigma != null) {,6,2,0,1,3,0,6,0,0,15,25,3,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,557,            if (inputSigma.length != init.length) {,14,4,0,1,3,0,0,0,0,18,39,3,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,304,            return sigma.clone();,0,0,1,1,2,1,14,0,0,19,21,1,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,338,            return lambda;,2,0,0,0,0,1,0,0,0,2,14,5,16.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,398,                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),2,0,0,2,5,0,14,0,0,17,52,13,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,428,"                updateCovariance(hsig, bestArx, arz, arindex, xold);",0,0,0,1,2,0,0,0,0,3,52,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,703,        double negccov = 0;,8,1,0,0,0,0,0,0,0,10,19,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,704,        if (ccov1 + ccovmu > 0) {,14,5,1,1,3,0,6,0,0,29,25,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,705,"            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",6,1,1,2,4,1,10,2,0,23,62,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,707,            final RealMatrix roneu = pc.multiply(pc.transpose()),0,0,0,2,4,0,0,0,0,6,52,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,710,            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);,10,2,0,1,2,0,0,0,0,12,49,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,711,            oldFac += 1 - ccov1 - ccovmu;,6,1,0,0,0,0,0,0,0,8,29,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,712,            if (isActiveCMA) {,0,0,0,1,3,0,0,0,0,4,18,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,714,                negccov = (1 - ccovmu) * 0.25 * mueff /,0,0,0,1,2,0,0,0,0,3,39,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,718,                final double negminresidualvariance = 0.66;,0,0,0,0,0,0,0,0,0,0,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,720,                final double negalphaold = 0.5;,10,8,0,0,0,1,0,0,0,20,31,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,722,                final int[] arReverseIndex = reverse(arindex);,2,0,0,2,4,1,4,0,0,7,46,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,723,"                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));",2,0,0,2,4,0,12,2,0,16,78,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,724,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,14,2,0,3,6,0,0,0,0,16,51,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,725,                final int[] idxnorms = sortedIndices(arnorms.getRow(0));,12,1,0,3,6,1,6,0,0,21,56,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,726,"                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,1,6,2,0,11,66,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,727,                final int[] idxReverse = reverse(idxnorms);,0,0,0,2,4,0,0,0,0,6,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,728,"                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,1,6,2,0,11,69,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,729,"                arnorms = divide(arnormsReverse, arnormsSorted);",0,0,0,1,2,0,0,0,0,3,48,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,730,                final int[] idxInv = inverse(idxnorms);,2,0,0,2,4,1,4,0,0,7,39,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,731,"                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",2,0,0,1,2,1,6,2,0,11,61,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,733,                final double negcovMax = (1 - negminresidualvariance) /,10,3,0,1,2,1,0,0,0,15,55,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,735,                if (negccov > negcovMax) {,0,0,0,1,3,0,0,0,0,4,26,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,738,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",14,1,0,2,4,0,10,0,0,28,57,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,739,                final RealMatrix artmp = BD.multiply(arzneg);,2,0,0,1,2,1,6,2,0,11,45,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,740,                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());,2,0,0,4,8,1,14,2,0,19,82,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,741,                oldFac += negalphaold * negccov;,18,4,0,0,0,0,0,0,0,24,32,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,742,                C = C.scalarMultiply(oldFac),0,0,0,1,2,0,8,0,0,8,28,9,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,749,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,758,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,759,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,767,        if (ccov1 + ccovmu + negccov > 0 &&,8,3,0,0,1,0,0,0,0,13,35,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,770,"            C = triu(C, 0).add(triu(C, 1).transpose());",0,0,0,4,8,0,0,0,0,12,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,772,            final EigenDecomposition eig = new EigenDecomposition(C);,4,0,0,1,2,1,0,4,0,9,57,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,773,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",2,0,0,1,2,0,4,0,0,7,66,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,774,            D = eig.getD();,2,0,0,1,2,0,4,0,0,7,15,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,775,            diagD = diag(D);,8,0,0,1,2,1,6,0,0,16,16,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,776,            if (min(diagD) <= 0) {,0,0,0,2,5,0,0,0,0,7,22,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,786,            if (max(diagD) > 1e14 * min(diagD)) {,0,2,0,3,7,0,8,0,0,10,37,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,791,            diagC = diag(C);,2,0,0,1,2,0,4,0,0,7,16,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,792,            diagD = sqrt(diagD); // D contains standard deviations now,2,0,0,1,2,0,4,0,0,7,58,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,793,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",2,0,0,4,8,0,12,0,0,15,65,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,795,    },2,1,0,0,1,0,0,0,0,3,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1041,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1042,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1043,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1044,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1047,"        return new Array2DRowRealMatrix(d, false);",2,2,0,1,2,1,0,0,0,4,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1071,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1072,        for (int r = 0; r < m.getRowDimension(); r++) {,14,2,0,2,5,0,4,0,0,23,47,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1073,            for (int c = 0; c < m.getColumnDimension(); c++) {,12,1,0,2,5,0,4,0,0,19,50,1,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1074,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",0,0,0,3,6,0,0,0,0,9,44,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1077,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1085,        final double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,1,4,0,0,7,59,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1086,        for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1087,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1088,            for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1089,"                sum += m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,11,24,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1091,            d[0][c] = sum;,0,0,0,2,4,0,0,0,0,6,14,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1093,"        return new Array2DRowRealMatrix(d, false);",8,4,0,1,2,1,10,2,0,26,42,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1272,        final int[] inverse = new int[indices.length];,16,1,0,2,4,1,0,0,0,20,46,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1273,        for (int i = 0; i < indices.length; i++) {,12,1,0,1,3,0,0,0,0,15,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1274,            inverse[indices[i]] = i;,0,0,0,2,4,0,0,0,0,6,24,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1276,        return inverse;,14,4,0,0,0,1,8,0,0,27,15,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1284,        final int[] reverse = new int[indices.length];,6,0,0,2,4,1,0,0,0,7,46,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1285,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1286,            reverse[i] = indices[indices.length - i - 1];,6,1,1,2,4,0,0,0,0,14,45,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1288,        return reverse;,2,0,0,0,0,1,0,0,0,2,15,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,522,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,12,0,0,12,40,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,530,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,118,        throws MathArithmeticException {,2,0,0,0,1,0,0,0,0,2,32,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,81,    private byte maxIter = 30;,2,0,0,0,0,1,0,0,0,3,26,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,119,        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;,0,0,1,2,4,0,0,0,0,3,102,10,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",0,0,0,1,2,0,0,0,0,3,54,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,121,        if (isSymmetric) {,0,0,0,1,3,0,0,0,0,4,18,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,122,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,123,            findEigenVectors(transformer.getQ().getData());,0,0,0,3,6,0,0,0,0,9,47,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,128,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,199,        if (cachedV == null) {,6,0,1,1,3,1,0,0,0,10,22,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,200,            final int m = eigenvectors.length;,0,0,0,0,0,0,0,0,0,0,34,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,201,"            cachedV = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,202,            for (int k = 0; k < m; ++k) {,0,0,0,1,3,0,0,0,0,4,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,203,"                cachedV.setColumnVector(k, eigenvectors[k]);",6,1,0,2,4,0,0,0,0,8,44,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,207,        return cachedV;,6,1,1,0,0,1,0,0,0,12,15,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,223,        if (cachedD == null) {,2,1,0,1,3,0,0,0,0,3,22,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,225,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,0,0,0,1,2,0,0,0,0,3,64,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,227,            for (int i = 0; i < imagEigenvalues.length; i++) {,0,0,0,1,3,0,0,0,0,4,50,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,228,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,230,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",0,0,0,3,8,0,0,0,0,11,71,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,235,        return cachedD;,2,0,0,0,0,1,0,0,0,2,15,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,561,        transformer = new TriDiagonalTransformer(matrix);,0,0,0,1,2,0,0,0,0,3,49,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,562,        main = transformer.getMainDiagonalRef();,2,0,0,1,2,0,12,0,0,15,40,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,563,        secondary = transformer.getSecondaryDiagonalRef();,2,0,0,1,2,0,4,0,0,7,50,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,564,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,573,        final double[][]z = householderMatrix.clone();,2,0,0,3,6,1,4,0,0,7,46,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,574,        final int n = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,575,        realEigenvalues = new double[n];,4,1,1,1,2,0,0,0,0,8,32,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,576,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,577,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,578,        for (int i = 0; i < n - 1; i++) {,8,2,0,1,3,0,0,0,0,11,33,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,582,        realEigenvalues[n - 1] = main[n - 1];,0,0,0,2,4,0,0,0,0,6,37,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,583,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,586,        double maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,2,28,5,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,587,        for (int i = 0; i < n; i++) {,12,1,0,1,3,0,0,0,0,14,29,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,52,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,44,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,596,        if (maxAbsoluteValue != 0) {,4,1,0,1,3,0,0,0,0,5,28,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,597,            for (int i=0; i < n; i++) {,6,0,0,1,3,0,0,0,0,9,27,0,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,10,2,0,3,7,0,0,0,0,12,79,1,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,601,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,65,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,602,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,607,        for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,608,            int its = 0;,2,0,0,0,0,0,0,0,0,2,12,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,611,                for (m = j; m < n - 1; m++) {,10,2,0,1,3,0,0,0,0,14,29,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,618,                if (m != j) {,8,1,0,1,3,0,0,0,0,10,13,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,674,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,678,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,679,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,680,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,681,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,687,            if (k != i) {,10,2,0,1,3,0,0,0,0,13,13,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,699,        maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,3,21,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,700,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,702,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,50,8,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,706,        if (maxAbsoluteValue != 0.0) {,0,0,0,1,3,0,0,0,0,4,30,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,707,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,78,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,713,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,714,        final double[] tmp = new double[n];,0,0,0,2,4,0,0,0,0,6,35,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,715,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,716,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,717,                tmp[j] = z[j][i];,0,0,0,3,6,0,0,0,0,9,17,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,719,            eigenvectors[i] = new ArrayRealVector(tmp);,4,1,1,2,4,1,0,2,0,21,43,5,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,721,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,62,    public TriDiagonalTransformer(RealMatrix matrix) {,4,0,0,1,3,1,0,4,0,9,50,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,68,        final int m = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,39,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,71,        secondary = new double[m - 1];,4,1,0,1,2,0,0,0,0,6,30,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,72,        cachedQ   = null;,4,0,0,0,0,0,0,2,0,7,17,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,74,        cachedT   = null;,4,0,1,0,0,0,0,0,0,8,17,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,78,    },0,0,0,0,1,0,4,0,0,5,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,98,        if (cachedQt == null) {,0,0,0,1,3,0,0,0,0,4,23,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,100,            double[][] qta = new double[m][m];,4,0,1,4,8,0,0,2,0,10,34,2,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,103,            for (int k = m - 1; k >= 1; --k) {,0,0,0,1,3,0,0,0,0,4,34,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,126,            qta[0][0] = 1;,6,1,1,2,4,0,0,0,0,10,14,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,4,0,0,1,2,0,6,0,0,11,45,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,131,        return cachedQt;,2,0,0,0,0,1,0,0,0,2,16,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,175,        return main;,2,0,0,0,0,1,4,0,0,6,12,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,185,        return secondary;,8,1,0,0,0,1,0,0,0,9,17,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,193,        final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,194,        final double[] z = new double[m];,10,2,1,2,4,1,0,0,0,16,33,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,195,        for (int k = 0; k < m - 1; k++) {,0,0,0,1,3,0,0,0,0,4,33,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,253,    },0,0,0,0,1,0,0,0,0,1,1,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,215,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",10,0,0,1,2,1,2,2,0,15,72,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,216,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,217,"            m.setEntry(i, i, diagonal[i]);",4,1,1,2,4,0,8,0,0,17,30,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,219,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,390,        final int rows = matrix.getRowDimension();,8,1,0,1,2,1,4,0,0,15,42,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,391,        if (rows != matrix.getColumnDimension()) {,2,1,0,2,5,0,4,0,0,7,42,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,398,        for (int i = 0; i < rows; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,399,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,412,        return true;,0,0,0,0,0,1,8,0,0,10,12,3,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,439,"        return isSymmetricInternal(matrix, eps, false);",4,0,0,1,2,1,0,0,0,5,47,4,15.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,6,114,        return count;,8,2,1,0,0,1,0,0,0,15,13,3,14.51852,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,363,        return super.optimize(optData);,10,1,0,1,2,2,0,0,0,12,31,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,530,        super.parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,37,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,297,            sigma = s.clone();,0,0,0,1,2,0,0,0,0,3,18,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,298,        },0,0,0,0,1,0,0,0,0,1,1,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,327,            throws NotStrictlyPositiveException {,0,0,0,0,1,0,0,0,0,1,37,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,328,            if (size <= 0) {,2,1,0,1,3,0,0,0,0,3,16,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,331,            lambda = size;,0,0,0,0,0,0,0,0,0,0,14,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,332,        },0,0,0,0,1,0,0,0,0,1,1,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,51,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,144,        final int nCols = m.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,146,"        final RealMatrix out = createMatrix(nRows, nCols);",2,0,0,1,2,1,6,2,0,11,50,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,148,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,149,                double sum = 0;,4,0,0,0,0,1,0,0,0,5,15,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0,0,0,2,4,0,0,0,0,6,45,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,153,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,0,0,0,3,28,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,157,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,599,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,600,"        final RealMatrix out = createMatrix(nCols, nRows);",6,0,0,1,2,1,6,2,0,15,50,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,1,0,1,4,0,2,2,0,12,63,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,611,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,873,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,414,            final double[] rowI = data[i];,4,0,1,2,4,2,0,4,0,14,30,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,415,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,416,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,419,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,34,    },8,2,0,0,1,0,0,0,0,11,1,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,606,"                out.setEntry(column, row, value);",4,3,0,1,2,0,0,0,0,7,33,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,607,            },0,0,0,0,1,0,0,0,0,1,1,4,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,81,        return (rows * columns <= 4096) ?,4,2,0,1,2,1,6,0,0,12,33,3,13.47368,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,115,        super.incrementEvaluationCount();,0,0,0,1,2,0,0,0,0,3,33,4,13.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,116,        return function.value(params);,0,0,0,1,2,1,6,0,0,6,30,5,13.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,106,    public MersenneTwister() {,2,0,0,1,3,1,0,0,0,3,26,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,107,        mt = new int[N];,6,1,0,1,2,0,0,0,0,8,16,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,108,        setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,109,    },2,0,0,0,1,0,0,0,0,3,1,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,144,        long longMT = seed;,8,0,0,0,0,0,2,0,0,10,19,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,146,        mt[0]= (int) longMT;,2,0,1,2,4,0,0,0,0,5,20,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,8,5,0,3,6,0,0,0,0,14,71,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,151,            mt[mti]= (int) longMT;,12,3,1,2,4,0,0,0,0,26,22,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,38,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,155,    },6,1,0,0,1,0,0,0,0,7,1,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,173,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",0,0,0,2,5,0,0,0,0,7,57,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,182,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,184,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,186,            if (j >= seed.length) {,0,0,0,1,3,0,0,0,0,4,23,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,187,                j = 0;,0,0,0,0,0,0,0,0,0,0,6,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,0,0,0,4,8,0,0,0,0,12,69,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,196,            i++;,2,0,0,0,0,0,0,0,0,3,4,6,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,197,            if (i >= N) {,12,2,0,1,3,0,0,0,0,15,13,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,38,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,207,    },0,0,0,0,1,0,0,0,0,1,1,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",8,3,0,7,14,0,2,0,0,13,71,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,217,    },2,0,0,0,1,1,0,0,0,3,1,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,231,        super(checker);,4,0,0,1,2,0,6,0,0,10,15,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,119,    private boolean isMinimize = true;,2,0,0,0,0,1,0,0,0,4,34,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,200,    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();,2,0,0,1,2,2,0,8,0,12,76,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,202,    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();,2,0,0,1,2,2,0,8,0,12,83,2,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,204,    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();,0,0,0,1,2,0,4,0,0,4,78,5,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,206,    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();,0,0,0,1,2,0,0,0,0,3,80,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,232,        this.maxIterations = maxIterations;,6,1,0,0,0,0,4,0,0,12,35,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,233,        this.stopFitness = stopFitness;,4,0,0,0,0,0,0,0,0,5,31,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,234,        this.isActiveCMA = isActiveCMA;,0,0,0,0,0,0,0,0,0,0,31,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,235,        this.diagonalOnly = diagonalOnly;,4,0,0,0,0,0,0,0,0,5,33,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,236,        this.checkFeasableCount = checkFeasableCount;,4,0,0,0,0,0,0,0,0,5,45,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,237,        this.random = random;,0,0,0,0,0,0,0,0,0,0,21,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,238,        this.generateStatistics = generateStatistics;,6,0,0,0,0,0,0,0,0,7,45,3,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,239,    },4,0,0,0,1,0,6,0,0,10,1,10,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,290,            throws NotPositiveException {,4,1,0,0,1,0,0,0,0,5,29,1,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,291,            for (int i = 0; i < s.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,292,                if (s[i] < 0) {,2,1,1,2,5,0,0,0,0,7,15,1,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3489,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,12.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2274,"                return sinQ(xa, xb);",0,0,0,1,2,1,12,0,0,12,20,3,12.56522,0,0,-1
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,70,        final double[] p = getKey();,2,0,0,2,4,1,2,0,0,5,28,4,12.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,71,        return p == null ? null : p.clone();,0,0,0,1,2,1,0,0,0,4,36,4,12.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2276,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,12.04167,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,42,    },0,0,0,0,1,0,0,0,0,1,1,4,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,195,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,196,    },8,2,0,0,1,0,0,2,0,12,1,5,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2334,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,11.63636,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,91,                function = ((ObjectiveFunction) data).getObjectiveFunction();,0,0,0,3,6,0,0,0,0,9,61,4,11.45763,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,92,                continue;,4,0,0,0,0,3,0,0,0,7,9,1,11.45763,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,45,        return function;,0,0,0,0,0,1,0,0,0,1,16,4,11.45763,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2293,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2296,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2297,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2306,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2307,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2317,            final CodyWaite cw = new CodyWaite(xa);,2,0,0,1,2,0,0,0,0,2,39,8,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2318,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2319,            xa = cw.getRemA();,2,0,0,1,2,0,4,0,0,7,18,7,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2320,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2326,        switch (quadrant) {,0,0,0,1,3,0,0,0,0,4,19,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2328,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2330,"                return -sinQ(xa, xb);",4,1,0,1,2,1,0,0,0,5,21,9,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2332,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,11.13043,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2280,"                return -cosQ(xa, xb);",2,0,0,1,2,1,12,0,0,16,21,4,10.7037,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,35,    public ObjectiveFunction(MultivariateFunction f) {,4,0,0,1,3,1,0,2,0,7,50,2,10.4,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,36,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,10.4,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,37,    },6,1,0,0,1,0,0,0,0,8,1,4,10.4,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3808,        CodyWaite(double xa) {,0,0,0,1,3,0,0,0,0,4,22,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3811,            int k = (int)(xa * 0.6366197723675814);,8,1,0,2,4,1,0,4,0,14,39,1,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3817,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3818,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3819,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3821,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3822,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3823,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3824,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3826,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3827,                b = remA;,6,0,0,0,0,1,10,0,0,18,9,1,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3828,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3829,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3831,                if (remA > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3832,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3841,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3842,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3843,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3844,        },0,0,0,0,1,0,0,0,0,1,1,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3850,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3856,            return finalRemA;,0,0,0,0,0,1,0,0,0,1,17,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3862,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1678,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1680,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1681,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1682,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1683,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1686,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1688,        return p;,8,3,0,0,0,1,0,0,0,11,9,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1698,        double x2 = x*x;,8,1,0,0,0,0,0,0,0,11,16,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1700,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1701,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1702,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1703,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1704,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1706,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1717,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1721,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1722,        final double sintB = SINE_TABLE_B[idx];,4,0,0,1,2,0,6,2,0,12,39,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1723,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1724,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1727,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1728,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1729,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1730,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1733,        final double temp = sinEpsA * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,43,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1734,        double temp2 = (sinEpsA + temp) - temp;,14,2,0,1,2,1,0,0,0,17,39,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1735,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1736,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1762,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1763,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1765,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1766,        double c = a + t;,6,1,0,0,0,0,0,0,0,8,17,6,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1767,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1768,        a = c;,12,1,0,0,0,0,0,0,0,15,6,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1769,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1771,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1772,        c = a + t;,12,2,0,0,0,1,0,0,0,16,10,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1773,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1774,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1775,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,20,6,0,0,0,0,0,0,0,27,42,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,22,6,0,0,0,0,8,0,0,37,68,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1819,        if (xb != 0.0) {,6,0,0,1,3,1,4,0,0,12,16,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,12,5,0,2,5,0,4,0,0,23,44,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1822,            c = a + t;,8,1,0,0,0,0,0,0,0,10,10,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1823,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1824,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1825,            b = b + d;,6,1,0,0,0,0,0,0,0,8,10,6,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1828,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1830,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1841,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1842,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1844,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1845,        double b = -(a - pi2a + xa);,8,2,0,1,2,1,4,0,0,16,28,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1846,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1848,"        return sinQ(a, b);",0,0,0,1,2,1,0,0,0,4,18,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2226,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2227,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2229,        double xb = 0.0;,2,0,0,0,0,0,0,2,0,4,16,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2232,        xa = x;,6,1,0,0,0,0,0,0,0,9,7,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2233,        if (x < 0) {,14,2,0,1,3,0,0,0,0,17,12,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2239,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2252,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2262,            final CodyWaite cw = new CodyWaite(xa);,12,1,0,1,2,1,0,4,0,20,39,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2263,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2264,            xa = cw.getRemA();,4,0,0,1,2,1,4,8,0,18,18,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2265,            xb = cw.getRemB();,20,6,0,1,2,0,4,0,0,32,18,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2268,        if (negative) {,8,1,0,1,3,1,0,0,0,10,15,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2272,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,2278,"                return -sinQ(xa, xb);",2,1,0,1,2,1,6,0,0,10,21,3,10.32143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,6174,        return LN_MANT.clone();,0,0,0,1,2,1,0,0,0,4,23,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3777,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,8,2,1,1,2,0,4,0,0,23,45,1,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1120,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1133,        long bits = Double.doubleToLongBits(x);,8,3,0,1,2,0,8,2,0,22,39,3,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1147,        if (x == Double.POSITIVE_INFINITY) {,10,4,0,1,3,1,0,0,0,15,36,6,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1156,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1178,        if (exp == -1 || exp == 0) {,12,5,0,1,3,0,6,0,0,24,28,3,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,79,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,2,0,0,3,6,1,0,0,0,3,95,2,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1241,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1242,        double lnzb = 0.0;,4,0,0,0,0,0,0,0,0,6,18,6,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1244,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1297,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1299,            lnza = lnza * epsilon + -0.2499999997677497;,8,3,0,0,0,0,0,0,0,13,44,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0,0,0,0,0,0,0,0,0,0,43,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1301,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1302,            lnza = lnza * epsilon + 1.0;,8,3,1,0,0,0,0,0,0,21,28,3,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,6,1303,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,9.84615,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,0,0,0,0,0,1,0,0,0,1,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,0,0,0,0,0,0,0,0,0,0,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",6,3,1,1,2,0,0,0,0,15,25,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,3,7,0,0,0,0,6,22,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,14,0,0,0,0,0,0,0,0,19,20,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0,0,1,1,4,0,2,0,0,8,35,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,            x[signChangeIndex] = nextX;,0,0,0,1,2,0,0,0,0,3,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",6,2,0,1,2,0,10,0,0,18,89,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,2,0,0,1,2,3,0,0,0,5,27,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,2,0,0,0,0,0,0,0,0,3,11,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,            if (nextY * yA <= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,                xB = nextX;,0,0,0,0,0,0,0,0,0,0,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,                absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,                ++agingA;,0,0,0,0,0,0,0,0,0,0,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,2,0,0,0,0,0,0,8,0,10,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },12,3,0,0,1,0,6,0,0,22,1,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,1,2,3,0,0,0,5,44,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);",0,0,0,1,2,0,0,0,0,3,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,364,                if (needReset) {,4,1,0,1,3,0,0,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,343,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,8,4,0,4,9,0,16,0,0,29,77,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,347,        if (nextAction == EventHandler.Action.RESET_STATE) {,0,0,0,1,3,0,0,0,0,4,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,350,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,351,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,353,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,1,1,2,1,0,0,0,12,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,150,        final double[] x = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,151,        final double[] y = new double[maximalOrder + 1];,4,1,0,2,4,1,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,152,        x[0] = getMin();,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,153,        x[1] = getStartValue();,0,0,0,2,4,0,0,0,0,6,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,154,        x[2] = getMax();,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,155,"        verifySequence(x[0], x[1], x[2]);",0,0,1,4,8,0,2,0,0,8,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,158,        y[1] = computeObjectiveValue(x[1]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,159,"        if (Precision.equals(y[1], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,165,        y[0] = computeObjectiveValue(x[0]);,30,7,1,3,6,1,12,0,0,55,35,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,166,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,173,        if (y[0] * y[1] < 0) {,4,3,1,3,7,0,4,0,0,15,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,199,        final double[] tmpX = new double[x.length];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,202,        double xA    = x[signChangeIndex - 1];,8,2,1,1,2,0,0,0,0,13,38,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,203,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,204,        double absYA = FastMath.abs(yA);,4,0,0,1,2,0,6,0,0,11,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,205,        int agingA   = 0;,6,0,0,0,0,0,0,0,0,6,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,206,        double xB    = x[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,207,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,208,        double absYB = FastMath.abs(yB);,2,0,0,1,2,0,6,0,0,8,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,209,        int agingB   = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,215,            final double xTol = getAbsoluteAccuracy() +,2,0,0,1,2,3,0,0,0,5,43,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,217,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",4,0,0,6,13,0,0,0,0,5,87,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,237,            if (agingA >= MAXIMAL_AGING) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,251,                targetY = 0;,2,0,0,0,0,3,6,0,0,11,12,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,256,            int start = 0;,14,2,0,0,0,0,2,0,0,21,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,257,            int end   = nbPoints;,4,0,0,0,0,0,0,0,0,5,21,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,261,"                System.arraycopy(x, start, tmpX, start, end - start);",4,1,0,1,2,0,12,0,0,17,53,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,262,"                nextX = guessX(targetY, tmpX, y, start, end);",0,0,0,1,2,0,0,0,0,3,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,264,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,283,            } while (Double.isNaN(nextX) && (end - start > 1));,12,4,0,3,7,0,6,0,0,22,51,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,285,            if (Double.isNaN(nextX)) {,4,1,1,2,5,0,6,0,0,14,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,293,            final double nextY = computeObjectiveValue(nextX);,0,0,0,1,2,0,0,0,0,3,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,294,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,375,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,0,0,0,13,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,376,            final int delta = i + 1 - start;,14,2,1,0,0,0,0,0,0,28,32,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,377,            for (int j = end - 1; j > i; --j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,378,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,31,47,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,383,        double x0 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,384,        for (int j = end - 1; j >= start; --j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,385,            x0 = x[j] + x0 * (targetY - y[j]);,6,3,1,3,6,0,0,0,0,18,34,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,388,        return x0;,0,0,0,0,0,1,6,0,0,6,10,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,398,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,399,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,127,"        addEventHandler(handler, maxCheckInterval, convergence,",0,0,0,0,1,0,8,0,0,8,55,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,325,                    occuringEvents.add(state);,0,0,0,1,2,0,6,0,0,6,26,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,332,                final Iterator<EventState> iterator = occuringEvents.iterator();,2,0,0,1,2,1,4,4,0,11,64,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,333,                final EventState currentEvent = iterator.next();,0,0,0,1,2,0,0,0,0,3,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,334,                iterator.remove();,12,4,0,1,2,1,4,0,0,21,18,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,337,                final double eventT = currentEvent.getEventTime();,2,0,0,1,2,1,4,0,0,7,50,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,338,                interpolator.setSoftPreviousTime(previousT);,0,0,0,1,2,0,12,0,0,13,44,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,339,                interpolator.setSoftCurrentTime(eventT);,0,0,0,1,2,0,0,0,0,3,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,342,                interpolator.setInterpolatedTime(eventT);,0,0,0,1,2,0,6,0,0,6,41,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,343,                final double[] eventY = interpolator.getInterpolatedState().clone();,2,0,0,3,6,1,6,0,0,9,68,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,346,"                currentEvent.stepAccepted(eventT, eventY);",0,0,0,1,2,0,8,0,0,8,42,7,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,2,0,0,1,2,0,4,0,0,7,33,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,350,                for (final StepHandler handler : stepHandlers) {,8,0,0,1,3,1,0,2,0,12,48,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,354,                if (isLastStep) {,2,0,0,1,3,0,0,0,0,2,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,242,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,321,      this.softPreviousTime = softPreviousTime;,8,1,0,0,0,0,4,0,0,14,41,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,322,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,335,      this.softCurrentTime  = softCurrentTime;,4,0,0,0,0,0,0,0,0,5,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,336,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,317,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());",2,1,0,3,6,1,12,0,0,15,77,11,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,84,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,85,        if (maximalOrder < 2) {,2,1,0,1,3,0,0,0,0,3,23,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,88,        this.maximalOrder = maximalOrder;,16,5,0,0,0,0,0,0,0,22,33,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,89,        this.allowed = AllowedSolution.ANY_SIDE;,10,0,0,0,0,0,0,0,0,12,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,90,    },2,0,1,0,1,1,0,0,0,5,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,124,        return searchStart;,2,0,0,0,0,1,0,0,0,2,19,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,201,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,277,"        UnivariateSolverUtils.verifySequence(lower, initial, upper);",8,2,0,1,2,0,10,0,0,21,60,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,278,    },2,0,0,0,1,0,0,0,0,2,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,372,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,373,"        verifyInterval(initial, upper);",0,0,0,1,2,0,6,0,0,6,31,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,374,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,237,                        BracketedUnivariateSolver<UnivariateFunction> bracketing =,0,0,0,0,0,0,0,0,0,0,58,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,239,                        root = forward ?,6,0,0,0,0,0,4,0,0,12,16,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,256,                    if ((!Double.isNaN(previousEventTime)) &&,0,1,0,2,5,0,6,0,0,8,41,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,264,                    } else if (Double.isNaN(previousEventTime) ||,0,1,0,1,4,0,6,0,0,7,45,11,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,266,                        pendingEventTime = root;,4,0,0,0,0,0,0,0,0,5,24,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,267,                        pendingEvent = true;,2,0,0,0,0,0,0,0,0,4,20,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,268,                        return true;,0,0,0,0,0,1,0,0,0,1,12,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,299,        return pendingEvent ?,0,0,0,0,0,1,0,0,0,1,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,317,            previousEventTime = t;,4,0,0,0,0,0,0,0,0,5,22,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,318,            g0Positive        = increasing;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,319,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));",6,1,0,2,4,0,8,0,0,17,73,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,37,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,67,"        this(DEFAULT_RELATIVE_ACCURACY,",2,0,0,0,1,0,0,0,0,2,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,70,    },2,0,0,0,1,2,0,0,0,4,1,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,231,                    increasing = gb >= ga;,6,1,0,0,0,0,0,0,0,8,22,10,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,235,                    if (solver instanceof BracketedUnivariateSolver<?>) {,2,0,0,1,3,0,0,2,0,4,53,11,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,44,public class EventState {,2,0,0,0,1,1,0,0,0,3,25,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,209,                        interpolator.setInterpolatedTime(t);,0,0,0,1,2,0,6,0,0,6,36,15,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,210,"                        return handler.g(t, interpolator.getInterpolatedState());",0,0,0,2,4,1,10,0,0,10,57,15,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,112,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,118,        return searchMax;,0,0,0,0,0,1,0,0,0,1,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,142,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,155,        incrementEvaluationCount();,0,0,0,1,2,0,6,0,0,6,27,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,156,        return function.value(point);,0,0,0,1,2,1,0,0,0,4,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,177,        MathUtils.checkNotNull(f);,0,0,0,1,2,0,6,0,0,6,26,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,180,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,181,        searchMax = max;,0,0,0,0,0,0,0,0,0,0,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,182,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,183,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,184,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,185,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,186,    },2,0,0,0,1,1,0,0,0,3,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,193,"        setup(maxEval, f, min, max, startValue);",0,0,0,1,2,0,12,0,0,12,40,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,196,        return doSolve();,4,2,0,1,2,1,2,0,0,8,17,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,310,            evaluations.incrementCount();,2,0,0,1,2,1,4,0,0,7,29,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,313,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,314,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,353,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,138,"        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,",0,0,0,0,2,0,12,0,0,12,71,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,191,"            state.getEventHandler().init(t0, y0, t);",0,0,0,2,4,0,12,0,0,12,40,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,192,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,306,                    state.reinitializeBegin(interpolator);,0,0,0,1,2,0,0,0,0,3,38,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,307,                },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,323,                if (state.evaluateStep(interpolator)) {,0,0,0,2,5,0,6,0,0,6,39,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,327,            },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,393,"                state.stepAccepted(currentT, currentY);",0,0,0,1,2,0,8,0,0,8,39,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,394,                isLastStep = isLastStep || state.stop();,8,0,0,1,2,0,8,0,0,17,40,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,395,            },2,0,0,0,1,0,4,0,0,7,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,125,        return handler;,2,0,0,0,0,1,0,0,0,2,15,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,321,            g0Positive = g0 >= 0;,4,1,0,0,0,0,0,0,0,7,21,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,322,            nextAction = EventHandler.Action.CONTINUE;,8,0,0,0,0,0,0,0,0,9,42,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,331,        return nextAction == EventHandler.Action.STOP;,8,1,0,0,0,1,0,0,0,9,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,130,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,136,        return relativeAccuracy;,4,0,0,0,0,1,0,0,0,5,24,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3358,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3362,        y = floor(x);,4,0,0,1,2,0,4,0,0,9,13,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,3363,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,102,                      final UnivariateSolver solver) {,2,0,0,0,2,1,0,2,0,5,32,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,103,        this.handler           = handler;,0,0,0,0,0,0,0,0,0,0,33,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,104,        this.maxCheckInterval  = maxCheckInterval;,4,0,0,0,0,0,0,0,0,5,42,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,105,        this.convergence       = FastMath.abs(convergence);,2,0,0,1,2,0,6,0,0,9,51,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,106,        this.maxIterationCount = maxIterationCount;,0,0,0,0,0,0,0,0,0,0,43,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,107,        this.solver            = solver;,4,0,0,0,0,0,0,0,0,5,32,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,110,        t0                = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,111,        g0                = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,112,        g0Positive        = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,113,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,114,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,115,        previousEventTime = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,116,        increasing        = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,117,        nextAction        = EventHandler.Action.CONTINUE;,0,0,0,0,0,0,0,0,0,0,49,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,119,    },4,0,0,0,1,2,0,0,0,6,1,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,157,        t0 = interpolator.getPreviousTime();,0,0,0,1,2,0,0,0,0,3,36,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,158,        interpolator.setInterpolatedTime(t0);,0,0,0,1,2,0,6,0,0,6,37,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,159,"        g0 = handler.g(t0, interpolator.getInterpolatedState());",2,0,0,2,4,0,10,0,0,13,56,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,160,        if (g0 == 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,180,        g0Positive = g0 >= 0;,4,1,0,0,0,0,0,0,0,6,21,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,196,            forward = interpolator.isForward();,0,0,0,1,2,0,0,0,0,3,35,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,197,            final double t1 = interpolator.getCurrentTime();,0,0,0,1,2,0,0,0,0,3,48,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,198,            final double dt = t1 - t0;,6,1,0,0,0,1,0,0,0,8,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,199,            if (FastMath.abs(dt) < convergence) {,0,0,0,2,5,0,0,0,0,7,37,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,203,"            final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));",0,0,0,4,8,0,0,0,0,12,91,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,204,            final double h = dt / n;,6,1,0,0,0,1,0,0,0,8,24,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,206,            final UnivariateFunction f = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,55,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,217,            double ta = t0;,0,0,0,0,0,0,0,0,0,0,15,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,218,            double ga = g0;,4,0,0,0,0,0,0,0,0,4,15,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,219,            for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,222,                final double tb = t0 + (i + 1) * h;,8,3,0,1,2,1,0,0,0,12,35,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,223,                interpolator.setInterpolatedTime(tb);,0,0,0,1,2,0,6,0,0,6,37,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,224,"                final double gb = handler.g(tb, interpolator.getInterpolatedState());",2,0,0,2,4,1,10,0,0,13,69,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,227,                if (g0Positive ^ (gb >= 0)) {,4,2,0,2,5,0,0,0,0,6,29,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,277,                    ta = tb;,4,0,0,0,0,0,0,0,0,5,8,10,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,278,                    ga = gb;,0,0,0,0,0,0,0,0,0,0,8,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,284,            pendingEvent     = false;,2,0,0,0,0,0,0,0,0,4,25,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,285,            pendingEventTime = Double.NaN;,0,0,0,0,0,0,0,0,0,0,30,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,286,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,312,        t0 = t;,6,0,1,0,0,0,0,0,0,10,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,313,"        g0 = handler.g(t, y);",6,0,0,1,2,0,8,2,0,18,21,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,315,        if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {,12,3,0,3,7,0,4,0,0,20,74,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,324,    },2,0,1,0,1,0,0,0,0,5,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,54,    public enum Action {,6,0,0,0,1,0,0,0,0,6,20,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,61,"        STOP,",0,0,0,0,0,0,0,0,0,0,5,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,70,"        RESET_STATE,",0,0,0,0,0,0,0,0,0,0,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,80,"        RESET_DERIVATIVES,",2,0,0,0,0,0,0,0,0,2,18,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventHandler,7,87,        CONTINUE;,2,0,0,0,0,0,0,0,0,2,9,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,206,            final UnivariateFunction f = new UnivariateFunction() {,4,1,1,1,3,1,0,4,0,21,55,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,94,                                               final double functionValueAccuracy) {,8,1,0,0,2,2,0,0,0,11,37,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,51,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,95,        this.absoluteAccuracy = absoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,96,        this.relativeAccuracy = relativeAccuracy;,0,0,0,0,0,0,0,0,0,0,41,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,97,        this.functionValueAccuracy = functionValueAccuracy;,4,0,0,0,0,0,0,0,0,5,51,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,98,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,41,public enum AllowedSolution {,2,0,0,0,1,1,0,0,0,3,29,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,48,"    ANY_SIDE,",0,0,0,0,0,0,0,0,0,0,9,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,55,"    LEFT_SIDE,",4,1,0,0,0,0,0,0,0,6,10,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,62,"    RIGHT_SIDE,",0,0,0,0,0,0,0,0,0,0,11,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,68,"    BELOW_SIDE,",8,1,0,0,0,0,0,0,0,9,11,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AllowedSolution,7,74,    ABOVE_SIDE;,2,0,0,0,0,0,0,0,0,2,11,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,374,        for (int i = 0; i < interpolatedState.length; ++i) {,10,1,0,1,3,0,0,0,0,12,52,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,375,            interpolatedState[i] = previousState[i] +,0,1,1,2,4,0,0,0,0,10,41,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,383,            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,10,9,1,7,14,0,0,0,0,36,73,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,7,2274,"                return sinQ(xa, xb);",4,1,1,1,2,1,6,0,0,15,20,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,320,    if (! vectorsInitialized) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,322,      if (v == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,330,      finalizeStep();,0,0,0,1,2,0,0,0,0,3,15,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,333,      for (int i = 0; i < interpolatedState.length; ++i) {,10,1,0,1,3,0,0,0,0,12,52,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,334,          final double yDot1  = yDotK[0][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,335,          final double yDot6  = yDotK[5][i];,2,0,0,2,4,0,0,0,0,2,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,336,          final double yDot7  = yDotK[6][i];,2,0,1,2,4,1,0,0,0,14,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,337,          final double yDot8  = yDotK[7][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,338,          final double yDot9  = yDotK[8][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,339,          final double yDot10 = yDotK[9][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,340,          final double yDot11 = yDotK[10][i];,2,0,1,2,4,1,0,0,0,7,35,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,341,          final double yDot12 = yDotK[11][i];,0,0,0,2,4,0,0,0,0,6,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,342,          final double yDot13 = yDotK[12][i];,0,0,0,2,4,0,0,0,0,6,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,343,          final double yDot14 = yDotKLast[0][i];,2,1,0,2,4,0,0,0,0,3,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,344,          final double yDot15 = yDotKLast[1][i];,6,0,1,2,4,1,0,0,0,13,38,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,345,          final double yDot16 = yDotKLast[2][i];,2,0,1,2,4,1,0,0,0,7,38,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,346,          v[0][i] = B_01 * yDot1  + B_06 * yDot6 + B_07 * yDot7 +,0,0,0,2,4,0,0,0,0,6,55,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,349,          v[1][i] = yDot1 - v[0][i];,2,0,0,4,8,0,0,0,0,3,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,350,          v[2][i] = v[0][i] - v[1][i] - yDotK[12][i];,0,1,1,8,16,0,0,0,0,18,43,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,351,          for (int k = 0; k < D.length; ++k) {,10,1,0,1,3,0,0,0,0,12,36,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,352,              v[k+3][i] = D[k][0] * yDot1  + D[k][1]  * yDot6  + D[k][2]  * yDot7  +,0,0,0,8,16,0,0,0,0,24,70,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,359,      vectorsInitialized = true;,6,0,0,0,0,0,0,0,0,10,26,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,363,    final double eta      = 1 - theta;,4,1,0,0,0,1,0,0,0,6,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,364,    final double twoTheta = 2 * theta;,4,1,0,0,0,1,8,0,0,14,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,365,    final double theta2   = theta * theta;,6,1,0,0,0,1,0,0,0,8,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,366,    final double dot1 = 1 - twoTheta;,2,0,0,0,0,0,10,0,0,13,33,9,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,367,    final double dot2 = theta * (2 - 3 * theta);,6,4,1,1,2,1,0,0,0,15,44,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,368,    final double dot3 = twoTheta * (1 + theta * (twoTheta -3));,8,4,0,2,4,1,0,0,0,13,59,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,369,    final double dot4 = theta2 * (3 + theta * (5 * theta - 8));,8,5,0,2,4,1,0,0,0,14,59,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,370,    final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));,12,7,0,3,6,1,0,0,0,22,76,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,371,    final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));,12,7,0,3,6,1,0,0,0,21,84,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,373,    if ((previousState != null) && (theta <= 0.5)) {,4,3,0,3,7,0,0,0,0,7,48,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,388,        for (int i = 0; i < interpolatedState.length; ++i) {,0,0,0,1,3,0,0,0,0,4,52,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,389,            interpolatedState[i] = currentState[i] -,0,0,0,2,4,0,0,0,0,6,40,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,397,            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,8,8,1,7,14,0,0,0,0,34,73,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,403,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,415,      final double[] yTmp = new double[currentState.length];,6,0,0,2,4,1,0,0,0,7,54,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,416,      final double pT = getGlobalPreviousTime();,0,0,0,1,2,0,0,0,0,3,42,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,419,      for (int j = 0; j < currentState.length; ++j) {,14,1,0,1,3,0,0,0,0,16,47,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,420,          s = K14_01 * yDotK[0][j]  + K14_06 * yDotK[5][j]  + K14_07 * yDotK[6][j] +,8,11,1,6,12,0,0,0,0,32,74,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,0,0,0,1,2,0,0,0,0,3,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,0,0,0,1,3,0,0,0,0,4,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,12,3,0,2,4,1,0,0,0,16,34,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,16,5,0,4,8,2,0,0,0,23,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,6,0,0,3,6,0,0,0,0,7,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,2,0,0,0,0,2,0,2,0,6,28,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,8,0,1,1,2,0,2,2,0,19,18,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,10,2,0,1,2,0,0,0,0,12,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,12,3,0,2,4,0,0,0,0,16,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,6,2,0,1,2,2,10,0,0,19,26,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,6,1,0,3,6,2,2,4,0,15,42,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,8,2,0,1,2,1,18,0,0,30,33,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",6,0,0,2,4,0,6,2,0,15,50,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,88,        if (singletons.length != probabilities.length) {,8,1,0,1,3,0,0,0,0,9,48,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,92,"        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);",6,0,0,1,2,0,0,16,0,22,92,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,94,        for (int i = 0; i < singletons.length; i++) {,2,1,0,1,3,0,0,0,0,3,45,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,95,"            samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));",0,0,0,4,8,0,0,0,0,12,71,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,98,"        innerDistribution = new DiscreteDistribution<Double>(rng, samples);",26,5,0,1,2,0,6,4,0,45,67,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,99,    },2,0,0,0,1,0,0,0,0,2,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,50,    @Deprecated,6,1,0,0,0,0,0,0,0,7,11,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,76,    protected AbstractRealDistribution(RandomGenerator rng) {,12,2,0,1,3,1,0,2,0,18,57,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,77,        random = rng;,4,0,0,0,0,0,0,0,0,5,13,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1249,         if (Double.isInfinite(normalizedSum)) {,2,0,0,2,5,0,6,0,0,8,39,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1252,         if (Double.isNaN(normalizedSum)) {,10,2,0,2,5,0,0,0,0,12,34,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1255,         double sum = 0d;,6,0,0,0,0,0,0,4,0,12,16,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1256,         final int len = values.length;,8,0,0,0,0,1,4,2,0,15,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1257,         double[] out = new double[len];,0,0,0,2,4,0,0,0,0,6,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1258,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1259,             if (Double.isInfinite(values[i])) {,6,0,1,3,7,0,6,0,0,16,35,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1262,             if (!Double.isNaN(values[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1263,                 sum += values[i];,18,3,1,1,2,4,2,0,0,37,17,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1266,         if (sum == 0) {,6,2,0,1,3,1,0,0,0,9,15,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1269,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1270,             if (Double.isNaN(values[i])) {,18,4,1,3,7,0,4,0,0,31,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1273,                 out[i] = values[i] * normalizedSum / sum;,0,0,0,2,4,0,0,0,0,6,41,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1276,         return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,45,"    public Pair(K k, V v) {",0,0,0,1,3,0,0,0,0,4,23,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,46,        key = k;,4,0,0,0,0,0,0,0,0,5,8,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,47,        value = v;,4,0,0,0,0,0,0,0,0,5,10,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,65,        return key;,2,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,8,74,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,86,"        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {",8,0,0,0,1,0,0,0,0,9,84,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,87,        random = rng;,8,1,1,0,0,0,0,0,0,15,13,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,89,        singletons = new ArrayList<T>(samples.size());,0,0,0,2,4,0,0,0,0,6,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,90,        final double[] probs = new double[samples.size()];,2,0,0,3,6,0,0,0,0,2,50,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,92,        for (int i = 0; i < samples.size(); i++) {,0,0,0,2,5,0,0,0,0,7,42,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,93,"            final Pair<T, Double> sample = samples.get(i);",0,0,0,1,2,0,0,0,0,3,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,94,            singletons.add(sample.getKey());,0,0,0,2,4,0,8,0,0,8,32,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,95,            if (sample.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,28,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,98,            probs[i] = sample.getValue();,0,0,0,2,4,0,0,0,0,6,29,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,101,"        probabilities = MathArrays.normalizeArray(probs, 1.0);",4,1,1,1,2,0,6,0,0,20,54,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,102,    },8,1,0,0,1,0,0,0,0,10,1,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,57,"        super(K, M1, M2, M3);",0,0,0,1,2,0,0,0,0,3,21,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,8,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,72,"        this(k, m1, m2, m3, null);",4,0,0,1,2,2,0,2,0,8,26,2,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,99,        final int w = 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,101,        this.v      = new int[r];,0,0,0,1,2,0,0,0,0,3,25,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,102,        this.index  = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,107,        iRm2 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,108,        i1   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,110,        i3   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,111,        for (int j = 0; j < r; ++j) {,0,0,1,1,3,0,0,0,0,5,29,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,113,            iRm2[j] = (j + r - 2) % r;,12,3,1,2,4,0,0,0,0,20,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,114,            i1[j]   = (j + m1)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,115,            i2[j]   = (j + m2)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,116,            i3[j]   = (j + m3)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,120,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,154,        if (seed == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",0,0,0,2,4,0,0,0,0,6,65,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,        return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",2,0,0,1,3,1,2,0,0,5,87,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);",0,0,0,1,2,0,0,0,0,3,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },8,0,0,0,1,0,8,0,0,17,1,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,10,2,0,1,2,2,0,0,0,15,39,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,4,1,1,1,2,1,0,0,0,10,39,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",14,1,0,2,4,0,6,2,0,25,67,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,1,1,3,0,0,0,0,5,65,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",6,0,0,1,2,0,0,0,0,7,58,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },8,2,0,0,1,0,0,0,0,10,1,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,286,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",20,3,0,1,2,1,6,2,0,31,50,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {",18,2,0,1,3,3,0,4,0,30,47,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,        this.x = x;,8,0,0,0,0,0,0,0,0,10,11,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,        this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,98,        this.z = z;,0,0,0,0,0,0,0,0,0,0,11,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,        this.x = a * u.x;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,140,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",4,0,0,1,2,0,6,2,0,13,62,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",8,2,0,1,2,3,10,4,0,28,60,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",2,0,0,1,2,4,0,0,0,5,63,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,12,1,0,1,2,3,4,0,0,21,77,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,115,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,6,0,0,9,49,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,1,2,5,1,2,0,0,7,51,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,9,379,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,866,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,867,        final double a1High     = ca1 - (ca1 - a1);,22,3,1,1,2,1,4,0,0,38,43,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,869,        final double cb1        = SPLIT_FACTOR * b1;,10,1,0,0,0,1,0,0,0,13,44,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,870,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,871,        final double b1Low      = b1 - b1High;,4,0,0,0,0,0,6,0,0,10,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,875,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,878,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,879,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,880,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,881,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,0,0,0,0,9,44,0,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,882,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,883,        final double b2Low      = b2 - b2High;,16,2,0,0,0,0,0,0,0,20,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,886,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,4,0,0,3,6,1,0,2,0,7,110,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,890,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,891,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,892,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,898,        if (Double.isNaN(result)) {,18,5,1,2,5,0,14,0,0,43,27,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,904,        return result;,16,2,0,0,0,2,4,0,0,24,14,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,946,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,947,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,948,        final double a1Low      = a1 - a1High;,14,5,0,0,0,1,20,0,0,42,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,949,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,950,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,951,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,954,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,955,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,958,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,959,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,960,        final double a2Low      = a2 - a2High;,6,1,0,0,0,0,6,0,0,13,38,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,961,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,962,        final double b2High     = cb2 - (cb2 - b2);,2,0,0,1,2,0,0,0,0,2,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,963,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,966,        final double prod2High  = a2 * b2;,8,1,0,0,0,1,6,0,0,16,34,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,8,0,3,6,1,0,2,0,33,110,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,970,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,971,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,972,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,973,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,974,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,975,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,978,        final double prod3High  = a3 * b3;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,979,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,982,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,983,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,984,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,987,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,988,        final double s123Prime  = s123High - prod3High;,0,0,0,0,0,0,0,0,0,0,47,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,16,5,1,3,6,4,0,0,0,30,87,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,995,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,9,1001,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,63,    public Line(final Line line) {,6,0,0,1,3,2,0,2,0,12,30,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,64,        this.direction = line.direction;,6,0,0,0,0,0,0,0,0,7,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,65,        this.zero      = line.zero;,4,1,0,0,0,0,4,0,0,9,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,66,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,77,            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,67,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));",4,0,0,2,4,1,6,4,0,15,63,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,88,        return reverted;,4,1,0,0,0,1,0,0,0,5,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,102,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,113,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,121,"        return new Vector3D(1.0, zero, abscissa, direction);",6,0,0,1,2,1,0,2,0,8,52,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,128,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,1,2,4,0,8,51,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,135,        return pointAt(((Vector1D) point).getX());,2,0,0,4,8,1,4,2,0,8,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,146,"        final double angle = Vector3D.angle(direction, line.direction);",6,0,0,1,2,1,6,0,0,13,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,147,        return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);,0,0,0,5,10,1,0,0,0,16,87,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,155,        return distance(p) < 1.0e-10;,0,1,0,1,2,1,4,0,0,5,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,163,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,164,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",6,0,0,2,4,1,6,4,0,18,77,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,165,        return n.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,174,"        final Vector3D normal = Vector3D.crossProduct(direction, line.direction);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,175,        final double n = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,176,        if (n < Precision.SAFE_MIN) {,6,1,0,1,3,0,0,0,0,7,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,178,            return distance(line.zero);,6,1,0,1,2,1,4,0,0,11,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,182,        final double offset = line.zero.subtract(zero).dotProduct(normal) / n;,8,1,0,2,4,1,8,0,0,18,70,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,184,        return FastMath.abs(offset);,0,0,0,1,2,1,6,0,0,6,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,194,        final double cos = direction.dotProduct(line.direction);,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,195,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,196,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,198,            return zero;,10,1,0,0,0,1,0,0,0,12,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,201,        final Vector3D delta0 = line.zero.subtract(zero);,10,0,0,1,2,1,4,2,0,18,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,202,        final double a        = delta0.dotProduct(direction);,2,0,0,1,2,1,6,0,0,9,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,203,        final double b        = delta0.dotProduct(line.direction);,6,1,1,1,2,1,4,0,0,17,58,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,205,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",18,5,0,2,4,1,0,2,0,25,59,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,215,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,216,        return line.contains(closest) ? closest : null;,2,0,0,1,2,1,6,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,223,"        return new SubLine(this, new IntervalsSet());",0,0,0,2,4,1,0,4,0,4,45,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,41,"public class Line implements Embedding<Euclidean3D, Euclidean1D> {",0,0,0,0,1,0,0,0,0,1,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,44,                                        Object ... args) {,14,1,0,0,2,0,0,2,0,18,18,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,45,        context = new ExceptionContext(this);,6,0,0,1,2,0,0,4,0,11,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,51,        return context;,4,0,0,0,0,1,0,0,0,5,15,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,9,63,        return context.getLocalizedMessage();,2,1,0,1,2,1,10,0,0,13,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,107,    public Vector3D(double[] v) throws DimensionMismatchException {,6,0,0,2,5,1,0,0,0,7,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,108,        if (v.length != 3) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,109,"            throw new DimensionMismatchException(v.length, 3);",10,1,0,1,2,0,0,2,0,15,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,111,        this.x = v[0];,4,0,1,1,2,0,0,0,0,11,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,112,        this.y = v[1];,2,0,1,1,2,0,0,0,0,5,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,113,        this.z = v[2];,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,124,"    public Vector3D(double alpha, double delta) {",6,0,0,1,3,1,0,0,0,7,45,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,125,        double cosDelta = FastMath.cos(delta);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,126,        this.x = FastMath.cos(alpha) * cosDelta;,4,1,0,1,2,0,6,0,0,12,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,127,        this.y = FastMath.sin(alpha) * cosDelta;,4,1,0,1,2,0,6,0,0,12,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,128,        this.z = FastMath.sin(delta);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,129,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",14,0,0,1,2,0,10,0,0,25,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,187,"                    double a3, Vector3D u3, double a4, Vector3D u4) {",8,0,0,0,2,0,0,4,0,12,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,188,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);",18,0,0,1,2,0,12,0,0,31,78,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,189,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);",18,0,0,1,2,0,12,0,0,31,78,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,190,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);",18,0,0,1,2,0,20,0,0,39,78,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,191,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,206,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,222,"        return new double[] { x, y, z };",0,0,0,2,4,1,0,0,0,7,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,227,        return Euclidean3D.getInstance();,0,0,0,1,2,1,4,0,0,4,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,232,        return ZERO;,2,0,0,0,0,1,0,2,0,5,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,237,        return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);,0,0,0,3,6,1,0,0,0,10,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,243,        return FastMath.sqrt (x * x + y * y + z * z);,0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,254,"        return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));",0,0,0,5,10,1,26,0,0,26,85,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,262,"        return FastMath.atan2(y, x);",0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,270,        return FastMath.asin(z / getNorm());,2,1,0,2,4,1,6,0,0,9,36,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,275,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,281,"        return new Vector3D(1, this, factor, (Vector3D) v);",0,0,0,2,4,1,0,0,0,7,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,292,"        return new Vector3D(1, this, -factor, (Vector3D) v);",4,0,0,2,4,1,0,4,0,9,52,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,297,        double s = getNorm();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,298,        if (s == 0) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,299,            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);,4,0,0,1,2,0,0,2,0,6,88,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,301,        return scalarMultiply(1 / s);,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,321,        double threshold = 0.6 * getNorm();,2,1,0,1,2,0,2,0,0,5,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,322,        if (threshold == 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,323,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,326,        if (FastMath.abs(x) <= threshold) {,2,1,0,2,5,0,6,0,0,9,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,14,5,0,1,2,0,4,0,0,23,51,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,328,"            return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,329,        } else if (FastMath.abs(y) <= threshold) {,2,1,0,2,6,0,6,0,0,9,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,330,            double inverse  = 1 / FastMath.sqrt(x * x + z * z);,16,5,1,1,2,0,4,0,0,33,51,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,333,        double inverse  = 1 / FastMath.sqrt(x * x + y * y);,10,4,0,1,2,0,4,0,0,18,51,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,334,"        return new Vector3D(inverse * y, -inverse * x, 0);",8,2,0,1,2,1,0,2,0,13,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,351,        double normProduct = v1.getNorm() * v2.getNorm();,0,0,0,2,4,0,0,0,0,6,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,352,        if (normProduct == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,353,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,356,        double dot = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,357,        double threshold = normProduct * 0.9999;,4,2,1,0,0,0,0,0,0,13,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,358,        if ((dot < -threshold) || (dot > threshold)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,360,"            Vector3D v3 = crossProduct(v1, v2);",10,1,0,1,2,0,6,2,0,19,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,361,            if (dot >= 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,362,                return FastMath.asin(v3.getNorm() / normProduct);,2,1,0,2,4,1,8,0,0,11,49,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,364,            return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);,0,0,0,2,4,1,0,0,0,7,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,368,        return FastMath.acos(dot / normProduct);,4,1,0,1,2,1,4,0,0,9,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,374,"        return new Vector3D(-x, -y, -z);",0,0,0,1,2,1,0,0,0,4,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0,0,0,1,2,0,0,0,0,3,54,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0,0,0,3,6,0,0,0,0,9,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,                double v = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,4,1,1,2,4,0,0,0,0,10,25,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,6,1,0,1,4,0,0,0,0,7,20,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,                    v *= x;,0,0,0,0,0,0,0,0,0,0,7,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,                function[n] = coeff * v;,0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,4,1,0,2,4,0,0,0,0,5,42,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,2,0,1,1,2,1,0,0,0,7,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,2,0,0,2,4,0,0,0,0,3,31,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,        if (order > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,2,0,1,2,4,1,0,0,0,5,37,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,            q[0] = 1;,0,0,0,1,2,0,0,0,0,3,9,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,6,1,0,0,0,1,0,0,0,8,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,4,2,0,1,2,1,0,0,0,7,36,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,16,5,0,0,0,0,0,0,0,22,17,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,2,1,1,2,4,0,0,0,0,8,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,2,0,0,1,3,0,0,0,0,3,34,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1368,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,1,2,0,0,0,0,3,64,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,2,0,0,4,8,1,0,0,0,3,89,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,2,0,0,0,0,0,0,0,0,2,23,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2440,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2447,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2452,        if (xa < 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,2,0,0,1,2,0,0,0,0,2,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2462,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2463,        epsB = -(temp - epsA - epsB);,0,0,0,1,2,0,0,0,0,3,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2464,        epsA = temp;,0,0,0,0,0,0,8,0,0,8,12,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,2,3,0,0,0,0,4,0,0,9,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2468,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2469,        double yb = xb + xa - ya;,0,0,0,0,0,0,0,0,0,0,25,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,2,0,0,0,0,0,0,0,0,2,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2474,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,8,1,0,0,0,0,2,0,0,13,10,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,4,0,0,0,0,0,0,4,0,9,33,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,8,4,0,0,0,0,0,0,0,13,25,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2525,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2526,        yb = yb * epsA2 + 0.11111095942313305;,6,1,0,0,0,1,4,0,0,12,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2527,        yb = yb * epsA2 + -0.1428571423679182;,8,2,0,0,0,0,0,0,0,12,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2528,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2529,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2530,        yb = yb * epsA2 * epsA;,0,0,0,0,0,0,0,0,0,0,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2533,        ya = epsA;,10,0,0,0,0,3,0,0,0,15,10,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2535,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2536,        yb = -(temp - ya - yb);,2,0,0,1,2,0,0,0,0,4,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2537,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2540,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2543,        double za = EIGHTHS[idx] + ya;,0,0,0,1,2,0,0,0,0,3,30,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2544,        double zb = -(za - EIGHTHS[idx] - ya);,6,0,0,2,4,0,6,0,0,13,38,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2545,        temp = za + yb;,8,1,0,0,0,0,16,0,0,27,15,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2546,        zb += -(temp - za - yb);,14,1,1,1,2,0,0,2,0,22,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2547,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2549,        double result = za + zb;,0,0,0,0,0,0,0,0,0,0,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2550,        double resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2552,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2566,        if (negate ^ leftPlane) {,2,1,0,1,3,0,0,0,0,3,25,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2570,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,796,        final double[] reciprocal = new double[getSize()];,2,0,0,3,6,1,8,0,0,11,50,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,797,"        pow(rhs, lhsOffset, -1, reciprocal, 0);",2,0,0,1,2,0,8,0,0,11,39,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,798,"        multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);",4,0,0,1,2,0,0,0,0,5,62,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,799,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,894,            final double inv = 1.0 / operand[operandOffset];,2,1,1,1,2,1,0,0,0,8,48,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,895,"            double xk = FastMath.pow(inv, -n);",2,0,1,1,2,1,0,0,0,9,34,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,896,            for (int i = 0; i <= order; ++i) {,8,2,0,1,3,0,8,0,0,19,34,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,897,                function[i] = xk;,2,0,1,1,2,0,0,0,0,7,17,8,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,898,                xk *= inv;,14,1,0,0,0,0,4,0,0,21,10,0,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,950,            function[0] = FastMath.sqrt(operand[operandOffset]);,0,0,1,3,6,0,4,0,0,11,52,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,951,            xk          = 0.5 / function[0];,2,1,1,1,2,0,0,0,0,6,32,6,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,872,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,881,        double[] function = new double[1 + order];,2,2,1,2,4,0,0,0,0,6,42,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,883,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,902,        double coefficient = n;,0,0,0,0,0,0,0,0,0,0,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,903,        for (int i = 1; i <= order; ++i) {,12,3,0,1,3,0,0,0,0,18,34,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,904,            function[i] *= coefficient;,2,0,1,1,2,0,0,0,0,7,27,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,905,            coefficient *= n - i;,14,2,0,0,0,2,0,0,0,19,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,909,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,1,2,0,12,0,0,12,64,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,911,    },2,0,0,0,1,1,8,2,0,13,1,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,947,        double[] function = new double[1 + order];,4,1,0,2,4,0,6,0,0,11,42,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,949,        if (n == 2) {,2,1,0,1,3,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,959,        final double nReciprocal = 1.0 / n;,0,0,0,0,0,0,0,0,0,0,35,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,960,        final double xReciprocal = 1.0 / operand[operandOffset];,0,0,0,1,2,0,0,0,0,3,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,961,        for (int i = 1; i <= order; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,962,            function[i] = xk;,0,0,1,1,2,0,4,0,0,6,17,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,963,            xk *= xReciprocal * (nReciprocal - i);,12,4,0,1,2,0,4,0,0,21,38,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,967,"        compose(operand, operandOffset, function, result, resultOffset);",4,2,1,1,2,0,12,0,0,23,64,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,969,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1615,        } else if (e < 0) {,0,0,0,1,4,0,0,0,0,5,19,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1622,        final int splitFactor = 0x8000001;,2,0,1,0,0,1,10,0,0,22,34,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1623,        final double cd       = splitFactor * d;,0,0,0,0,0,0,0,0,0,0,40,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1624,        final double d1High   = cd - (cd - d);,2,0,0,1,2,0,0,0,0,2,38,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1625,        final double d1Low    = d - d1High;,6,1,0,0,0,1,0,0,0,8,35,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1628,        double resultHigh = 1;,2,0,0,0,0,0,0,0,0,2,22,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1629,        double resultLow  = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1632,        double d2p     = d;,10,1,0,0,0,0,2,0,0,14,19,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1633,        double d2pHigh = d1High;,6,0,0,0,0,0,0,0,0,7,24,0,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1634,        double d2pLow  = d1Low;,4,0,0,0,0,0,0,0,0,4,23,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1636,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1638,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1641,                final double tmpHigh = resultHigh * d2p;,8,1,0,0,0,1,0,0,0,11,40,0,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1642,                final double cRH     = splitFactor * resultHigh;,0,0,0,0,0,0,0,0,0,0,48,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1643,                final double rHH     = cRH - (cRH - resultHigh);,0,0,0,1,2,0,0,0,0,3,48,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1644,                final double rHL     = resultHigh - rHH;,6,1,0,0,0,1,0,0,0,8,40,8,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,28,14,1,3,6,1,0,0,0,48,99,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1646,                resultHigh = tmpHigh;,0,0,1,0,0,0,4,0,0,6,21,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1647,                resultLow  = resultLow * d2p + tmpLow;,18,3,0,0,0,0,0,0,0,23,38,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1652,            final double tmpHigh = d2pHigh * d2p;,0,0,0,0,0,0,0,0,0,0,37,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1653,            final double cD2pH   = splitFactor * d2pHigh;,6,1,0,0,0,1,0,0,0,8,45,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,4,1,1,1,2,0,4,0,0,11,49,3,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1655,            final double d2pHL   = d2pHigh - d2pHH;,6,1,0,0,0,1,0,0,0,8,39,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,20,8,0,3,6,1,0,0,0,29,107,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1657,            final double cTmpH   = splitFactor * tmpHigh;,2,0,0,0,0,1,4,2,0,9,45,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0,0,0,1,2,0,4,0,0,4,36,7,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0,0,0,1,2,0,0,0,0,3,54,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1660,            d2p     = d2pHigh + d2pLow;,8,1,0,0,0,3,0,0,0,13,27,1,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1662,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1664,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,1666,        return resultHigh + resultLow;,4,1,0,0,0,1,0,0,0,5,30,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,315,        final int vSize = valueCompiler.lowerIndirection.length;,16,2,0,0,0,2,0,0,0,20,56,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,316,        final int dSize = derivativeCompiler.lowerIndirection.length;,8,0,0,0,0,1,0,0,0,9,61,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,317,        final int[] lowerIndirection = new int[vSize + dSize];,6,1,0,2,4,1,0,0,0,8,54,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,318,"        System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);",0,0,0,1,2,0,0,0,0,3,80,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,319,        for (int i = 0; i < dSize; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,320,            lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];,0,0,0,3,6,0,0,0,0,9,95,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,323,        return lowerIndirection;,2,0,0,0,0,1,0,0,0,2,24,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,373,                            termJ[0] += termK[0];,0,0,1,2,4,0,0,0,0,5,21,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,375,                            termK[0] = 0;,0,0,1,1,2,0,0,0,0,3,13,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,441,"                    derivedTermF[j] = convertIndex(term[j], parameters,",0,0,1,2,5,0,4,0,0,13,51,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,450,                    int[] derivedTermG = new int[term.length];,6,0,0,2,4,0,0,0,0,6,42,11,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,451,                    derivedTermG[0] = term[0];,0,0,0,2,4,0,0,0,0,6,26,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,452,                    derivedTermG[1] = term[1];,0,0,1,2,4,0,0,0,0,5,26,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,453,                    for (int j = 2; j < term.length; ++j) {,10,1,0,1,3,0,0,0,0,12,39,10,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,456,"                        derivedTermG[j] = convertIndex(term[j], parameters,",0,0,1,2,5,0,4,0,0,13,51,12,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,459,                        if (j == l) {,6,1,0,1,3,0,0,0,0,8,13,0,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,461,"                            System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);",0,0,0,3,6,0,0,0,0,9,84,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,462,                            orders[parameters - 1]++;,2,1,1,1,2,0,0,0,0,6,25,14,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,463,"                            derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);",2,0,1,2,4,1,10,0,0,18,78,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,466,"                    Arrays.sort(derivedTermG, 2, derivedTermG.length);",4,0,0,1,2,0,6,0,0,10,50,11,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,467,                    row.add(derivedTermG);,6,0,0,1,2,0,6,0,0,13,22,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,478,                        final int[] termK = row.get(k);,2,0,0,2,4,1,6,0,0,9,31,12,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,479,                        boolean equals = termJ.length == termK.length;,10,1,0,0,0,0,0,0,0,11,46,13,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,480,                        for (int l = 1; equals && l < termJ.length; ++l) {,0,0,0,1,3,0,0,0,0,4,50,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,483,                        if (equals) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,603,        int[] orders = new int[destP];,2,0,1,2,4,0,0,0,0,4,30,5,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,604,"        System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));",0,0,0,3,6,0,6,0,0,6,92,5,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,605,"        return getPartialDerivativeIndex(destP, destO, destSizes, orders);",0,0,0,1,2,1,0,0,0,4,66,4,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,771,        for (int i = 0; i < multIndirection.length; ++i) {,10,1,0,1,3,0,0,0,0,12,50,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,772,            final int[][] mappingI = multIndirection[i];,0,0,0,3,6,0,0,0,0,9,44,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,773,            double r = 0;,2,0,0,0,0,0,4,0,0,6,13,3,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,774,            for (int j = 0; j < mappingI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,43,6,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,775,                r += mappingI[j][0] *,8,2,1,2,4,1,4,2,0,22,21,3,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,779,            result[resultOffset + i] = r;,6,1,1,1,2,0,0,0,0,10,29,6,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,781,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1712,        for (int i = 0; i < compIndirection.length; ++i) {,12,1,0,1,3,0,6,0,0,21,50,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1713,            final int[][] mappingI = compIndirection[i];,2,0,1,3,6,1,0,0,0,7,44,6,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1714,            double r = 0;,6,0,0,0,0,0,0,0,0,6,13,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1715,            for (int j = 0; j < mappingI.length; ++j) {,12,3,0,1,3,0,0,0,0,16,43,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1716,                final int[] mappingIJ = mappingI[j];,2,0,1,2,4,1,0,0,0,7,36,8,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1717,                double product = mappingIJ[0] * f[mappingIJ[1]];,2,1,1,3,6,0,0,0,0,9,48,9,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1718,                for (int k = 2; k < mappingIJ.length; ++k) {,10,1,0,1,3,0,0,0,0,12,44,8,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1719,                    product *= operand[operandOffset + mappingIJ[k]];,6,1,1,2,4,0,0,0,0,14,49,1,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1721,                r += product;,0,0,0,0,0,0,0,0,0,0,13,4,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1723,            result[resultOffset + i] = r;,6,1,1,1,2,0,0,0,0,15,29,3,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1725,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01042,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,737,        for (int i = 0; i < getSize(); ++i) {,6,1,0,2,5,0,2,0,0,10,37,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,738,            result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];,12,4,1,3,6,0,0,0,0,23,67,6,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,740,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,10,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.00813,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1760,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0068,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1757,        if (order != compiler.order) {,6,1,0,1,3,0,0,0,0,7,30,4,0.00676,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1754,        if (parameters != compiler.parameters) {,6,1,0,1,3,0,0,0,0,7,40,4,0.00671,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,231,        return data[0];,0,0,0,1,2,1,0,0,0,4,15,4,0.00671,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,119,"            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;",0,0,1,3,6,0,10,0,0,13,59,6,0.00463,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,117,        if (order > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00459,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00459,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,111,"        this(parameters, order, value);",4,0,0,1,2,0,0,0,0,5,31,4,0.00457,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,113,        if (index >= parameters) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00457,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,192,                return cache[parameters][order];,0,0,1,2,4,1,0,0,0,6,32,9,0.00455,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,92,"        this(parameters, order);",4,0,0,1,2,0,0,0,0,4,24,4,0.00455,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,93,        this.data[0] = value;,4,0,0,1,2,0,0,0,0,5,21,4,0.00455,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00455,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,72,    private DerivativeStructure(final DSCompiler compiler) {,4,0,0,1,3,2,0,2,0,8,56,2,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,73,        this.compiler = compiler;,4,0,0,0,0,0,0,0,0,5,25,4,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,74,        this.data     = new double[compiler.getSize()];,4,0,0,2,4,3,4,4,0,22,47,1,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,75,    },0,0,1,0,1,0,6,0,0,10,1,7,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,82,"        this(DSCompiler.getCompiler(parameters, order));",0,0,0,2,4,0,8,0,0,8,48,5,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0045,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,190,            if (cache[parameters][order] != null) {,0,0,0,3,7,0,0,0,0,10,39,4,0.00446,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,243,                sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];,6,4,1,6,12,0,0,0,0,23,79,8,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,266,        final int vSize = valueCompiler.derivativesIndirection.length;,8,0,0,0,0,1,0,0,0,9,62,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,267,        final int dSize = derivativeCompiler.derivativesIndirection.length;,8,0,1,0,0,1,0,0,0,14,67,3,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,268,        final int[][] derivativesIndirection = new int[vSize + dSize][parameters];,14,4,0,4,8,0,0,0,0,19,74,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,271,        for (int i = 0; i < vSize; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,273,"            System.arraycopy(valueCompiler.derivativesIndirection[i], 0,",0,0,0,1,3,0,0,0,0,4,60,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,279,        for (int i = 0; i < dSize; ++i) {,6,3,0,1,3,0,0,0,0,10,33,8,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,282,"            System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,",4,0,1,1,3,0,4,0,0,10,65,7,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,287,            derivativesIndirection[vSize + i][parameters - 1]++;,0,0,0,2,4,0,0,0,0,6,52,4,0.00441,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",0,0,0,1,2,1,0,0,0,4,48,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,0,0,4,8,0,0,0,0,12,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,0,0,0,2,4,0,0,0,0,6,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,2,0,1,1,2,1,6,0,0,11,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,3,0,5,10,0,0,0,0,7,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,10,3,0,0,0,0,4,0,0,18,10,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,4,0,0,0,0,1,0,4,0,9,13,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,10,0,0,0,0,0,0,0,0,12,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,10,1,0,0,0,0,0,2,0,15,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,6,1,1,0,0,1,0,0,0,17,6,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,8,1,1,0,1,3,4,0,0,18,29,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,0,0,0,0,3,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,76,"        this(new Well19937c(), means, covariances);",0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,77,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",4,1,1,1,2,0,0,0,0,10,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,6,1,0,1,3,0,0,0,0,7,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,111,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,117,        this.means = MathArrays.copyOf(means);,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,2,0,0,1,2,0,0,0,0,3,78,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,52,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,133,            if (covMatEigenvalues[i] < 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,139,"        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",0,0,0,1,2,0,0,0,0,3,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,140,        for (int v = 0; v < dim; v++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,141,            final double[] evec = covMatDec.getEigenvector(v).toArray();,0,0,0,3,6,0,0,0,0,9,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,145,        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();,0,0,0,1,2,0,0,0,0,3,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,149,            final double factor = FastMath.sqrt(covMatEigenvalues[row]);,0,0,0,2,4,0,0,0,0,6,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0,0,0,1,2,0,10,0,0,10,42,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,2,0,0,1,2,0,6,0,0,9,56,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0,0,0,0,1,0,4,0,0,4,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,41,                                                   int n) {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,8,0,0,0,0,1,0,0,0,11,13,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,4,0,0,0,0,0,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },2,0,0,0,1,0,0,0,0,3,1,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,4,0,0,2,5,3,0,0,0,8,51,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,237,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,8,47,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,0,0,0,0,4,126,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,2999,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,10,2,0,2,4,1,0,0,0,14,61,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,11,3421,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,719,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,747,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,748,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,11,749,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,12,4,0,2,4,0,16,0,0,34,65,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,331,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,332,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,335,        if (xInt < 0) {,4,2,1,1,3,0,0,0,0,15,15,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,338,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,11,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,11,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,11,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,43,        return getDefaultNumberFormat(Locale.getDefault());,2,0,0,2,4,2,0,0,0,3,51,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,42,    },2,1,0,0,1,0,0,0,0,3,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,171,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,72,"        this(k, m1, m2, m3, null);",14,1,1,1,2,0,0,0,0,20,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",12,0,0,2,5,6,0,0,0,18,97,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,99,        final int w = 32;,2,0,0,0,0,1,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,101,        this.v      = new int[r];,2,0,1,1,2,0,0,0,0,5,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,102,        this.index  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,11,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,108,        i1   = new int[r];,12,1,1,1,2,0,0,0,0,17,18,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,112,            iRm1[j] = (j + r - 1) % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,120,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",10,2,1,2,4,0,0,0,0,15,65,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,161,        if (seed.length < v.length) {,2,0,1,1,3,0,0,2,0,9,29,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,162,            for (int i = seed.length; i < v.length; ++i) {,14,1,0,1,3,0,0,0,0,16,46,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,0,0,0,6,12,0,0,0,0,18,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,168,        index = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,39,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,11,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,11,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0,0,0,0,1,0,0,0,0,1,88,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,67,        throws NotStrictlyPositiveException {,4,0,0,0,1,0,0,0,0,5,37,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,68,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,74,    },6,1,0,0,1,0,0,0,0,7,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,16,0,0,16,55,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,144,        final int nCols = m.getColumnDimension();,4,1,1,1,2,1,4,0,0,19,41,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,8,0,0,11,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,146,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,0,1,2,1,6,2,0,14,50,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,148,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,149,                double sum = 0;,8,1,0,0,0,3,4,0,0,16,15,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",14,1,0,2,4,0,0,0,0,17,45,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,153,"                out.setEntry(row, col, sum);",2,0,0,1,2,0,10,0,0,13,28,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,157,        return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,572,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,573,        final int nRows = getRowDimension();,18,4,0,1,2,1,2,0,0,26,36,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,574,        if (array.length != nRows) {,0,0,0,1,3,0,0,0,0,4,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,577,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,578,"            setEntry(i, column, array[i]);",0,0,1,2,4,0,6,0,0,10,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,580,    },2,0,0,0,1,0,4,0,0,7,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,599,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,1,1,2,1,6,2,0,16,50,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,0,0,1,4,0,2,2,0,10,63,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,611,        return out;,0,0,0,0,0,1,6,0,0,6,11,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,873,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,53,public abstract class RealLinearOperator {,2,0,0,0,1,0,0,0,0,2,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,62,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",6,0,0,0,1,0,0,0,0,6,75,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,80,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,254,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,272,        if (data == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,279,            MathUtils.checkNotNull(subMatrix);,2,0,0,1,2,1,2,0,0,5,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,280,            final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,281,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,285,            final int nCols = subMatrix[0].length;,8,1,1,1,2,1,0,0,0,13,38,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,289,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,291,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,300,    },0,0,0,0,1,0,6,0,0,6,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,307,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,315,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,316,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,332,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,333,        data[row][column] *= factor;,2,0,1,2,4,0,0,0,0,9,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,334,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,339,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,4,1,1,2,0,8,0,0,34,58,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,414,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,415,            for (int j = 0; j < columns; ++j) {,10,1,0,1,3,0,0,0,0,13,35,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,416,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,419,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,10,0,0,15,68,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,531,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",6,0,1,4,8,0,4,0,0,23,56,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,534,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,547,"        setSubMatrix(in, 0, 0);",4,0,0,1,2,0,4,0,0,9,23,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,11,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1159,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,6,0,0,11,36,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,86,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0,0,0,1,3,0,0,0,0,4,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,203,        data = deep ? v.data.clone() : v.data;,20,0,0,1,2,0,2,0,0,23,38,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,204,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,289,"        return new ArrayRealVector(this, true);",4,0,0,1,2,1,0,2,0,6,39,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,450,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,726,        return data.clone();,0,0,0,1,2,1,0,0,0,4,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",2,0,1,1,2,1,0,0,0,7,64,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,83,    },6,3,0,0,1,0,8,0,0,17,1,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,108,        this.suffix      = suffix;,10,2,0,0,0,0,0,0,0,13,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,606,"                out.setEntry(column, row, value);",14,3,0,1,2,0,10,0,0,28,33,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,607,            },4,0,0,0,1,0,0,0,0,5,1,12,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,62,    public TriDiagonalTransformer(RealMatrix matrix) {,4,0,0,1,3,1,4,2,0,11,50,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,71,        secondary = new double[m - 1];,4,1,0,1,2,0,0,0,0,6,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,72,        cachedQ   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,74,        cachedT   = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,2,0,9,30,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,89,        return cachedQ;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,103,            for (int k = m - 1; k >= 1; --k) {,0,0,0,1,3,0,0,0,0,4,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,2,0,0,1,2,0,6,0,0,9,45,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,131,        return cachedQt;,8,2,0,0,0,1,0,0,0,11,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,175,        return main;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,185,        return secondary;,4,0,1,0,0,1,0,0,0,7,17,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,193,        final int m = householderVectors.length;,0,0,0,0,0,0,0,0,0,0,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,133,                            final NumberFormat format) {,2,0,0,0,2,1,0,2,0,5,28,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,135,        this.suffix            = suffix;,8,2,0,0,0,1,6,0,0,18,32,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,0,8,0,0,20,35,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,137,        this.rowSuffix         = rowSuffix;,0,0,0,0,0,0,0,0,0,0,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,430,                final ArrayRealVector[] eigenvectors) {,0,0,0,1,4,0,0,0,0,5,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,431,            this.realEigenvalues = realEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,432,            this.imagEigenvalues = imagEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,433,            this.eigenvectors = eigenvectors;,0,0,0,0,0,0,0,0,0,0,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,434,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,413,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,516,            for (int i = 0; i < realEigenvalues.length; ++i) {,10,1,0,1,3,0,0,0,0,12,50,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,517,                if (realEigenvalues[i] == 0 &&,0,2,1,1,3,0,0,0,0,6,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,522,            return true;,0,0,0,0,0,1,0,0,0,1,12,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,532,            if (!isNonSingular()) {,4,0,0,2,5,0,2,0,0,8,23,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,536,            final int m = realEigenvalues.length;,6,0,0,0,0,1,0,0,0,7,37,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,537,            final double[][] invData = new double[m][m];,2,0,1,4,8,1,0,0,0,7,44,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,539,            for (int i = 0; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,540,                final double[] invI = invData[i];,2,0,1,2,4,1,0,0,0,7,33,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,541,                for (int j = 0; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,542,                    double invIJ = 0;,2,0,0,0,0,0,0,0,0,2,17,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,543,                    for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,12,0,0,22,29,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,544,                        final double[] vK = eigenvectors[k].getDataRef();,0,0,0,3,6,0,0,0,0,9,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,545,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,2,2,1,3,6,0,0,0,0,17,44,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,547,                    invI[j] = invIJ;,2,0,1,1,2,0,0,0,0,7,16,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,550,            return MatrixUtils.createRealMatrix(invData);,0,0,0,1,2,1,6,0,0,6,45,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,3,1,1,2,0,0,0,0,14,85,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,0,0,2,4,0,10,0,0,12,104,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,130,        if (data == null ||,2,2,0,0,1,0,0,0,0,4,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,391,        final int rows = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,392,        if (rows != matrix.getColumnDimension()) {,2,1,0,2,5,0,4,0,0,7,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,399,        for (int i = 0; i < rows; i++) {,10,1,0,1,3,1,4,0,0,17,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,413,        return true;,16,4,0,0,0,2,8,0,0,32,12,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,440,"        return isSymmetricInternal(matrix, eps, false);",4,3,0,1,2,1,14,0,0,22,47,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,455,"        checkRowIndex(m, row);",2,0,0,1,2,0,0,0,0,4,22,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,456,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,468,        if (row < 0 ||,8,1,0,0,1,0,0,0,0,11,14,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,484,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,488,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,611,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,118,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,81,    private byte maxIter = 30;,6,1,0,0,0,1,0,0,0,8,26,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,119,        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;,0,0,0,2,4,0,0,0,0,6,102,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",2,0,0,1,2,0,8,0,0,11,54,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,121,        if (isSymmetric) {,8,5,0,1,3,0,0,0,0,13,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,122,            transformToTridiagonal(matrix);,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,123,            findEigenVectors(transformer.getQ().getData());,0,0,0,3,6,0,0,0,0,9,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,128,    },2,1,1,0,1,0,12,0,0,19,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,272,        for (int i = 0; i < imagEigenvalues.length; i++) {,0,0,0,1,3,0,0,0,0,4,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {",0,0,1,3,7,0,6,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,277,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,290,        return realEigenvalues.clone();,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,348,        return eigenvectors[i].copy();,6,0,1,2,4,2,2,4,0,17,30,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,357,        double determinant = 1;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,358,        for (double lambda : realEigenvalues) {,6,0,0,1,3,0,4,0,0,11,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,359,            determinant *= lambda;,0,0,0,0,0,0,0,0,0,0,22,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,361,        return determinant;,6,1,0,0,0,1,0,0,0,8,19,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,406,        if (hasComplexEigenvalues()) {,8,1,0,2,5,0,2,0,0,11,30,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,409,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",0,0,0,1,2,1,0,0,0,4,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,561,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,562,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,563,        secondary = transformer.getSecondaryDiagonalRef();,2,0,0,1,2,0,4,0,0,7,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,564,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,573,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,574,        final int n = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,575,        realEigenvalues = new double[n];,4,1,1,1,2,0,0,0,0,8,32,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,576,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,577,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,578,        for (int i = 0; i < n - 1; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,582,        realEigenvalues[n - 1] = main[n - 1];,0,0,0,2,4,0,0,0,0,6,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,583,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,586,        double maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,2,28,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,587,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,10,0,0,17,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,44,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,596,        if (maxAbsoluteValue != 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,597,            for (int i=0; i < n; i++) {,4,0,1,1,3,0,0,0,0,27,27,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,601,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,602,                    e[i]=0;,0,0,0,1,2,0,0,0,0,3,7,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,607,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,608,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,611,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,618,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,674,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,678,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,679,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,680,            double p = realEigenvalues[i];,2,0,1,1,2,0,0,0,0,6,30,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,681,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,687,            if (k != i) {,4,1,0,1,3,0,0,0,0,5,13,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,699,        maxAbsoluteValue = 0;,2,0,0,0,0,0,8,0,0,11,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,700,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,702,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,0,0,0,2,4,0,0,0,0,6,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,706,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,707,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,713,        eigenvectors = new ArrayRealVector[n];,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,714,        final double[] tmp = new double[n];,4,0,1,2,4,1,0,0,0,8,35,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,715,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,716,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,717,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,719,            eigenvectors[i] = new ArrayRealVector(tmp);,48,18,1,2,4,0,0,2,0,75,43,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,721,    },2,0,0,0,1,0,0,0,0,3,1,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,202,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,6,0,0,9,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,67,    protected AbstractRealDistribution() {,2,0,0,1,3,1,0,0,0,3,38,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,50,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,4,0,0,0,0,1,0,0,0,5,73,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,70,        random = null;,4,0,0,0,0,1,2,0,0,8,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,76,    protected AbstractRealDistribution(RandomGenerator rng) {,4,0,0,1,3,1,0,2,0,7,57,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,77,        random = rng;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,91,"        return probability(x0, x1);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,112,        if (x0 > x1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,157,        if (p < 0.0 || p > 1.0) {,10,4,0,1,3,0,0,0,0,14,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,158,"            throw new OutOfRangeException(p, 0, 1);",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,161,        double lowerBound = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,162,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,163,            return lowerBound;,16,3,1,0,0,1,0,0,0,21,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,166,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,167,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,168,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,171,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,172,        final double sig = FastMath.sqrt(getNumericalVariance());,0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,12,2,0,2,5,0,12,0,0,29,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,178,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,181,                lowerBound = -1.0;,10,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,182,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,183,                    lowerBound *= 2.0;,8,0,1,0,0,1,0,0,0,12,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,188,        if (upperBound == Double.POSITIVE_INFINITY) {,14,3,0,1,3,0,0,0,0,17,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,189,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,190,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,192,                upperBound = 1.0;,4,0,0,0,0,0,0,0,0,5,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,193,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,194,                    upperBound *= 2.0;,2,0,0,0,0,0,0,0,0,3,18,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,206,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,211,        if (!isSupportConnected()) {,6,3,0,2,5,0,2,0,0,12,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,213,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,214,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,2,0,0,8,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,215,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,216,                if (cumulativeProbability(x - dx) == px) {,6,2,0,2,5,0,2,0,0,10,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,217,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,218,                    while (upperBound - lowerBound > dx) {,8,2,0,1,3,0,0,0,0,10,38,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,6,2,0,1,2,1,0,0,0,9,56,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,220,                        if (cumulativeProbability(midPoint) < px) {,10,3,0,2,5,1,8,0,0,22,43,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,221,                            lowerBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,223,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,225,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,226,                    return upperBound;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,230,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,241,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,247,        randomData.reSeed(seed);,6,1,0,1,2,0,6,0,0,14,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,248,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,259,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,0,0,0,7,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,269,        if (sampleSize <= 0) {,4,1,0,1,3,0,0,0,0,5,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",6,0,0,0,1,0,0,2,0,9,74,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,273,        double[] out = new double[sampleSize];,4,0,1,2,4,1,0,0,0,11,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,274,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,275,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,277,        return out;,4,0,0,0,0,4,0,0,0,7,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,11,287,        return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,108,"            throw new DimensionMismatchException(covariances.length, dim);",6,0,0,1,2,0,0,2,0,8,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,113,"                throw new DimensionMismatchException(covariances[i].length, dim);",6,0,1,2,4,0,0,2,0,12,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,134,"                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);",2,0,1,2,4,0,0,2,0,8,73,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,173,        return covarianceMatrix.copy();,6,1,0,1,2,1,4,0,0,12,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,180,"            throw new DimensionMismatchException(vals.length, dim);",6,0,0,1,2,0,0,2,0,8,55,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,195,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,196,        final double[] std = new double[dim];,2,0,1,2,4,1,0,0,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,197,        final double[][] s = covarianceMatrix.getData();,2,0,0,3,6,1,4,0,0,7,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,198,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,199,            std[i] = FastMath.sqrt(s[i][i]);,12,1,0,4,8,0,6,0,0,21,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,201,        return std;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,206,        final int dim = getDimension();,4,1,0,1,2,1,2,0,0,8,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,207,        final double[] normalVals = new double[dim];,2,0,1,2,4,1,0,0,0,5,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,209,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,10,0,0,10,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,210,            normalVals[i] = random.nextGaussian();,2,0,1,2,4,0,4,0,0,13,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,213,        final double[] vals = samplingMatrix.operate(normalVals);,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,215,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,216,            vals[i] += means[i];,10,2,1,2,4,0,0,0,0,23,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,219,        return vals;,6,2,0,0,0,1,0,2,0,10,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,48,        random.setSeed(seed);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,61,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,62,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",10,2,0,0,1,0,0,2,0,15,74,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,65,        final double[][] out = new double[sampleSize][dimension];,0,0,0,4,8,0,0,0,0,12,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,66,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,67,            out[i] = sample();,2,0,1,2,4,0,2,12,0,21,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,69,        return out;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,38,"        super(value, 0, false);",0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,39,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,48,"        super(specific, value, 0, false);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,11,49,    },2,0,0,0,1,0,0,0,0,2,1,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,54,    },2,1,1,0,1,0,0,0,0,7,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,68,"        super(specific, wrong, min);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,71,        this.boundIsAllowed = boundIsAllowed;,10,1,0,0,0,0,0,0,0,13,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,72,    },10,1,0,0,1,0,0,0,0,12,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,11,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,46,"        super(pattern, wrong, arguments);",12,1,0,1,2,0,0,0,0,13,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,47,        argument = wrong;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,11,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,44,                                        Object ... args) {,8,0,0,0,2,0,0,0,0,9,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,11,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,45,        dimension = expected;,12,1,0,0,0,0,0,0,0,15,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",2,0,1,1,2,0,0,0,0,5,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,11,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,47,"        super(wrong, threshold, false);",4,0,0,1,2,0,0,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,48,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,49,        this.threshold = threshold;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,51,        final ExceptionContext context = getContext();,2,0,0,1,2,1,2,2,0,7,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,52,        context.addMessage(LocalizedFormats.NOT_POSITIVE_DEFINITE_MATRIX);,4,0,0,1,2,0,4,0,0,8,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,53,"        context.addMessage(LocalizedFormats.ARRAY_ELEMENT, wrong, index);",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,60,        return index;,2,0,0,0,0,1,0,2,0,4,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,66,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,72,        return threshold;,10,2,0,0,0,1,2,0,0,15,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/SingularMatrixException,11,36,        super(LocalizedFormats.SINGULAR_MATRIX);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/SingularMatrixException,11,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,59,"        this(0, 1);",0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,71,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,86,"        this(new Well19937c(), mean, sd, inverseCumAccuracy);",12,2,0,2,4,0,0,2,0,16,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,87,    },4,0,0,0,1,0,0,0,0,5,1,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,104,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,106,        if (sd <= 0) {,12,4,0,1,3,1,0,0,0,17,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,107,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,110,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,111,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,112,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,113,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,44,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,46,    private static final double SQRT2 = FastMath.sqrt(2.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,121,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,130,        return standardDeviation;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,135,        final double x0 = x - mean;,8,1,0,0,0,1,0,0,0,10,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,136,        final double x1 = x0 / standardDeviation;,6,1,0,0,0,1,0,0,0,8,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,137,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,8,3,0,2,4,1,4,0,0,16,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,148,        final double dev = x - mean;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,149,        if (FastMath.abs(dev) > 40 * standardDeviation) {,12,2,0,2,5,3,6,2,0,25,49,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,150,            return dev < 0 ? 0.0d : 1.0d;,0,0,0,0,0,1,0,0,0,1,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,152,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,6,4,0,3,6,1,4,0,0,14,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,11,163,"        return probability(x0, x1);",6,1,0,1,2,2,6,0,0,14,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,0,0,0,0,0,0,0,0,0,0,46,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,0,0,0,3,6,0,0,0,0,9,57,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,0,0,0,4,9,0,0,0,0,13,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,0,0,0,1,2,0,0,0,0,3,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",0,0,0,1,2,0,0,0,0,3,27,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,4,0,0,3,6,0,0,0,0,5,82,4,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },12,6,1,0,1,0,0,0,0,36,1,1,0.31034,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",14,2,0,7,14,0,6,0,0,23,83,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },4,0,0,0,1,0,0,0,0,4,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,8,1,1,1,2,1,0,0,0,15,33,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,12,1,1,2,4,1,0,0,0,21,34,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,2,0,0,2,4,1,0,8,0,11,34,2,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,0,0,0,4,8,0,0,0,0,12,71,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,10,5,1,3,6,4,4,0,0,32,49,1,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,97,        final int z3 = z1      ^ z2;,0,0,0,0,0,0,0,0,0,0,28,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,20,10,0,6,12,0,0,0,0,30,72,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,4,1,1,1,2,0,0,0,0,10,18,3,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,2,0,0,1,2,0,0,0,0,2,26,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,2,1,0,2,4,0,0,0,0,3,36,4,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,4,0,0,1,2,1,10,0,0,15,26,0,0.225,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,101,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,0,6,0,0,6,33,5,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,103,            final double x = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,104,            final double y = nextDouble();,0,0,0,1,2,0,0,0,0,3,30,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,105,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,106,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,0,0,2,4,1,0,0,0,3,58,2,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,107,            random       = r * FastMath.cos(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,108,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,109,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,111,            random = nextGaussian;,6,0,0,0,0,0,0,0,0,7,22,3,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,112,            nextGaussian = Double.NaN;,0,0,1,0,0,0,2,0,0,5,26,4,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,115,        return random;,8,2,0,0,0,4,8,0,0,22,14,1,0.1875,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2274,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2328,"                return cosQ(xa, xb);",2,0,0,1,2,1,0,0,0,2,20,4,0.17308,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2293,        int quadrant = 0;,8,1,0,0,0,4,0,0,0,13,17,1,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2296,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2297,        if (x < 0) {,6,0,0,1,3,0,0,2,0,8,12,7,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2306,        double xb = 0;,8,0,0,0,0,0,2,10,0,20,14,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2307,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2326,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1822,            c = a + t;,6,1,0,0,0,3,0,0,0,10,10,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1823,            d = -(c - a - t);,4,0,0,1,2,0,0,0,0,4,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1824,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1825,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1841,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,0,0,0,0,3,39,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1842,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1844,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1845,        double b = -(a - pi2a + xa);,8,0,0,1,2,1,0,0,0,10,28,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1846,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1848,"        return sinQ(a, b);",0,0,0,1,2,1,0,0,0,4,18,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2226,        boolean negative = false;,14,2,0,0,0,0,0,0,0,17,25,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2227,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2229,        double xb = 0.0;,6,1,1,0,0,1,0,0,0,12,16,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2232,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2233,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2239,        if (xa == 0.0) {,4,1,0,1,3,0,0,0,0,6,16,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2252,        if (xa > 3294198.0) {,8,1,0,1,3,0,14,0,0,24,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2268,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2272,        switch (quadrant) {,2,0,0,1,3,0,2,2,0,6,19,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1717,        int idx = (int) ((xa * 8.0) + 0.5);,6,2,0,3,6,0,0,0,0,9,35,0,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1721,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1722,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,0,2,0,4,39,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1723,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1724,        final double costB = COSINE_TABLE_B[idx];,6,0,1,1,2,1,6,0,0,17,41,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1727,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1728,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1729,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1730,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1733,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1734,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1735,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1736,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1762,        double a = 0;,2,0,0,0,0,0,6,0,0,8,13,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1763,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1765,        double t = sintA;,0,0,0,0,0,0,0,0,0,0,17,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1766,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1767,        double d = -(c - a - t);,12,2,0,1,2,0,0,0,0,15,24,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1768,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1769,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1771,        t = costA * sinEpsA;,2,0,0,0,0,0,2,0,0,4,20,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1772,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1773,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1774,        a = c;,0,0,0,0,0,0,8,0,0,8,6,5,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1775,        b = b + d;,10,2,0,0,0,0,0,0,0,14,10,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,6,0,0,31,68,3,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1819,        if (xb != 0.0) {,4,1,0,1,3,0,0,2,0,7,16,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1828,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1830,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.16364,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1678,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1680,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1681,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1682,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1683,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1686,        p = p * x2 * x;,6,0,0,0,0,3,0,0,0,9,15,2,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1688,        return p;,6,1,1,0,0,2,0,0,0,13,9,3,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1698,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1700,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1701,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1702,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1703,        p = p * x2 + -0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,34,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1704,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1706,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.15254,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,256,        return standardDeviation * random.nextGaussian() + mean;,0,0,0,1,2,1,4,0,0,5,56,9,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,89,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,0.08654,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2332,"                return -cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.07843,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2262,            final CodyWaite cw = new CodyWaite(xa);,0,0,0,1,2,0,0,0,0,3,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2263,            quadrant = cw.getK() & 3;,4,1,0,1,2,0,4,0,0,11,25,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2264,            xa = cw.getRemA();,4,0,0,1,2,1,4,6,0,16,18,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2265,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2317,            final CodyWaite cw = new CodyWaite(xa);,0,0,0,1,2,0,0,0,0,3,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2318,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2319,            xa = cw.getRemA();,2,0,0,1,2,0,14,0,0,17,18,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2320,            xb = cw.getRemB();,6,0,0,1,2,1,4,0,0,12,18,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,2278,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.07547,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3808,        CodyWaite(double xa) {,0,0,0,1,3,0,0,0,0,4,22,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3811,            int k = (int)(xa * 0.6366197723675814);,6,2,0,2,4,0,0,0,0,8,39,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3817,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3818,                remA = xa + a;,16,5,0,0,0,0,0,0,0,22,14,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3819,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3821,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3822,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3823,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3824,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3826,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3827,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3828,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3829,                remB += -(remA - b - a);,10,1,0,1,2,0,0,0,0,13,24,1,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3831,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3832,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3841,            this.finalK = k;,4,0,0,0,0,0,0,0,0,5,16,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3842,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3843,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3844,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3850,            return finalK;,4,0,0,0,0,1,0,0,0,5,14,0,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3856,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3862,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.07407,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,98,"        this(scale, shape, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,54,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,112,"        this(new Well19937c(), scale, shape, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,57,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,113,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,130,        super(rng);,4,0,0,1,2,1,0,0,0,5,11,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,132,        if (shape <= 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,136,        this.scale = scale;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,137,        this.shape = shape;,0,0,0,0,0,0,0,0,0,0,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,138,        this.solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,49,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,139,    },0,0,1,0,1,0,4,0,0,8,1,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,64,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,67,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,0,0,1,2,3,4,0,0,9,55,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.04245,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,71,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",12,0,0,1,2,2,0,2,0,17,50,0,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,86,"        this(new Well19937c(), mean, sd, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,53,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,12,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1297,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1299,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,0,0,0,10,44,6,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0,0,0,0,0,0,0,0,0,0,43,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1301,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1302,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1303,            lnza = lnza * epsilon;,10,2,0,0,0,0,6,0,0,19,22,4,0.03435,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1120,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.03396,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,50,    @Deprecated,0,0,0,0,0,0,0,0,0,0,11,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,76,    protected AbstractRealDistribution(RandomGenerator rng) {,0,0,0,1,3,0,0,0,0,4,57,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,77,        random = rng;,0,0,0,0,0,0,0,0,0,0,13,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03285,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3777,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,10,3,0,5,10,1,12,0,0,28,79,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1242,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1244,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1322,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1323,        double d = -(c-a-lnm[0]);,10,2,1,2,4,0,0,0,0,18,25,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1325,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1327,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1328,        d = -(c - a - lnza);,14,1,0,1,2,0,0,0,0,18,20,0,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1329,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1330,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1332,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1333,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1334,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1335,        b = b + d;,12,6,0,0,0,0,0,0,0,19,10,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1337,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1338,        d = -(c - a - lnm[1]);,8,2,1,2,4,0,2,0,0,17,22,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1339,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1340,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1342,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1344,        a = c;,6,0,0,0,0,0,0,4,0,11,6,3,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1345,        b = b + d;,10,1,0,0,0,0,0,0,0,13,10,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1347,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1352,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,12,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.03158,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.03136,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.03136,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1178,        if (exp == -1 || exp == 0) {,6,3,0,1,3,1,0,0,0,11,28,3,0.03136,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1130,        if (x==0) { // Handle special case of +0/-0,2,0,0,1,3,0,0,0,0,3,43,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1133,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,12,1147,        if (x == Double.POSITIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,12,36,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,55,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,0,0,0,3,26,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0,0,0,1,2,0,0,0,0,3,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,            this.f = f;,0,0,0,0,0,0,0,0,0,0,11,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },6,0,1,0,1,0,0,0,0,9,1,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,10,1,1,3,6,1,8,0,0,26,51,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,2,0,1,2,4,0,4,0,0,11,26,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,6,2,1,2,4,1,10,0,0,24,31,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },8,3,0,0,1,0,0,0,0,11,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,        if (optimizer == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,        return weight;,0,0,0,0,0,1,0,0,0,1,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,",0,0,0,0,1,1,0,0,0,2,32,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",12,1,0,2,4,0,4,2,0,19,58,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },2,0,0,0,1,3,0,0,0,5,1,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",2,2,0,1,3,0,6,0,0,10,83,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,        this.weight = weight;,2,0,0,0,0,0,0,0,0,2,21,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,        this.x      = x;,2,1,0,0,0,0,12,4,0,19,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,52,        this.y      = y;,0,0,0,0,0,0,0,0,0,0,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {,6,0,0,1,3,2,0,2,0,10,79,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,        this.oldOptimizer = optimizer;,12,4,0,0,0,0,0,0,0,17,30,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,        this.optimizer    = null;,2,0,0,0,0,0,0,0,0,3,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,72,        observations      = new ArrayList<WeightedObservedPoint>();,0,0,0,1,2,0,0,0,0,3,59,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,158,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0,0,0,1,2,0,0,0,0,3,51,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,    },2,0,0,0,1,0,4,2,0,8,1,7,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,        super(null); // No custom convergence criterion.,8,3,1,1,2,0,4,4,0,24,48,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,        this.initialStepBoundFactor = initialStepBoundFactor;,4,0,1,0,0,0,0,0,0,10,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,272,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,273,        this.parRelativeTolerance = parRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,49,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,        this.orthoTolerance = orthoTolerance;,8,1,0,0,0,0,0,0,0,10,37,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,275,        this.qrRankingThreshold = threshold;,0,0,0,0,0,0,0,0,0,0,36,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,276,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);",2,0,1,1,2,0,0,0,0,7,41,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,402,"                final double mji = matrix.getEntry(j, i);",0,0,0,1,2,0,0,0,0,3,41,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,403,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3532,        if (a > b) {,0,0,1,1,3,0,0,0,0,5,12,6,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3535,        if (a < b) {,16,3,0,1,3,0,8,0,0,28,12,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3539,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3544,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3545,        if (bits == 0x8000000000000000L) {,6,1,0,1,3,1,0,0,0,8,34,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3548,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,56,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,0,0,0,1,2,0,0,0,0,3,95,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,0,0,0,6,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,13,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,85,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,1,0,2,4,0,0,0,0,3,104,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,391,        final int rows = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,392,        if (rows != matrix.getColumnDimension()) {,0,0,0,2,5,0,0,0,0,7,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,399,        for (int i = 0; i < rows; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,413,        return true;,10,1,0,0,0,1,0,0,0,13,12,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,440,"        return isSymmetricInternal(matrix, eps, false);",0,0,0,1,2,1,6,0,0,7,47,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,455,"        checkRowIndex(m, row);",6,0,0,1,2,1,0,0,0,7,22,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,456,"        checkColumnIndex(m, column);",10,2,0,1,2,0,6,0,0,19,28,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,457,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,468,        if (row < 0 ||,0,2,1,0,1,0,0,0,0,6,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,484,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,488,    },2,0,0,0,1,0,0,0,0,2,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",18,1,0,0,1,0,0,0,0,20,76,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",0,0,0,0,1,0,0,0,0,1,73,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,133,                            final NumberFormat format) {,0,0,0,0,2,0,0,0,0,2,28,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,3,4,0,0,18,35,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,139,        this.columnSeparator   = columnSeparator;,0,0,0,0,0,0,0,0,0,0,41,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,207,        return format;,0,0,0,0,0,1,0,0,0,1,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,67,    public DiagonalMatrix(final double[] d) {,0,0,0,2,5,0,0,0,0,7,41,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,68,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,107,        return new DiagonalMatrix(data);,2,0,0,1,2,1,0,2,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,203,        final int dim = getRowDimension();,0,0,0,1,2,0,0,0,0,3,34,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,204,        final double[][] out = new double[dim][dim];,2,0,1,4,8,1,0,0,0,7,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,237,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,14,0,0,19,48,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,238,        return row == column ? data[row] : 0;,0,0,0,1,2,1,0,0,0,4,37,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,290,        return data == null ? 0 : data.length;,0,0,0,0,0,1,0,0,0,1,38,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,296,        return getRowDimension();,0,0,0,1,2,1,2,0,0,2,25,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,6,0,0,1,2,3,4,0,0,13,77,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,115,    private static final double LN_QUICK_COEF[][] = {,0,0,1,2,5,0,0,0,0,5,49,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,128,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,179,    private static final double COSINE_TABLE_A[] =,6,0,0,1,2,3,0,2,0,11,46,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,277,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,2,0,11,54,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,13,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,96,        maximalCount = max;,6,0,0,0,0,1,0,0,0,8,19,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,97,    },0,0,1,0,1,0,0,0,0,9,1,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,164,        count = 0;,4,0,0,0,0,0,0,0,0,6,10,0,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,165,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,43,        return getDefaultNumberFormat(Locale.getDefault());,2,1,0,2,4,1,6,0,0,9,51,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,13,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,264,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,13,267,    },2,0,0,0,1,1,0,6,0,10,1,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,43,    public Weight(double[] weight) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,44,        weightMatrix = new DiagonalMatrix(weight);,6,0,0,1,2,3,0,2,0,12,42,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,45,    },2,0,0,0,1,0,0,0,0,2,1,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Weight,13,67,        return weightMatrix.copy();,0,0,0,1,2,1,4,0,0,4,27,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,37,    public InitialGuess(double[] startPoint) {,0,0,0,2,5,0,0,0,0,7,42,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,38,        init = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,26,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,39,    },0,0,0,0,1,0,4,0,0,4,1,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/InitialGuess,13,47,        return init.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,231,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,232,        evaluations.resetCount();,6,0,0,1,2,0,4,0,0,11,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,233,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,235,        parseOptimizationData(optData);,0,0,0,1,2,0,4,0,0,4,31,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,237,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,239,        setUp();,0,0,0,1,2,0,2,0,0,2,8,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,260,        return weightMatrix.copy();,0,0,0,1,2,1,0,0,0,4,27,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,321,        final int dim = target.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,322,        weight = new double[dim];,2,0,1,1,2,0,0,0,0,5,25,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,323,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,324,"            weight[i] = weightMatrix.getEntry(i, i);",0,0,1,2,4,0,8,0,0,13,40,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,326,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,342,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,343,            if (data instanceof Target) {,0,0,0,1,3,0,0,0,0,4,29,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,344,                target = ((Target) data).getTarget();,6,0,0,3,6,0,2,2,0,11,37,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,345,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,347,            if (data instanceof Weight) {,10,1,0,1,3,0,0,2,0,14,29,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,348,                weightMatrix = ((Weight) data).getWeight();,14,1,0,3,6,0,2,2,0,22,43,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,349,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,351,            if (data instanceof InitialGuess) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,352,                start = ((InitialGuess) data).getInitialGuess();,4,0,0,3,6,0,2,2,0,9,48,8,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,353,                continue;,6,0,0,0,0,2,0,2,0,11,9,1,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,356,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,365,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,39,    public Target(double[] observations) {,6,0,1,2,5,1,4,0,0,16,38,2,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,40,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/Target,13,49,        return target.clone();,0,0,0,1,2,1,4,0,0,4,22,5,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,496,"        return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);",6,0,0,2,4,1,16,0,0,22,109,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,502,        super.setUp();,0,0,0,1,2,0,0,0,0,3,14,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,505,        jacobianEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,24,6,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,508,        weightMatrixSqrt = squareRoot(getWeight());,0,0,0,2,4,0,0,0,0,6,43,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,562,            final EigenDecomposition dec = new EigenDecomposition(m);,0,0,0,1,2,0,0,0,0,3,57,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,0,0,0,1,3,1,6,2,0,8,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,0,0,0,1,3,1,0,0,0,5,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,2,1,0,1,3,1,12,2,0,19,55,4,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,4,0,0,1,3,1,6,2,0,12,55,3,0.01205,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,63,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,2,0,2,32,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,53,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,62,"        this(max,",0,0,0,0,1,0,0,0,0,1,9,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,80,                       MaxCountExceededCallback cb) {,0,0,0,0,2,0,0,0,0,2,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,41,    private int count = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,81,        if (cb == null){,0,0,0,1,3,0,0,0,0,4,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,85,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,13,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,0,0,2,4,0,0,0,0,4,65,7,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,13,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,79,    protected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {,4,0,0,1,3,1,0,4,0,9,101,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,51,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,80,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,134,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,135,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,630,            super(Fraction.ZERO);,4,0,0,1,2,0,0,0,0,4,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,631,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,637,            data = new double[rows][columns];,4,0,1,2,4,1,0,2,0,12,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,638,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,643,            data[row][column] = value.doubleValue();,0,0,1,3,6,0,4,0,0,11,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,644,        },6,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,652,"            return new Array2DRowRealMatrix(data, false);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,625,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,2,0,0,0,1,2,0,4,0,8,100,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0,0,0,0,1,0,0,0,0,1,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,54,        return getWrongDimension(0);,4,0,0,1,2,4,6,2,0,15,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,60,        return getExpectedDimension(0);,0,0,0,1,2,1,2,0,0,2,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,66,        return getWrongDimension(1);,0,0,0,1,2,1,2,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,72,        return getExpectedDimension(1);,2,0,0,1,2,1,2,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,59,"        super(specific, wrong, expected);",8,1,0,1,2,0,0,0,0,9,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,60,        this.wrong = wrong.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,61,        this.expected = expected.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,68,        return wrong.clone();,10,1,0,1,2,1,0,0,0,12,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,74,        return expected.clone();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,82,        return wrong[index];,0,0,1,1,2,1,0,0,0,4,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,13,89,        return expected[index];,0,0,1,1,2,1,0,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,44,                                        Object ... args) {,10,3,0,0,2,2,0,0,0,15,18,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,46,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,2,0,12,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,13,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1303,                return new Iterator<Entry>() {,8,1,0,1,3,2,0,4,0,15,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1305,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1309,                        return i.hasNext();,0,0,0,1,2,1,4,0,0,4,19,15,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1314,                        e.setIndex(i.next().getIndex());,0,0,0,3,6,0,0,0,0,9,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1315,                        return e;,6,1,1,0,0,1,0,0,0,12,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1326,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,16,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1249,        return new RealVector() {,0,0,0,1,3,1,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1630,            class UnmodifiableEntry extends Entry {,0,0,0,0,1,0,0,0,0,1,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1258,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1264,                return v.map(function);,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1270,                final Iterator<Entry> i = v.iterator();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1271,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1301,                final Iterator<Entry> i = v.sparseIterator();,2,0,0,1,2,1,10,4,0,17,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1303,                return new Iterator<Entry>() {,4,0,0,1,3,1,0,4,0,9,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1334,                return v.copy();,0,0,0,1,2,1,4,0,0,4,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1341,                return v.add(w);,0,0,0,1,2,1,6,0,0,6,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1348,                return v.subtract(w);,0,0,0,1,2,1,6,0,0,6,21,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1354,                return v.mapAdd(d);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1366,                throw new MathUnsupportedOperationException();,4,0,0,1,2,0,0,0,0,5,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1372,                return v.mapSubtract(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1384,                throw new MathUnsupportedOperationException();,4,0,1,1,2,2,0,6,0,15,46,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1390,                return v.mapMultiply(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1402,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,5,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1408,                return v.mapDivide(d);,0,0,0,1,2,1,6,0,0,6,22,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1420,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1427,                return v.ebeMultiply(w);,8,1,0,1,2,1,6,0,0,16,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1434,                return v.ebeDivide(w);,4,0,0,1,2,1,6,0,0,11,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1441,                return v.dotProduct(w);,0,1,1,1,2,1,6,0,0,14,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1448,                return v.cosine(w);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1454,                return v.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1460,                return v.getL1Norm();,0,0,0,1,2,1,4,0,0,4,21,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1466,                return v.getLInfNorm();,8,2,0,1,2,1,4,0,0,14,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1473,                return v.getDistance(w);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1480,                return v.getL1Distance(w);,0,0,0,1,2,1,6,0,0,6,26,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1487,                return v.getLInfDistance(w);,2,0,0,1,2,2,10,0,0,14,28,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1493,                return v.unitVector();,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1504,                throw new MathUnsupportedOperationException();,2,2,0,1,2,0,0,0,0,4,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1510,                return v.outerProduct(w);,0,0,0,1,2,1,6,0,0,6,25,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1516,                return v.getEntry(index);,4,1,0,1,2,1,6,0,0,11,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1528,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,9,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1540,                throw new MathUnsupportedOperationException();,0,1,1,1,2,0,0,0,0,8,46,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1546,                return v.getDimension();,12,5,0,1,2,1,4,0,0,21,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1552,                return v.append(w);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1558,                return v.append(d);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1565,"                return v.getSubVector(index, n);",0,0,0,1,2,1,8,0,0,8,32,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1577,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1589,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1595,                return v.toArray();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1601,                return v.isNaN();,0,0,0,1,2,1,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1607,                return v.isInfinite();,6,1,0,1,2,1,4,0,0,12,22,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1614,"                return v.combine(a, b, y);",4,0,0,1,2,1,22,4,0,31,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1626,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,7,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1159,    @Deprecated,18,3,0,0,0,0,0,0,0,21,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,99,"        setEntry(index, getEntry(index) + increment);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,100,    },0,0,0,0,1,0,14,0,0,14,1,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,165,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,166,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,177,        int d = getDimension();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,178,        if (d != n) {,14,2,0,1,3,0,0,0,0,18,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,179,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,190,        if (index < 0 ||,8,3,0,0,1,0,0,4,0,16,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,4,2,0,10,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,195,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,208,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,209,        if ((start < 0) || (start >= dim)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,210,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",6,0,0,0,1,0,0,2,0,8,63,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,213,        if ((end < 0) || (end >= dim)) {,10,3,1,3,7,1,8,2,0,28,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,214,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",6,0,0,0,1,0,0,2,0,8,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,217,        if (end < start) {,6,1,0,1,3,0,0,0,0,7,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,219,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",4,0,0,0,1,0,0,2,0,6,81,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,222,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,234,        checkVectorDimensions(v);,4,0,0,1,2,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,235,        RealVector result = v.copy();,2,0,0,1,2,0,12,2,0,16,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,236,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,8,4,0,14,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,237,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,238,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,239,            final int index = e.getIndex();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,240,"            result.setEntry(index, e.getValue() + result.getEntry(index));",2,1,0,3,6,1,16,0,0,20,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,241,        },0,0,0,0,1,0,8,0,0,8,1,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,242,        return result;,8,0,0,0,0,1,0,2,0,11,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,255,        checkVectorDimensions(v);,6,1,0,1,2,0,4,0,0,11,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,256,        RealVector result = v.mapMultiply(-1d);,4,0,0,1,2,0,8,2,0,16,39,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,257,        Iterator<Entry> it = iterator();,10,1,0,1,2,0,2,4,0,18,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,258,        while (it.hasNext()) {,0,0,1,2,5,0,4,0,0,11,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,259,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,260,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,261,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,263,        return result;,12,0,0,0,0,2,0,0,0,14,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,274,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,0,0,0,7,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,285,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,286,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,8,2,0,10,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,288,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,307,        checkVectorDimensions(v);,16,3,0,1,2,0,4,0,0,25,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,308,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,309,        final int n = getDimension();,4,0,0,1,2,1,8,2,0,15,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,310,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,311,            d += getEntry(i) * v.getEntry(i);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,313,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,329,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,330,        final double vNorm = v.getNorm();,2,0,0,1,2,1,6,0,0,9,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,332,        if (norm == 0 ||,0,0,0,0,1,0,0,0,0,1,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,334,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,336,        return dotProduct(v) / (norm * vNorm);,0,0,0,2,4,1,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,396,        checkVectorDimensions(v);,4,1,0,1,2,0,4,0,0,9,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,397,        double d = 0;,6,3,0,0,0,0,8,0,0,17,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,398,        Iterator<Entry> it = iterator();,10,0,0,1,2,0,2,4,0,17,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,399,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,400,            final Entry e = it.next();,10,2,0,1,2,1,4,2,0,19,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,401,            final double diff = e.getValue() - v.getEntry(e.getIndex());,4,2,0,3,6,1,18,0,0,25,60,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,402,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,403,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,404,        return FastMath.sqrt(d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,418,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,419,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,420,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,421,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,422,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,423,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,424,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,425,        return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,439,        double norm = 0;,12,3,0,0,0,0,0,0,0,17,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,440,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,441,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,442,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,443,            norm += FastMath.abs(e.getValue());,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,444,        },4,0,1,0,1,0,6,0,0,13,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,445,        return norm;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,459,        double norm = 0;,6,0,0,0,0,0,0,0,0,7,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,460,        Iterator<Entry> it = iterator();,8,1,0,1,2,1,2,4,0,16,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,461,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,462,            final Entry e = it.next();,4,1,1,1,2,1,4,2,0,16,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,463,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,464,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,465,        return norm;,2,0,0,0,0,1,6,0,0,8,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,481,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,482,        double d = 0;,4,1,1,0,0,0,0,0,0,14,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,483,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,484,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,485,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,486,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,2,1,0,4,8,0,16,0,0,20,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,487,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,488,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,507,        checkVectorDimensions(v);,0,0,0,1,2,0,2,0,0,2,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,508,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,509,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,510,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,511,            final Entry e = it.next();,2,0,1,1,2,1,4,2,0,16,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,512,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,513,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,514,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,524,        int minIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,525,        double minValue = Double.POSITIVE_INFINITY;,8,0,0,0,0,0,0,0,0,9,43,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,526,        Iterator<Entry> iterator = iterator();,4,0,0,1,2,0,4,0,0,8,38,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,527,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,528,            final Entry entry = iterator.next();,4,1,0,1,2,1,20,2,0,28,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,529,            if (entry.getValue() <= minValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,530,                minIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,531,                minValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,533,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,534,        return minIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,544,        final int minIndex = getMinIndex();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,545,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,555,        int maxIndex    = -1;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,556,        double maxValue = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,557,        Iterator<Entry> iterator = iterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,558,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,559,            final Entry entry = iterator.next();,2,0,0,1,2,1,4,2,0,9,36,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,560,            if (entry.getValue() >= maxValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,561,                maxIndex = entry.getIndex();,2,1,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,562,                maxValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,564,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,565,        return maxIndex;,12,1,0,0,0,1,0,0,0,14,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,575,        final int maxIndex = getMaxIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,576,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,588,        return copy().mapMultiplyToSelf(d);,10,2,1,2,4,2,6,0,0,21,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,599,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,0,0,0,10,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,610,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,621,        return mapAddToSelf(-d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,632,        return copy().mapDivideToSelf(d);,4,0,0,2,4,4,6,6,0,19,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,643,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,3,6,1,6,0,0,7,64,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,653,        final int m = this.getDimension();,2,0,0,1,2,1,2,0,0,5,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,654,        final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,656,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,657,"            product = new OpenMapRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,38,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,659,"            product = new Array2DRowRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,661,        for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,662,            for (int j = 0; j < n; j++) {,4,1,1,1,3,0,0,0,0,9,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,663,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0,1,0,3,6,0,18,0,0,19,57,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,666,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,681,        final double norm2 = v.dotProduct(v);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,682,        if (norm2 == 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,683,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,6,1,1,1,2,0,0,2,0,16,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,685,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,1,0,3,6,1,14,0,0,15,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,694,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,695,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,696,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,697,            e.setValue(value);,0,0,0,1,2,0,6,0,0,6,18,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,698,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,699,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,709,        int dim = getDimension();,10,2,0,1,2,0,2,0,0,15,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,710,        double[] values = new double[dim];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,711,        for (int i = 0; i < dim; i++) {,10,1,0,1,3,0,8,0,0,21,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,712,            values[i] = getEntry(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,714,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,725,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,726,        if (norm == 0) {,4,2,0,1,3,0,0,0,0,7,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,727,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,729,        return mapDivide(norm);,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,739,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,740,        if (norm == 0) {,4,1,0,1,3,0,0,0,0,6,16,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,741,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,743,        mapDivideToSelf(getNorm());,6,1,0,2,4,0,0,0,0,7,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,744,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,767,        return new SparseEntryIterator();,2,0,0,1,2,2,0,2,0,5,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,781,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,782,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,827,        return copy().mapToSelf(function);,0,0,0,2,4,1,6,0,0,6,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,844,        Iterator<Entry> it = iterator();,18,1,0,1,2,0,2,4,0,26,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,845,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,846,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,847,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,12,0,0,12,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,848,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,849,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,867,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,884,        checkVectorDimensions(y);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,885,        for (int i = 0; i < getDimension(); i++) {,6,1,0,2,5,0,2,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,886,            final double xi = getEntry(i);,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,887,            final double yi = y.getEntry(i);,2,0,0,1,2,1,6,0,0,9,32,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,888,"            setEntry(i, a * xi + b * yi);",10,3,0,1,2,0,4,0,0,17,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,890,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,904,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,905,"        visitor.start(dim, 0, dim - 1);",6,2,0,1,2,0,6,0,0,14,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,906,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,907,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,10,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,909,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,928,"        checkIndices(start, end);",0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,929,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,930,        for (int i = start; i <= end; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,931,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,10,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,933,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,949,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,970,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,0,0,0,4,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,984,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,985,"        visitor.start(dim, 0, dim - 1);",6,1,0,1,2,1,10,0,0,18,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,986,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,987,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,3,6,0,14,0,0,14,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,989,        return visitor.end();,8,1,0,1,2,1,4,0,0,14,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1008,"        checkIndices(start, end);",0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1009,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1010,        for (int i = start; i <= end; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1011,"            setEntry(i, visitor.visit(i, getEntry(i)));",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1013,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1029,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1050,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,8,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1125,        throw new MathUnsupportedOperationException();,12,2,1,1,2,0,10,2,0,30,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1138,        throw new MathUnsupportedOperationException();,10,2,0,1,2,1,4,0,0,18,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1249,        return new RealVector() {,2,0,0,1,3,1,0,2,0,4,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1059,        public Entry() {,2,0,0,1,3,1,0,0,0,3,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1060,            setIndex(0);,6,1,0,1,2,0,0,0,0,8,12,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1061,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1069,            return getEntry(getIndex());,0,0,0,2,4,1,4,0,0,4,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1078,"            setEntry(getIndex(), value);",0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1079,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1087,            return index;,2,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1096,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1097,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1630,            class UnmodifiableEntry extends Entry {,2,0,0,0,1,0,0,2,0,4,39,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1634,                    return v.getEntry(getIndex());,0,0,0,2,4,1,6,0,0,6,30,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,13,1646,                    throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,44,        this(LocalizedFormats.UNSUPPORTED_OPERATION);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,52,                                             Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,53,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,54,"        context.addMessage(pattern, args);",2,1,0,1,2,0,8,0,0,11,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,55,    },4,0,0,0,1,0,0,0,0,5,1,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,59,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,65,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,13,71,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,10,0,0,1,4,1,10,4,0,26,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,606,"                out.setEntry(column, row, value);",8,1,1,1,2,0,18,0,0,32,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,67,        throws NotStrictlyPositiveException {,4,2,0,0,1,0,8,0,0,15,37,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,69,            throw new NotStrictlyPositiveException(rowDimension);,6,0,0,1,2,0,6,0,0,14,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,71,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,72,            throw new NotStrictlyPositiveException(columnDimension);,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,79,"        MatrixUtils.checkAdditionCompatible(this, m);",6,0,0,1,2,3,6,0,0,15,45,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,82,        final int columnCount = getColumnDimension();,6,2,1,1,2,1,2,0,0,17,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,84,        for (int row = 0; row < rowCount; ++row) {,0,0,1,1,3,0,0,0,0,7,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,85,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,90,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,98,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,99,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,101,        for (int row = 0; row < rowCount; ++row) {,6,0,0,1,3,1,2,0,0,9,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,107,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,112,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,113,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,115,        for (int row = 0; row < rowCount; ++row) {,14,2,0,1,3,1,0,0,0,18,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,116,            for (int col = 0; col < columnCount; ++col) {,12,1,0,1,3,0,0,0,0,16,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,117,"                out.setEntry(row, col, getEntry(row, col) + d);",4,1,0,2,4,0,14,0,0,20,47,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,121,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,126,        final int rowCount    = getRowDimension();,12,1,0,1,2,0,0,0,0,15,42,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,127,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,129,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,130,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,131,"                out.setEntry(row, col, getEntry(row, col) * d);",2,1,0,2,4,0,14,0,0,17,47,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,135,        return out;,2,0,1,0,0,1,0,0,0,8,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",4,0,0,1,2,0,6,0,0,11,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,144,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,145,        final int nSum  = getColumnDimension();,8,1,0,1,2,1,2,0,0,12,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,146,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,147,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,148,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,149,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,150,                for (int i = 0; i < nSum; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,153,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,157,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,163,        return m.multiply(this);,2,0,0,1,2,1,12,0,0,15,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,169,        if (p < 0) {,2,1,0,1,3,0,4,0,0,7,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);",0,0,0,1,2,0,0,0,0,3,74,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,173,        if (!isSquare()) {,0,0,0,2,5,0,0,0,0,7,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",4,0,1,3,6,0,4,2,0,13,76,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,177,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,178,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0,0,0,2,4,1,6,0,0,6,68,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,181,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,182,            return this.copy();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,185,        final int power = p - 1;,4,1,0,0,0,1,0,0,0,6,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,194,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,2,0,0,3,6,1,8,0,0,11,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,195,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,4,1,0,1,2,1,0,8,0,14,69,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,196,        int maxI = -1;,26,2,1,0,0,0,0,0,0,36,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,198,        for (int i = 0; i < binaryRepresentation.length; ++i) {,10,1,0,1,3,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,199,            if (binaryRepresentation[i] == '1') {,0,1,1,2,5,0,0,0,0,6,37,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,200,                final int pos = binaryRepresentation.length - i - 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,201,                nonZeroPositions.add(pos);,2,0,0,1,2,0,0,0,0,2,26,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,204,                if (maxI == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,205,                    maxI = pos;,4,0,0,0,0,0,0,0,0,5,11,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,210,        RealMatrix[] results = new RealMatrix[maxI + 1];,4,1,0,2,4,0,0,4,0,9,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,211,        results[0] = this.copy();,0,0,1,2,4,0,2,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,213,        for (int i = 1; i <= maxI; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,214,            results[i] = results[i-1].multiply(results[i-1]);,6,2,1,4,8,0,2,0,0,24,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,217,        RealMatrix result = this.copy();,2,0,0,1,2,0,2,2,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,219,        for (Integer i : nonZeroPositions) {,4,0,0,1,3,0,0,2,0,6,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,220,            result = result.multiply(results[i]);,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,221,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,223,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,228,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,230,        for (int i = 0; i < data.length; ++i) {,0,1,0,1,3,0,8,0,0,9,39,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,231,            final double[] dataI = data[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,232,            for (int j = 0; j < dataI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,40,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,233,"                dataI[j] = getEntry(i, j);",0,0,1,2,4,0,6,0,0,11,26,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,237,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,8,1,0,1,4,1,2,2,0,14,63,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,310,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,312,        for (int i = startRow; i <= endRow; ++i) {,16,2,0,1,3,0,0,0,0,20,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,313,            for (int j = startColumn; j <= endColumn; ++j) {,10,1,0,1,3,0,0,0,0,12,48,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,318,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,8,0,0,8,69,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,327,        final RealMatrix subMatrix =,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,4,1,0,1,4,0,0,0,0,5,71,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,339,        return subMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,349,        final int rowsCount    = endRow + 1 - startRow;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,350,        final int columnsCount = endColumn + 1 - startColumn;,6,2,0,0,0,1,0,0,0,9,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,351,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0,0,0,4,9,0,0,0,0,13,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",6,0,1,1,3,0,0,2,0,10,85,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,380,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,388,        if ((destination.length < selectedRows.length) ||,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0,0,0,1,3,0,0,0,0,4,85,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,394,        for (int i = 0; i < selectedRows.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,395,            final double[] destinationI = destination[i];,8,1,1,2,4,1,0,0,0,14,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,396,            for (int j = 0; j < selectedColumns.length; j++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,4,8,0,2,0,0,15,64,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,400,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,406,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,20,0,0,20,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,407,        final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,408,        if (nRows == 0) {,10,4,1,1,3,0,8,0,0,30,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,409,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,4,0,0,1,2,0,0,2,0,6,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,412,        final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,413,        if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,414,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,417,        for (int r = 1; r < nRows; ++r) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,418,            if (subMatrix[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",22,1,1,2,4,0,0,2,0,34,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,423,"        MatrixUtils.checkRowIndex(this, row);",14,5,0,1,2,0,6,0,0,26,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,424,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",4,2,0,1,2,0,8,0,0,14,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,428,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,429,            for (int j = 0; j < nCols; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,430,"                setEntry(row + i, column + j, subMatrix[i][j]);",8,2,1,3,6,0,2,0,0,18,47,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,433,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,437,"        MatrixUtils.checkRowIndex(this, row);",2,1,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,438,        final int nCols = getColumnDimension();,8,2,0,1,2,1,2,0,0,14,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,439,"        final RealMatrix out = createMatrix(1, nCols);",2,0,0,1,2,1,4,2,0,9,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,440,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,441,"            out.setEntry(0, i, getEntry(row, i));",4,0,0,2,4,0,12,0,0,17,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,444,        return out;,4,0,0,0,0,1,0,0,0,4,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,450,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,451,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,452,        if ((matrix.getRowDimension() != 1) ||,14,5,0,2,5,0,0,0,0,20,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,1,0,1,3,0,16,2,0,19,68,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,458,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,459,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,461,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,469,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,470,"            out.setEntry(i, 0, getEntry(i, column));",4,1,0,2,4,0,0,0,0,5,40,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,473,        return out;,8,0,0,0,0,5,2,0,0,15,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,479,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,480,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,481,        if ((matrix.getRowDimension() != nRows) ||,8,2,1,2,5,0,4,0,0,17,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",2,0,0,1,3,0,0,0,0,3,68,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,487,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,488,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,2,4,0,12,0,0,12,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,490,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,495,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,501,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,502,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,503,        if (vector.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",6,1,0,1,3,0,4,2,0,14,68,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,507,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,508,"            setEntry(row, i, vector.getEntry(i));",4,3,0,2,4,0,12,0,0,19,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,510,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,515,"        return new ArrayRealVector(getColumn(column), false);",8,1,0,2,4,4,4,2,0,20,53,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,522,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,524,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",8,1,0,1,3,0,0,0,0,10,68,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,527,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,528,"            setEntry(i, column, vector.getEntry(i));",14,3,1,2,4,1,0,0,0,20,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,530,    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,534,"        MatrixUtils.checkRowIndex(this, row);",14,3,0,1,2,0,6,0,0,25,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,535,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,536,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,537,        for (int i = 0; i < nCols; ++i) {,0,0,1,1,3,0,0,0,0,4,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,538,"            out[i] = getEntry(row, i);",4,1,1,2,4,0,6,0,0,16,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,547,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,548,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,549,        if (array.length != nCols) {,6,1,0,1,3,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,550,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,552,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,553,"            setEntry(row, i, array[i]);",0,0,1,2,4,0,6,0,0,10,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,555,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,561,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,562,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,563,"            out[i] = getEntry(i, column);",6,1,1,2,4,0,6,0,0,18,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,566,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,572,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,573,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,574,        if (array.length != nRows) {,6,1,0,1,3,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,575,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",2,0,1,1,2,1,0,0,0,7,70,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,577,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,578,"            setEntry(i, column, array[i]);",0,0,1,2,4,0,6,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,580,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,585,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,586,"        setEntry(row, column, getEntry(row, column) + increment);",4,1,0,2,4,0,12,0,0,17,57,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,587,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,592,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,593,"        setEntry(row, column, getEntry(row, column) * factor);",8,3,0,2,4,0,12,0,0,25,54,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,594,    },6,4,0,0,1,0,20,0,0,32,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,599,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,611,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,637,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,638,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,639,        if (nRows != nCols) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,640,"            throw new NonSquareMatrixException(nRows, nCols);",18,3,0,1,2,0,0,2,0,26,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,642,        double trace = 0;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,643,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,644,"            trace += getEntry(i, i);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,646,        return trace;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,652,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,653,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,654,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,655,"            throw new DimensionMismatchException(v.length, nCols);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,658,        final double[] out = new double[nRows];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,659,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,660,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,661,            for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,662,"                sum += getEntry(row, i) * v[i];",2,1,1,2,4,0,6,0,0,14,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,664,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,667,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,675,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",6,0,0,5,10,1,4,4,0,16,79,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,676,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,677,            final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,678,            final int nCols = getColumnDimension();,16,2,0,1,2,4,2,0,0,25,39,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,679,            if (v.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,680,"                throw new DimensionMismatchException(v.getDimension(), nCols);",2,0,0,2,4,0,4,2,0,8,62,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,683,            final double[] out = new double[nRows];,2,0,1,2,4,1,6,0,0,11,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,684,            for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,685,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,686,                for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,0,0,0,0,1,0,0,0,0,1,72,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,55,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,62,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,4,19,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,0,0,0,0,7,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,3,0,0,0,5,57,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,28,1,0,1,3,4,0,4,0,39,55,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,268,                final int qStart = jBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,8,2,0,0,0,1,0,0,0,11,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,271,                blocks[blockIndex] = new double[iHeight * jWidth];,0,0,0,2,4,0,0,0,0,6,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,272,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,159,        double[] target  = new double[observations.size()];,0,0,0,3,6,0,0,0,0,9,51,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,6,1,0,3,6,0,0,0,0,7,51,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,162,        for (WeightedObservedPoint point : observations) {,0,0,0,1,3,0,0,0,0,4,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,6,1,0,2,4,3,4,0,0,14,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,164,            weights[i] = point.getWeight();,0,0,0,2,4,0,0,0,0,6,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,165,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,166,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,169,        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);,0,0,0,1,2,0,0,0,0,3,73,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,8,1,0,0,0,1,0,2,0,13,34,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,4,0,0,0,0,1,6,0,0,11,14,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,6,0,0,1,4,4,0,4,0,14,67,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));",8,0,1,2,4,1,6,2,0,20,58,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,75,        return y;,14,3,1,0,0,1,0,0,0,22,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,45,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",0,0,0,1,3,0,0,0,0,4,83,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,46,        this.weight = weight;,4,3,0,0,0,0,0,0,0,7,21,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,47,        this.x      = x;,0,0,1,0,0,0,2,0,0,7,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,48,        this.y      = y;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,63,    public CurveFitter(final MultivariateVectorOptimizer optimizer) {,4,0,0,1,3,2,0,2,0,8,65,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,64,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,65,        observations = new ArrayList<WeightedObservedPoint>();,4,1,0,1,2,0,8,4,0,18,54,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,156,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0,0,0,1,2,0,0,0,0,3,51,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,157,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02381,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,268,        super(null); // No custom convergence criterion.,0,0,0,1,2,0,0,0,0,3,48,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,269,        this.initialStepBoundFactor = initialStepBoundFactor;,12,2,0,0,0,0,0,0,0,15,53,3,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,270,        this.costRelativeTolerance = costRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,51,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,271,        this.parRelativeTolerance = parRelativeTolerance;,0,0,0,0,0,0,0,0,0,0,49,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,272,        this.orthoTolerance = orthoTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,273,        this.qrRankingThreshold = threshold;,0,0,0,0,0,0,0,0,0,0,36,4,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,274,    },10,4,0,0,1,1,0,0,0,15,1,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,35,    public ModelFunctionJacobian(MultivariateMatrixFunction j) {,4,0,0,1,3,1,0,2,0,7,60,2,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,36,        jacobian = j;,16,5,0,0,0,0,0,0,0,22,13,3,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,37,    },2,0,0,0,1,0,0,0,0,3,1,6,0.01176,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,35,    public ModelFunction(MultivariateVectorFunction m) {,4,0,0,1,3,1,0,2,0,7,52,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,36,        model = m;,4,0,0,0,0,0,0,0,0,5,10,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,3421,        return (a <= b) ? a : b;,14,2,0,1,2,4,4,0,0,23,24,1,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,14,267,    },2,2,0,0,1,0,0,0,0,4,1,6,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,43,        return getDefaultNumberFormat(Locale.getDefault());,20,8,0,2,4,2,6,0,0,35,51,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,41,    public Weight(double[] weight) {,0,0,0,2,5,0,0,0,0,7,32,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,42,        final int dim = weight.length;,0,0,0,0,0,0,0,0,0,0,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,38,    public Target(double[] observations) {,2,0,0,2,5,0,12,2,0,17,38,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,39,        target = observations.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,35,    public MaxEval(int max) {,4,0,0,1,3,1,0,0,0,5,25,2,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,36,        if (max <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,40,        maxEval = max;,4,0,0,0,0,0,0,0,0,5,14,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,41,    },4,1,0,0,1,0,10,2,0,20,1,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",16,1,0,0,1,0,0,0,0,17,73,3,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,14,81,        return (rows * columns <= 4096) ?,0,0,0,1,2,1,0,0,0,4,33,4,0.01163,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,8,0,0,8,44,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,237,    private static final double TANGENT_TABLE_B[] =,4,0,0,1,2,4,2,0,0,10,47,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,56,        return nf;,0,1,1,0,0,1,6,0,0,14,10,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,67,        throws NotStrictlyPositiveException {,0,0,1,0,1,0,0,0,0,7,37,9,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,71,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,74,    },0,0,0,0,1,0,0,0,0,1,1,7,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,14,51,    },2,0,0,0,1,3,0,0,0,5,1,2,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,14,53,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0,0,0,0,1,0,0,0,0,1,76,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,101,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,133,                            final NumberFormat format) {,0,0,0,0,2,0,0,0,0,2,28,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,138,        this.rowSeparator      = rowSeparator;,0,0,0,0,0,0,0,0,0,0,38,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,140,        this.format            = format;,14,3,0,0,0,0,0,0,0,19,32,1,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,143,    },0,0,1,0,1,0,4,0,0,6,1,5,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,14,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,2,0,0,2,4,1,6,2,0,10,76,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,14,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,48,        super(checker);,6,0,0,1,2,0,0,2,0,9,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,49,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,48,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,47,    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {,0,0,0,1,3,0,0,0,0,4,59,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,48,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,50,"        evaluations = new Incrementor(0, new MaxEvalCallback());",0,0,0,2,4,0,0,0,0,6,56,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,80,                       MaxCountExceededCallback cb) {,2,0,0,0,2,0,0,2,0,4,30,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,41,    private int count = 0;,2,0,0,0,0,1,0,0,0,3,22,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,81,        if (cb == null){,2,1,0,1,3,0,0,0,0,3,16,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,84,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,85,        maxCountCallback = cb;,0,0,0,0,0,0,0,0,0,0,22,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,14,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,191,    private static class MaxEvalCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,53,        super(checker);,0,0,0,1,2,0,0,0,0,3,15,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,50,        super(checker);,2,0,0,1,2,0,6,0,0,8,15,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,14,51,    },8,1,0,0,1,0,0,0,0,10,1,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,206,    private static class MaxIterCallback,2,0,0,0,0,2,0,0,0,4,36,2,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,54,"        return fit(maxEval, new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,79,"        addObservedPoint(1.0, x, y);",0,0,0,1,2,0,6,0,0,6,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,102,        observations.add(observed);,2,0,0,1,2,0,6,0,0,9,27,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,112,        return observations.toArray(new WeightedObservedPoint[observations.size()]);,0,0,0,3,6,1,8,2,0,10,76,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,119,        observations.clear();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,180,        return optimum.getPointRef();,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,51,public class CurveFitter<T extends ParametricUnivariateFunction> {,4,0,0,0,1,1,0,2,0,7,66,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,62,        super.incrementEvaluationCount();,2,0,0,1,2,0,0,0,0,2,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,63,        return model.value(params);,2,0,0,1,2,1,6,0,0,8,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,88,        parseOptimizationData(optData);,0,0,0,1,2,0,4,0,0,4,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,90,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,92,        return super.optimize(optData);,4,0,0,1,2,1,0,0,0,4,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,101,        return weightMatrix.copy();,0,0,0,1,2,1,4,0,0,4,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,110,        return target.clone();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,119,        return target.length;,0,0,0,0,0,1,0,0,0,1,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,136,        for (OptimizationData data : optData) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,137,            if (data instanceof ModelFunction) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,138,                model = ((ModelFunction) data).getModelFunction();,6,0,0,3,6,0,6,2,0,15,50,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,139,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,141,            if (data instanceof Target) {,4,1,0,1,3,0,0,0,0,5,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,142,                target = ((Target) data).getTarget();,6,0,0,3,6,0,16,4,0,27,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,143,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,145,            if (data instanceof Weight) {,4,0,0,1,3,0,0,2,0,6,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,146,                weightMatrix = ((Weight) data).getWeight();,4,0,0,3,6,0,2,2,0,9,43,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,147,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,159,        if (target.length != weightMatrix.getColumnDimension()) {,4,1,0,2,5,0,4,0,0,9,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,160,"            throw new DimensionMismatchException(target.length,",4,0,0,0,1,0,0,2,0,6,51,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,14,35,public abstract class MultivariateVectorOptimizer,2,0,0,0,0,2,0,0,0,4,49,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,66,        parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,68,        checkParameters();,0,0,0,1,2,0,2,0,0,2,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,70,        return super.optimize(optData);,4,1,1,1,2,1,0,0,0,8,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,86,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,87,            if (data instanceof InitialGuess) {,2,0,0,1,3,0,0,2,0,4,35,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,88,                start = ((InitialGuess) data).getInitialGuess();,4,0,0,3,6,0,2,2,0,9,48,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,89,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,91,            if (data instanceof SimpleBounds) {,18,5,0,1,3,0,4,4,0,32,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,92,                final SimpleBounds bounds = (SimpleBounds) data;,0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,93,                lowerBound = bounds.getLower();,2,0,0,1,2,0,4,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,94,                upperBound = bounds.getUpper();,4,0,0,1,2,1,4,0,0,10,31,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,95,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,98,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,106,        return start == null ? null : start.clone();,2,1,0,1,2,1,4,0,0,7,44,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,112,        return lowerBound == null ? null : lowerBound.clone();,2,1,0,1,2,1,4,0,0,7,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,118,        return upperBound == null ? null : upperBound.clone();,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,125,        if (start != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,126,            final int dim = start.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,127,            if (lowerBound != null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,128,                if (lowerBound.length != dim) {,6,1,0,1,3,0,0,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,129,"                    throw new DimensionMismatchException(lowerBound.length, dim);",6,0,0,1,2,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,131,                for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,132,                    final double v = start[i];,2,0,1,1,2,1,0,0,0,7,26,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,133,                    final double lo = lowerBound[i];,2,0,1,1,2,1,0,0,0,7,32,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,134,                    if (v < lo) {,6,1,0,1,3,0,0,0,0,8,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,135,"                        throw new NumberIsTooSmallException(v, lo, true);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,139,            if (upperBound != null) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,140,                if (upperBound.length != dim) {,6,1,0,1,3,0,0,0,0,7,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,141,"                    throw new DimensionMismatchException(upperBound.length, dim);",6,0,0,1,2,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,143,                for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,144,                    final double v = start[i];,4,0,1,1,2,1,0,0,0,10,26,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,145,                    final double hi = upperBound[i];,4,0,1,1,2,1,0,0,0,12,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,146,                    if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,147,"                        throw new NumberIsTooLargeException(v, hi, true);",6,0,0,1,2,0,0,2,0,9,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,14,152,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,60,        return evaluations.getMaximalCount();,2,0,0,1,2,1,6,2,0,10,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,72,        return evaluations.getCount();,4,0,0,1,2,1,10,0,0,15,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,81,        return iterations.getMaximalCount();,0,0,0,1,2,1,4,0,0,4,36,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,93,        return iterations.getCount();,0,0,0,1,2,1,10,0,0,10,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,102,        return checker;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,123,        parseOptimizationData(optData);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,125,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,126,        iterations.resetCount();,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,128,        return doOptimize();,2,1,0,1,2,1,2,0,0,5,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,147,        evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,158,        iterations.incrementCount();,0,0,0,1,2,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,159,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,175,        for (OptimizationData data : optData) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,176,            if (data instanceof MaxEval) {,2,0,0,1,3,0,0,2,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,177,                evaluations.setMaximalCount(((MaxEval) data).getMaxEval());,2,0,0,4,8,0,6,2,0,10,59,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,178,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,180,            if (data instanceof MaxIter) {,2,0,0,1,3,0,0,2,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,181,                iterations.setMaximalCount(((MaxIter) data).getMaxIter());,0,0,0,4,8,0,0,0,0,12,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,182,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,14,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,66,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,220,                        final double[][] jacobian = new double[observations.size()][];,2,0,0,5,10,1,4,0,0,7,62,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,221,                        int i = 0;,10,1,0,0,0,0,0,0,0,12,10,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,222,                        for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,223,"                            jacobian[i++] = f.gradient(observed.getX(), point);",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,224,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,225,                        return jacobian;,2,0,0,0,0,1,8,0,0,10,16,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,184,    private class TheoreticalValuesFunction {,2,0,1,0,1,1,4,0,0,11,41,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,203,                        final double[] values = new double[observations.size()];,2,0,0,3,6,1,4,0,0,7,56,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,204,                        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,205,                        for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,206,"                            values[i++] = f.value(observed.getX(), point);",2,0,1,3,6,0,10,0,0,16,46,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,207,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,209,                        return values;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,45,        return model;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,45,        return jacobian;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,353,    private FastMath() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,366,            return d; // These are un-normalised - don't try to convert,0,0,0,0,0,1,0,0,0,1,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,368,        long xl = Double.doubleToLongBits(d);,10,2,0,1,2,0,6,0,0,18,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,369,        xl = xl & MASK_30BITS; // Drop low order bits,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,370,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,379,        return Math.sqrt(a);,0,0,0,1,2,1,14,0,0,14,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,387,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,388,          return x;,10,3,0,0,0,1,0,0,0,13,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,396,      if (x > 20) {,6,1,0,1,3,0,2,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,397,          if (x >= LOG_MAX_VALUE) {,6,0,0,1,3,0,0,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,399,              final double t = exp(0.5 * x);,4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,400,              return (0.5 * t) * t;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,402,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,404,      } else if (x < -20) {,2,1,0,1,4,0,0,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,405,          if (x <= -LOG_MAX_VALUE) {,14,3,0,1,3,0,0,0,0,20,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,407,              final double t = exp(-0.5 * x);,4,1,0,1,2,1,8,0,0,15,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,408,              return (0.5 * t) * t;,4,2,0,1,2,1,0,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,410,              return 0.5 * exp(-x);,2,1,0,1,2,1,2,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,414,      final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,415,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,416,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,418,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,420,      double ya = hiPrec[0] + hiPrec[1];,0,0,1,2,4,0,0,0,0,10,34,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,0,0,3,6,1,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,423,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,424,      double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,425,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,428,      double recip = 1.0/ya;,4,1,1,0,0,0,0,0,0,10,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,429,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,430,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,431,      double recipb = recip - recipa;,2,0,0,0,0,0,0,0,0,3,31,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,436,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,439,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,440,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,441,      ya = temp;,6,0,0,0,0,0,0,0,0,9,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,442,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,443,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,444,      ya = temp;,6,1,0,0,0,0,0,0,0,8,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,446,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,447,      result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,448,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,456,      boolean negate = false;,4,0,0,0,0,1,6,0,0,12,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,457,      if (x != x) {,4,1,0,1,3,0,2,0,0,8,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,458,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,466,      if (x > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,467,          if (x >= LOG_MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,469,              final double t = exp(0.5 * x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,470,              return (0.5 * t) * t;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,472,              return 0.5 * exp(x);,8,1,0,1,2,1,18,0,0,27,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,474,      } else if (x < -20) {,4,3,0,1,4,0,0,0,0,8,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,475,          if (x <= -LOG_MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,477,              final double t = exp(-0.5 * x);,4,1,0,1,2,1,2,0,0,9,31,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,478,              return (-0.5 * t) * t;,4,2,0,1,2,1,0,0,0,7,22,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,480,              return -0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,484,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,485,          return x;,4,0,0,0,0,2,0,0,0,5,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,488,      if (x < 0.0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,489,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,490,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,495,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,496,          double hiPrec[] = new double[2];,2,0,0,2,4,0,8,0,0,10,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,497,"          exp(x, 0.0, hiPrec);",8,3,0,1,2,0,6,0,0,17,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,499,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,10,1,0,3,6,0,0,0,0,13,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,502,          double temp = ya * HEX_40000000;,14,2,0,0,0,0,0,0,0,17,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,503,          double yaa = ya + temp - temp;,2,0,0,0,0,0,10,0,0,13,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,504,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,507,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,508,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,509,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,510,          double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,515,          recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,517,          recipa = -recipa;,12,2,1,0,0,0,0,0,0,20,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,518,          recipb = -recipb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,521,          temp = ya + recipa;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,522,          yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,523,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,524,          temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,525,          yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,526,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,528,          result = ya + yb;,14,1,0,0,0,0,0,0,0,16,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,529,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,530,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,532,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,533,"          expm1(x, hiPrec);",8,2,0,1,2,0,0,0,0,10,17,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,535,          double ya = hiPrec[0] + hiPrec[1];,8,1,0,2,4,0,0,0,0,10,34,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,4,0,0,4,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,539,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,540,          double denomr = 1.0 / denom;,8,1,0,0,0,0,8,0,0,17,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,541,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,542,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,543,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,544,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,545,          double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,547,          temp = denom * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,548,          double za = denom + temp - temp;,4,1,0,0,0,0,4,0,0,10,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,549,          double zb = denom - za;,18,4,0,0,0,0,0,0,0,23,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,22,9,0,1,2,0,0,0,0,32,52,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,554,          rb += yb*denomr;                        // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,555,          rb += -ya * denomb * denomr * denomr;   // denominator,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,558,          temp = ya + ra;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,559,          yb += -(temp - ya - ra);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,560,          ya = temp;,2,0,0,0,0,0,0,0,0,2,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,561,          temp = ya + rb;,8,1,0,0,0,0,0,0,0,11,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,562,          yb += -(temp - ya - rb);,4,1,0,1,2,0,0,0,0,5,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,563,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,565,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,566,          result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,569,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,570,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,573,      return result;,0,0,0,0,0,1,6,0,0,7,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,581,      boolean negate = false;,10,1,1,0,0,1,0,0,0,18,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,583,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,584,          return x;,4,3,0,0,0,1,20,0,0,27,9,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,593,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,594,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,597,      if (x < -20) {,6,2,1,1,3,0,0,0,0,14,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,598,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,601,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,602,          return x;,8,1,0,0,0,1,0,0,0,9,9,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,605,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,606,          x = -x;,8,1,0,0,0,0,0,0,0,11,7,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,607,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,611,      if (x >= 0.5) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,612,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,614,"          exp(x*2.0, 0.0, hiPrec);",2,0,0,1,2,1,0,8,0,11,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,616,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,28,10,1,3,6,0,0,0,0,46,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,620,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,621,          double nb = -(na + 1.0 - ya);,6,2,0,1,2,0,0,0,0,9,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,622,          double temp = na + yb;,10,1,0,0,0,0,0,0,0,12,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,623,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,624,          na = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,627,          double da = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,628,          double db = -(da - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,629,          temp = da + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,630,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,631,          da = temp;,6,1,0,0,0,0,0,0,0,8,10,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,633,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,634,          double daa = da + temp - temp;,8,2,1,0,0,0,4,0,0,23,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,635,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,638,          double ratio = na/da;,8,3,0,0,0,0,0,0,0,11,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,639,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,640,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,641,          double ratiob = ratio - ratioa;,8,2,0,0,0,0,4,0,0,14,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,647,          ratiob += nb / da;,8,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,649,          ratiob += -db * na / da / da;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,651,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,652,      },6,0,0,0,1,1,0,0,0,7,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,654,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,656,"          expm1(x*2.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,658,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,20,9,0,3,6,0,0,0,0,30,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,662,          double na = ya;,8,0,0,0,0,0,0,0,0,9,15,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,663,          double nb = yb;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,666,          double da = 2.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,667,          double db = -(da - 2.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,668,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,669,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,670,          da = temp;,6,1,0,0,0,0,16,0,0,24,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,672,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,673,          double daa = da + temp - temp;,6,1,0,0,0,0,0,0,0,8,30,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,674,          double dab = da - daa;,8,1,0,0,0,0,0,0,0,11,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,677,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,678,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,679,          double ratioa = ratio + temp - temp;,16,3,0,0,0,0,6,0,0,26,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,680,          double ratiob = ratio - ratioa;,14,2,1,0,0,0,0,0,0,19,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,686,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,688,          ratiob += -db * na / da / da;,12,3,0,0,0,0,0,0,0,19,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,690,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,693,      if (negate) {,0,0,0,1,3,0,4,0,0,4,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,694,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,697,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,713,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,714,        if (a < 0) {,10,2,0,1,3,0,0,0,0,13,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,715,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,716,            a = -a;,2,0,0,0,0,0,2,0,0,5,7,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,720,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,723,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,724,            if (a > 0.097) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0,0,0,8,16,0,0,0,0,24,212,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,726,            } else if (a > 0.036) {,12,2,0,1,4,0,0,0,0,17,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,42,13,1,6,12,0,0,0,0,58,160,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,728,            } else if (a > 0.0036) {,10,2,0,1,4,0,0,0,0,13,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,0,0,22,63,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,735,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,743,        boolean negative = false;,8,1,1,0,0,0,0,0,0,13,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,744,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,745,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,746,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,750,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,1,3,6,0,4,0,0,18,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,753,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,754,            if (a > 0.087) {,2,0,0,1,3,0,0,0,0,3,16,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0,0,0,8,16,0,0,0,0,24,141,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,756,            } else if (a > 0.031) {,4,2,0,1,4,0,0,0,0,6,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,28,13,0,6,12,0,0,0,0,42,109,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,758,            } else if (a > 0.003) {,2,1,0,1,4,0,0,0,0,3,23,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,20,9,0,4,8,0,0,0,0,30,77,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,12,5,0,2,4,0,0,2,0,20,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,765,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,87,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0,0,0,3,6,2,0,0,0,11,91,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,46,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",8,0,0,1,2,1,4,0,0,13,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,807,        return Math.random();,6,1,0,1,2,1,10,0,0,17,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,831,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,851,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,853,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,854,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,855,                    hiPrec[0] = 0.0;,0,0,1,1,2,0,10,0,0,13,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,856,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,858,                return 0.0;,0,0,0,0,0,1,0,2,0,2,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,861,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",16,4,0,1,2,2,8,0,0,31,79,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,864,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,865,                    hiPrec[0] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,866,                    hiPrec[1] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,868,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",10,1,0,1,2,0,0,0,0,12,79,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,874,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,875,                    hiPrec[0] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,876,                    hiPrec[1] /= 4.455505956692756620;,4,1,1,1,2,1,0,0,0,9,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,878,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,881,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,886,            intVal = -intVal;,2,0,0,0,0,0,0,2,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,888,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,891,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,893,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,895,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,14,3,1,1,2,0,0,2,0,25,71,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,12,2,1,1,2,1,0,0,0,18,64,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,14,3,0,1,2,1,0,0,0,19,55,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,923,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,927,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,0,0,2,0,17,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,934,        double tempA = intPartA * fracPartA;,2,1,1,0,0,0,0,0,0,11,36,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,941,        final double tempC = tempB + tempA;,6,1,0,0,0,1,4,0,0,12,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,944,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,24,7,0,0,0,0,0,0,0,34,63,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,946,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,949,        if (hiPrec != null) {,10,3,0,1,3,0,0,0,0,13,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,951,            hiPrec[0] = tempA;,2,0,1,1,2,0,4,0,0,10,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,952,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,16,6,1,1,2,0,0,0,0,25,58,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,955,        return result;,4,0,0,0,0,1,0,0,0,5,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,963,"      return expm1(x, null);",0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,972,        if (x != x || x == 0.0) { // NaN or zero,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,973,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,976,        if (x <= -1.0 || x >= 1.0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,979,            double hiPrec[] = new double[2];,4,0,0,2,4,0,2,0,0,6,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,980,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,981,            if (x > 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,982,                return -1.0 + hiPrec[0] + hiPrec[1];,2,1,1,2,4,1,0,0,0,8,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,984,                final double ra = -1.0 + hiPrec[0];,2,3,0,1,2,0,20,0,0,25,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,985,                double rb = -(ra + 1.0 - hiPrec[0]);,0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,986,                rb += hiPrec[1];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,987,                return ra + rb;,10,1,1,0,0,2,0,0,0,14,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,994,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,996,        if (x < 0.0) {,12,2,0,1,3,0,0,0,0,15,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,997,            x = -x;,0,0,1,0,0,0,0,0,0,5,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,998,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1002,            int intFrac = (int) (x * 1024.0);,4,3,0,2,4,0,0,0,0,8,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1003,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,12,3,1,1,2,0,0,0,0,18,60,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1004,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,12,3,1,1,2,0,0,0,0,18,54,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1006,            double temp = tempA + tempB;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1007,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1008,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1010,            temp = tempA * HEX_40000000;,10,1,1,0,0,0,0,0,0,15,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1011,            baseA = tempA + temp - temp;,8,2,1,0,0,0,2,0,0,22,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1012,            baseB = tempB + (tempA - baseA);,8,2,0,1,2,0,0,0,0,11,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1014,            epsilon = x - intFrac/1024.0;,10,3,0,0,0,0,0,0,0,14,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1019,        double zb = 0.008336750013465571;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1020,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1021,        zb = zb * epsilon + 0.16666666666745392;,8,2,0,0,0,0,0,2,0,14,40,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1022,        zb = zb * epsilon + 0.49999999999999994;,22,5,0,0,0,0,0,0,0,29,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1023,        zb = zb * epsilon;,2,0,0,0,0,1,2,0,0,5,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1024,        zb = zb * epsilon;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1026,        double za = epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1027,        double temp = za + zb;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1028,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1029,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1031,        temp = za * HEX_40000000;,6,1,0,0,0,0,4,0,0,13,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1032,        temp = za + temp - temp;,8,2,0,0,0,0,0,0,0,11,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1033,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1034,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1037,        double ya = za * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1039,        temp = ya + za * baseB;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1040,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1041,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1043,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1044,        yb += -(temp - ya - zb * baseA);,10,2,0,1,2,0,0,0,0,14,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1045,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1047,        temp = ya + zb * baseB;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1048,        yb += -(temp - ya - zb*baseB);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1049,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1053,        temp = ya + baseA;,4,0,0,0,0,0,0,0,0,5,18,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1054,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1055,        ya = temp;,10,0,0,0,0,1,6,0,0,19,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1057,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1059,        yb += -(temp - ya - za);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1060,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1062,        temp = ya + baseB;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1064,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1065,        ya = temp;,6,0,0,0,0,1,0,2,0,10,10,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1067,        temp = ya + zb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1069,        yb += -(temp - ya - zb);,2,1,0,1,2,0,0,0,0,3,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1070,        ya = temp;,2,0,0,0,0,0,0,0,0,2,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1072,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1074,            double denom = 1.0 + ya;,10,3,0,0,0,0,0,0,0,14,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1075,            double denomr = 1.0 / denom;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1076,            double denomb = -(denom - 1.0 - ya) + yb;,16,3,0,1,2,0,0,0,0,22,41,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1077,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1078,            temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1079,            final double ra = ratio + temp - temp;,22,7,0,0,0,1,0,0,0,31,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1080,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1082,            temp = denom * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1083,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1084,            zb = denom - za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1086,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1097,            rb += yb * denomr;                      // numerator,8,1,0,0,0,0,4,2,0,16,52,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1098,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1101,            ya = -ra;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1102,            yb = -rb;,4,0,0,0,0,0,2,0,0,6,9,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1105,        if (hiPrecOut != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1106,            hiPrecOut[0] = ya;,2,0,1,1,2,0,6,0,0,11,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1107,            hiPrecOut[1] = yb;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1110,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1120,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1130,        if (x==0) { // Handle special case of +0/-0,8,1,0,1,3,3,0,0,0,12,43,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1131,            return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1133,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1137,            if (x != 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1138,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1139,                    hiPrec[0] = Double.NaN;,4,0,1,1,2,0,0,0,0,7,23,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1142,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1147,        if (x == Double.POSITIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1148,            if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1149,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,1,0,1,2,0,0,0,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1152,            return Double.POSITIVE_INFINITY;,6,0,0,0,0,4,0,0,0,9,32,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1156,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,6,2,0,2,5,0,0,0,0,8,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1160,            if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1162,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1163,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,12,2,1,1,2,0,0,0,0,17,37,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1166,                return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,12,0,0,16,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1170,            bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1171,            while ( (bits & 0x0010000000000000L) == 0) {,4,0,0,2,5,0,0,0,0,5,44,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1172,                --exp;,8,2,0,0,0,0,0,0,0,10,6,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1173,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1178,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,8,6,0,1,3,0,0,0,0,14,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1184,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1185,                double xb = xa - x + 1.0;,12,4,0,0,0,1,0,0,0,17,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1186,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1187,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1188,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1189,                xa = aa;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1190,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,6,1,1,2,4,1,0,0,0,10,69,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1193,                double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1194,                double yb = lnCoef_last[1];,2,0,1,1,2,0,0,0,0,4,27,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1198,                    aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1199,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1201,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1202,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1203,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,2,0,1,2,4,1,0,0,0,7,43,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,14,1207,                    aa = ya + lnCoef_i[0];,4,1,1,1,2,0,0,0,0,8,22,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,38,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,12,3,0,0,0,0,4,0,0,22,6,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,4,3,1,5,10,0,6,0,0,22,73,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,2,0,0,4,8,0,4,0,0,7,69,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,0,0,1,3,0,0,0,0,3,13,2,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,6,1,0,1,2,1,0,2,0,10,38,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },6,1,0,0,1,0,0,0,0,8,1,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",10,1,0,7,14,0,0,0,0,12,71,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,1541,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0137,1,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,5,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {",8,1,0,1,3,1,0,0,0,10,45,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,        mant = new int[field.getRadixDigits()];,6,0,0,2,4,0,0,0,0,7,39,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,213,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,        this.field = field;,6,0,0,0,0,0,6,0,0,12,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,        if (x == Long.MIN_VALUE) {,12,1,0,1,3,0,0,0,0,14,26,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,            sign = 1;,2,0,0,0,0,0,6,0,0,9,9,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,233,        while (x != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,1,76,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,            mant[mant.length - 1] = (int) (x % RADIX);,12,1,0,3,6,1,0,0,0,14,42,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,            x /= RADIX;,2,1,0,0,0,0,0,0,0,3,11,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,        if (isLongMin) {,16,6,1,1,3,0,0,0,0,28,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,    public Dfp(final Dfp d) {,4,0,0,1,3,0,0,0,0,5,25,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,323,        mant  = d.mant.clone();,0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,        exp   = d.exp;,8,0,0,0,0,3,0,0,0,12,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,        nans  = d.nans;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,        field = d.field;,14,2,0,0,0,0,6,2,0,25,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,334,"    protected Dfp(final DfpField field, final String s) {",0,0,0,1,3,0,0,0,0,4,53,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,        sign = 1;,4,0,0,0,0,0,0,0,0,6,9,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,        this.field = field;,6,1,0,0,0,1,0,0,0,8,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,0,0,2,0,4,57,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,345,        final int offset = 4;  // Starting offset into Striped,0,0,0,0,0,0,0,0,0,0,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0,0,0,3,6,0,0,0,0,9,71,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,        if (s.equals(POS_INFINITY_STRING)) {,0,2,0,2,5,0,2,0,0,5,36,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,355,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,361,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,        if (p == -1) { // try upper case?,4,0,0,1,3,0,4,0,0,9,33,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,370,"            p = s.indexOf(""E"");",6,0,0,1,2,0,4,0,0,12,19,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,375,        if (p != -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,398,            fpdecimal = s;,6,1,1,0,0,0,0,0,0,18,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,407,        p = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,410,        int decimalPos = 0;,14,2,0,0,0,0,0,0,0,18,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,2,3,0,3,7,0,12,0,0,21,63,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,413,                break;,2,0,0,0,0,1,0,0,0,3,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,1,1,2,5,0,0,0,0,8,49,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,417,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,420,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,10,2,0,19,33,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,421,                decimalFound = true;,12,1,0,0,0,0,0,0,0,16,20,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,426,            if (p == fpdecimal.length()) {,2,0,0,2,5,1,6,0,0,10,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,432,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,433,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,434,        striped[1] = '0';,4,0,1,1,2,0,0,0,0,9,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,435,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,439,            if (p == (fpdecimal.length())) {,2,0,0,3,7,0,0,0,0,3,32,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,440,                break;,2,0,0,0,0,0,0,0,0,2,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,444,            if (q == mant.length*rsize+offset+1) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,445,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,448,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,449,                decimalFound = true;,4,0,0,0,0,0,0,0,0,7,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,450,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,451,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,452,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,460,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,461,            q++;,2,0,0,0,0,3,0,0,0,5,4,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,462,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,463,            significantDigits++;,8,1,0,0,0,1,0,0,0,11,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,468,        if (decimalFound && q != offset) {,26,10,0,1,3,1,0,0,0,37,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,470,                q--;,8,1,0,0,0,1,0,0,0,11,4,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,474,                if (striped[q] == '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,475,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,483,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,488,        if (!decimalFound) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,493,        q = offset;  // set q to point to first sig digit,4,0,1,0,0,0,0,0,0,16,49,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,494,        p = significantDigits-1+offset;,8,3,0,0,0,0,0,0,0,12,31,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,496,        while (p > q) {,6,1,1,1,3,0,0,0,0,12,15,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,497,            if (striped[p] != '0') {,0,1,1,2,5,0,6,0,0,12,24,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,498,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,505,        q -= i;,10,0,0,0,0,0,6,0,0,19,7,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,511,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,517,        for (i = mant.length - 1; i >= 0; i--) {,12,3,0,1,3,0,6,0,0,23,40,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,518,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,522,            q += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,526,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,530,            round((striped[q] - '0')*1000);,0,2,1,3,6,0,2,0,0,9,31,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,533,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,635,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,642,        return field.getRadixDigits();,2,0,0,1,2,1,0,0,0,3,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,649,        return field.getZero();,0,0,0,1,2,1,0,0,0,4,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,669,        for (int i = mant.length - 1; i > 0; i--) {,14,5,0,1,3,0,0,0,0,20,43,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,670,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,672,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,673,        exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,674,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,681,        for (int i = 0; i < mant.length - 1; i++) {,10,2,0,1,3,0,6,0,0,19,43,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,682,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,684,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,10,0,0,10,26,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,685,        exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,686,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,697,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,698,        boolean inexact = false;,8,0,0,0,0,0,4,0,0,14,24,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,700,        int diff = exp - e;,6,1,0,0,0,0,0,0,0,7,19,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,702,        int adiff = diff;,0,0,0,0,0,0,0,0,0,0,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,703,        if (adiff < 0) {,12,2,0,1,3,1,4,0,0,21,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,704,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,707,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,708,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,711,        if (adiff > (mant.length + 1)) {,8,2,0,2,5,0,0,0,0,11,32,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,714,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0,0,0,1,2,0,0,0,0,3,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,719,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,722,        for (int i = 0; i < adiff; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,723,            if (diff < 0) {,4,1,0,1,3,1,6,2,0,14,15,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,728,                if (lostdigit != 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,729,                    inexact = true;,12,5,0,0,0,0,4,0,0,21,15,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,732,                lostdigit = mant[0];,2,0,1,1,2,0,0,0,0,5,20,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,734,                shiftRight();,0,0,0,1,2,0,2,0,0,2,13,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,740,        if (inexact) {,2,0,0,1,3,0,0,0,0,2,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,10,1,0,1,2,0,4,0,0,15,46,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,745,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,765,        if (isNaN() || x.isNaN()) {,2,0,0,3,7,1,4,0,0,7,27,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,771,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,790,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,879,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,904,        if (other instanceof Dfp) {,10,1,0,1,3,0,0,2,0,15,27,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,905,            final Dfp x = (Dfp) other;,4,0,0,1,2,1,0,4,0,9,26,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,910,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,12,3,0,5,11,0,12,0,0,28,81,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,24,9,0,2,5,0,0,0,0,33,71,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,948,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,951,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,964,        if (a.nans == FINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,22,5,0,3,7,3,0,0,0,30,67,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,974,            if (a.exp < b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,975,                return -a.sign;,6,0,0,0,0,1,0,0,0,8,15,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,978,            if (a.exp > b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,979,                return a.sign;,4,0,0,0,0,1,6,2,0,12,14,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,19,46,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,985,            if (a.mant[i] > b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,986,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,989,            if (a.mant[i] < b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,990,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,994,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1232,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1233,            mant[i] = RADIX-mant[i]-1;,2,1,1,2,4,0,0,0,0,12,26,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1236,        int rh = extra / RADIX;,6,1,0,0,0,0,0,0,0,7,23,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1237,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1238,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1239,            final int r = mant[i] + rh;,2,6,1,1,2,0,0,0,0,16,27,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1241,            mant[i] = r - rh * RADIX;,12,3,1,1,2,0,0,0,0,21,25,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1244,        return extra;,12,0,0,0,0,1,0,0,0,15,13,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1262,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1293,        Dfp a = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1294,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1297,        Dfp result = newInstance(getZero());,16,1,0,2,4,0,4,4,0,27,36,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1301,        final byte bsign = b.sign;,26,9,0,0,0,1,0,0,0,37,26,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1303,        a.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1304,        b.sign = 1;,10,1,0,0,0,0,0,0,0,13,11,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1307,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1308,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1309,            rsign = asign;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1315,        if (b.mant[mant.length-1] == 0) {,14,4,0,2,5,0,0,0,0,19,33,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1316,            b.exp = a.exp;,10,0,0,0,0,0,6,0,0,17,14,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1319,        if (a.mant[mant.length-1] == 0) {,10,2,0,2,5,0,0,0,0,13,33,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1324,        int aextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1325,        int bextradigit = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1326,        if (a.exp < b.exp) {,10,1,0,1,3,0,4,0,0,16,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1327,            aextradigit = a.align(b.exp);,4,2,0,1,2,0,0,0,0,6,29,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1329,            bextradigit = b.align(a.exp);,0,0,0,1,2,0,0,0,0,3,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1333,        if (asign != bsign) {,4,1,0,1,3,0,4,0,0,9,21,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1334,            if (asign == rsign) {,2,1,0,1,3,0,4,0,0,7,21,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1335,                bextradigit = b.complement(bextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1337,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1342,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1343,        for (int i = 0; i < mant.length; i++) {,12,1,0,1,3,0,0,0,0,14,39,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1344,            final int r = a.mant[i]+b.mant[i]+rh;,12,1,1,2,4,1,0,0,0,18,37,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1345,            rh = r / RADIX;,10,1,0,0,0,0,4,0,0,17,15,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1346,            result.mant[i] = r - rh * RADIX;,10,2,1,1,2,0,0,0,0,15,32,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1348,        result.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1349,        result.sign = rsign;,2,1,1,0,0,0,0,0,0,7,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1354,        if (rh != 0 && (asign == bsign)) {,8,3,1,2,5,0,0,0,0,13,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1355,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1356,            result.shiftRight();,0,0,0,1,2,0,4,0,0,4,20,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1357,            result.mant[mant.length-1] = rh;,14,1,0,1,2,0,0,0,0,17,32,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1358,            final int excp = result.round(lostdigit);,2,0,1,1,2,1,6,0,0,14,41,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1359,            if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",4,2,0,1,2,0,10,0,0,17,43,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1365,        for (int i = 0; i < mant.length; i++) {,2,1,1,1,3,0,0,0,0,8,39,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1366,            if (result.mant[mant.length-1] != 0) {,8,2,0,2,5,0,0,0,0,10,38,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1367,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1369,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1370,            if (i == 0) {,8,2,1,1,3,0,0,0,0,16,13,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1371,                result.mant[0] = aextradigit+bextradigit;,8,2,1,1,2,0,0,0,0,15,41,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1372,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1373,                bextradigit = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1378,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1379,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1381,            if (asign != bsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,0,0,0,0,0,0,0,0,0,0,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1388,        final int excp = result.round(aextradigit + bextradigit);,6,1,0,1,2,1,4,0,0,12,57,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1389,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,0,0,0,2,43,11,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1393,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1400,        Dfp result = newInstance(this);,10,1,0,1,2,1,2,2,0,17,31,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1401,        result.sign = (byte) - result.sign;,8,0,0,1,2,0,0,0,0,10,35,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1402,        return result;,4,0,0,0,0,1,0,0,0,5,14,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1410,        return add(x.negate());,0,0,0,2,4,1,6,0,0,6,23,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1418,        boolean inc = false;,2,0,0,0,0,0,0,0,0,3,20,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1419,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,6,6,1,3,6,0,0,0,0,15,72,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1438,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,22,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0,0,0,5,10,0,0,0,0,15,76,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,                i = 1;,0,0,0,0,0,0,0,0,0,0,6,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,12,1,0,1,3,3,0,0,0,16,23,2,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,6,0,0,0,0,1,6,0,0,13,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,2,0,0,5,10,0,0,2,0,4,73,11,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,12,5,0,4,8,0,0,0,0,17,69,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,            mt[i]   = (int) (l & 0xffffffffL);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,6,1,0,1,3,3,4,0,0,14,13,1,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,8,3,0,2,4,0,0,0,0,12,18,6,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,6,1,1,0,0,1,4,0,0,26,6,3,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,1,2,0,0,0,0,3,64,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,6,0,0,6,38,5,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,7,14,0,6,2,0,17,71,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,217,    },20,4,0,0,1,0,4,0,0,31,1,4,0.05714,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",2,1,0,2,4,0,0,0,0,3,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",2,0,0,1,3,0,6,0,0,8,45,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,6,0,0,0,0,0,0,0,0,9,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,217,        if (x == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,6,3,1,0,0,0,4,0,0,15,7,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,232,        exp = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,8,3,1,1,3,0,2,0,0,27,16,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,3,76,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,235,            mant[mant.length - 1] = (int) (x % RADIX);,0,0,0,3,6,0,0,0,0,9,42,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,236,            x /= RADIX;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,2,1,1,1,3,0,0,0,0,8,16,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,322,    public Dfp(final Dfp d) {,0,0,0,1,3,0,0,0,0,4,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,10,2,1,1,2,1,0,0,0,19,23,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,4,0,1,0,0,0,0,0,0,8,14,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,6,0,0,0,0,0,0,0,0,9,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,10,3,1,0,0,3,0,0,0,19,16,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",12,8,1,1,3,0,4,0,0,29,53,13,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,338,        sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,14,4,0,0,0,1,2,0,0,22,8,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,2,5,1,0,0,0,0,0,0,24,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,341,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,10,1,0,0,0,0,0,0,0,13,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,0,0,0,0,2,54,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,1,0,3,6,0,6,2,0,17,71,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,2,0,0,2,5,0,16,0,0,19,36,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,2,0,0,2,5,0,10,0,0,13,36,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,361,        if (s.equals(NAN_STRING)) {,4,0,0,2,5,0,0,0,0,5,27,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,12,4,1,1,3,0,0,0,0,27,33,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,370,"            p = s.indexOf(""E"");",0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,6,2,1,0,0,0,0,0,0,15,14,12,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,0,0,2,5,0,0,0,0,7,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,10,1,0,0,0,0,6,0,0,17,19,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,6,5,0,3,7,0,12,0,0,26,63,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,413,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,417,                decimalPos--;,2,0,0,0,0,0,0,0,0,3,13,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,420,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,421,                decimalFound = true;,2,0,0,0,0,0,0,0,0,4,20,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,6,1,0,2,5,1,4,4,0,16,30,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,6,0,0,0,0,0,4,0,0,11,15,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,6,0,0,1,2,1,0,0,0,7,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,434,        striped[1] = '0';,4,0,1,1,2,0,0,4,0,12,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,435,        striped[2] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,439,            if (p == (fpdecimal.length())) {,0,0,0,3,7,0,0,0,0,10,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,440,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,444,            if (q == mant.length*rsize+offset+1) {,8,2,0,1,3,1,0,0,0,11,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,445,                break;,2,0,0,0,0,0,0,0,0,3,6,11,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,448,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,449,                decimalFound = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,450,                decimalPos = significantDigits;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,451,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,452,                continue;,6,1,0,0,0,0,0,0,0,8,9,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,460,            striped[q] = fpdecimal.charAt(p);,2,0,0,2,4,1,4,0,0,7,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,461,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,462,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,463,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,468,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,470,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,474,                if (striped[q] == '0') {,2,0,0,2,5,0,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,475,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,483,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,488,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,493,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,494,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,496,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,497,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,498,                break;,0,1,0,0,0,0,16,0,0,17,6,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,505,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,511,                striped[++p] = '0';,0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,517,        for (i = mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,40,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,518,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,522,            q += 4;,4,1,1,0,0,0,10,0,0,25,7,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,526,        exp = (decimalPos+sciexp) / rsize;,16,4,0,1,2,0,0,0,0,22,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,530,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,533,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,635,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,642,        return field.getRadixDigits();,4,1,0,1,2,1,12,0,0,17,30,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,649,        return field.getZero();,0,0,0,1,2,1,0,0,0,4,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,669,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,670,            mant[i] = mant[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,672,        mant[0] = 0;,2,0,1,1,2,0,0,0,0,6,12,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,673,        exp--;,4,1,0,0,0,1,0,0,0,6,6,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,674,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,681,        for (int i = 0; i < mant.length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,682,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,684,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,685,        exp++;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,686,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,697,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,698,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,700,        int diff = exp - e;,8,1,1,0,0,0,0,0,0,12,19,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,702,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,703,        if (adiff < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,704,            adiff = -adiff;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,707,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,708,            return 0;,0,0,0,0,0,1,6,0,0,6,9,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,711,        if (adiff > (mant.length + 1)) {,0,0,0,2,5,0,0,0,0,7,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,714,            exp = e;,8,0,0,0,0,0,0,0,0,9,8,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,719,            return 0;,0,0,1,0,0,1,14,0,0,21,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,722,        for (int i = 0; i < adiff; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,723,            if (diff < 0) {,4,1,0,1,3,3,0,0,0,8,15,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,728,                if (lostdigit != 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,729,                    inexact = true;,4,0,0,0,0,0,0,0,0,6,15,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,732,                lostdigit = mant[0];,4,0,1,1,2,2,0,0,0,9,20,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,734,                shiftRight();,0,0,0,1,2,0,10,0,0,10,13,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,740,        if (inexact) {,0,0,0,1,3,0,0,0,0,4,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,1,1,1,2,0,4,0,0,16,46,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,745,        return lostdigit;,4,1,1,0,0,2,0,0,0,10,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,765,        if (isNaN() || x.isNaN()) {,0,0,0,3,7,0,0,0,0,10,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,771,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,790,        if (isNaN() || x.isNaN()) {,2,1,0,3,7,0,6,0,0,10,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,879,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,904,        if (other instanceof Dfp) {,0,0,0,1,3,0,0,0,0,4,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,905,            final Dfp x = (Dfp) other;,0,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,910,"            return compare(this, x) == 0;",2,1,0,1,2,1,4,0,0,7,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0,0,0,2,5,0,0,0,0,7,71,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,948,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,951,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,964,        if (a.nans == FINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,16,4,0,1,3,3,0,0,0,23,47,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,20,5,0,3,7,0,0,0,0,25,67,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,974,            if (a.exp < b.exp) {,6,0,0,1,3,1,0,0,0,7,20,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,975,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,978,            if (a.exp > b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,979,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,46,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,985,            if (a.mant[i] > b.mant[i]) {,14,2,1,3,7,0,0,0,0,24,28,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,986,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,989,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,990,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,994,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1232,        for (int i = 0; i < mant.length; i++) {,8,2,0,1,3,0,0,0,0,11,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1233,            mant[i] = RADIX-mant[i]-1;,0,0,0,2,4,0,0,0,0,6,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1236,        int rh = extra / RADIX;,0,0,0,0,0,0,0,0,0,0,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1237,        extra = extra - rh * RADIX;,10,2,0,0,0,0,0,0,0,13,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1238,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1239,            final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1241,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1244,        return extra;,0,0,0,0,0,1,0,0,0,1,13,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1262,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1293,        Dfp a = newInstance(this);,4,0,0,1,2,0,0,0,0,4,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1294,        Dfp b = newInstance(x);,10,3,0,1,2,0,0,0,0,16,23,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1297,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,8,26,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1301,        final byte bsign = b.sign;,8,0,0,0,0,1,0,0,0,10,26,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1303,        a.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1304,        b.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1307,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1308,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1309,            rsign = asign;,4,0,0,0,0,0,0,0,0,5,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1315,        if (b.mant[mant.length-1] == 0) {,8,2,1,2,5,0,0,0,0,15,33,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1316,            b.exp = a.exp;,2,0,0,0,0,0,0,0,0,2,14,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1319,        if (a.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1324,        int aextradigit = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1325,        int bextradigit = 0;,4,0,0,0,0,0,0,0,0,4,20,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1326,        if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1327,            aextradigit = a.align(b.exp);,8,1,0,1,2,0,4,0,0,14,29,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1329,            bextradigit = b.align(a.exp);,6,0,0,1,2,0,6,0,0,13,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1333,        if (asign != bsign) {,6,3,1,1,3,0,0,0,0,14,21,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1334,            if (asign == rsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1335,                bextradigit = b.complement(bextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1337,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1342,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1343,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1344,            final int r = a.mant[i]+b.mant[i]+rh;,0,0,0,2,4,0,0,0,0,6,37,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1345,            rh = r / RADIX;,6,1,0,0,0,0,0,2,0,11,15,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1346,            result.mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1348,        result.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1349,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1354,        if (rh != 0 && (asign == bsign)) {,12,4,0,2,5,0,6,0,0,23,34,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1355,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1356,            result.shiftRight();,2,0,1,1,2,1,4,0,0,11,20,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1357,            result.mant[mant.length-1] = rh;,10,1,0,1,2,0,0,0,0,12,32,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1358,            final int excp = result.round(lostdigit);,2,0,0,1,2,1,6,0,0,9,41,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1359,            if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1365,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1366,            if (result.mant[mant.length-1] != 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1367,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1369,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1370,            if (i == 0) {,6,1,0,1,3,0,0,0,0,8,13,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1371,                result.mant[0] = aextradigit+bextradigit;,10,2,0,1,2,0,0,0,0,13,41,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1372,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1373,                bextradigit = 0;,6,2,0,0,0,0,0,0,0,9,16,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1378,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1379,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1381,            if (asign != bsign) {,6,1,0,1,3,0,0,0,0,7,21,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,6,0,0,0,0,0,0,0,0,7,50,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1388,        final int excp = result.round(aextradigit + bextradigit);,6,1,0,1,2,1,4,0,0,12,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1389,        if (excp != 0) {,18,3,0,1,3,0,4,0,0,25,16,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1393,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1400,        Dfp result = newInstance(this);,8,1,0,1,2,1,2,2,0,14,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1401,        result.sign = (byte) - result.sign;,16,5,1,1,2,1,0,0,0,29,35,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0,0,0,0,0,1,0,0,0,1,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,6,1,0,0,0,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,4,0,0,0,0,0,2,2,0,9,6,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,6,0,0,2,5,0,6,0,0,12,42,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2274,                result.exp = result.exp + ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2275,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,2,0,0,1,2,0,0,0,0,2,48,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,4,0,0,0,0,1,0,0,0,4,31,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,385,                    negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,386,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,394,                sciexp = -sciexp;,0,0,0,0,0,0,0,0,0,0,17,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,907,                return false;,4,0,0,0,0,6,0,10,0,19,13,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,932,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2056,            if (nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2059,                return NAN_STRING;,0,0,0,0,0,1,0,0,0,1,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,377,"            fpdecimal = s.substring(0, p);",2,0,0,1,2,0,6,0,0,9,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,378,            String fpexp = s.substring(p+1);,6,1,0,1,2,0,0,0,0,7,32,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,379,            boolean negative = false;,2,0,0,0,0,0,4,0,0,7,25,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,381,            for (int i=0; i<fpexp.length(); i++),10,1,0,2,4,1,4,4,0,21,36,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,383,                if (fpexp.charAt(i) == '-'),0,0,0,2,4,0,0,0,0,6,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,388,                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {,0,0,0,3,7,0,0,0,0,10,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,389,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,0,0,0,1,2,0,0,0,0,3,45,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,393,            if (negative) {,2,0,0,1,3,0,0,0,0,2,15,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,396,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,961,            return a.sign;,4,0,0,0,0,1,0,0,0,5,14,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,969,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2237,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2238,                def.sign = result.sign;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2239,                def.nans = QNAN;,0,0,0,0,0,0,6,0,0,6,16,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2240,                break;,6,0,1,0,0,1,8,4,0,21,6,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,500,            p--;,0,0,0,0,0,0,0,0,0,0,4,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2218,            buffer[--q] = '-';,6,3,0,1,2,0,0,0,0,9,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,284,        return ieeeFlags;,6,1,0,0,0,1,0,0,0,7,17,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1652,            lostdigit = result.mant[0];,4,0,0,1,2,0,0,0,0,6,27,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1653,            result.shiftRight();,10,3,0,1,2,1,0,2,0,17,20,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1654,            result.mant[mant.length-1] = rh;,6,1,0,1,2,0,4,0,0,12,32,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1603,            return multiplyFast(x);,6,0,0,1,2,1,0,0,0,6,23,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1612,        Dfp result = newInstance(this);,0,0,0,1,2,0,6,0,0,6,31,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1615,        if (nans != FINITE) {,4,1,1,1,3,0,0,0,0,11,21,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1635,        if (x < 0 || x >= RADIX) {,6,3,0,1,3,0,0,0,0,9,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1643,        int rh = 0;,14,5,0,0,0,0,0,0,0,20,11,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1644,        for (int i = 0; i < mant.length; i++) {,6,1,0,1,3,0,4,4,0,16,39,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1645,            final int r = mant[i] * x + rh;,0,0,0,1,2,0,0,0,0,3,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1646,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1647,            result.mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,32,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1650,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1651,        if (rh != 0) {,0,0,0,1,3,0,6,0,0,6,14,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1657,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",0,0,0,2,5,0,0,0,0,7,76,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1661,        final int excp = result.round(lostdigit);,0,0,0,1,2,0,0,0,0,3,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1662,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1666,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2252,                    def = newInstance(getZero());,4,0,1,2,4,0,4,0,0,13,29,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2253,                    def.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,16,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,386,"        return new Dfp(this, s);",0,0,0,1,2,1,0,0,0,4,24,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,396,"        return new Dfp(this, sign, nans);",0,0,0,1,2,1,0,0,0,4,33,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,541,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",8,0,0,1,3,4,0,2,0,14,71,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,542,        this.field = field;,4,0,0,0,0,0,2,0,0,7,19,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,543,        this.mant    = new int[field.getRadixDigits()];,4,0,0,2,4,0,6,2,0,12,47,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,544,        this.sign    = sign;,0,0,0,0,0,0,0,0,0,0,20,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,545,        this.exp     = 0;,6,0,1,0,0,0,0,0,0,12,17,3,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,546,        this.nans    = nans;,2,0,0,0,0,0,0,0,0,3,20,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,547,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,298,        ieeeFlags = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,299,    },8,0,0,0,1,0,8,0,0,16,1,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1728,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,4,0,0,1,2,0,4,0,0,8,47,7,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1729,            result = newInstance(getZero());,2,0,0,2,4,0,4,0,0,7,32,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1730,            result.sign = (byte) (sign * divisor.sign);,0,0,0,2,4,0,0,0,0,6,43,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1731,            result.nans = INFINITE;,14,1,0,0,0,0,0,0,0,17,23,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1732,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",6,0,0,1,2,0,8,0,0,15,70,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1733,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2243,                if (nans == FINITE && mant[mant.length-1] != 0) {,12,4,1,2,5,0,0,0,0,19,49,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2245,                    def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2246,                    def.sign = (byte)(sign*oper.sign);,10,1,0,2,4,0,0,0,0,12,34,7,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2247,                    def.nans = INFINITE;,2,0,0,0,0,0,0,0,0,3,20,2,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2250,                if (nans == FINITE && mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,49,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2256,                if (nans == INFINITE || nans == QNAN) {,8,3,0,1,3,0,0,0,0,11,39,5,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2261,                if (nans == INFINITE || nans == SNAN) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,953,                return -1;,20,6,0,0,0,1,0,0,0,28,10,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,952,            if (a.sign == -1) {,2,2,0,1,3,1,14,2,0,21,19,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,403,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,427,                break;,4,3,1,0,0,0,0,0,0,11,6,5,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,489,            decimalPos = q-offset;,0,0,0,0,0,0,0,0,0,0,22,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,177,"        this(decimalDigits, true);",2,0,0,1,2,0,0,0,0,3,26,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,8,3,0,2,4,0,0,0,0,13,70,0,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,0,0,0,0,0,0,0,0,0,0,48,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,195,        this.ieeeFlags   = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,196,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,197,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,198,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,2,0,5,36,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,200,        if (computeConstants) {,4,0,0,1,3,0,0,0,0,4,23,3,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,202,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,208,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,6,2,0,3,6,1,2,0,0,11,73,1,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,211,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,2,0,7,43,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,212,                sqr2Split      = split(sqr2String);,0,0,0,1,2,0,0,0,0,3,35,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,214,"                sqr3           = new Dfp(this, sqr3String);",0,0,0,1,2,0,0,0,0,3,43,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,216,"                pi             = new Dfp(this, piString);",6,1,0,1,2,0,0,2,0,10,41,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,217,                piSplit        = split(piString);,2,0,0,1,2,0,4,0,0,7,33,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,218,"                e              = new Dfp(this, eString);",0,0,0,1,2,0,0,0,0,3,40,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,219,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,220,"                ln2            = new Dfp(this, ln2String);",4,0,0,1,2,0,0,2,0,7,42,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,221,                ln2Split       = split(ln2String);,2,0,0,1,2,0,4,0,0,7,34,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,222,"                ln5            = new Dfp(this, ln5String);",0,0,0,1,2,0,0,0,0,3,42,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/dfp/DfpField,17,223,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,            if (upper.length != dim) {,14,1,0,1,3,1,4,0,0,21,26,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,            for (int i = 0; i < dim; i++) {,12,2,0,1,3,0,0,0,0,15,31,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,                final double v = startPoint[i];,2,0,0,1,2,0,0,0,0,3,31,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,                if (v < lo) {,12,1,0,1,3,0,0,0,0,14,13,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,97,            if (lower.length != dim) {,0,0,0,1,3,0,4,0,0,5,26,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,927,                return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,953,                return x;,2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,975,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3514,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3519,        long bits = Double.doubleToRawLongBits(a);,6,3,1,1,2,0,0,0,0,18,42,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3520,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,60,public abstract class RealVector {,4,2,0,0,1,0,6,0,0,12,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,18,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,522,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,530,    },4,0,0,0,1,0,0,0,0,5,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,534,"        MatrixUtils.checkRowIndex(this, row);",4,0,0,1,2,1,0,4,0,9,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,535,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,536,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,537,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,538,"            out[i] = getEntry(row, i);",4,0,0,2,4,0,0,0,0,5,26,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,85,    public ArrayRealVector(double[] d) {,12,1,0,2,5,1,10,10,0,35,36,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,87,    },10,1,0,0,1,0,0,0,0,13,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,4,0,0,1,2,3,4,2,0,14,86,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,600,            return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,610,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,80,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,81,    },0,0,0,0,1,0,10,0,0,10,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,254,        return copyOut();,0,0,0,1,2,1,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,272,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,279,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,280,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,281,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,285,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,289,            data = new double[subMatrix.length][nCols];,6,1,0,2,4,1,4,0,0,12,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,291,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,300,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,4,0,1,5,10,1,2,0,0,9,68,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,531,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,534,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,547,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,115,        throws MathArithmeticException {,2,0,0,0,1,0,0,0,0,2,32,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,81,    private byte maxIter = 30;,2,0,0,0,0,0,0,0,0,2,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,4,0,0,4,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,118,            findEigenVectors(transformer.getQ().getData());,2,0,0,3,6,3,8,0,0,13,47,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,123,    },4,1,0,0,1,1,0,0,0,6,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,192,        final int rows = matrix.getRowDimension();,6,0,0,1,2,0,0,0,0,7,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,193,        final int columns = matrix.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,7,0,0,0,0,0,0,0,0,7,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,195,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,196,            for (int j = i + 1; j < columns; ++j) {,18,2,0,1,3,1,0,0,0,23,39,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,208,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,224,            final int m = eigenvectors.length;,2,1,0,0,0,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,247,        if (cachedD == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,10,1,0,1,2,3,6,0,0,22,64,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",12,5,1,3,8,1,10,0,0,32,71,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,259,        return cachedD;,4,0,0,0,0,1,0,0,0,5,15,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,555,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,556,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,557,        secondary = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,558,    },8,2,0,0,1,0,10,0,0,20,1,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,567,        final double[][]z = householderMatrix.clone();,10,1,0,3,6,2,4,0,0,18,46,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,568,        final int n = main.length;,2,0,0,0,0,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,569,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,570,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,571,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,572,        for (int i = 0; i < n - 1; i++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,577,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,580,        double maxAbsoluteValue = 0;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,581,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,52,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,585,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,590,        if (maxAbsoluteValue != 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,591,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,65,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,601,        for (int j = 0; j < n; j++) {,14,3,1,1,3,0,0,0,0,21,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,602,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,605,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,612,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,668,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,672,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,673,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,674,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,675,            for (int j = i + 1; j < n; j++) {,10,2,1,1,3,0,4,0,0,19,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,681,            if (k != i) {,0,0,0,1,3,0,0,0,0,4,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,693,        maxAbsoluteValue = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,694,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,695,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,696,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,4,0,0,11,50,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,700,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,701,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,702,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,78,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,707,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,708,        final double[] tmp = new double[n];,2,0,1,2,4,1,0,0,0,5,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,709,        for (int i = 0; i < n; i++) {,12,1,0,1,3,0,0,0,0,14,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,710,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,711,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,713,            eigenvectors[i] = new ArrayRealVector(tmp);,2,0,1,2,4,0,0,2,0,9,43,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,715,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,62,    public TriDiagonalTransformer(RealMatrix matrix) {,0,0,0,1,3,0,0,0,0,4,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,68,        final int m = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,71,        secondary = new double[m - 1];,6,1,0,1,2,0,6,0,0,15,30,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,72,        cachedQ   = null;,6,1,0,0,0,0,0,0,0,8,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,74,        cachedT   = null;,2,0,1,0,0,1,0,0,0,7,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,77,        transform();,2,0,0,1,2,1,2,0,0,5,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,78,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,86,        if (cachedQ == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,89,        return cachedQ;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,131,        return cachedQt;,4,0,1,0,0,1,0,0,0,9,16,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,175,        return main;,4,0,0,0,0,1,6,0,0,11,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,185,        return secondary;,10,2,0,0,0,1,0,0,0,13,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,193,        final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,252,        main[m - 1] = householderVectors[m - 1][m - 1];,0,0,0,3,6,0,0,0,0,9,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,18,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,106,"                            final String separator, final NumberFormat format) {",8,2,1,0,2,2,0,4,0,21,52,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,114,    },8,4,1,0,1,0,0,0,0,19,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,18,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,130,        if (data == null ||,4,2,0,0,1,0,0,0,0,6,19,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",12,1,0,1,2,1,2,2,0,18,72,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,217,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,218,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,220,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,384,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),2,0,0,2,5,0,14,0,0,17,52,13,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,413,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",0,0,0,1,2,0,12,0,0,12,52,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,717,        double negccov = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,718,        if (ccov1 + ccovmu > 0) {,4,2,0,1,3,0,0,2,0,8,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,719,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",2,0,0,2,4,0,10,2,0,14,56,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,721,            RealMatrix roneu = pc.multiply(pc.transpose()),0,0,0,2,4,0,0,0,0,6,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,724,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,12,1,0,1,2,0,0,0,0,14,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,725,            oldFac += 1. - ccov1 - ccovmu;,6,1,0,0,0,0,0,0,0,8,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,726,            if (isActiveCMA) {,6,0,0,1,3,1,0,2,0,9,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,728,                negccov = (1. - ccovmu) * 0.25 * mueff /,0,0,0,1,2,0,0,0,0,3,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,730,                double negminresidualvariance = 0.66;,0,0,0,0,0,0,0,0,0,0,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,733,                double negalphaold = 0.5; // where to make up for the variance,8,1,0,0,0,1,0,0,0,10,62,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,736,                int[] arReverseIndex = reverse(arindex);,2,0,0,2,4,0,4,0,0,6,40,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,737,                RealMatrix arzneg,2,0,0,0,0,0,0,2,0,4,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,739,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,740,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,8,2,0,3,6,0,10,0,0,21,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,741,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",8,2,0,1,2,1,6,2,0,19,60,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,742,                int[] idxReverse = reverse(idxnorms);,2,0,0,2,4,0,4,0,0,6,37,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,743,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,744,"                arnorms = divide(arnormsReverse, arnormsSorted);",2,0,0,1,2,0,6,0,0,9,48,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,745,                int[] idxInv = inverse(idxnorms);,2,0,0,2,4,0,4,0,0,6,33,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,746,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",2,0,0,1,2,0,6,2,0,10,55,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,748,                double negcovMax = (1. - negminresidualvariance) /,0,0,0,1,2,0,6,0,0,6,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,750,                if (negccov > negcovMax) {,4,1,0,1,3,0,0,0,0,5,26,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,753,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,754,                RealMatrix artmp = BD.multiply(arzneg);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,755,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0,0,0,2,5,0,0,0,0,7,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,757,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,758,                C = C.scalarMultiply(oldFac),2,0,0,1,2,0,6,0,0,9,28,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,769,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,780,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,781,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,789,        if (ccov1 + ccovmu + negccov > 0 &&,6,3,0,0,1,0,0,0,0,9,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,792,"            C = triu(C, 0).add(triu(C, 1).transpose());",0,0,0,4,8,0,0,0,0,12,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,794,            EigenDecomposition eig = new EigenDecomposition(C);,4,0,0,1,2,0,0,4,0,8,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,795,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",2,0,0,1,2,0,4,0,0,7,66,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,796,            D = eig.getD();,6,1,0,1,2,0,0,0,0,7,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,797,            diagD = diag(D);,2,0,0,1,2,0,8,0,0,11,16,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,798,            if (min(diagD) <= 0) {,0,0,0,2,5,0,0,0,0,7,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,808,            if (max(diagD) > 1e14 * min(diagD)) {,0,2,0,3,7,0,8,0,0,10,37,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,813,            diagC = diag(C);,2,0,0,1,2,0,4,0,0,7,16,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,814,            diagD = sqrt(diagD); // D contains standard deviations now,0,0,0,1,2,0,0,0,0,3,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,815,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0,0,0,4,8,0,0,0,0,12,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,817,    },0,0,0,0,1,0,4,0,0,4,1,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1109,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1110,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1111,            for (int c = 0; c < m.getColumnDimension(); c++) {,10,1,0,2,5,0,10,0,0,24,50,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1112,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",2,1,1,4,8,2,16,0,0,28,46,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1115,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1139,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1140,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1141,            for (int c = 0; c < m.getColumnDimension(); c++) {,8,1,0,2,5,1,6,0,0,17,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1142,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",10,4,1,3,6,0,8,0,0,39,44,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1145,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1153,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1154,        for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1155,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1156,            for (int r = 0; r < m.getRowDimension(); r++) {,12,4,1,2,5,0,4,0,0,26,47,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1157,"                sum += m.getEntry(r, c);",2,0,0,1,2,0,16,0,0,19,24,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1159,            d[0][c] = sum;,0,0,0,2,4,0,0,0,0,6,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1161,"        return new Array2DRowRealMatrix(d, false);",6,2,1,1,2,1,0,2,0,20,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1338,        int[] inverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1339,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1340,            inverse[indices[i]] = i;,0,0,0,2,4,0,0,0,0,6,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1342,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1350,        int[] reverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1351,        for (int i = 0; i < indices.length; i++) {,14,2,1,1,3,0,0,0,0,22,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1352,            reverse[i] = indices[indices.length - i - 1];,6,1,1,2,4,0,0,0,0,14,45,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1354,        return reverse;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,18,2974,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,18,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,18,267,    },6,0,0,0,1,0,0,0,0,7,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,96,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,97,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,330,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,331,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,334,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,337,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,341,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,18,343,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,4,2,0,2,4,1,12,0,0,20,55,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,233,        if (mti >= N) { // generate N words at one time,20,3,0,1,3,0,8,0,0,33,47,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,234,            int mtNext = mt[0];,4,0,1,1,2,0,0,0,0,6,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,235,            for (int k = 0; k < N - M; ++k) {,10,2,0,1,3,0,0,0,0,13,33,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,237,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,241,            for (int k = N - M; k < N - 1; ++k) {,12,3,0,1,3,0,0,0,0,16,37,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,10,5,1,5,10,0,4,0,0,33,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,6,3,1,3,6,1,4,0,0,17,49,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,5,1,4,8,0,0,0,0,20,51,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,250,            mti = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,253,        y = mt[mti++];,4,0,1,1,2,0,0,0,0,8,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,256,        y ^=  y >>> 11;,0,0,0,0,0,0,0,0,0,0,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,258,        y ^= (y <<  15) & 0xefc60000;,4,2,0,1,2,0,0,0,0,7,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,259,        y ^=  y >>> 18;,4,1,0,0,0,0,0,0,0,6,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,18,261,        return y >>> (32 - bits);,4,2,0,1,2,1,0,0,0,6,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,85,        final long high = ((long) next(26)) << 26;,6,0,0,3,6,0,4,0,0,11,42,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,86,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,87,        return (high | low) * 0x1.0p-52d;,2,0,0,1,2,1,0,0,0,2,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,99,        if (Double.isNaN(nextGaussian)) {,14,5,0,2,5,1,6,0,0,26,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,101,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,102,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,103,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,104,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,105,            random       = r * FastMath.cos(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,106,            nextGaussian = r * FastMath.sin(alpha);,0,0,0,1,2,0,0,0,0,3,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,107,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,109,            random = nextGaussian;,4,0,0,0,0,0,0,0,0,5,22,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,110,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,18,113,        return random;,16,6,0,0,0,1,0,0,0,23,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,67,        throws NotStrictlyPositiveException {,2,0,0,0,1,0,0,0,0,2,37,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,68,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,18,3,0,1,2,3,4,2,0,32,95,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,4,45,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,82,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,84,        for (int row = 0; row < rowCount; ++row) {,12,5,0,1,3,0,0,0,0,18,42,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,85,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,90,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,98,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,99,        final int columnCount = getColumnDimension();,12,0,0,1,2,2,2,2,0,19,45,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,112,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,113,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",6,0,0,1,2,1,6,2,0,16,59,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,115,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,116,            for (int col = 0; col < columnCount; ++col) {,12,1,0,1,3,0,8,0,0,23,45,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,121,        return out;,4,0,0,0,0,1,4,0,0,9,11,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,126,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,127,        final int columnCount = getColumnDimension();,4,1,0,1,2,0,4,0,0,9,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,129,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,8,0,0,18,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,130,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,131,"                out.setEntry(row, col, getEntry(row, col) * d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,135,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,143,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,144,        final int nCols = m.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,146,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,0,1,2,1,6,2,0,13,50,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,148,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,149,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,153,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,157,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,2,0,0,1,4,1,0,2,0,4,63,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,466,"        MatrixUtils.checkColumnIndex(this, column);",2,2,0,1,2,0,8,0,0,13,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,467,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,468,"        final RealMatrix out = createMatrix(nRows, 1);",18,3,0,1,2,1,4,2,0,31,46,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,469,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,2,4,0,12,0,0,12,40,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,473,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,561,        final double[] out = new double[nRows];,10,2,1,2,4,1,0,0,0,15,39,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,562,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,563,"            out[i] = getEntry(i, column);",0,0,0,2,4,0,0,0,0,6,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,566,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,598,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,599,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,611,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,873,        return walkInRowOrder(visitor);,4,1,0,1,2,1,4,0,0,9,31,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,18,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,18,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,6,2,0,0,1,0,0,0,0,9,88,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,18,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,18,41,        return 0;,6,1,0,0,0,1,0,0,0,7,9,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,62,        data = new double[rowDimension][columnDimension];,4,0,1,2,4,0,0,2,0,11,49,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,101,        NullArgumentException {,6,0,0,0,1,0,0,0,0,7,23,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,102,        if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,105,            if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,108,            final int nRows = d.length;,6,0,0,0,0,1,0,0,0,7,27,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,109,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,112,            final int nCols = d[0].length;,0,0,0,1,2,0,0,0,0,3,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,113,            if (nCols == 0) {,8,1,0,1,3,0,0,0,0,9,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,116,            for (int r = 1; r < nRows; r++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,117,                if (d[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,27,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,121,            data = d;,4,0,0,0,0,0,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,307,        return data[row][column];,4,0,1,2,4,1,0,0,0,12,25,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,315,        data[row][column] = value;,4,0,1,2,4,0,0,0,0,11,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,316,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,339,        return (data == null) ? 0 : data.length;,2,0,0,1,2,1,0,0,0,2,40,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,10,4,1,5,10,1,0,0,0,19,66,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,414,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,415,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,416,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,419,        return visitor.end();,0,1,0,1,2,1,4,0,0,5,21,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,606,"                out.setEntry(column, row, value);",4,2,0,1,2,0,10,0,0,16,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",14,0,0,0,1,0,0,0,0,14,73,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,133,                            final NumberFormat format) {,2,0,0,0,2,1,0,2,0,5,28,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,134,        this.prefix            = prefix;,12,2,0,0,0,0,0,0,0,15,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,136,        this.rowPrefix         = rowPrefix;,2,1,0,0,0,0,2,0,0,7,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,140,        this.format            = format;,4,0,0,0,0,0,0,0,0,5,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,143,    },6,2,0,0,1,0,0,0,0,9,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,18,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,85,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,81,        return (rows * columns <= 4096) ?,6,2,0,1,2,1,0,0,0,8,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,339,        if (columnData == null) {,4,2,0,1,3,0,0,0,0,6,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,342,        final int nRows = columnData.length;,2,0,1,0,0,0,4,0,0,17,36,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,343,"        final RealMatrix m = createRealMatrix(nRows, 1);",0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,344,        for (int i = 0; i < nRows; ++i) {,10,1,0,1,3,0,2,2,0,16,33,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,345,"            m.setEntry(i, 0, columnData[i]);",0,0,0,2,4,0,0,0,0,6,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,347,        return m;,10,1,0,0,0,1,0,0,0,12,9,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,389,"        checkRowIndex(m, row);",2,0,0,1,2,0,0,2,0,6,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,390,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,391,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,402,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,407,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,418,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,422,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,506,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,511,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,2,3,0,3,7,0,8,0,0,13,61,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,528,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,541,        if (left.getColumnDimension() != right.getRowDimension()) {,2,0,0,3,7,0,8,0,0,10,59,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,18,545,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,63,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,289,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,290,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,294,                sum += value * value;,0,0,0,0,0,0,6,0,0,6,21,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,295,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,916,        public FitnessFunction() {,2,0,0,1,3,1,0,0,0,3,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,917,            valueRange = 1.0;,2,0,0,0,0,0,0,0,0,3,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,918,            isRepairMode = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,919,        },4,0,1,0,1,0,0,0,0,9,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,926,            if (boundaries == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,942,            return boundaries != null && isRepairMode ?,14,3,0,0,0,1,0,0,0,18,43,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,952,            if (boundaries == null) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,969,            if (boundaries != null && isRepairMode) {,4,1,0,1,3,0,0,0,0,6,41,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,978,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1006,            this.valueRange = valueRange;,4,0,0,0,0,0,0,0,0,5,29,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1007,        },2,1,0,0,1,0,8,0,0,11,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,123,            lowerBound = new double[dim];,0,0,0,1,2,0,0,0,0,3,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,124,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,125,                lowerBound[i] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,131,            upperBound = new double[dim];,0,0,0,1,2,0,0,0,0,3,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,132,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,133,                upperBound[i] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,9,41,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,72,        return evaluations.getMaximalCount();,0,0,0,1,2,1,0,0,0,4,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,82,        return checker;,6,0,0,0,0,1,0,0,0,7,15,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,95,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,98,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,99,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,18,155,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,358,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,16,1,0,2,4,0,4,2,0,25,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,359,        final FitnessFunction fitfun = new FitnessFunction();,4,1,1,1,2,1,0,4,0,14,53,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,360,        final double[] guess = fitfun.encode(getStartPoint());,2,0,0,3,6,1,6,0,0,9,54,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,362,        dimension = guess.length;,6,0,0,0,0,0,0,0,0,7,25,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,363,        initializeCMA(guess);,2,0,0,1,2,0,4,0,0,6,21,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,364,        iterations = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,365,        double bestValue = fitfun.value(guess);,12,1,0,1,2,0,6,2,0,23,39,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,366,"        push(fitnessHistory, bestValue);",0,0,0,1,2,0,0,0,0,3,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,367,"        PointValuePair optimum = new PointValuePair(getStartPoint(),",2,0,0,1,3,0,2,4,0,8,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,369,        PointValuePair lastResult = null;,0,0,0,0,0,0,0,0,0,0,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,374,            for (iterations = 1; iterations <= maxIterations; iterations++) {,8,1,0,1,3,0,0,0,0,11,65,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,376,"                RealMatrix arz = randn1(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,377,"                RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,378,                double[] fitness = new double[lambda];,2,0,1,2,4,0,0,0,0,4,38,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,380,                for (int k = 0; k < lambda; k++) {,8,1,0,1,3,0,0,0,0,10,34,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,381,                    RealMatrix arxk = null;,0,0,0,0,0,0,0,0,0,0,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,382,                    for (int i = 0; i < checkFeasableCount+1; i++) {,8,2,0,1,3,0,0,0,0,11,48,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,383,                        if (diagonalOnly <= 0) {,4,2,0,1,3,0,4,0,0,10,24,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,390,                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {,0,0,0,3,7,0,0,0,0,10,70,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,396,"                    copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,398,                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,0,3,6,0,0,0,0,9,63,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,401,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,404,                int[] arindex = sortedIndices(fitness);,4,0,0,2,4,1,4,0,0,9,39,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,406,                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),0,0,0,2,4,0,0,0,0,6,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,407,"                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,72,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,408,                xmean = bestArx.multiply(weights);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,409,"                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,72,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,410,                RealMatrix zmean = bestArz.multiply(weights);,2,0,0,1,2,0,6,2,0,10,45,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,411,"                boolean hsig = updateEvolutionPaths(zmean, xold);",4,0,0,1,2,1,6,0,0,11,49,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,412,                if (diagonalOnly <= 0) {,8,2,0,1,3,0,0,0,0,11,24,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,418,"                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",10,4,0,3,6,0,8,0,0,23,61,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,419,                double bestFitness = fitness[arindex[0]];,2,0,1,2,4,0,0,0,0,6,41,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,420,                double worstFitness = fitness[arindex[arindex.length-1]];,0,0,0,2,4,0,0,0,0,6,57,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,421,                if (bestValue > bestFitness) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,422,                    bestValue = bestFitness;,4,0,0,0,0,0,0,0,0,5,24,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,423,                    lastResult = optimum;,4,0,0,0,0,0,0,0,0,5,21,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,424,                    optimum = new PointValuePair(,2,0,0,0,1,0,0,0,0,3,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,427,                    if (getConvergenceChecker() != null && lastResult != null) {,10,4,0,2,5,1,14,0,0,31,60,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,428,"                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {",0,0,0,3,7,0,10,0,0,10,73,12,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,435,                if (stopFitness != 0) { // only if stopFitness is defined,2,1,0,1,3,0,0,0,0,3,57,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,440,                double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,441,                double[] pcCol = pc.getColumn(0);,2,0,0,2,4,0,4,0,0,6,33,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,442,                for (int i = 0; i < dimension; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,443,"                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {",4,2,1,6,13,0,8,0,0,22,68,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,444,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,450,                for (int i = 0; i < dimension; i++) {,2,0,0,1,3,1,0,0,0,3,37,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,451,                    if (sigma*sqrtDiagC[i] > stopTolUpX) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,455,                double historyBest = min(fitnessHistory);,2,0,0,1,2,0,4,0,0,6,41,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,456,                double historyWorst = max(fitnessHistory);,0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,457,"                if (iterations > 2 && Math.max(historyWorst, worstFitness) -",4,3,0,1,3,0,18,0,0,25,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,461,                if (iterations > fitnessHistory.length &&,0,0,0,0,1,0,0,0,0,1,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,466,                if (max(diagD)/min(diagD) > 1e7) {,0,2,0,3,7,0,8,0,0,10,34,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,470,                if (getConvergenceChecker() != null) {,2,1,0,2,5,2,2,0,0,8,38,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,471,                    PointValuePair current =,4,1,0,0,0,0,4,2,0,11,24,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,474,                    if (lastResult != null &&,2,2,0,0,1,0,0,0,0,4,25,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,478,                    lastResult = current;,4,0,0,0,0,0,0,0,0,5,21,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,481,                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,0,0,0,5,11,0,0,0,0,16,58,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,484,"                if (iterations > 2 && Math.max(historyWorst, bestFitness) -",2,3,0,1,3,0,8,0,0,13,59,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,489,"                push(fitnessHistory,bestFitness);",0,0,0,1,2,0,6,0,0,6,33,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,490,                fitfun.setValueRange(worstFitness-bestFitness);,4,1,0,1,2,0,4,0,0,9,47,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,491,                if (generateStatistics) {,4,3,1,1,3,0,0,0,0,15,25,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,498,        return optimum;,4,2,0,0,0,1,0,0,0,6,15,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,556,            boundaries = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,574,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,582,        if (lambda <= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,586,        double[][] sigmaArray = new double[guess.length][1];,0,0,0,4,8,0,0,0,0,12,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,587,        for (int i = 0; i < guess.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,588,            final double range = (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];,4,2,1,5,10,1,0,0,0,15,86,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,589,            sigmaArray[i][0] = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;,4,2,1,5,10,0,0,0,0,15,72,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,591,"        RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",4,0,1,1,2,0,2,4,0,16,65,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,592,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,4,0,0,7,51,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,595,        stopTolUpX = 1e3 * max(insigma);,6,4,0,1,2,0,4,0,0,15,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,596,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,597,        stopTolFun = 1e-12;,2,0,0,0,0,0,0,0,0,3,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,598,        stopTolHistFun = 1e-13;,0,0,0,0,0,0,0,0,0,0,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,601,        mu = lambda / 2; // number of parents/points for recombination,4,1,0,0,0,0,6,0,0,12,62,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,602,        logMu2 = Math.log(mu + 0.5);,10,2,0,1,2,0,4,0,0,18,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,603,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);",18,5,0,4,8,0,12,0,0,38,72,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,604,        double sumw = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,605,        double sumwq = 0;,8,2,0,0,0,0,0,0,0,10,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,606,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,607,"            double w = weights.getEntry(i, 0);",4,1,0,1,2,0,6,0,0,11,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,608,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,609,            sumwq += w * w;,8,1,0,0,0,0,0,2,0,12,15,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,611,        weights = weights.scalarMultiply(1. / sumw);,4,1,0,1,2,0,4,0,0,10,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,612,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,0,0,0,0,0,0,0,0,0,0,69,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,615,        cc = (4. + mueff / dimension) /,0,0,0,1,2,0,0,0,0,3,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,617,        cs = (mueff + 2.) / (dimension + mueff + 3.);,8,3,0,2,4,0,0,0,0,12,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,618,"        damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /",6,7,0,1,5,0,8,0,0,22,55,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,623,        ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);,2,0,0,3,6,0,0,0,0,2,61,10,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,624,"        ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /",10,6,0,1,3,1,6,0,0,24,61,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,626,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);",6,3,0,2,4,0,4,0,0,14,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,627,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);",8,4,0,2,4,0,4,0,0,17,65,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,628,        chiN = Math.sqrt(dimension) *,0,0,0,1,2,0,0,0,0,3,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,631,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective,0,0,0,1,2,0,0,0,0,3,63,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,633,        diagD = insigma.scalarMultiply(1. / sigma);,4,1,0,1,2,0,4,0,0,10,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,634,        diagC = square(diagD);,2,0,0,1,2,0,4,0,0,7,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,635,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",2,0,0,1,2,0,12,0,0,15,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,636,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,637,        normps = ps.getFrobeniusNorm();,0,0,0,1,2,0,0,0,0,3,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,639,"        B = eye(dimension, dimension);",0,0,0,1,2,0,0,0,0,3,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,640,"        D = ones(dimension, 1); // diagonal D defines the scaling",0,0,0,1,2,0,0,0,0,3,57,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,641,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,642,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,6,1,1,5,10,1,24,0,0,40,70,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,643,        historySize = 10 + (int) (3. * 10. * dimension / lambda);,0,0,0,2,4,0,0,0,0,6,57,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,644,        fitnessHistory = new double[historySize]; // history of fitness values,6,0,1,1,2,0,8,2,0,20,70,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,645,        for (int i = 0; i < historySize; i++) {,10,2,0,1,3,0,0,0,0,13,39,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,646,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,648,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,659,        ps = ps.scalarMultiply(1. - cs).add(,8,0,1,1,3,0,0,4,0,15,36,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,662,        normps = ps.getFrobeniusNorm();,10,1,0,1,2,0,4,0,0,18,31,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,663,        boolean hsig = normps /,4,1,0,0,0,0,0,0,0,5,23,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,666,        pc = pc.scalarMultiply(1. - cc);,0,0,0,1,2,0,0,0,0,3,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,667,        if (hsig) {,0,0,0,1,3,0,0,0,0,4,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,668,            pc = pc.add(xmean.subtract(xold).scalarMultiply(,2,0,0,1,4,0,12,0,0,15,48,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,671,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,826,        for (int i = vals.length-1; i > 0; i--) {,0,0,0,1,3,0,0,0,0,4,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,827,            vals[i] = vals[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,829,        vals[0] = val;,10,2,1,1,2,0,0,0,0,16,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,830,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,839,        DoubleIndex[] dis = new DoubleIndex[doubles.length];,0,0,0,2,4,0,0,0,0,6,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,840,        for (int i = 0; i < doubles.length; i++) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,841,"            dis[i] = new DoubleIndex(doubles[i], i);",0,0,0,3,6,0,0,0,0,9,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,843,        Arrays.sort(dis);,0,0,0,1,2,0,0,0,0,3,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,844,        int[] indices = new int[doubles.length];,6,0,0,2,4,0,0,0,0,6,40,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,845,        for (int i = 0; i < doubles.length; i++) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,846,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,848,        return indices;,0,0,0,0,0,1,0,0,0,1,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1049,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,71,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1050,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1051,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1052,"                d[r][c] = Math.log(m.getEntry(r, c));",0,0,0,4,8,0,0,0,0,12,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1055,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1064,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,4,0,0,6,12,0,0,0,0,4,71,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1065,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,1,2,5,0,4,0,0,16,47,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1066,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1067,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",8,2,1,4,8,0,12,0,0,30,38,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1070,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1078,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1079,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1080,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1081,"                double e = m.getEntry(r, c);",4,1,1,1,2,0,12,0,0,19,28,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1082,                d[r][c] = e * e;,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1085,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1094,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,71,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1095,        for (int r = 0; r < m.getRowDimension(); r++) {,10,3,1,2,5,0,4,0,0,25,47,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1096,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1097,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1100,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,4,0,7,42,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1124,        double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,0,4,0,0,10,60,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1125,        for (int r = 0; r < m.getRowDimension(); r++) {,10,1,0,2,5,0,4,0,0,17,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1126,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1127,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,1,4,8,0,6,0,0,17,33,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1130,"        return new Array2DRowRealMatrix(d, false);",6,1,0,1,2,1,0,0,0,8,42,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1170,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1171,            double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,0,8,0,0,10,68,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1172,            for (int i = 0; i < m.getRowDimension(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1173,"                d[i][i] = m.getEntry(i, 0);",0,0,1,3,6,0,6,0,0,13,27,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1175,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1194,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1195,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,1,2,4,0,16,0,0,23,43,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1205,        double[][] d = new double[n][m];,0,0,0,4,8,0,0,0,0,12,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1206,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1207,"            Arrays.fill(d[r], 1.0);",10,2,0,2,4,0,0,0,0,15,23,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1209,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1218,        double[][] d = new double[n][m];,0,0,0,4,8,0,8,0,0,8,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1219,        for (int r = 0; r < n; r++) {,12,2,0,1,3,0,0,0,0,15,29,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1220,            if (r < m) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1221,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1224,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1233,"        return new Array2DRowRealMatrix(n, m);",4,0,0,1,2,1,0,2,0,6,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1243,        int rd = mat.getRowDimension();,2,0,0,1,2,0,4,0,0,6,31,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1244,        int cd = mat.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,34,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1245,        double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,0,0,0,0,12,42,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1246,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1247,            for (int c = 0; c < m * cd; c++) {,10,2,0,1,3,0,0,0,0,13,34,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1248,"                d[r][c] = mat.getEntry(r % rd, c % cd);",0,0,0,3,6,0,0,0,0,9,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1251,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1261,        int size = (int) ((end - start) / step + 1);,16,4,0,3,6,0,0,0,0,22,44,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1262,        double[][] d = new double[size][1];,2,0,1,4,8,0,0,0,0,4,35,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1263,        double value = start;,4,0,0,0,0,0,0,0,0,4,21,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1264,        for (int r = 0; r < size; r++) {,6,1,0,1,3,0,0,0,0,7,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1265,            d[r][0] = value;,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1266,            value += step;,8,1,0,0,0,0,0,0,0,10,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1268,"        return new Array2DRowRealMatrix(d, false);",6,0,0,1,2,1,6,4,0,17,42,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1276,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1277,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1278,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1279,"                double e = m.getEntry(r, c);",16,2,0,1,2,0,8,0,0,27,28,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1280,                if (max < e) {,4,1,0,1,3,0,0,0,0,5,14,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1281,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1285,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1293,        double min = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,30,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1294,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1295,            for (int c = 0; c < m.getColumnDimension(); c++) {,12,2,0,2,5,1,4,0,0,21,50,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1296,"                double e = m.getEntry(r, c);",6,0,0,1,2,0,8,0,0,14,28,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1297,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1298,                    min = e;,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1302,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1310,        double max = -Double.MAX_VALUE;,10,3,0,0,0,0,0,0,0,15,31,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1311,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1312,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1313,                max = m[r];,0,0,0,1,2,0,0,0,0,3,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1316,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1324,        double min = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,30,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1325,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1326,            if (min > m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,0,0,0,3,6,0,0,0,0,9,46,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,                hasFiniteBounds = true;,0,0,0,0,0,0,0,0,0,0,23,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,12,1,1,0,0,0,12,6,0,41,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,8,1,0,1,3,0,0,0,0,11,37,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,4,0,0,1,3,3,4,2,0,13,24,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,0,0,0,3,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,4,0,1,1,2,4,0,4,0,16,31,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,20,5,0,1,2,1,4,0,0,31,27,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,100,            for (int i = 0; i < dim; i++) {,36,4,1,1,3,1,4,4,0,56,31,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,101,                final double v = startPoint[i];,0,0,0,1,2,0,0,0,0,3,31,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,102,                final double lo = lower[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,103,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,2,0,2,0,10,52,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,66,        msgPatterns    = new ArrayList<Localizable>();,0,0,0,1,2,0,0,0,0,3,46,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,67,        msgArguments   = new ArrayList<Object[]>();,8,5,1,2,4,1,0,0,0,24,43,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,69,    },2,1,0,0,1,0,0,0,0,3,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,87,        msgPatterns.add(pattern);,10,1,0,1,2,0,6,0,0,19,25,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,88,        msgArguments.add(ArgUtils.flatten(arguments));,6,1,0,2,4,1,10,0,0,20,46,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,19,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,368,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,369,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,370,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,1,1,1,2,0,0,0,0,11,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",4,3,0,1,2,0,4,0,0,11,54,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",6,5,0,2,4,0,0,0,0,11,87,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",10,3,0,1,2,3,0,0,0,17,131,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,1,1,2,0,0,0,0,18,95,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,4,0,0,4,55,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,1,0,0,0,5,78,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,2,263,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",8,1,0,1,2,0,0,0,0,10,72,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",2,0,0,1,2,0,0,0,0,3,94,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",4,1,0,5,10,0,6,0,0,11,71,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0,0,0,1,2,0,8,0,0,8,51,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",2,0,0,2,4,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",8,1,0,3,6,0,0,0,0,10,81,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",6,2,0,1,2,0,8,0,0,18,53,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,102,"    EVALUATION(""evaluation""), /* keep */",4,0,0,1,2,3,0,6,0,14,36,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",4,0,0,12,24,1,0,0,0,6,175,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0,0,0,2,4,0,0,0,0,6,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",4,0,0,2,4,0,4,0,0,10,73,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,4,0,0,4,62,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",6,1,0,1,2,0,2,0,0,10,54,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",4,1,1,4,8,1,4,0,0,15,56,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",10,1,0,2,4,0,0,0,0,13,62,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0,0,0,3,6,0,0,0,0,9,95,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,120,"    INDEX(""index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,0,0,1,2,0,0,0,0,5,59,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,2,0,3,67,10,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,129,    @Deprecated,4,0,0,0,0,0,0,0,0,5,11,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,131,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",10,3,0,2,4,1,0,0,0,15,103,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,132,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",10,1,0,2,4,0,0,0,0,12,98,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,133,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,1,0,3,6,0,0,0,0,3,75,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,134,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,135,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",4,0,0,3,6,0,0,0,0,6,105,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,136,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,137,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""multistep method needs at least {0} previous steps, got {1}""),",2,0,0,3,6,0,0,0,0,3,117,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,138,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,139,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,140,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",4,0,0,1,2,0,0,0,0,6,76,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,141,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,142,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,143,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,144,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,145,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,146,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,147,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,148,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",4,0,0,3,6,0,0,0,0,6,124,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,149,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",4,5,1,26,52,1,4,0,0,30,165,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,150,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,1,1,1,2,0,4,0,0,11,41,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,151,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",4,0,0,4,8,0,0,0,0,5,56,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,152,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,153,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",4,1,0,1,2,0,0,0,0,6,101,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,154,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,155,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,156,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,157,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,158,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,159,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,6,0,0,9,62,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,160,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,161,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",14,5,0,4,8,0,0,0,0,20,132,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,162,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,163,"    MUTATION_RATE(""mutation rate ({0})""),",2,0,0,3,6,0,0,0,0,3,37,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,164,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,165,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,166,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",14,2,0,2,4,0,0,0,0,18,92,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,167,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,168,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,169,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,170,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,171,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,172,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,173,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,174,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,175,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,176,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,177,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",4,0,0,4,8,0,0,0,0,5,131,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,178,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",10,1,0,1,2,0,0,0,0,13,100,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,179,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",4,2,0,2,4,0,0,0,0,6,98,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,180,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,181,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,182,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,183,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,6,0,0,12,85,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,184,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",4,1,0,4,8,0,6,0,0,12,49,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,185,"    NORM(""Norm ({0})""), /* keep */",10,0,0,3,6,0,0,0,0,11,30,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,186,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,187,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0,0,0,1,2,0,0,0,0,3,41,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,188,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,189,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,190,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,191,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,192,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,193,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,194,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,195,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,196,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,197,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0,0,0,7,14,0,0,0,0,21,118,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,198,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,199,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0,0,0,1,2,0,0,0,0,3,73,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,200,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0,0,0,4,8,0,0,0,0,12,71,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,201,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,202,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",6,1,0,3,6,0,9,0,0,17,77,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,203,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",8,0,1,3,6,1,18,2,0,35,66,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,204,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,205,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,85,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,208,"    LENGTH(""length ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,34,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,49,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,210,"    MEAN(""mean ({0})""), /* keep */",6,0,1,3,6,0,4,0,0,16,30,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",6,0,0,3,6,0,6,2,0,16,69,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,221,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,2,0,4,32,12,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,223,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",4,0,0,3,6,0,8,2,0,15,63,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",4,2,1,2,4,0,0,0,0,16,62,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",0,0,0,2,4,0,0,0,0,6,70,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0,0,0,8,16,0,0,0,0,24,134,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,240,"    NO_BIN_SELECTED(""no bin selected""),",6,2,0,1,2,0,0,0,0,9,35,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,242,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,4,0,0,7,82,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0,0,0,1,2,0,0,0,0,3,70,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,248,"    NO_RESULT_AVAILABLE(""no result available""),",6,1,0,1,2,0,0,0,0,10,43,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,254,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,256,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,257,"    FUNCTION(""function""), /* keep */",4,0,0,1,2,0,0,2,0,7,32,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0,0,0,1,2,0,0,0,0,3,48,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,259,"    INPUT_ARRAY(""input array""), /* keep */",0,0,0,1,2,0,0,0,0,3,38,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,260,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,263,"    REAL_FORMAT(""real format""), /* keep */",4,0,0,1,2,0,6,0,0,12,38,0,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,264,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0,0,0,2,4,0,4,0,0,4,87,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,19,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,0,0,0,5,10,0,0,0,0,15,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,0,0,0,1,2,0,0,0,0,3,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,0,0,0,2,5,0,0,0,0,7,31,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,                final double v = startPoint[i];,2,0,0,1,2,3,0,0,0,5,31,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,                final double lo = lower[i];,4,0,1,1,2,2,4,0,0,14,27,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,                if (v < lo) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,            if (lower.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),0,0,0,2,5,0,0,0,0,7,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",10,1,0,1,2,0,0,0,0,12,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,        double negccov = 0;,18,3,0,0,0,0,0,0,0,23,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,        if (ccov1 + ccovmu > 0) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",0,0,0,2,4,0,0,0,0,6,56,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,            RealMatrix roneu = pc.multiply(pc.transpose()),18,5,1,2,4,1,18,6,0,53,46,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,20,7,0,1,2,0,6,0,0,35,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,            oldFac += 1. - ccov1 - ccovmu;,2,0,0,0,0,0,8,0,0,10,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,            if (isActiveCMA) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,                negccov = (1. - ccovmu) * 0.25 * mueff /,6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,                double negminresidualvariance = 0.66;,2,0,1,0,0,0,4,0,0,8,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,                double negalphaold = 0.5; // where to make up for the variance,0,0,0,0,0,0,0,0,0,0,62,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,                int[] arReverseIndex = reverse(arindex);,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,                RealMatrix arzneg,34,10,0,0,0,1,20,0,0,67,17,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,718,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0,0,0,3,6,0,0,0,0,9,51,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,719,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,0,0,0,3,6,0,0,0,0,9,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,721,                int[] idxReverse = reverse(idxnorms);,0,0,0,2,4,0,0,0,0,6,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,723,"                arnorms = divide(arnormsReverse, arnormsSorted);",16,6,0,1,2,4,26,4,0,58,48,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,724,                int[] idxInv = inverse(idxnorms);,8,1,1,2,4,1,4,0,0,18,33,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,725,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",0,0,0,1,2,0,0,0,0,3,55,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,727,                double negcovMax = (1. - negminresidualvariance) /,8,2,0,1,2,1,12,2,0,25,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,729,                if (negccov > negcovMax) {,6,1,0,1,3,1,0,0,0,8,26,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,732,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",2,0,0,2,4,0,10,0,0,13,57,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,733,                RealMatrix artmp = BD.multiply(arzneg);,6,0,0,1,2,0,14,2,0,22,39,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,734,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0,0,0,2,5,0,0,0,0,7,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,736,                oldFac += negalphaold * negccov;,6,1,0,0,0,0,0,0,0,8,32,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,737,                C = C.scalarMultiply(oldFac),12,0,0,1,2,1,6,0,0,20,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,748,            } else {,2,1,0,0,2,0,0,0,0,3,8,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,759,        updateBD(negccov);,0,0,0,1,2,0,4,0,0,4,18,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,760,    },2,0,1,0,1,0,0,0,0,7,1,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,768,        if (ccov1 + ccovmu + negccov > 0 &&,2,0,0,0,1,0,0,0,0,2,35,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,771,"            C = triu(C, 0).add(triu(C, 1).transpose());",2,0,0,4,8,0,12,0,0,15,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,773,            EigenDecomposition eig = new EigenDecomposition(C);,10,1,0,1,2,0,0,4,0,16,51,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,774,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",8,0,0,1,2,0,4,0,0,15,66,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,775,            D = eig.getD();,0,0,0,1,2,0,0,0,0,3,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,776,            diagD = diag(D);,10,2,0,1,2,1,6,0,0,19,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,777,            if (min(diagD) <= 0) {,2,1,0,2,5,1,6,0,0,10,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,787,            if (max(diagD) > 1e14 * min(diagD)) {,0,0,0,3,7,0,0,0,0,10,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,792,            diagC = diag(C);,4,0,0,1,2,0,4,0,0,9,16,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,793,            diagD = sqrt(diagD); // D contains standard deviations now,6,0,0,1,2,0,4,0,0,12,58,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,794,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0,0,0,4,8,0,0,0,0,12,65,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,796,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1085,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,4,0,0,7,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1086,        for (int r = 0; r < m.getRowDimension(); r++) {,6,2,0,2,5,0,8,0,0,19,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1087,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1088,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1091,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1115,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,71,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1116,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,8,0,0,16,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1117,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1118,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",6,2,1,3,6,0,8,0,0,23,44,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1121,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1129,        double[][] d = new double[1][m.getColumnDimension()];,2,0,0,5,10,0,4,0,0,6,53,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1130,        for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1131,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1132,            for (int r = 0; r < m.getRowDimension(); r++) {,18,2,0,2,5,1,4,0,0,27,47,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1133,"                sum += m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,24,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1135,            d[0][c] = sum;,2,0,1,2,4,0,0,0,0,7,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1137,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1314,        int[] inverse = new int[indices.length];,6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1315,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1316,            inverse[indices[i]] = i;,2,0,1,2,4,0,4,0,0,13,24,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1318,        return inverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1326,        int[] reverse = new int[indices.length];,0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1327,        for (int i = 0; i < indices.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1328,            reverse[i] = indices[indices.length - i - 1];,0,0,0,2,4,0,0,0,0,6,45,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1330,        return reverse;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,521,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,522,        final int nRows = getRowDimension();,4,0,0,1,2,0,0,0,0,4,36,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,523,        if (vector.getDimension() != nRows) {,2,1,0,2,5,0,4,0,0,7,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,527,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,528,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,534,"        MatrixUtils.checkRowIndex(this, row);",2,0,1,1,2,0,6,0,0,13,37,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,535,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,536,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,537,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,538,"            out[i] = getEntry(row, i);",0,0,0,2,4,0,0,0,0,6,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,541,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,616,        return getColumnDimension() == getRowDimension();,0,0,0,2,4,1,0,0,0,7,49,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,62,    public TriDiagonalTransformer(RealMatrix matrix) {,8,0,0,1,3,1,0,2,0,12,50,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,71,        secondary = new double[m - 1];,0,0,0,1,2,0,0,0,0,3,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,72,        cachedQ   = null;,4,0,0,0,0,0,10,0,0,16,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,73,        cachedQt  = null;,2,0,1,0,0,0,4,0,0,8,17,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,74,        cachedT   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,78,    },6,0,0,0,1,3,0,0,0,10,1,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,89,        return cachedQ;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,103,            for (int k = m - 1; k >= 1; --k) {,8,2,0,1,3,0,0,0,0,11,34,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,6,1,1,1,2,1,6,0,0,20,45,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,131,        return cachedQt;,0,0,0,0,0,1,0,0,0,1,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,175,        return main;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,185,        return secondary;,4,0,0,0,0,4,4,2,0,13,17,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,193,        final int m = householderVectors.length;,2,0,1,0,0,0,0,0,0,5,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,85,    public ArrayRealVector(double[] d) {,12,2,0,2,5,1,0,0,0,16,36,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,86,        data = d.clone();,2,0,0,1,2,3,0,0,0,5,17,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,600,            return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,610,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,130,        if (data == null ||,0,0,0,0,1,0,0,0,0,1,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,217,        for (int i = 0; i < diagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,218,"            m.setEntry(i, i, diagonal[i]);",8,2,1,2,4,0,6,0,0,21,30,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,220,        return m;,4,0,0,0,0,4,0,0,0,7,9,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,2,1,0,1,0,0,0,0,17,75,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,80,        copyIn(d);,2,0,0,1,2,0,4,0,0,7,10,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,252,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,270,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,271,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,274,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,277,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,278,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,279,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,283,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,284,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,287,            data = new double[subMatrix.length][nCols];,2,0,1,2,4,0,0,0,0,7,43,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,288,            for (int i = 0; i < data.length; ++i) {,2,1,1,1,3,0,0,0,0,10,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,289,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,292,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,294,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,524,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,525,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,6,0,0,11,68,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,527,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,528,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,530,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,543,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,544,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,115,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,81,    private byte maxIter = 30;,2,0,1,0,0,1,0,2,0,9,26,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,116,"        if (isSymmetric(matrix, false)) {",0,0,0,2,5,0,0,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,117,            transformToTridiagonal(matrix);,0,0,0,1,2,0,4,0,0,4,31,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,118,            findEigenVectors(transformer.getQ().getData());,0,0,1,3,6,0,11,0,0,24,47,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,192,        final int rows = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,193,        final int columns = matrix.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,48,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,194,        final double eps = 10 * rows * columns * Precision.EPSILON;,10,1,0,0,0,1,0,0,0,12,59,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,195,        for (int i = 0; i < rows; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,196,            for (int j = i + 1; j < columns; ++j) {,10,2,0,1,3,0,0,0,0,13,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,208,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,223,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,224,            final int m = eigenvectors.length;,0,0,0,0,0,0,0,0,0,0,34,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,226,            for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,227,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,1,2,4,0,6,0,0,10,44,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,231,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,247,        if (cachedD == null) {,2,1,1,1,3,0,0,0,0,7,22,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,249,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,2,0,0,1,2,0,6,0,0,9,64,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,251,            for (int i = 0; i < imagEigenvalues.length; i++) {,12,1,0,1,3,3,0,0,0,17,50,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0,1,1,3,7,0,6,0,0,11,64,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",2,2,1,3,8,0,6,0,0,15,71,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,259,        return cachedD;,2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,555,        transformer = new TriDiagonalTransformer(matrix);,6,0,0,1,2,3,0,2,0,12,49,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,556,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,557,        secondary = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,50,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,558,    },6,0,0,0,1,0,4,0,0,11,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,567,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,568,        final int n = main.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,569,        realEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,570,        imagEigenvalues = new double[n];,2,0,1,1,2,0,0,0,0,5,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,571,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,572,        for (int i = 0; i < n - 1; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,576,        realEigenvalues[n - 1] = main[n - 1];,4,2,1,2,4,0,0,0,0,11,37,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,577,        e[n - 1] = 0;,6,1,1,1,2,0,0,0,0,10,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,580,        double maxAbsoluteValue = 0;,8,4,0,0,0,0,0,0,0,12,28,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,581,        for (int i = 0; i < n; i++) {,4,0,0,1,3,0,0,0,0,4,29,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,582,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,0,0,3,7,0,0,0,0,4,58,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,583,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,0,0,0,2,4,0,0,0,0,6,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,585,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,4,0,1,3,7,1,0,0,0,7,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,590,        if (maxAbsoluteValue != 0) {,6,2,0,1,3,1,0,0,0,9,28,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,591,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,592,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,79,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,595,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,8,2,1,3,7,0,16,0,0,31,65,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,596,                    e[i]=0;,0,0,1,1,2,0,0,0,0,5,7,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,601,        for (int j = 0; j < n; j++) {,10,1,0,1,3,0,6,2,0,20,29,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,602,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,605,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,612,                if (m != j) {,10,2,0,1,3,0,0,0,0,13,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,668,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,672,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,673,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,674,            double p = realEigenvalues[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,675,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,681,            if (k != i) {,4,1,0,1,3,0,0,0,0,5,13,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,693,        maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,694,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,695,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,58,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,696,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,8,3,1,2,4,0,4,0,0,23,50,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,700,        if (maxAbsoluteValue != 0.0) {,0,0,0,1,3,0,4,0,0,4,30,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,701,            for (int i=0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,702,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,707,        eigenvectors = new ArrayRealVector[n];,2,0,1,1,2,0,0,2,0,7,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,708,        final double[] tmp = new double[n];,2,0,1,2,4,1,0,0,0,5,35,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,709,        for (int i = 0; i < n; i++) {,12,2,1,1,3,0,4,0,0,22,29,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,710,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,711,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,713,            eigenvectors[i] = new ArrayRealVector(tmp);,2,0,1,2,4,0,0,2,0,9,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,715,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,106,"                            final String separator, final NumberFormat format) {",6,0,0,0,2,3,4,4,0,17,52,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,108,        this.suffix      = suffix;,10,0,0,0,0,0,4,0,0,16,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,2974,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,96,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,97,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,330,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,331,        long yInt = Double.doubleToLongBits(y);,0,0,0,1,2,0,0,0,0,3,39,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,334,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,337,        if (yInt < 0) {,6,1,0,1,3,0,0,0,0,8,15,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,341,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,10,2,0,1,2,1,4,0,0,17,61,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,20,343,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,16,0,0,21,55,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,20,264,        if (o == null) {,10,1,1,1,3,0,8,2,0,28,16,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,20,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,352,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,6,0,0,2,4,0,4,0,0,11,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,353,        final FitnessFunction fitfun = new FitnessFunction();,0,0,0,1,2,0,0,0,0,3,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,354,        final double[] guess = fitfun.encode(getStartPoint());,2,0,0,3,6,0,16,0,0,19,54,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,356,        dimension = guess.length;,6,0,0,0,0,0,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,357,        initializeCMA(guess);,0,0,0,1,2,0,4,0,0,4,21,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,358,        iterations = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,359,        double bestValue = fitfun.value(guess);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,360,"        push(fitnessHistory, bestValue);",2,0,0,1,2,0,6,0,0,10,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,361,"        PointValuePair optimum = new PointValuePair(getStartPoint(),",0,0,0,1,3,0,0,0,0,4,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,363,        PointValuePair lastResult = null;,2,0,0,0,0,0,0,2,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,368,            for (iterations = 1; iterations <= maxIterations; iterations++) {,8,1,0,1,3,0,0,0,0,11,65,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,370,"                RealMatrix arz = randn1(dimension, lambda);",2,0,0,1,2,0,6,2,0,10,43,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,371,"                RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,372,                double[] fitness = new double[lambda];,2,0,1,2,4,0,0,0,0,4,38,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,374,                for (int k = 0; k < lambda; k++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,375,                    RealMatrix arxk = null;,2,0,0,0,0,0,0,2,0,4,23,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,376,                    for (int i = 0; i < checkFeasableCount+1; i++) {,8,2,0,1,3,0,0,0,0,11,48,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,377,                        if (diagonalOnly <= 0) {,2,1,0,1,3,0,0,0,0,3,24,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,384,                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {,6,2,0,3,7,0,8,0,0,16,70,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,390,"                    copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,392,                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,1,3,6,0,10,0,0,15,63,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,395,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,398,                int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,39,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,400,                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,0,0,2,0,6,59,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,401,"                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",2,0,0,2,4,0,12,2,0,16,72,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,402,                xmean = bestArx.multiply(weights);,2,0,0,1,2,0,12,0,0,15,34,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,403,"                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",4,0,0,2,4,0,12,2,0,19,72,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,404,                RealMatrix zmean = bestArz.multiply(weights);,2,0,0,1,2,0,0,0,0,2,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,405,"                boolean hsig = updateEvolutionPaths(zmean, xold);",18,0,0,1,2,0,12,0,0,31,49,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,406,                if (diagonalOnly <= 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,412,"                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",10,4,0,3,6,0,8,0,0,23,61,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,413,                double bestFitness = fitness[arindex[0]];,2,0,1,2,4,0,0,0,0,6,41,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,414,                double worstFitness = fitness[arindex[arindex.length-1]];,4,0,1,2,4,0,0,0,0,7,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,415,                if (bestValue > bestFitness) {,6,1,0,1,3,0,2,0,0,10,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,416,                    bestValue = bestFitness;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,417,                    lastResult = optimum;,16,5,0,0,0,0,4,0,0,26,21,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,418,                    optimum = new PointValuePair(,8,1,1,0,1,0,4,2,0,25,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,421,                    if (getConvergenceChecker() != null && lastResult != null) {,0,0,0,2,5,0,0,0,0,7,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,422,"                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {",2,0,0,3,7,0,10,0,0,12,73,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,429,                if (stopFitness != 0) { // only if stopFitness is defined,2,1,0,1,3,0,0,0,0,3,57,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,434,                double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,435,                double[] pcCol = pc.getColumn(0);,0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,436,                for (int i = 0; i < dimension; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,437,"                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {",0,0,0,6,13,0,0,0,0,19,68,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,438,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,444,                for (int i = 0; i < dimension; i++) {,10,1,1,1,3,0,0,4,0,18,37,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,445,                    if (sigma*sqrtDiagC[i] > stopTolUpX) {,4,2,1,2,5,0,0,0,0,10,38,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,449,                double historyBest = min(fitnessHistory);,2,0,0,1,2,0,4,0,0,6,41,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,450,                double historyWorst = max(fitnessHistory);,8,0,0,1,2,0,10,0,0,19,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,451,"                if (iterations > 2 && Math.max(historyWorst, worstFitness) -",4,2,1,1,3,0,0,0,0,10,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,455,                if (iterations > fitnessHistory.length &&,6,2,0,0,1,0,0,0,0,8,41,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,460,                if (max(diagD)/min(diagD) > 1e7) {,0,2,0,3,7,0,8,0,0,10,34,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,464,                if (getConvergenceChecker() != null) {,0,1,0,2,5,0,2,0,0,4,38,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,465,                    PointValuePair current =,12,1,0,0,0,0,0,2,0,16,24,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,468,                    if (lastResult != null &&,0,0,0,0,1,0,0,0,0,1,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,472,                    lastResult = current;,4,0,0,0,0,0,0,0,0,5,21,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,475,                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,478,"                if (iterations > 2 && Math.max(historyWorst, bestFitness) -",2,3,0,1,3,0,8,0,0,13,59,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,483,"                push(fitnessHistory,bestFitness);",0,0,0,1,2,0,6,0,0,6,33,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,484,                fitfun.setValueRange(worstFitness-bestFitness);,4,1,0,1,2,0,4,0,0,9,47,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,485,                if (generateStatistics) {,6,1,1,1,3,0,0,0,0,12,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,492,        return optimum;,2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,553,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,561,        if (lambda <= 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,565,        double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,0,0,0,0,6,52,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,566,        for (int i = 0; i < guess.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,567,            final double range =  (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];,4,2,1,5,10,1,0,0,0,15,87,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,568,            sigmaArray[i][0]   = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;,4,2,1,5,10,0,0,0,0,15,74,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,570,"        RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",8,0,0,1,2,0,0,8,0,18,65,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,571,        sigma = max(insigma); // overall standard deviation,6,1,0,1,2,0,0,0,0,8,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,574,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,575,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,576,        stopTolFun = 1e-12;,2,0,0,0,0,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,577,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,580,        mu = lambda / 2; // number of parents/points for recombination,4,1,0,0,0,0,0,0,0,6,62,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,581,        logMu2 = Math.log(mu + 0.5);,0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,582,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,72,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,583,        double sumw = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,584,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,585,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,586,"            double w = weights.getEntry(i, 0);",2,1,0,1,2,0,10,0,0,13,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,587,            sumw += w;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,588,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,590,        weights = weights.scalarMultiply(1. / sumw);,0,0,0,1,2,0,0,0,0,3,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,591,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,594,        cc = (4. + mueff / dimension) /,12,4,0,1,2,0,0,0,0,18,31,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,596,        cs = (mueff + 2.) / (dimension + mueff + 3.);,12,3,0,2,4,0,8,0,0,24,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,597,"        damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /",10,8,0,1,5,1,8,0,0,28,55,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,602,        ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);,8,5,0,3,6,0,0,0,0,14,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,603,"        ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /",48,19,0,1,3,0,4,0,0,73,61,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,605,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);",6,3,0,2,4,0,10,0,0,20,55,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,606,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);",0,0,0,2,4,0,0,0,0,6,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,607,        chiN = Math.sqrt(dimension) *,6,1,0,1,2,1,8,0,0,17,29,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,610,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective,8,1,0,1,2,1,6,0,0,17,63,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,612,        diagD = insigma.scalarMultiply(1. / sigma);,0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,613,        diagC = square(diagD);,2,0,0,1,2,0,4,0,0,7,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,614,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",18,9,0,1,2,0,4,0,0,34,60,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,615,"        ps = zeros(dimension, 1); // B defines the coordinate system",0,0,0,1,2,0,0,0,0,3,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,616,        normps = ps.getFrobeniusNorm();,8,4,1,1,2,1,0,0,0,21,31,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,618,"        B = eye(dimension, dimension);",2,0,0,1,2,0,6,0,0,9,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,619,"        D = ones(dimension, 1); // diagonal D defines the scaling",4,0,0,1,2,0,4,0,0,10,57,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,620,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",0,0,0,3,6,0,4,0,0,4,55,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,621,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,2,1,0,5,10,0,0,0,0,3,70,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,622,        historySize = 10 + (int) (3. * 10. * dimension / lambda);,6,3,0,2,4,0,0,0,0,10,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,623,        fitnessHistory = new double[historySize]; // history of fitness values,2,0,1,1,2,0,0,0,0,5,70,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,624,        for (int i = 0; i < historySize; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,625,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,627,    },2,0,0,0,1,0,0,0,0,3,1,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,638,        ps = ps.scalarMultiply(1. - cs).add(,6,1,0,1,3,0,6,0,0,13,36,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,641,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,642,        boolean hsig = normps /,0,0,0,0,0,0,0,0,0,0,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,645,        pc = pc.scalarMultiply(1. - cc);,4,1,0,1,2,0,4,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,646,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,647,            pc = pc.add(xmean.subtract(xold).scalarMultiply(,4,1,1,1,4,0,0,0,0,9,48,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,650,        return hsig;,10,1,0,0,0,1,0,0,0,13,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,805,        for (int i = vals.length-1; i > 0; i--) {,2,0,1,1,3,0,0,0,0,7,41,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,806,            vals[i] = vals[i-1];,26,6,1,2,4,0,0,0,0,34,20,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,808,        vals[0] = val;,0,0,0,1,2,0,0,0,0,3,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,809,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,818,        DoubleIndex[] dis = new DoubleIndex[doubles.length];,6,0,0,2,4,0,4,4,0,14,52,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,819,        for (int i = 0; i < doubles.length; i++) {,0,0,0,1,3,0,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,820,"            dis[i] = new DoubleIndex(doubles[i], i);",0,0,0,3,6,0,0,0,0,9,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,822,        Arrays.sort(dis);,0,0,0,1,2,0,0,0,0,3,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,823,        int[] indices = new int[doubles.length];,6,0,0,2,4,0,0,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,824,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,825,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,827,        return indices;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1025,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,4,0,0,6,12,3,8,0,0,15,71,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1026,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,1,2,5,0,4,0,0,17,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1027,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1028,"                d[r][c] = Math.log(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,37,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1031,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1040,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1041,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1042,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1043,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",6,1,1,4,8,0,12,0,0,26,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1046,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1054,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,1,6,12,0,0,0,0,6,71,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1055,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1056,            for (int c = 0; c < m.getColumnDimension(); c++) {,40,11,0,2,5,1,4,0,0,58,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1057,"                double e = m.getEntry(r, c);",18,5,0,1,2,0,8,0,0,32,28,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1058,                d[r][c] = e * e;,4,1,1,2,4,0,0,0,0,12,16,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1061,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1070,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,71,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1071,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1072,            for (int c = 0; c < m.getColumnDimension(); c++) {,16,2,0,2,5,0,4,0,0,24,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1073,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",6,1,0,4,8,1,0,0,0,8,46,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1076,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1100,        double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,0,4,0,0,10,60,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1101,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1102,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1103,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,1,4,8,0,6,0,0,17,33,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1106,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,2,6,0,13,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1146,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1147,            double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,6,0,1,6,12,1,10,2,0,23,68,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1148,            for (int i = 0; i < m.getRowDimension(); i++) {,10,1,0,2,5,1,4,0,0,17,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1149,"                d[i][i] = m.getEntry(i, 0);",0,0,1,3,6,0,6,0,0,13,27,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1151,"            return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1170,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1171,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",4,1,0,2,4,0,4,0,0,9,43,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1173,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1181,        double[][] d = new double[n][m];,2,0,1,4,8,0,0,2,0,9,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1182,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,2,0,12,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1183,"            Arrays.fill(d[r], 1.0);",12,2,0,2,4,1,6,2,0,24,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1185,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1194,        double[][] d = new double[n][m];,2,0,1,4,8,0,12,0,0,18,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1195,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,8,0,0,18,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1196,            if (r < m) {,4,1,0,1,3,0,0,0,0,5,12,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1197,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1200,"        return new Array2DRowRealMatrix(d, false);",8,1,0,1,2,1,0,0,0,10,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1209,"        return new Array2DRowRealMatrix(n, m);",8,1,0,1,2,1,0,2,0,11,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1219,        int rd = mat.getRowDimension();,2,0,0,1,2,0,4,0,0,6,31,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1220,        int cd = mat.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,34,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1221,        double[][] d = new double[n * rd][m * cd];,12,2,0,4,8,0,0,0,0,15,42,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1222,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1223,            for (int c = 0; c < m * cd; c++) {,12,2,1,1,3,1,4,4,0,33,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1224,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1227,"        return new Array2DRowRealMatrix(d, false);",4,2,0,1,2,1,10,2,0,20,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1237,        int size = (int) ((end - start) / step + 1);,8,3,0,3,6,0,0,0,0,11,44,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1238,        double[][] d = new double[size][1];,2,0,1,4,8,0,0,0,0,4,35,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1239,        double value = start;,8,0,0,0,0,0,0,0,0,9,21,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1240,        for (int r = 0; r < size; r++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1241,            d[r][0] = value;,0,0,0,2,4,0,0,2,0,2,16,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1242,            value += step;,10,1,0,0,0,0,0,0,0,13,14,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1244,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1252,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1253,        for (int r = 0; r < m.getRowDimension(); r++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1254,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,8,0,0,16,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1255,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1256,                if (max < e) {,0,0,0,1,3,0,0,0,0,4,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1257,                    max = e;,32,8,0,0,0,0,0,0,0,42,8,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1261,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1269,        double min = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1270,        for (int r = 0; r < m.getRowDimension(); r++) {,10,1,0,2,5,1,10,0,0,25,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1271,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1272,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1273,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1274,                    min = e;,4,0,0,0,0,0,0,0,0,5,8,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1278,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1286,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1287,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1288,            if (max < m[r]) {,0,0,0,2,5,0,0,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1289,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1292,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1300,        double min = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1301,        for (int r = 0; r < m.length; r++) {,20,3,0,1,3,1,0,0,0,26,36,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1302,            if (min > m[r]) {,0,0,0,2,5,0,0,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1303,                min = m[r];,16,5,1,1,2,0,0,0,0,27,11,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1306,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1351,        double[][] d = new double[size][popSize];,4,0,1,4,8,0,0,0,0,8,41,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1352,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1353,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1354,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1357,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,85,public class CMAESOptimizer,2,0,0,0,0,1,0,0,0,3,27,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,72,        return evaluations.getMaximalCount();,2,0,0,1,2,1,2,0,0,5,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,82,        return checker;,0,0,0,0,0,1,0,0,0,1,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,95,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,98,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,99,        return function.value(point);,2,0,0,1,2,1,6,0,0,9,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,155,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,73,        final double[] p = getKey();,2,0,0,2,4,1,2,0,0,5,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,74,        return p == null ? null : p.clone();,4,1,0,1,2,1,10,0,0,16,36,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,20,65,        return key;,4,0,0,0,0,1,0,0,0,4,11,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,20,74,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,844,"        DoubleIndex(double value, int index) {",6,0,0,1,3,0,0,0,0,6,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,845,            this.value = value;,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,846,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,847,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,851,"            return Double.compare(value, o.value);",6,0,0,1,2,1,6,0,0,13,38,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,834,    private static class DoubleIndex implements Comparable<DoubleIndex> {,2,0,0,0,1,2,0,4,0,8,69,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,895,        public FitnessFunction() {,2,0,0,1,3,1,0,0,0,3,26,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,896,            valueRange = 1.0;,2,0,0,0,0,0,0,0,0,3,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,897,            isRepairMode = true;,2,0,0,0,0,0,0,0,0,4,20,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,898,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,905,            if (boundaries == null) {,2,1,0,1,3,0,0,0,0,3,25,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,            return,16,4,1,0,0,0,4,0,0,35,6,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,930,            if (boundaries == null) {,2,1,0,1,3,0,0,0,0,3,25,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,947,            if (boundaries != null && isRepairMode) {,0,0,0,1,3,0,0,0,0,4,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,956,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,982,            this.valueRange = valueRange;,6,0,0,0,0,0,0,0,0,7,29,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,983,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,85,        return relativeThreshold;,0,0,0,0,0,1,0,0,0,1,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,92,        return absoluteThreshold;,2,0,1,0,0,1,0,0,0,8,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,77,        final double p = previous.getValue();,2,0,0,1,2,1,4,0,0,7,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,78,        final double c = current.getValue();,2,0,0,1,2,1,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,79,        final double difference = FastMath.abs(p - c);,6,1,0,1,2,1,4,0,0,12,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,80,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));",2,0,0,3,6,1,16,0,0,19,67,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,81,        return difference <= size * getRelativeThreshold() ||,4,3,0,1,2,1,2,0,0,9,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,34,public class SimpleValueChecker,2,0,0,0,0,1,0,0,0,3,31,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,2,1,0,1,4,1,2,2,0,7,63,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,289,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,290,            },2,0,1,0,1,0,12,0,0,19,1,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,294,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,295,            },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,12,0,0,12,26,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,67,        throws NotStrictlyPositiveException {,2,0,0,0,1,0,0,0,0,2,37,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,68,        if (rowDimension < 1) {,16,3,0,1,3,0,0,0,0,19,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,74,    },8,2,1,0,1,0,0,0,0,13,1,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,8,0,0,1,2,3,4,2,0,18,95,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,45,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,81,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,82,        final int columnCount = getColumnDimension();,22,7,0,1,2,0,0,0,0,31,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,84,        for (int row = 0; row < rowCount; ++row) {,22,3,0,1,3,0,0,0,0,27,42,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,85,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,90,        return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,98,        final int rowCount    = getRowDimension();,10,3,0,1,2,1,2,0,0,16,42,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,99,        final int columnCount = getColumnDimension();,6,2,0,1,2,2,8,0,0,18,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,101,        for (int row = 0; row < rowCount; ++row) {,0,0,0,1,3,0,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,102,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,112,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,113,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,115,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,116,            for (int col = 0; col < columnCount; ++col) {,28,10,0,1,3,0,0,0,0,40,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,117,"                out.setEntry(row, col, getEntry(row, col) + d);",2,1,0,2,4,0,14,0,0,17,47,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,121,        return out;,2,0,1,0,0,1,0,0,0,4,11,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,126,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,127,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,129,        for (int row = 0; row < rowCount; ++row) {,0,0,0,1,3,0,0,0,0,4,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,130,            for (int col = 0; col < columnCount; ++col) {,10,1,0,1,3,0,0,0,0,13,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,131,"                out.setEntry(row, col, getEntry(row, col) * d);",8,2,0,2,4,0,14,0,0,24,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,135,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,6,0,0,9,51,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,144,        final int nCols = m.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,146,"        final RealMatrix out = createMatrix(nRows, nCols);",2,0,0,1,2,1,6,2,0,11,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,148,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,149,                double sum = 0;,4,0,1,0,0,1,0,0,0,9,15,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0,0,0,2,4,0,0,0,0,6,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,153,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,157,        return out;,8,1,1,0,0,1,0,0,0,13,11,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,466,"        MatrixUtils.checkColumnIndex(this, column);",6,0,0,1,2,0,6,0,0,12,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,467,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,469,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,470,"            out.setEntry(i, 0, getEntry(i, column));",4,0,0,2,4,0,12,2,0,18,40,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,473,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,559,"        MatrixUtils.checkColumnIndex(this, column);",2,0,0,1,2,0,6,0,0,8,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,561,        final double[] out = new double[nRows];,12,6,1,2,4,1,6,0,0,38,39,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,562,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,563,"            out[i] = getEntry(i, column);",0,0,0,2,4,0,0,0,0,6,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,566,        return out;,4,0,0,0,0,2,4,0,0,9,11,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,598,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,599,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,600,"        final RealMatrix out = createMatrix(nCols, nRows);",4,0,0,1,2,0,6,0,0,10,50,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,611,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,873,        return walkInRowOrder(visitor);,0,0,0,1,2,1,0,0,0,4,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,20,53,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,20,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,20,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,20,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0,0,0,0,1,0,8,0,0,8,76,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,101,    },2,0,0,0,1,0,0,0,0,2,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,133,                            final NumberFormat format) {,2,0,0,0,2,1,0,2,0,5,28,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,134,        this.prefix            = prefix;,8,0,0,0,0,0,0,0,0,9,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,135,        this.suffix            = suffix;,0,0,0,0,0,0,0,0,0,0,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,137,        this.rowSuffix         = rowSuffix;,0,0,0,0,0,0,0,0,0,0,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,140,        this.format            = format;,4,0,0,0,0,0,0,0,0,5,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,143,    },6,2,0,0,1,0,0,0,0,9,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,207,        return format;,6,1,0,0,0,1,0,0,0,7,14,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,4,0,0,2,4,1,6,2,0,14,76,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,4,0,0,1,2,3,4,2,0,14,85,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,0,0,2,4,3,0,4,0,15,104,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,81,        return (rows * columns <= 4096) ?,4,2,0,1,2,1,0,0,0,6,33,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,339,        if (columnData == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,342,        final int nRows = columnData.length;,6,0,0,0,0,1,0,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,343,"        final RealMatrix m = createRealMatrix(nRows, 1);",2,0,0,1,2,1,4,4,0,11,48,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,344,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,345,"            m.setEntry(i, 0, columnData[i]);",0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,347,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,389,"        checkRowIndex(m, row);",0,0,0,1,2,0,6,0,0,6,22,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,390,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,391,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,402,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,407,    },6,1,0,0,1,0,0,0,0,7,1,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,418,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,422,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,506,        if ((left.getRowDimension()    != right.getRowDimension()) ||,4,2,0,3,7,0,8,0,0,15,61,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,511,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,528,    },4,0,0,0,1,0,0,0,0,5,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,541,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,545,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,62,        data = new double[rowDimension][columnDimension];,0,0,0,2,4,0,0,0,0,6,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,101,        NullArgumentException {,2,0,0,0,1,0,0,0,0,2,23,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,102,        if (copyArray) {,4,1,0,1,3,0,0,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,105,            if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,108,            final int nRows = d.length;,6,0,0,0,0,1,0,0,0,7,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,109,            if (nRows == 0) {,8,5,0,1,3,0,0,0,0,13,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,112,            final int nCols = d[0].length;,10,0,1,1,2,1,0,2,0,19,30,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,113,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,116,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,117,                if (d[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,27,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,121,            data = d;,4,0,0,0,0,0,0,0,0,5,9,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,123,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,144,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,303,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,304,        return data[row][column];,2,1,1,2,4,1,0,0,0,9,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,310,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,1,1,2,0,14,0,0,16,48,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,311,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,312,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,335,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,341,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,406,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,407,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,408,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",8,2,1,1,2,1,8,0,0,21,58,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,409,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,8,0,0,18,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,410,            final double[] rowI = data[i];,4,1,1,2,4,1,0,0,0,10,30,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,411,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,412,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,415,        return visitor.end();,0,0,0,1,2,1,10,0,0,10,21,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,606,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,607,            },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,375,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1096,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1106,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1109,        long bits = Double.doubleToLongBits(x);,8,1,0,1,2,0,6,0,0,16,39,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1123,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1132,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,16,7,0,1,3,0,0,0,0,23,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1204,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,8,2,0,5,10,1,0,0,0,11,79,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1215,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,95,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1217,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1218,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1220,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1273,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1274,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1275,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1276,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1277,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1278,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1279,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1296,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1297,        double b = 0.0;,6,0,0,0,0,0,0,0,0,7,15,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1298,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1299,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,20,1300,        a = c;,6,1,0,0,0,0,0,0,0,8,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,0,0,0,1,3,0,0,0,0,4,20,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0,0,0,1,2,0,0,0,0,3,47,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,0,0,0,0,0,0,0,0,0,0,14,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,4.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,0,0,0,3,6,0,0,0,0,9,38,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,0,0,0,4,8,0,0,0,0,12,46,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,0,0,0,1,2,0,0,0,0,3,13,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,0,0,0,0,0,0,0,0,0,0,10,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,0,0,0,1,2,0,0,0,0,3,12,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,0,0,0,1,2,0,0,0,0,3,19,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,4,1,1,3,7,0,0,0,0,13,24,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,0,0,0,3,6,0,0,0,0,9,45,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,1,0,2,4,0,0,0,0,3,15,13,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,8,2,0,0,0,4,0,4,0,18,33,1,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,18,2,0,1,3,2,12,0,0,35,37,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2,0,1,1,2,1,0,0,0,7,24,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,1,4,0,0,16,12,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,0,1,2,0,4,0,0,6,24,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,0,0,0,4,8,0,0,0,0,12,41,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,0,0,0,2,4,0,0,0,0,6,14,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2,0,0,0,0,0,0,0,0,3,19,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,6,0,0,9,46,0,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,0,4,8,0,0,0,0,12,36,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },6,0,0,0,1,0,0,0,0,7,1,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,6,1,0,0,0,1,0,0,0,8,12,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,12,2,0,1,2,2,0,0,0,15,20,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,6,5,0,1,3,0,6,0,0,18,13,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,20,2,0,1,3,0,0,0,0,24,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,0,0,0,5,11,0,0,0,0,16,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,1,0,0,0,0,4,0,0,8,4,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,                loop = false;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,0,0,0,3,51,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,6,0,0,1,2,1,2,0,0,10,36,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,8,4,0,1,2,1,6,2,0,21,39,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,150,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,589,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,860,        return walkInRowOrder(visitor);,0,0,0,1,2,1,0,0,0,4,31,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,392,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,4,0,0,1,2,1,2,0,0,8,41,3,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,396,            final double[] rowI = data[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,397,            for (int j = 0; j < columns; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,398,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,401,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,0,0,1,4,0,0,0,0,3,63,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,598,            },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,2,1,0,3,7,0,8,0,0,11,59,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,545,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,62,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,63,        if (rowDimension < 1) {,4,1,0,1,3,3,0,0,0,8,23,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,66,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,56,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,58,    },2,0,0,0,1,0,0,0,0,2,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,138,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0,0,0,1,2,1,0,0,0,4,63,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,246,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,303,        data[row][column] = value;,0,0,0,2,4,0,0,0,0,6,26,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,81,        return (rows * columns <= 4096) ?,0,0,0,1,2,1,0,0,0,4,33,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,139,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,158,    private static final double SINE_TABLE_B[] =,2,1,1,1,2,0,0,0,0,8,44,6,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,177,    private static final double COSINE_TABLE_A[] =,2,0,1,1,2,0,0,0,0,5,46,0,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,196,    private static final double COSINE_TABLE_B[] =,4,0,0,1,2,3,0,0,0,8,46,0,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,275,    private static final long PI_O_4_BITS[] = new long[] {,6,0,0,2,5,3,0,0,0,10,54,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,21,2992,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,4,0,0,4,61,5,0.57143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,506,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,507,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,2,0,0,7,68,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,509,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,510,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,512,        return out;,8,1,0,0,0,2,0,0,0,10,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,117,    },6,0,0,0,1,0,8,0,0,15,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,389,"        checkRowIndex(m, row);",0,0,0,1,2,0,6,0,0,6,22,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,390,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,391,    },0,0,0,0,1,0,6,0,0,6,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,402,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,407,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,418,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,422,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,43,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,51,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,53,    protected AbstractRealMatrix() {},2,0,1,2,4,1,0,0,0,8,33,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,44,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,4,0,17,95,1,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,47,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,6,1,0,2,4,0,6,0,0,14,55,1,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,21,53,public abstract class RealLinearOperator {,2,0,1,0,1,0,0,0,0,5,42,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,75,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,76,    },2,0,0,0,1,1,0,0,0,3,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,263,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,266,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,7,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,270,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,271,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,275,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,276,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,280,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,281,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,3,64,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,286,        } else {,2,0,0,0,2,0,8,0,0,11,8,10,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,290,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,526,"        setSubMatrix(in, 0, 0);",2,0,1,1,2,0,0,0,0,5,23,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,133,                            final NumberFormat format) {,2,1,0,0,2,1,12,2,0,18,28,2,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,137,        this.rowSuffix         = rowSuffix;,4,0,0,0,0,0,0,0,0,5,35,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,140,        this.format            = format;,4,0,0,0,0,0,0,0,0,5,32,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,143,    },6,1,0,0,1,1,0,0,0,8,1,8,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,21,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,21,264,        if (o == null) {,12,2,0,1,3,0,0,0,0,15,16,3,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,21,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,21,56,        return nf;,6,2,0,0,0,1,0,0,0,8,10,3,0.18182,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1046,        public Entry() {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1047,            setIndex(0);,6,1,0,1,2,0,2,0,0,10,12,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1048,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1056,            return getEntry(getIndex());,4,1,1,2,4,4,8,0,0,23,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1065,"            setEntry(getIndex(), value);",0,0,0,2,4,0,6,0,0,6,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1066,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1074,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1083,            this.index = index;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1084,        },2,0,0,0,1,0,4,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,99,"        setEntry(index, getEntry(index) + increment);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,100,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,165,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,166,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,177,        int d = getDimension();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,178,        if (d != n) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,179,"            throw new DimensionMismatchException(d, n);",6,2,1,1,2,0,0,2,0,19,43,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,190,        if (index < 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,0,2,0,6,53,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,195,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,207,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,208,        if ((start < 0) || (start >= dim)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,209,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",0,0,0,0,1,0,0,0,0,1,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,212,        if ((end < 0) || (end >= dim)) {,6,3,0,3,7,0,0,0,0,9,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,213,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",2,1,1,0,1,0,0,0,0,7,61,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,216,        if (end < start) {,6,1,0,1,3,0,0,0,0,9,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,218,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",2,1,1,0,1,0,0,0,0,8,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,221,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,233,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,234,        RealVector result = v.copy();,2,0,0,1,2,0,4,2,0,8,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,235,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,236,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,237,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,238,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,239,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,240,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,241,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,254,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,255,        RealVector result = v.mapMultiply(-1d);,2,0,0,1,2,0,4,2,0,9,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,256,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,257,        while (it.hasNext()) {,2,1,0,2,5,0,4,0,0,7,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,258,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,259,            final int index = e.getIndex();,2,0,0,1,2,1,12,0,0,15,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,260,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,261,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,262,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,273,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,6,0,0,6,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,284,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,285,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,0,0,0,10,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,287,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,306,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,307,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,308,        final int n = getDimension();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,309,        for (int i = 0; i < n; i++) {,6,1,0,1,3,0,0,0,0,8,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,310,            d += getEntry(i) * v.getEntry(i);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,312,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,328,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,329,        final double vNorm = v.getNorm();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,331,        if (norm == 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,333,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,335,        return dotProduct(v) / (norm * vNorm);,0,0,0,2,4,1,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,395,        checkVectorDimensions(v);,2,0,0,1,2,0,4,0,0,7,25,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,396,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,397,        Iterator<Entry> it = iterator();,8,1,1,1,2,0,2,4,0,19,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,398,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,399,            final Entry e = it.next();,28,4,0,1,2,7,4,4,0,48,26,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,400,            final double diff = e.getValue() - v.getEntry(e.getIndex());,2,1,0,3,6,1,12,0,0,16,60,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,401,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,403,        return FastMath.sqrt(d);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,417,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,418,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,419,        while (it.hasNext()) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,420,            final Entry e = it.next();,4,0,1,1,2,1,4,2,0,15,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,421,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,422,            sum += value * value;,4,1,1,0,0,0,0,0,0,10,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,423,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,424,        return FastMath.sqrt(sum);,0,0,0,1,2,1,12,0,0,12,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,438,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,439,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,440,        while (it.hasNext()) {,4,2,0,2,5,0,4,0,0,10,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,441,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,442,            norm += FastMath.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,443,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,444,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,458,        double norm = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,459,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,460,        while (it.hasNext()) {,10,1,0,2,5,0,4,0,0,16,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,461,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,462,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,463,        },6,1,0,0,1,0,0,0,0,7,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,464,        return norm;,8,1,0,0,0,1,0,0,0,9,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,480,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,481,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,482,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,483,        while (it.hasNext()) {,2,0,0,2,5,0,0,0,0,3,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,484,            final Entry e = it.next();,2,0,0,1,2,1,4,2,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,485,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,4,1,0,4,8,0,16,0,0,23,59,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,486,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,487,        return d;,4,1,0,0,0,1,0,2,0,7,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,506,        checkVectorDimensions(v);,12,3,0,1,2,2,0,2,0,20,25,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,507,        double d = 0;,8,1,0,0,0,0,0,0,0,10,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,508,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,509,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,510,            final Entry e = it.next();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,511,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,512,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,513,        return d;,10,1,0,0,0,1,0,0,0,11,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,523,        int minIndex    = -1;,4,0,0,0,0,0,0,0,0,5,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,524,        double minValue = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,525,        Iterator<Entry> iterator = iterator();,28,9,0,1,2,0,0,0,0,38,38,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,526,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,527,            final Entry entry = iterator.next();,2,0,0,1,2,1,4,2,0,9,36,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,528,            if (entry.getValue() <= minValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,529,                minIndex = entry.getIndex();,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,530,                minValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,532,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,533,        return minIndex;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,543,        final int minIndex = getMinIndex();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,544,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,554,        int maxIndex    = -1;,2,0,0,0,0,0,0,0,0,4,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,555,        double maxValue = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,556,        Iterator<Entry> iterator = iterator();,8,1,0,1,2,0,2,4,0,16,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,557,        while (iterator.hasNext()) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,558,            final Entry entry = iterator.next();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,559,            if (entry.getValue() >= maxValue) {,22,9,0,2,5,1,4,0,0,36,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,560,                maxIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,561,                maxValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,563,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,564,        return maxIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,574,        final int maxIndex = getMaxIndex();,26,4,0,1,2,1,16,0,0,49,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,575,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,587,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,598,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,8,2,0,10,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,609,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,0,0,0,7,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,620,        return mapAddToSelf(-d);,2,0,0,1,2,1,2,0,0,5,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,631,        return copy().mapDivideToSelf(d);,0,0,0,2,4,1,6,0,0,6,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,642,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,3,6,1,8,2,0,10,64,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,652,        final int m = this.getDimension();,6,1,0,1,2,1,0,0,0,8,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,653,        final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,655,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,2,1,0,1,3,0,0,4,0,7,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,656,"            product = new OpenMapRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,38,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,658,"            product = new Array2DRowRealMatrix(m, n);",6,0,0,1,2,0,0,2,0,9,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,660,        for (int i = 0; i < m; i++) {,8,1,0,1,3,0,2,2,0,14,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,661,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,662,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0,1,0,3,6,0,22,0,0,23,57,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,665,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,680,        final double norm2 = v.dotProduct(v);,2,0,0,1,2,1,6,0,0,9,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,681,        if (norm2 == 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,682,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,684,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,0,0,3,6,1,0,0,0,10,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,693,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,694,        while (it.hasNext()) {,0,0,0,2,5,0,4,0,0,4,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,695,            final Entry e = it.next();,6,0,0,1,2,1,4,2,0,13,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,696,            e.setValue(value);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,697,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,698,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,708,        int dim = getDimension();,2,0,0,1,2,0,2,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,709,        double[] values = new double[dim];,2,0,1,2,4,0,0,0,0,4,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,710,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,711,            values[i] = getEntry(i);,0,0,1,2,4,0,4,0,0,9,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,713,        return values;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,724,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,725,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,726,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,8,1,0,1,2,0,6,0,0,16,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,728,        return mapDivide(norm);,0,0,0,1,2,1,4,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,738,        final double norm = getNorm();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,739,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,740,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,742,        mapDivideToSelf(getNorm());,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,743,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,761,        return new SparseEntryIterator();,0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,775,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,776,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,821,        return copy().mapToSelf(function);,6,1,0,2,4,1,6,0,0,13,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,838,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,2,1,0,4,8,0,8,4,0,15,78,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,839,        while (it.hasNext()) {,2,0,1,2,5,0,4,0,0,11,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,840,            final Entry e = it.next();,14,3,0,1,2,1,4,2,0,26,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,841,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,12,0,0,12,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,842,        },6,0,0,0,1,0,4,0,0,11,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,843,        return this;,10,2,0,0,0,1,0,0,0,13,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,861,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,878,        checkVectorDimensions(y);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,879,        for (int i = 0; i < getDimension(); i++) {,6,1,0,2,5,0,2,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,880,            final double xi = getEntry(i);,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,881,            final double yi = y.getEntry(i);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,882,"            setEntry(i, a * xi + b * yi);",12,4,1,1,2,0,4,0,0,24,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,884,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,898,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,899,"        visitor.start(dim, 0, dim - 1);",0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,900,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,901,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,10,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,903,        return visitor.end();,8,2,0,1,2,1,4,0,0,14,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,921,"        checkIndices(start, end);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,922,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,923,        for (int i = start; i <= end; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,924,"            visitor.visit(i, getEntry(i));",0,0,0,2,4,0,8,0,0,8,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,926,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,941,        return walkInDefaultOrder(visitor);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,961,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,8,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,974,        final int dim = getDimension();,24,1,0,1,2,0,4,0,0,32,31,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,975,"        visitor.start(dim, 0, dim - 1);",0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,976,        for (int i = 0; i < dim; i++) {,18,4,0,1,3,0,0,0,0,23,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,977,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,3,6,0,14,0,0,14,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,979,        return visitor.end();,4,0,0,1,2,1,10,0,0,15,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,997,"        checkIndices(start, end);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,998,"        visitor.start(getDimension(), start, end);",0,0,0,2,4,0,10,0,0,10,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,999,        for (int i = start; i <= end; i++) {,12,2,0,1,3,0,0,0,0,15,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1000,"            setEntry(i, visitor.visit(i, getEntry(i)));",0,0,0,3,6,0,0,0,0,9,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1002,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1017,        return walkInDefaultOrder(visitor);,4,0,0,1,2,1,12,0,0,16,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1037,"        return walkInDefaultOrder(visitor, start, end);",0,0,0,1,2,1,8,0,0,8,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1112,        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1125,        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1230,        return new RealVector() {,0,0,1,1,3,1,4,2,0,11,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1150,        protected SparseEntryIterator() {,2,0,0,1,3,1,0,0,0,3,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1151,            dim = getDimension();,2,0,0,1,2,0,2,0,0,5,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1152,            current = new Entry();,2,0,0,1,2,0,0,2,0,5,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1153,            next = new Entry();,2,0,0,1,2,0,0,2,0,5,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1154,            if (next.getValue() == 0) {,0,1,0,2,5,0,4,0,0,5,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1155,                advance(next);,0,0,0,1,2,0,4,0,0,4,14,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1157,        },8,1,0,0,1,0,0,0,0,11,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1165,            if (e == null) {,2,1,0,1,3,0,0,0,0,3,16,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1166,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1169,                e.setIndex(e.getIndex() + 1);,0,1,0,2,4,0,8,0,0,9,29,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1170,            } while (e.getIndex() < dim && e.getValue() == 0);,2,0,0,3,7,0,0,0,0,2,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1171,            if (e.getIndex() >= dim) {,0,0,1,2,5,0,4,0,0,6,26,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1172,                e.setIndex(-1);,0,0,0,1,2,0,4,0,0,5,15,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1174,        },6,1,0,0,1,0,4,0,0,12,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1178,            return next.getIndex() >= 0;,0,1,0,1,2,1,4,0,0,5,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1183,            int index = next.getIndex();,2,0,0,1,2,0,4,0,0,6,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1184,            if (index < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1185,                throw new NoSuchElementException();,0,0,0,1,2,0,0,2,0,2,35,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1187,            current.setIndex(index);,0,0,0,1,2,0,6,0,0,6,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1188,            advance(next);,0,0,0,1,2,0,4,0,0,4,14,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1189,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1198,            throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,21,1141,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,94,"        super(rows, columns);",8,0,1,1,2,1,0,0,0,27,21,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,95,        this.rows = rows;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,96,        this.columns = columns;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,99,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,100,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,103,"        blocks = createBlocksLayout(rows, columns);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,104,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,120,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,121,    },8,3,0,0,1,0,0,0,0,11,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,139,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,140,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,141,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,144,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,4,0,1,2,0,0,0,0,15,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,145,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,147,        if (copyArray) {,8,1,0,1,3,0,0,0,0,10,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,149,            blocks = new double[blockRows * blockColumns][];,10,1,0,2,4,0,4,0,0,16,48,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,152,            blocks = blockData;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,155,        int index = 0;,2,0,0,0,0,0,4,0,0,7,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,156,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,157,            final int iHeight = blockHeight(iBlock);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,158,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",18,3,0,1,3,0,0,0,0,24,64,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,159,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,6,3,1,3,7,0,4,0,0,17,62,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,160,"                    throw new DimensionMismatchException(blockData[index].length,",2,0,1,1,3,0,0,2,0,8,61,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,163,                if (copyArray) {,10,0,0,1,3,0,0,0,0,11,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,164,                    blocks[index] = blockData[index].clone();,0,0,0,3,6,0,0,0,0,9,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,168,    },10,1,0,0,1,0,0,0,0,13,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,192,        final int rows = rawData.length;,6,0,0,0,0,1,0,0,0,7,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,193,        final int columns = rawData[0].length;,6,1,1,1,2,1,0,0,0,10,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,194,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,195,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,6,0,0,18,65,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,198,        for (int i = 0; i < rawData.length; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,199,            final int length = rawData[i].length;,6,0,1,1,2,1,0,0,0,11,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,200,            if (length != columns) {,4,1,0,1,3,0,6,0,0,11,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,201,"                throw new DimensionMismatchException(columns, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,206,        final double[][] blocks = new double[blockRows * blockColumns][];,0,0,0,4,8,0,0,0,0,12,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,207,        int blockIndex = 0;,4,1,0,0,0,0,0,0,0,5,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,208,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0,0,0,1,3,0,0,0,0,4,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,209,            final int pStart = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,210,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,57,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,211,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,212,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,213,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,214,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,215,                final int jWidth = qEnd - qStart;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,218,                final double[] block = new double[iHeight * jWidth];,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,219,                blocks[blockIndex] = block;,2,0,1,1,2,0,8,0,0,15,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,222,                int index = 0;,2,0,0,0,0,0,0,0,0,2,14,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,223,                for (int p = pStart; p < pEnd; ++p) {,10,1,0,1,3,0,0,0,0,12,37,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,224,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,2,4,0,12,0,0,16,59,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,225,                    index += jWidth;,4,0,0,0,0,0,0,0,0,5,16,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,227,                ++blockIndex;,4,0,0,0,0,0,0,0,0,5,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,231,        return blocks;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,247,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,248,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,250,        final double[][] blocks = new double[blockRows * blockColumns][];,0,0,0,4,8,0,0,0,0,12,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,251,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,252,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,2,0,13,52,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,253,            final int pStart = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,254,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,255,            final int iHeight = pEnd - pStart;,16,3,0,0,0,1,0,0,0,21,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,256,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,8,1,0,1,3,0,0,0,0,10,55,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,257,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,258,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,259,                final int jWidth = qEnd - qStart;,6,0,0,0,0,0,0,0,0,7,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,260,                blocks[blockIndex] = new double[iHeight * jWidth];,4,1,1,2,4,0,0,0,0,10,50,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,261,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,265,        return blocks;,2,0,0,0,0,1,6,0,0,8,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,271,"        return new BlockRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,58,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,278,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",6,0,0,1,2,0,8,4,0,18,60,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,281,        for (int i = 0; i < blocks.length; ++i) {,10,1,0,1,3,0,4,0,0,17,41,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,282,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0,0,0,4,8,0,0,0,0,12,70,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,285,        return copied;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,292,            return add((BlockRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,293,        } catch (ClassCastException cce) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,295,"            MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,297,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",20,1,0,1,2,1,12,6,0,42,63,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,300,            int blockIndex = 0;,6,0,0,0,0,0,0,0,0,8,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,301,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0,0,0,1,3,0,0,0,0,4,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,302,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,8,0,0,20,59,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,305,                    final double[] outBlock = out.blocks[blockIndex];,0,0,0,2,4,0,0,0,0,6,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,306,                    final double[] tBlock   = blocks[blockIndex];,2,0,1,2,4,1,0,0,0,7,45,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,307,                    final int pStart = iBlock * BLOCK_SIZE;,12,2,0,0,0,2,0,0,0,16,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,308,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,309,                    final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,21,310,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,0,0,0,0,0,0,0,0,0,0,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,57,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,    },6,1,0,0,1,0,0,0,0,7,1,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/Well19937c,22,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08696,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,99,        final int w = 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,100,        final int r = (k + w - 1) / w;,0,0,0,1,2,0,0,0,0,3,30,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,101,        this.v      = new int[r];,0,0,0,1,2,0,0,0,0,3,25,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,102,        this.index  = 0;,4,1,0,0,0,0,8,0,0,14,16,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,106,        iRm1 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,108,        i1   = new int[r];,2,1,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,109,        i2   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,110,        i3   = new int[r];,10,4,1,1,2,0,0,0,0,17,18,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,112,            iRm1[j] = (j + r - 1) % r;,8,6,1,2,4,0,0,0,0,27,26,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,114,            i1[j]   = (j + m1)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,116,            i3[j]   = (j + m3)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,120,        setSeed(seed);,4,1,0,1,2,0,0,0,0,5,14,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,122,    },4,1,0,0,1,0,12,0,0,17,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,154,        if (seed == null) {,0,0,0,1,3,0,4,0,0,4,19,6,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",8,0,0,2,4,0,12,0,0,20,65,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,161,        if (seed.length < v.length) {,4,1,0,1,3,0,0,0,0,5,29,9,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,162,            for (int i = seed.length; i < v.length; ++i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,163,                final long l = v[i - seed.length];,10,1,1,1,2,1,4,0,0,18,34,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,6,5,1,6,12,0,0,0,0,16,65,8,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,168,        index = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,39,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,170,    },10,2,0,0,1,0,0,2,0,14,1,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,35,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,36,        nextGaussian = Double.NaN;,6,0,0,0,0,0,6,0,0,14,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,37,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,165,        nextGaussian = Double.NaN;,0,0,0,0,0,0,0,0,0,0,26,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,22,166,    },2,0,0,0,1,0,0,0,0,3,1,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,128,    public RandomDataGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,115,    private RandomGenerator rand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,118,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,22,129,    },0,0,0,0,1,0,4,0,0,4,1,7,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,108,    public RandomDataImpl() {,22,7,1,1,3,2,2,0,0,39,25,2,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,109,        delegate = new RandomDataGenerator();,0,0,0,1,2,0,0,0,0,3,37,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,22,110,    },4,1,0,0,1,0,0,0,0,5,1,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,50,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,55,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,70,    protected AbstractRealDistribution(RandomGenerator rng) {,0,0,0,1,3,0,0,0,0,4,57,4,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,71,        random = rng;,10,1,0,0,0,0,0,0,0,13,13,3,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,22,72,    },0,0,0,0,1,0,6,0,0,6,1,5,0.08511,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,253,            final int n = (int) FastMath.floor(x - 1.5);,0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,254,            double prod = 1.0;,2,0,0,0,0,0,4,0,0,7,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,255,            for (int i = 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,256,                prod *= x - i;,0,0,0,0,0,0,0,0,0,0,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,258,            return logGamma1p(x - (n + 1)) + FastMath.log(prod);,0,0,0,3,6,1,0,0,0,10,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,602,                ret = (t / x) * ((c - 0.5) - 0.5);,0,0,0,3,6,0,0,0,0,9,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1364,            final double y = (x * F_1_3 - F_1_2) * x + 1;,4,0,0,1,2,0,0,0,0,5,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1365,            return y * x;,4,1,1,0,0,1,4,0,0,13,13,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,64,"        this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,54,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,65,    },16,2,0,0,1,0,0,0,0,20,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,77,"        this(new  Well19937c(), lower, upper, inverseCumAccuracy);",6,0,0,2,4,0,0,2,0,8,58,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,252,        } else if (x <= 8.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,95,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,96,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,102,        this.lower = lower;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,103,        this.upper = upper;,4,0,0,0,0,0,0,0,0,5,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,104,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1348,            final double xpa = 1 + x;,0,0,0,0,0,0,0,0,0,0,25,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1349,            final double xpb = -(xpa - 1 - x);,0,0,0,1,2,0,0,0,0,3,34,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1351,            final double[] hiPrec = new double[2];,2,0,0,2,4,1,0,0,0,3,38,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1352,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,0,0,0,0,3,38,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1353,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,74,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1359,            final double fx1 = xpb / xpa;,8,1,0,0,0,0,0,0,0,11,29,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1360,            final double epsilon = 0.5 * fx1 + 1;,4,2,0,0,0,1,0,0,0,7,37,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1361,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0,0,0,2,4,1,0,0,0,7,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,65,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",6,0,0,0,1,0,0,0,0,6,60,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,86,"        this(new Well19937c(), numeratorDegreesOfFreedom,",2,0,0,1,3,0,0,2,0,4,49,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,108,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,49,    private double numericalVariance = Double.NaN;,28,3,0,0,0,2,10,0,0,44,46,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,51,    private boolean numericalVarianceIsCalculated = false;,2,0,0,0,0,1,0,0,0,4,54,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,110,        if (numeratorDegreesOfFreedom <= 0) {,2,1,0,1,3,0,0,0,0,3,37,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,114,        if (denominatorDegreesOfFreedom <= 0) {,2,1,0,1,3,0,0,0,0,3,39,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,118,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,59,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,119,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,5,63,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,120,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,195,        if (Double.isNaN(a) ||,0,2,0,1,3,0,6,0,0,8,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0,0,0,2,4,0,0,0,0,6,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,22,205,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,604,                ret = x * c;,6,1,0,0,0,0,0,0,0,8,12,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3306,        if (x != x) { // NaN,6,1,0,1,3,0,0,2,0,9,20,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3310,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3314,        y = (long) x;,6,0,0,1,2,0,0,0,0,8,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3315,        if (x < 0 && y != x) {,24,9,0,1,3,0,6,0,0,39,22,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3319,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3323,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,572,            double p = INV_GAMMA1P_M1_P6;,4,0,0,0,0,0,0,0,0,4,29,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,573,            p = INV_GAMMA1P_M1_P5 + t * p;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,574,            p = INV_GAMMA1P_M1_P4 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,575,            p = INV_GAMMA1P_M1_P3 + t * p;,8,3,0,0,0,0,14,0,0,26,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,576,            p = INV_GAMMA1P_M1_P2 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,577,            p = INV_GAMMA1P_M1_P1 + t * p;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,578,            p = INV_GAMMA1P_M1_P0 + t * p;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,580,            double q = INV_GAMMA1P_M1_Q4;,0,0,0,0,0,0,0,0,0,0,29,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,581,            q = INV_GAMMA1P_M1_Q3 + t * q;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,582,            q = INV_GAMMA1P_M1_Q2 + t * q;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,583,            q = INV_GAMMA1P_M1_Q1 + t * q;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,584,            q = 1.0 + t * q;,4,1,0,0,0,0,0,0,0,5,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,586,            double c = INV_GAMMA1P_M1_C13 + (p / q) * t;,10,3,0,1,2,0,0,0,0,13,44,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,587,            c = INV_GAMMA1P_M1_C12 + t * c;,8,2,0,0,0,0,0,0,0,11,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,588,            c = INV_GAMMA1P_M1_C11 + t * c;,8,2,0,0,0,0,0,0,0,12,31,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,589,            c = INV_GAMMA1P_M1_C10 + t * c;,8,2,0,0,0,0,0,0,0,11,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,590,            c = INV_GAMMA1P_M1_C9 + t * c;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,591,            c = INV_GAMMA1P_M1_C8 + t * c;,12,2,0,0,0,0,0,0,0,15,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,592,            c = INV_GAMMA1P_M1_C7 + t * c;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,593,            c = INV_GAMMA1P_M1_C6 + t * c;,12,3,0,0,0,0,4,0,0,21,30,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,594,            c = INV_GAMMA1P_M1_C5 + t * c;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,595,            c = INV_GAMMA1P_M1_C4 + t * c;,10,3,0,0,0,0,0,0,0,14,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,596,            c = INV_GAMMA1P_M1_C3 + t * c;,0,0,0,0,0,0,0,0,0,0,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,597,            c = INV_GAMMA1P_M1_C2 + t * c;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,598,            c = INV_GAMMA1P_M1_C1 + t * c;,8,2,0,0,0,0,0,0,0,11,30,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,599,            c = INV_GAMMA1P_M1_C0 + t * c;,8,2,0,0,0,0,8,0,0,19,30,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,601,            if (x > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,251,            return logGamma1p((x - 0.5) - 0.5);,2,2,0,2,4,1,2,0,0,6,35,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1338,        if (x == -1) {,12,4,0,1,3,0,0,0,0,18,14,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1342,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1346,        if (x > 1e-6 ||,0,0,0,0,1,0,0,0,0,1,15,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,531,        if (x < -0.5) {,2,1,0,1,3,0,0,0,0,4,15,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,534,        if (x > 1.5) {,10,2,0,1,3,0,0,0,0,13,14,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,539,        final double t = x <= 0.5 ? x : (x - 0.5) - 0.5;,8,3,0,1,2,1,0,0,0,12,48,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,540,        if (t < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,608,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,624,        if (x < -0.5) {,2,1,1,1,3,0,4,0,0,10,15,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,627,        if (x > 1.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,631,        return -FastMath.log1p(invGamma1pm1(x));,0,0,0,2,4,1,8,0,0,9,40,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1222,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1223,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1224,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1225,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1226,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1229,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1230,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1231,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1232,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1235,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0,0,0,2,4,0,0,0,0,6,71,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1236,            double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1237,            double yb = lnCoef_last[1];,2,0,1,1,2,0,0,0,0,4,27,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1239,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1241,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1242,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1244,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1245,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1246,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1249,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1250,                aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1251,                ab = yb + lnCoef_i[1];,8,2,1,1,2,0,0,0,0,13,22,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1253,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1254,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1255,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1259,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1260,            ab = ya * xb + yb * xa + yb * xb;,16,5,1,0,0,0,0,0,0,27,33,1,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1268,            lnza = aa + ab;,8,1,0,0,0,3,0,0,0,13,15,1,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1269,            lnzb = -(lnza - aa - ab);,12,1,0,1,2,3,0,0,0,18,25,1,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1270,        } else {,2,1,1,0,2,0,0,0,0,8,8,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1324,            hiPrec[0] = a;,0,0,0,1,2,0,0,0,0,3,14,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1325,            hiPrec[1] = b;,4,0,1,1,2,0,0,0,0,7,14,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,4,0,0,5,25,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,922,            result = tempC*z + tempB + tempA;,8,1,0,0,0,3,0,0,0,12,33,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,71,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,90,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,6,2,0,1,2,3,4,0,0,15,82,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,246,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,248,        } else if (x < 0.5) {,2,1,0,1,4,0,0,0,0,3,21,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,22,250,        } else if (x <= 2.5) {,2,1,0,1,4,0,0,0,0,3,22,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3719,    private static class ExpFracTable {,0,0,0,0,1,0,0,0,0,1,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3745,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0,0,0,1,2,0,0,0,0,3,56,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3746,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3748,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3680,    private static class ExpIntTable {,8,0,0,0,1,2,14,0,0,26,34,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3712,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,6,2,0,1,2,1,6,0,0,15,54,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3713,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0,0,0,1,2,0,0,0,0,3,54,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,3715,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,22,6142,        return EXP_INT_A.clone();,0,0,1,1,2,1,4,0,0,7,25,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,22,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,22,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,22,6166,        return EXP_FRAC_B.clone();,10,3,0,1,2,1,4,0,0,18,26,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,826,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,6,2,0,3,6,1,0,0,0,9,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,6,0,1,1,2,1,0,0,0,9,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,6,0,1,1,2,1,0,0,0,9,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,8,3,0,1,2,1,0,0,0,12,55,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,899,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,900,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,901,        z = z * epsilon + 0.5000000000042687;,8,2,0,0,0,0,0,0,0,11,37,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,902,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,903,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,910,        double tempA = intPartA * fracPartA;,8,1,0,0,0,0,0,0,0,11,36,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,16,5,0,0,0,0,0,0,0,22,82,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,925,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1096,"        return log(x, null);",8,1,0,1,2,1,4,0,0,15,20,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1273,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1274,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,22,1275,            lnza = lnza * epsilon + -0.2499999997677497;,2,0,0,0,0,0,0,0,0,3,44,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,0,0,0,0,1,0,0,0,0,1,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,0,0,0,0,1,0,0,0,0,1,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,1,1,0,0,0,0,0,0,12,36,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,4,0,0,0,0,0,0,0,0,5,34,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1661,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1663,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,0,0,0,0,0,0,6,0,0,6,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,4,0,0,0,0,0,0,0,0,5,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,2,1,0,0,0,1,10,0,0,15,34,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,6,0,0,0,0,1,0,0,0,7,9,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,1,2,0,0,0,0,12,54,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1696,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1697,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,8,0,0,12,41,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1702,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1703,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1705,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1710,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,4,3,0,0,0,0,8,0,0,15,16,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1737,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,6,1,0,0,0,1,0,0,0,8,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1740,        double t = sintA;,0,0,0,0,0,0,10,0,0,10,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,0,0,0,1,2,0,6,0,0,7,24,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1743,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,0,0,1,0,0,0,0,0,0,5,20,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,2,0,0,1,2,0,0,0,0,3,17,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,0,0,0,1,68,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1794,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1798,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1799,            a = c;,6,0,0,0,0,1,6,2,0,16,6,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1800,            b = b + d;,4,1,0,0,0,0,0,0,0,5,10,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,6,2,1,0,0,0,0,0,0,13,15,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,14,2,0,0,0,2,0,0,0,19,39,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1817,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1820,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,1823,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2201,        boolean negative = false;,6,0,0,0,0,0,0,0,0,8,25,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2204,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2207,        xa = x;,12,2,0,0,0,1,0,0,0,16,7,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2238,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2239,            xa = cw.getRemA();,6,0,0,1,2,0,4,0,0,12,18,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,10,2,0,1,2,0,10,0,0,24,18,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2247,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2253,"                return -sinQ(xa, xb);",4,0,0,1,2,1,0,0,0,5,21,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",4,0,0,1,2,2,6,2,0,14,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3785,                  double xb) {,12,3,0,0,2,0,0,0,0,15,12,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3788,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3794,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3796,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3799,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3800,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3801,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3803,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3804,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3805,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3806,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3808,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3809,                    break;,4,1,0,0,0,0,0,0,0,6,6,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3818,            this.finalK = k;,12,1,0,0,0,4,0,0,0,18,16,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3819,            this.finalRemA = remA;,12,2,0,0,0,0,0,0,0,16,22,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,190,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,66,        return evaluations.getCount();,6,0,0,1,2,4,4,0,0,13,30,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,208,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,269,                        v = u;,0,0,0,0,0,0,0,0,0,0,6,4,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,270,                        fv = fu;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,23,114,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,266,                    } else if (fu <= fv ||,0,0,0,0,2,0,0,0,0,2,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,274,                return,0,0,0,0,0,0,0,0,0,0,6,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,110,"        this(rel, abs, null);",4,0,0,1,2,0,0,0,0,4,21,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,258,                        b = u;,4,0,0,0,0,0,0,0,0,5,6,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,185,                        d = p / q;,6,1,0,0,0,0,0,0,0,8,10,12,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,186,                        u = x + d;,10,1,0,0,0,0,0,0,0,14,10,12,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,189,                        if (u - a < tol2 || b - u < tol2) {,18,6,1,1,3,0,4,0,0,33,35,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,201,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,305,            return a.getValue() <= b.getValue() ? a : b;,0,0,0,2,4,1,0,0,0,7,44,4,0.07692,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,173,                        p = -p;,0,0,0,0,0,0,0,0,0,0,7,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,2974,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,244,"        return equals(x, y, 1);",0,0,0,1,2,1,6,0,0,6,23,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,308,        long xInt = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,309,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,312,        if (xInt < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,315,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,319,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,23,321,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,45,                                    final double value) {,12,2,0,0,2,1,6,0,0,23,21,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,46,        this.point = point;,4,0,0,0,0,0,0,0,0,5,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,47,        this.value = value;,0,0,1,0,0,0,8,0,0,10,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,23,65,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,141,        if (!isMinim) {,2,0,0,1,3,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,144,        double fv = fx;,8,0,0,0,0,0,0,0,0,9,15,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,145,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,147,        UnivariatePointValuePair previous = null;,10,2,0,0,0,0,12,2,0,27,41,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,148,        UnivariatePointValuePair current,2,0,0,0,0,0,0,2,0,4,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,152,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,154,            final double m = 0.5 * (a + b);,6,2,0,1,2,1,0,0,0,9,31,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,155,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,6,2,0,1,2,1,6,0,0,15,76,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,156,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,159,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,160,            if (!stop) {,2,0,0,1,3,0,0,0,0,3,12,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,161,                double p = 0;,14,1,0,0,0,0,0,0,0,17,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,162,                double q = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,163,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,164,                double u = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,166,                if (FastMath.abs(e) > tol1) { // Fit parabola.,2,1,0,2,5,0,6,0,0,9,46,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,167,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,168,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,0,0,0,14,24,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,169,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,0,0,0,20,30,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,170,                    q = 2 * (q - r);,6,2,0,1,2,0,0,0,0,9,16,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,172,                    if (q > 0) {,10,3,0,1,3,0,10,0,0,23,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,175,                        q = -q;,8,0,0,0,0,0,0,0,0,11,7,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,178,                    r = e;,4,0,0,0,0,0,0,0,0,5,6,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,179,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,181,                    if (p > q * (a - x) &&,8,5,0,1,3,0,0,0,0,13,22,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,198,                        if (x < m) {,8,1,0,1,3,0,0,4,0,13,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,203,                        d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,12,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,207,                    if (x < m) {,4,1,0,1,3,0,0,0,0,5,12,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,212,                    d = GOLDEN_SECTION * e;,0,0,0,0,0,0,0,0,0,0,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,216,                if (FastMath.abs(d) < tol1) {,4,1,1,2,5,1,12,2,0,25,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,223,                    u = x + d;,8,1,1,0,0,3,0,0,0,18,10,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,226,                double fu = computeObjectiveValue(u);,2,0,0,1,2,0,4,0,0,6,37,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,227,                if (!isMinim) {,2,0,0,1,3,0,0,0,0,3,15,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,232,                previous = current;,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,233,"                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);",10,0,0,1,2,0,0,2,0,14,62,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,235,                if (checker != null) {,2,1,0,1,3,0,0,0,0,3,22,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,242,                if (fu <= fx) {,2,0,0,1,3,0,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,255,                    if (u < x) {,0,0,0,1,3,0,0,0,0,4,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,256,                        a = u;,10,1,0,0,0,0,0,0,0,13,6,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,260,                    if (fu <= fw ||,4,2,0,0,1,0,0,0,0,6,15,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,262,                        v = w;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,263,                        fv = fw;,6,0,0,0,0,0,0,0,0,8,8,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,264,                        w = u;,4,0,0,0,0,0,0,0,0,5,6,12,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,265,                        fw = fu;,4,0,0,0,0,0,0,0,0,5,8,12,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,273,            } else { // Default termination (Brent's criterion).,0,0,0,1,4,0,0,0,0,5,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,279,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,280,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,297,        if (a == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,300,        if (b == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,304,        if (isMinim) {,0,0,0,1,3,0,0,0,0,4,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,158,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,177,    private static final double COSINE_TABLE_A[] =,2,2,1,1,2,3,2,0,0,14,46,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,216,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,254,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,275,    private static final long PI_O_4_BITS[] = new long[] {,4,0,0,2,5,3,0,0,0,8,54,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,23,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,0,0,0,0,0,0,0,0,0,0,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,0,0,0,0,0,0,0,0,7,68,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,6,3,0,1,3,0,0,0,0,9,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,16,2,1,0,0,2,16,4,0,46,10,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,2,0,0,1,2,3,0,0,0,5,17,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,10,0,0,0,0,0,0,0,0,12,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,8,3,0,0,0,0,14,0,0,25,15,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,4,1,1,0,0,0,0,0,0,8,42,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",4,1,0,1,2,1,0,2,0,7,18,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,6,1,1,0,0,0,4,0,0,17,25,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,6,0,0,0,0,1,0,0,0,8,16,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,0,0,1,2,1,0,0,0,5,25,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,2,0,0,1,3,3,0,0,0,5,19,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2255,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,4,0,0,10,34,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,2,1,0,0,0,0,0,0,0,3,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,0,0,0,9,13,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,10,1,1,0,0,0,4,2,0,25,31,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,2,0,0,0,0,0,0,0,0,3,13,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,10,4,0,1,3,1,0,0,0,15,15,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,0,0,1,0,0,0,4,0,0,9,6,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,6,1,0,1,2,1,0,0,0,8,30,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,259,                    } else if (fu <= fv ||,0,0,0,0,2,0,0,0,0,2,22,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,142,"        return optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));",0,0,0,2,4,1,0,0,0,7,73,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,24,114,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,210,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,104,"        this(rel, abs, null);",4,0,0,1,2,0,0,0,0,4,21,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,251,                        b = u;,0,0,0,0,0,0,0,0,0,0,6,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,178,                        d = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,179,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,182,                        if (u - a < tol2 || b - u < tol2) {,12,5,0,1,3,0,0,0,0,17,35,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,237,                        b = x;,0,0,0,0,0,0,0,0,0,0,6,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,166,                        p = -p;,6,0,0,0,0,0,0,0,0,9,7,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,45,                                    final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,46,        this.point = point;,0,0,0,0,0,0,0,0,0,0,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,47,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,48,    },2,1,0,0,1,1,10,0,0,14,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/UnivariatePointValuePair,24,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,135,        if (!isMinim) {,4,0,0,1,3,0,0,0,0,4,15,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,138,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,139,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,141,        UnivariatePointValuePair previous = null;,4,0,0,0,0,1,6,4,0,15,41,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,142,        UnivariatePointValuePair current,2,0,0,0,0,0,0,2,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,145,        int iter = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,147,            final double m = 0.5 * (a + b);,6,2,0,1,2,1,0,0,0,9,31,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,148,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,0,0,0,1,2,0,0,0,0,3,76,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,149,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,152,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,153,            if (!stop) {,0,0,0,1,3,0,0,0,0,4,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,154,                double p = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,155,                double q = 0;,6,0,0,0,0,0,0,2,0,8,13,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,156,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,157,                double u = 0;,2,0,0,0,0,0,0,0,0,2,13,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,159,                if (FastMath.abs(e) > tol1) { // Fit parabola.,0,0,0,2,5,0,0,0,0,7,46,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,160,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,161,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,12,0,0,26,24,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,162,                    p = (x - v) * q - (x - w) * r;,0,0,0,2,4,0,0,0,0,6,30,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,163,                    q = 2 * (q - r);,0,0,0,1,2,0,0,0,0,3,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,165,                    if (q > 0) {,2,1,0,1,3,0,0,0,0,3,12,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,168,                        q = -q;,0,0,0,0,0,0,0,0,0,0,7,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,171,                    r = e;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,172,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,174,                    if (p > q * (a - x) &&,8,5,0,1,3,0,0,0,0,13,22,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,191,                        if (x < m) {,4,1,0,1,3,0,0,0,0,5,12,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,192,                            e = b - x;,6,1,0,0,0,0,0,0,0,8,10,14,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,196,                        d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,200,                    if (x < m) {,6,1,1,1,3,0,0,0,0,14,12,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,203,                        e = a - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,205,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,209,                if (FastMath.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,29,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,216,                    u = x + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,219,                double fu = computeObjectiveValue(u);,2,0,0,1,2,0,4,0,0,6,37,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,220,                if (!isMinim) {,10,4,1,1,3,0,0,0,0,20,15,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,225,                previous = current;,12,1,0,0,0,0,0,0,0,15,19,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,226,"                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);",10,0,0,1,2,0,0,2,0,14,62,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,228,                if (checker != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,235,                if (fu <= fx) {,0,0,0,1,3,0,0,0,0,4,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,236,                    if (u < x) {,0,0,0,1,3,0,0,0,0,4,12,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,239,                        a = x;,14,2,0,0,0,0,0,0,0,18,6,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,241,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,242,                    fv = fw;,4,0,0,0,0,0,0,0,0,5,8,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,243,                    w = x;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,244,                    fw = fx;,12,1,0,0,0,0,0,0,0,16,8,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,245,                    x = u;,4,0,0,0,0,0,0,0,0,5,6,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,246,                    fx = fu;,4,0,0,0,0,0,0,0,0,5,8,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,248,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,249,                        a = u;,4,0,0,0,0,0,0,0,0,5,6,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,253,                    if (fu <= fw ||,4,2,0,0,1,0,0,0,0,6,15,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,255,                        v = w;,2,0,1,0,0,0,0,0,0,7,6,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,256,                        fv = fw;,4,0,0,0,0,0,0,0,0,5,8,12,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,257,                        w = u;,4,0,0,0,0,2,0,4,0,10,6,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,258,                        fw = fu;,8,0,0,0,0,0,0,0,0,10,8,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,266,            } else { // Default termination (Brent's criterion).,0,0,0,1,4,0,0,0,0,5,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,269,            ++iter;,4,0,0,0,0,1,8,0,0,14,7,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,270,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,24,2974,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,69,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0,0,0,2,4,0,0,0,0,6,65,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,76,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,77,    },2,0,0,0,1,0,0,0,0,2,1,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,243,"        return equals(x, y, 1);",0,0,0,1,2,1,6,0,0,6,23,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,307,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,308,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,311,        if (xInt < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,314,        if (yInt < 0) {,4,2,0,1,3,0,6,0,0,12,15,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,318,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,24,320,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,24,28,public enum GoalType implements Serializable {,4,0,0,0,1,1,0,2,0,8,46,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,24,31,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,24,34,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,75,        super(checker);,2,0,0,1,2,0,0,0,0,2,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,77,        if (rel < MIN_RELATIVE_TOLERANCE) {,4,1,0,1,3,0,0,0,0,5,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,80,        if (abs <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,84,        relativeThreshold = rel;,4,0,0,0,0,0,0,0,0,5,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,85,        absoluteThreshold = abs;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,42,    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));,2,2,0,2,4,3,4,0,0,11,74,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,46,    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);,2,1,0,1,2,3,4,0,0,10,74,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,110,        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;,8,1,1,1,2,2,2,0,0,17,59,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,111,        final double lo = getMin();,2,0,0,1,2,1,2,0,0,5,27,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,112,        final double mid = getStartValue();,2,0,0,1,2,1,2,0,0,5,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,113,        final double hi = getMax();,0,0,0,1,2,0,0,0,0,3,27,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,116,        final ConvergenceChecker<UnivariatePointValuePair> checker,2,0,0,0,0,1,0,4,0,7,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,121,        if (lo < hi) {,4,1,0,1,3,0,0,0,0,5,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,122,            a = lo;,6,0,0,0,0,1,0,4,0,12,7,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,123,            b = hi;,0,0,0,0,0,0,0,0,0,0,7,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,129,        double x = mid;,4,0,0,0,0,0,0,0,0,4,15,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,130,        double v = x;,4,0,0,0,0,0,0,0,0,4,13,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,131,        double w = x;,4,0,0,0,0,0,0,0,0,4,13,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,132,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,133,        double e = 0;,8,0,0,0,0,0,0,0,0,9,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,134,        double fx = computeObjectiveValue(x);,2,0,0,1,2,0,4,0,0,6,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,55,    protected BaseAbstractUnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair> checker) {,0,0,0,1,3,0,0,0,0,4,97,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,40,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,56,        this.checker = checker;,10,1,0,0,0,0,4,0,0,17,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,73,        return goal;,2,0,0,0,0,1,8,0,0,10,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,79,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,85,        return searchMax;,4,0,0,0,0,1,8,0,0,13,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,91,        return searchStart;,2,0,0,0,0,1,0,0,0,2,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,104,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,107,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,108,        return function.value(point);,2,1,0,1,2,1,6,0,0,9,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,117,        if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,120,        if (goalType == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,125,        searchMin = min;,0,0,0,0,0,0,0,0,0,0,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,126,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,127,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,128,        goal = goalType;,6,2,0,0,0,0,0,0,0,9,16,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,0,0,3,7,0,0,0,0,10,32,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },8,1,0,0,1,0,0,0,0,9,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,18,6,0,0,0,0,0,0,0,26,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,18,0,0,0,0,0,2,0,0,20,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,4,0,0,0,0,1,0,0,0,5,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,2,0,0,0,0,0,0,0,0,2,22,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,8,1,1,2,4,3,6,4,0,28,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,6,1,0,0,0,1,0,0,0,8,39,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,8,1,0,0,0,4,0,4,0,18,39,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,0,0,0,0,0,0,0,0,0,0,48,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,285,                final double x = currentX - startX;,6,1,0,0,0,1,0,0,0,8,35,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,286,                f2Integral += f2StepIntegral;,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,287,                fPrime2Integral += fPrime2StepIntegral;,0,0,0,0,0,0,0,0,0,0,39,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,8,1,0,0,0,0,2,0,0,12,13,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,290,                sy2 += f2Integral * f2Integral;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,6,1,0,0,0,0,0,0,0,8,22,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,292,                sxz += x * fPrime2Integral;,0,0,0,0,0,0,0,0,0,0,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,293,                syz += f2Integral * fPrime2Integral;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,297,            double c1 = sy2 * sxz - sxy * syz;,14,3,0,0,0,1,0,0,0,18,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,298,            double c2 = sxy * sxz - sx2 * syz;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,299,            double c3 = sx2 * sy2 - sxy * sxy;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,300,            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {,2,0,0,3,7,0,0,0,0,2,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,329,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,336,            double fcMean = 0;,0,0,0,0,0,0,2,0,0,2,18,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,337,            double fsMean = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,339,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,340,            double currentY = observations[0].getY();,2,0,1,2,4,0,2,0,0,6,41,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,341,            for (int i = 1; i < observations.length; ++i) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,343,                final double previousX = currentX;,12,1,0,0,0,1,0,0,0,15,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,344,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,345,                currentX = observations[i].getX();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,346,                currentY = observations[i].getY();,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3255,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,195,        long p1 = a0;,0,0,0,0,0,0,0,0,0,0,13,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,196,        long q1 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,199,        long q2 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,201,        int n = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,202,        boolean stop = false;,6,1,0,0,0,0,0,0,0,7,21,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,204,            ++n;,10,1,0,0,0,0,0,0,0,12,4,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,206,            long a1 = (long)FastMath.floor(r1);,2,1,0,2,4,0,0,0,0,3,35,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,207,            p2 = (a1 * p1) + p0;,14,2,0,1,2,3,0,0,0,21,20,1,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,208,            q2 = (a1 * q1) + q0;,10,2,0,1,2,0,0,0,0,13,20,3,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,213,            double convergent = (double)p2 / (double)q2;,4,4,0,2,4,0,10,0,0,18,44,8,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,0,2,5,0,0,0,0,7,93,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.01961,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,122,    },0,0,0,0,1,0,4,0,0,5,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0,0,0,1,2,0,0,2,0,2,55,8,0.01887,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,177,    {,4,4,1,0,1,0,0,0,0,30,1,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,178,        long overflow = Integer.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,34,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,179,        double r0 = value;,10,1,0,0,0,0,0,0,0,12,18,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,180,        long a0 = (long)FastMath.floor(r0);,0,0,0,2,4,0,0,0,0,6,35,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,187,        if (FastMath.abs(a0 - value) < epsilon) {,4,1,0,2,5,0,0,0,0,6,41,15,0.01818,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3241,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,20,5,0,1,3,1,0,0,0,28,46,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3249,        y = (long) x;,24,2,0,1,2,0,6,0,0,35,13,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3250,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3254,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,26,3258,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,50,                    list.add(o);,12,1,0,1,2,0,0,4,0,19,12,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,64,    public ExceptionContext(final Throwable throwable) {,4,0,1,1,3,3,4,2,0,25,52,1,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,65,        this.throwable = throwable;,0,0,0,0,0,0,0,0,0,0,27,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,66,        msgPatterns    = new ArrayList<Localizable>();,6,1,0,1,2,0,0,0,0,7,46,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,67,        msgArguments   = new ArrayList<Object[]>();,4,0,0,2,4,0,0,4,0,9,43,3,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,69,    },2,0,0,0,1,0,0,2,0,4,1,9,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,88,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,0,2,4,0,10,0,0,13,46,0,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,26,89,    },6,1,0,0,1,1,0,0,0,8,1,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,3,0,0,0,5,50,2,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,43,        if (array != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,44,            for (Object o : array) {,0,0,0,1,3,0,4,0,0,4,24,5,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,26,54,        return list.toArray();,0,0,0,1,2,1,0,0,0,4,22,4,0.01064,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,366,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,367,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,368,    },2,0,0,0,1,0,0,0,0,2,1,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,1,0,5,10,0,6,0,0,12,67,3,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",8,4,1,2,4,0,0,0,0,14,74,5,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,3,0,1,2,0,0,0,0,7,41,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,0,0,1,2,0,0,0,0,8,95,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,1,0,1,2,0,4,0,0,8,60,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",10,1,0,1,2,3,0,0,0,15,54,1,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",6,0,0,4,8,0,0,4,0,10,108,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",14,3,0,1,2,0,2,0,0,21,89,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",6,0,0,1,2,0,0,0,0,8,100,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,1,0,0,0,3,83,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,8,0,0,11,84,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,0,0,2,4,0,2,0,0,6,78,7,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,4,2,0,9,72,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0,0,0,3,6,0,0,0,0,9,39,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",4,0,0,1,2,0,0,0,0,5,94,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",14,3,0,1,2,0,0,0,0,19,49,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",8,4,0,5,10,0,0,0,0,13,71,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,0,0,0,0,6,119,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",4,0,0,2,4,0,0,0,0,5,88,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,1,3,6,0,6,0,0,13,35,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",6,0,0,1,2,0,0,2,0,11,53,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0,0,0,1,2,0,0,0,0,3,71,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",4,0,0,1,2,0,0,0,0,5,53,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,102,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",10,1,0,3,6,3,0,0,0,15,77,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",6,1,0,3,6,0,0,0,0,8,85,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",4,0,0,3,6,0,0,0,0,4,51,10,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0,0,0,1,2,0,0,0,0,3,59,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0,0,0,4,8,0,0,0,0,12,121,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,133,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",4,0,0,3,6,0,0,0,0,6,105,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0,0,0,1,2,0,0,0,0,3,76,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",4,0,0,4,8,0,0,0,0,6,112,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",0,0,0,3,6,0,0,0,0,9,72,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",6,0,0,1,2,0,4,0,0,11,41,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",4,1,1,4,8,0,0,0,0,11,56,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",14,4,0,1,2,0,0,2,0,20,67,3,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,8,0,0,11,71,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",10,3,1,4,8,0,0,0,0,17,132,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,162,"    MUTATION_RATE(""mutation rate ({0})""),",2,0,0,3,6,0,0,0,0,3,37,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",6,1,0,3,6,1,0,0,0,8,58,8,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0,0,0,3,6,0,0,0,0,9,79,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0,0,0,2,4,0,0,0,0,6,81,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,1,0,0,0,5,89,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",6,0,0,3,6,1,0,2,0,10,85,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",6,2,1,4,8,0,12,0,0,26,49,3,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,2,41,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",4,1,0,6,12,0,0,0,0,6,85,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,194,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",0,0,0,1,2,0,0,0,0,3,72,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,195,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,196,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",10,2,0,1,2,0,0,0,0,13,83,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,197,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,198,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0,0,0,4,8,0,0,0,0,12,71,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,199,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,200,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,201,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,202,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",10,2,0,3,6,0,0,0,0,13,65,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,203,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,85,4,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,204,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,205,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,206,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,8,0,0,11,34,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,207,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,208,"    MEAN(""mean ({0})""), /* keep */",4,1,0,3,6,0,0,0,0,6,30,0,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,26,209,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.01053,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0,0,0,1,3,0,0,0,0,4,35,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,6,0,0,6,1,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0,0,0,1,2,0,0,0,0,3,62,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",8,2,0,1,2,0,6,2,0,19,60,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",6,0,0,1,2,3,0,6,0,15,62,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0,0,0,1,2,0,0,0,0,3,65,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0,0,0,1,2,0,0,0,0,3,61,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",12,5,1,1,2,3,0,4,0,28,61,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",8,1,0,1,2,0,0,0,0,10,61,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,8,2,0,2,5,0,0,0,0,11,49,8,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,2,1,1,2,0,6,0,0,22,44,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,10,3,0,1,2,4,6,0,0,23,44,1,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,12,0,0,12,46,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,9,52,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,4,0,0,8,61,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0,1,0,1,2,1,6,0,0,7,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,6,1,0,0,0,0,0,0,0,7,10,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,6,1,0,0,0,0,0,0,0,8,10,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,2,0,0,3,7,1,0,0,0,3,59,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,399,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,400,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,403,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,1,0,4,0,20,69,2,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,409,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,0,0,0,0,0,0,12,0,0,12,7,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,6,1,0,1,3,0,0,0,0,8,14,3,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,2,0,0,3,6,0,6,0,0,8,46,5,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,425,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,426,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,429,            if (t > 0) {,6,0,0,1,3,0,4,0,0,12,12,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,430,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,432,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,435,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,438,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.00488,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",16,2,0,1,2,0,2,2,0,24,73,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0,0,0,1,2,0,6,0,0,6,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,38,    },26,2,0,0,1,6,8,0,0,43,1,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",2,0,0,2,4,0,0,0,0,2,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,2,1,0,0,2,0,4,0,0,8,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,8,1,0,1,2,0,0,0,0,10,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,62,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,63,    },6,0,0,0,1,0,6,0,0,14,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,74,        return context;,6,1,0,0,0,1,0,0,0,8,15,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",6,2,1,1,2,0,0,0,0,15,25,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",16,0,0,1,2,0,0,0,0,17,55,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,122,    },0,0,1,0,1,0,4,0,0,6,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,141,"       this(value, 0, maxDenominator, 100);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,142,    },4,0,1,0,1,1,0,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,177,    {,0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,10,0,0,0,0,0,0,0,0,11,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,179,        double r0 = value;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,180,        long a0 = (long)FastMath.floor(r0);,6,1,0,2,4,0,10,2,0,20,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,181,        if (a0 > overflow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,182,"            throw new FractionConversionException(value, a0, 1l);",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,187,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,188,            this.numerator = (int) a0;,12,1,0,1,2,0,0,0,0,15,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,190,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,194,        long q0 = 0;,2,0,0,0,0,0,2,2,0,6,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,195,        long p1 = a0;,2,0,0,0,0,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,196,        long q1 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,199,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,201,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,202,        boolean stop = false;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,204,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,206,            long a1 = (long)FastMath.floor(r1);,2,0,0,2,4,0,6,0,0,8,35,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,207,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,208,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,2,0,13,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,209,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,210,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,213,            double convergent = (double)p2 / (double)q2;,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,1,2,5,0,0,0,0,7,93,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,215,                p0 = p1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,216,                p1 = p2;,4,0,0,0,0,0,4,0,0,9,8,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,217,                q0 = q1;,2,0,0,0,0,0,0,0,0,3,8,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,218,                q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,219,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,220,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,222,                stop = true;,2,0,0,0,0,0,0,0,0,4,12,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,226,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,227,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,230,        if (q2 < maxDenominator) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,231,            this.numerator = (int) p2;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,232,            this.denominator = (int) q2;,10,1,0,1,2,0,0,0,0,13,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,234,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,235,            this.denominator = (int) q1;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,238,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,246,"        this(num, 1);",2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,258,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0,0,0,0,1,0,0,0,0,1,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,262,            if (num == Integer.MIN_VALUE ||,6,2,0,0,1,0,0,0,0,8,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,264,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,267,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,268,            den = -den;,12,1,0,0,0,0,0,0,0,16,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,279,            num = -num;,4,0,1,0,0,3,0,0,0,10,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,280,            den = -den;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,292,        if (numerator >= 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,293,            ret = this;,2,0,0,0,0,0,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,295,            ret = negate();,4,0,0,1,2,0,2,0,0,7,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,297,        return ret;,8,0,0,0,0,1,0,0,0,9,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,307,        long nOd = ((long) numerator) * object.denominator;,0,0,0,2,4,0,0,0,0,6,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,308,        long dOn = ((long) denominator) * object.numerator;,10,2,0,2,4,0,0,0,0,12,51,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,309,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,333,        if (this == other) {,12,3,0,1,3,0,0,0,0,16,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,334,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,336,        if (other instanceof Fraction) {,2,0,0,1,3,0,0,2,0,4,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,339,            Fraction rhs = (Fraction)other;,4,0,0,1,2,0,0,4,0,8,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,340,            return (numerator == rhs.numerator) &&,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,343,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,353,        return (float)doubleValue();,0,0,0,2,4,1,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,361,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,369,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,378,        return 37 * (37 * 17 + numerator) + denominator;,0,0,0,1,2,1,0,0,0,4,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,388,        return (int)doubleValue();,0,0,0,2,4,1,0,0,0,7,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,398,        return (long)doubleValue();,0,0,0,2,4,1,2,0,0,2,27,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,406,        if (numerator==Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,407,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",8,0,0,1,2,0,0,2,0,10,97,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,409,"        return new Fraction(-numerator, denominator);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,417,"        return new Fraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,44,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,431,"        return addSub(fraction, true /* add */);",0,0,0,1,2,1,4,0,0,5,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,440,"        return new Fraction(numerator + i * denominator, denominator);",8,2,0,1,2,1,0,2,0,12,62,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,454,"        return addSub(fraction, false /* subtract */);",0,0,1,1,2,1,8,0,0,11,46,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,463,"        return new Fraction(numerator - i * denominator, denominator);",8,2,0,1,2,1,0,2,0,12,62,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,477,        if (fraction == null) {,4,1,0,1,3,0,0,0,0,5,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,478,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,481,        if (numerator == 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,482,            return isAdd ? fraction : fraction.negate();,4,0,0,1,2,1,4,0,0,8,44,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,484,        if (fraction.numerator == 0) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,485,            return this;,4,0,1,0,0,1,2,0,0,10,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,489,"        int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,490,        if (d1==1) {,4,1,0,1,3,1,10,2,0,18,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,492,"            int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,71,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,493,"            int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,71,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,494,            return new Fraction,0,0,0,0,0,1,0,2,0,2,19,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,502,        BigInteger uvp = BigInteger.valueOf(numerator),2,0,0,1,2,0,6,2,0,10,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,504,        BigInteger upv = BigInteger.valueOf(fraction.numerator),10,0,0,1,2,0,4,2,0,18,55,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,506,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,4,0,0,2,4,0,12,2,0,18,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,509,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,4,1,1,3,6,0,12,0,0,21,54,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,510,"        int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",0,0,0,2,4,0,0,0,0,6,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,513,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,514,        if (w.bitLength() > 31) {,0,1,0,2,5,0,4,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,515,"            throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,",4,0,0,0,1,0,8,2,0,14,85,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,518,"        return new Fraction (w.intValue(),",0,0,0,1,3,1,4,2,0,6,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,534,        if (fraction == null) {,8,2,0,1,3,0,0,0,0,10,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,535,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,0,0,4,9,0,0,0,0,13,86,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,63,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,117,            return -1;,4,0,0,0,0,1,0,0,0,5,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",10,3,0,2,4,0,8,0,0,24,74,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,115,            return 0;,4,0,0,0,0,1,0,0,0,5,9,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,        if (o == null) {,4,0,0,1,3,0,0,0,0,4,16,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,    },2,0,0,0,1,0,4,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,        copyIn(d);,0,0,0,1,2,0,6,0,0,6,10,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,    },6,1,0,0,1,1,0,0,0,8,1,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,            if (column > 0) {,0,1,0,1,3,0,12,0,0,13,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,            final int nRows = subMatrix.length;,12,3,0,0,0,3,0,4,0,23,35,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,            if (nRows == 0) {,2,0,0,1,3,0,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,            final int nCols = subMatrix[0].length;,0,0,0,1,2,0,0,0,0,3,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,            if (nCols == 0) {,4,1,0,1,3,0,0,0,0,6,17,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,            for (int i = 0; i < data.length; ++i) {,2,0,0,1,3,3,12,0,0,17,39,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",8,2,1,3,6,0,0,0,0,14,64,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);",4,3,0,1,2,0,4,0,0,12,23,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,    protected AbstractRealMatrix() {},2,1,0,2,4,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,    },2,0,0,0,1,0,0,0,0,3,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,        Set<Integer> columnsToDrop = new TreeSet<Integer>();,4,0,0,1,2,1,0,0,0,5,52,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,        columnsToDrop.add(0);,0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {",6,1,0,2,5,0,0,0,0,8,50,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,        for (int i = 0; i < getNumArtificialVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,350,            int col = i + getArtificialVariableOffset();,0,0,0,1,2,0,0,0,0,3,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,351,            if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,                columnsToDrop.add(col);,8,2,0,1,2,1,0,0,0,11,23,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,            int col = 0;,4,0,0,0,0,0,0,0,0,5,12,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,359,            for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,                if (!columnsToDrop.contains(j)) {,2,1,0,2,5,0,6,0,0,9,33,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);,6,0,0,4,8,0,14,6,0,26,74,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,        for (int i = drop.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,            columnLabels.remove((int) drop[i]);,0,0,1,3,6,0,4,0,0,8,35,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,372,        this.tableau = new Array2DRowRealMatrix(matrix);,0,0,0,1,2,0,0,0,0,3,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,373,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,374,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,202,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,        return row;,6,0,1,0,0,1,0,2,0,11,11,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);",10,1,0,1,2,0,0,0,0,12,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,        if (vector.getDimension() != nCols) {,16,5,1,2,5,0,4,0,0,29,37,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,497,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,498,"            setEntry(row, i, vector.getEntry(i));",10,1,0,2,4,3,2,4,0,21,37,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,500,    },8,2,0,0,1,1,8,0,0,19,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,522,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,523,        final int nCols = getColumnDimension();,2,0,0,1,2,1,4,0,0,7,39,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,524,        final double[] out = new double[nCols];,10,2,1,2,4,2,0,0,0,16,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,525,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,526,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,529,        return out;,4,0,0,0,0,1,8,0,0,12,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,64,    public ArrayRealVector(int size) {,0,0,0,1,3,0,0,0,0,4,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,65,        data = new double[size];,0,0,0,1,2,0,0,0,0,3,24,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,66,    },2,0,1,0,1,0,0,0,0,4,1,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,317,        if (v instanceof ArrayRealVector) {,38,5,1,1,3,1,22,4,0,78,35,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,318,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,6,0,0,6,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,319,            final int dim = vData.length;,10,0,0,0,0,1,0,0,0,13,29,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,320,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,321,            ArrayRealVector result = new ArrayRealVector(dim);,26,9,1,1,2,1,0,4,0,45,50,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,322,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,323,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,324,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,326,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,591,            return data[index];,0,0,1,1,2,1,0,0,0,4,19,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,201,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,0,0,0,7,30,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,206,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,160,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,170,"        columnLabels.add(""s"" + i);",6,1,0,1,2,0,4,0,0,12,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,173,"        columnLabels.add(""a"" + i);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,193,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,230,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,237,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,238,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,1,2,4,0,22,0,0,30,73,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,239,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,24,0,0,24,82,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,521,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,224,        tableau.dropPhase1Objective();,0,0,0,1,2,0,4,0,0,4,30,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,226,        while (!tableau.isOptimal()) {,2,0,1,2,5,0,4,0,0,12,30,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,316,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,317,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,318,"            final double entry = getEntry(i, col);",2,0,0,1,2,1,6,0,0,9,38,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,319,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,320,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,321,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,322,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,333,        if (getNumObjectiveFunctions() == 1) {,0,1,1,2,5,0,2,0,0,8,38,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,513,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,91,            return -1;,2,0,0,0,0,1,0,0,0,3,10,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,114,"        if (equals(x, y, maxUlps)) {",2,0,0,2,5,3,6,0,0,11,28,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,116,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,6,19,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,119,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,70,        double minValue = 0;,2,0,0,0,0,0,2,0,0,5,20,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,71,        Integer minPos = null;,4,0,0,0,0,0,0,2,0,6,22,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,14,2,0,3,7,1,0,0,0,18,83,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,73,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,76,            if (entry < minValue) {,4,1,0,1,3,0,0,0,0,5,23,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,77,                minValue = entry;,4,0,0,0,0,0,0,0,0,5,17,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,78,                minPos = i;,2,6,1,0,0,0,0,0,0,16,11,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,81,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,92,        List<Integer> minRatioPositions = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,59,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,93,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,94,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,95,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,1,0,2,4,1,10,0,0,14,63,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,96,"            final double entry = tableau.getEntry(i, col);",2,0,0,1,2,1,8,0,0,11,46,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,98,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,99,                final double ratio = rhs / entry;,10,3,0,0,0,1,0,0,0,14,33,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,102,"                final int cmp = Double.compare(ratio, minRatio);",2,0,0,1,2,1,8,0,0,11,48,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,103,                if (cmp == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,105,                } else if (cmp < 0) {,0,0,0,1,4,0,0,0,0,5,21,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,106,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,107,                    minRatioPositions = new ArrayList<Integer>();,4,1,1,1,2,0,0,4,0,15,45,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,108,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,113,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,115,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,153,        return minRatioPositions.get(0);,0,0,0,1,2,1,4,0,0,4,32,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,165,        incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,167,        Integer pivotCol = getPivotColumn(tableau);,0,0,0,1,2,0,0,0,0,3,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,168,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,169,        if (pivotRow == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,174,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,12,0,0,14,55,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,175,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,178,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,179,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,180,"                final double multiplier = tableau.getEntry(i, pivotCol);",2,0,0,1,2,1,8,0,0,11,56,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,181,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,10,0,0,10,45,9,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,184,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,127,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,270,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,1,4,2,0,6,57,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,392,                return false;,2,0,0,0,0,1,0,2,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,446,        for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,447,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,449,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,463,        for (int i = 0; i < getWidth(); i++) {,2,1,1,2,5,0,0,0,0,8,38,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,464,"            double result = tableau.getEntry(minuendRow, i) - tableau.getEntry(subtrahendRow, i) * multiple;",4,2,0,2,4,0,16,0,0,22,96,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,466,            if (FastMath.abs(result) < CUTOFF_THRESHOLD) {,4,1,0,2,5,3,6,0,0,14,46,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,467,                result = 0.0;,6,0,1,0,0,0,0,0,0,9,13,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,469,"            tableau.setEntry(minuendRow, i, result);",2,0,0,1,2,0,12,0,0,15,40,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,471,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,486,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,529,        return getWidth() - 1;,0,0,0,1,2,1,0,0,0,4,22,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,62,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,69,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,6,3,0,2,4,0,8,0,0,18,68,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,70,    },4,2,0,0,1,0,0,0,0,6,1,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,88,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,89,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,90,        } else if (x < y) {,8,2,1,1,4,0,0,0,0,13,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,93,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,264,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,300,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,301,        long yInt = Double.doubleToLongBits(y);,0,0,0,1,2,0,0,0,0,3,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,304,        if (xInt < 0) {,4,3,1,1,3,0,0,0,0,16,15,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,305,            xInt = SGN_MASK - xInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,307,        if (yInt < 0) {,2,1,1,1,3,0,0,0,0,6,15,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,311,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,313,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,4,0,0,9,49,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,216,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,235,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,10,47,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,254,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,2909,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,4,0,0,4,25,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,43,        return getDefaultNumberFormat(Locale.getDefault());,14,3,0,2,4,1,6,0,0,23,51,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,4,0,0,4,32,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,28,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,28,59,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,28,1117,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,53,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,85,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,59,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0,0,0,2,4,0,0,0,0,6,104,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,379,"        checkRowIndex(m, row);",8,2,1,1,2,1,6,0,0,24,22,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,380,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,381,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,391,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,396,    },2,0,0,0,1,0,0,2,0,5,1,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,406,        if (column < 0 || column >= m.getColumnDimension()) {,10,3,0,2,5,0,4,2,0,22,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,28,410,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,56,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,58,    },6,1,1,0,1,1,0,0,0,10,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,255,        return data;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,303,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,61,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,62,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,65,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,43,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,46,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,6,0,0,6,55,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,28,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,86,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,87,    },4,0,0,0,1,1,0,0,0,6,1,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,103,"    public ArrayRealVector(double[] d, boolean copyArray) {",12,0,0,2,5,1,4,2,0,20,55,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,104,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,107,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,42,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,601,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,713,        return data.clone();,2,0,0,1,2,1,4,0,0,7,20,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,743,        if (data.length != n) {,6,1,1,1,3,0,0,0,0,13,23,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,746,    },6,1,1,0,1,0,0,0,0,10,1,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,38,public class ArrayRealVector extends RealVector implements Serializable {,0,0,0,0,1,0,0,0,0,1,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",10,0,0,0,1,0,0,2,0,12,76,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,133,                            final NumberFormat format) {,12,2,0,0,2,1,4,2,0,23,28,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,135,        this.suffix            = suffix;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,136,        this.rowPrefix         = rowPrefix;,4,0,0,0,0,0,0,0,0,5,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,137,        this.rowSuffix         = rowSuffix;,6,0,0,0,0,0,0,0,0,8,35,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,138,        this.rowSeparator      = rowSeparator;,10,0,0,0,0,1,0,0,0,12,38,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,143,    },10,5,1,0,1,0,0,0,0,20,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,207,        return format;,10,0,0,0,0,1,0,2,0,13,14,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,28,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",4,1,0,1,2,0,4,2,0,12,64,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,109,        this.separator   = separator;,0,0,0,0,0,0,0,0,0,0,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,112,        trimmedSeparator = separator.trim();,0,0,0,1,2,0,0,0,0,3,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,113,        this.format      = format;,10,3,0,0,0,0,0,0,0,14,26,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,28,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,28,public enum GoalType implements Serializable {,2,0,1,0,1,1,0,2,0,12,46,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,31,"    MAXIMIZE,",2,1,1,0,0,0,0,0,0,10,9,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,28,34,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",0,0,0,1,2,0,0,0,0,3,36,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",6,0,0,1,3,3,0,0,0,9,63,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,60,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,197,        if (tableau.getNumArtificialVariables() == 0) {,4,2,0,2,5,0,8,0,0,14,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,215,        final SimplexTableau tableau =,2,0,0,0,0,1,0,2,0,5,30,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,223,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,74,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,75,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,0,0,0,3,41,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,82,        return nonNegative;,2,0,0,0,0,1,0,0,0,2,19,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,89,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,96,        return function;,2,0,0,0,0,1,0,0,0,2,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,103,        return Collections.unmodifiableCollection(linearConstraints);,2,0,0,1,2,1,6,2,0,11,61,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,108,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,139,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,140,        this.linearConstraints = constraints;,4,0,0,0,0,0,0,0,0,5,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,141,        this.goal              = goalType;,4,0,0,0,0,0,0,0,0,5,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,142,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,144,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,28,147,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,58,"        this(new ArrayRealVector(coefficients), constantTerm);",0,0,0,2,4,0,0,0,0,6,54,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",6,0,0,1,3,1,0,2,0,9,78,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,67,        this.constantTerm = constantTerm;,0,0,0,0,0,0,0,0,0,0,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,75,        return coefficients;,0,0,0,0,0,1,0,0,0,1,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,28,83,        return constantTerm;,10,1,0,0,0,1,0,0,0,13,20,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,31,"    LEQ(""<=""),",0,0,0,1,2,0,0,0,0,3,10,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,34,"    GEQ("">="");",2,0,0,1,2,0,0,0,0,3,10,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,28,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,82,    },2,0,0,0,1,0,2,2,0,6,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,100,        this.coefficients = coefficients;,10,0,0,0,0,1,0,0,0,12,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,101,        this.relationship = relationship;,4,0,0,0,0,0,0,0,0,5,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,102,        this.value        = value;,4,0,0,0,0,0,0,0,0,5,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,168,        return coefficients;,2,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,176,        return relationship;,2,0,0,0,0,1,0,0,0,2,20,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,28,184,        return value;,4,1,0,0,0,1,6,0,0,11,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,139,                   final int maxUlps) {,2,0,0,0,2,1,0,0,0,3,20,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,89,    private final List<String> columnLabels = new ArrayList<String>();,2,0,0,1,2,2,0,8,0,12,66,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,140,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,141,        this.constraints            = normalizeConstraints(constraints);,12,2,0,1,2,1,4,0,0,21,64,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,142,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,143,        this.epsilon                = epsilon;,4,0,0,0,0,0,0,0,0,5,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,144,        this.maxUlps                = maxUlps;,4,0,0,0,0,0,0,0,0,5,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,145,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,4,1,1,2,4,0,6,0,0,17,66,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,147,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0,0,0,1,2,0,0,0,0,3,73,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,149,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,6,1,0,1,2,0,2,0,0,10,72,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,151,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,8,1,0,1,2,0,2,0,0,12,60,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,152,        initializeColumnLabels();,0,0,0,1,2,0,2,0,0,2,25,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,153,    },10,2,1,0,1,0,0,0,0,17,1,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,159,      if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,0,2,0,0,3,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,162,"      columnLabels.add(""Z"");",0,0,0,1,2,0,4,0,0,5,22,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,163,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,10,1,0,2,5,0,2,0,0,15,61,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,164,"        columnLabels.add(""x"" + i);",6,2,1,1,2,0,4,0,0,18,26,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,166,      if (!restrictToNonNegative) {,0,0,0,1,3,0,0,0,0,4,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,169,      for (int i = 0; i < getNumSlackVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,172,      for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,175,"      columnLabels.add(""RHS"");",2,0,1,1,2,0,4,0,0,12,24,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,186,        int width = numDecisionVariables + numSlackVariables +,4,1,1,0,0,0,0,0,0,10,54,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,188,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,189,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",6,0,0,1,2,0,0,4,0,10,70,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,192,        if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,195,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,0,0,0,2,4,0,0,0,0,6,55,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,196,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",0,0,0,1,2,0,0,0,0,3,51,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,197,        RealVector objectiveCoefficients =,2,0,0,0,0,0,4,2,0,8,34,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,199,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",0,0,1,4,8,0,10,0,0,12,72,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,200,"        matrix.setEntry(zIndex, width - 1,",2,1,0,0,1,0,6,0,0,9,34,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,203,        if (!restrictToNonNegative) {,0,0,0,1,3,0,0,0,0,4,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,209,        int slackVar = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,210,        int artificialVar = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,211,        for (int i = 0; i < constraints.size(); i++) {,8,1,0,2,5,3,4,0,0,17,46,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,212,            LinearConstraint constraint = constraints.get(i);,2,0,0,1,2,0,6,2,0,10,49,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,213,            int row = getNumObjectiveFunctions() + i;,4,1,0,1,2,0,2,0,0,7,41,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,216,"            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",0,0,1,5,10,0,12,0,0,14,76,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,219,            if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,225,"            matrix.setEntry(row, width - 1, constraint.getValue());",4,1,0,2,4,0,10,0,0,15,55,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,228,            if (constraint.getRelationship() == Relationship.LEQ) {,4,1,0,2,5,0,4,0,0,9,55,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,235,            if ((constraint.getRelationship() == Relationship.EQ) ||,4,2,0,2,5,0,4,0,0,10,56,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,243,        return matrix;,2,0,0,0,0,1,0,0,0,2,14,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,252,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,2,0,0,1,2,0,0,8,0,10,70,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,253,        for (LinearConstraint constraint : originalConstraints) {,4,0,0,1,3,0,0,2,0,6,57,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,254,            normalized.add(normalize(constraint));,0,0,0,2,4,0,8,0,0,8,38,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,255,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,256,        return normalized;,2,0,0,0,0,1,0,0,0,2,18,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,265,        if (constraint.getValue() < 0) {,0,0,0,2,5,0,0,0,0,7,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,279,        return this.numArtificialVariables > 0 ? 2 : 1;,10,4,0,0,0,1,0,0,0,14,47,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,288,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,289,        for (final LinearConstraint constraint : constraints) {,6,0,1,1,3,2,0,2,0,14,55,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,290,            if (constraint.getRelationship() == relationship) {,2,1,0,2,5,0,4,0,0,7,51,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,291,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,293,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,294,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,381,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",4,0,0,2,4,0,10,0,0,14,71,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,382,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,389,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,10,2,1,3,7,0,4,0,0,22,67,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,390,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,391,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",0,0,0,2,5,0,0,0,0,7,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,395,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,478,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,495,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,0,0,0,4,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,552,        return f.getCoefficients().getDimension();,0,0,0,2,4,1,0,0,0,7,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,560,        return numSlackVariables;,8,2,0,0,0,2,10,0,0,23,25,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,568,        return numArtificialVariables;,2,0,0,0,0,1,0,0,0,2,30,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",10,0,0,1,2,0,0,0,0,10,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,62,"        super(specific, wrong, lo, hi);",0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,63,        this.lo = lo;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,71,        return lo;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,28,77,        return hi;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,46,"        super(pattern, wrong, arguments);",14,2,0,1,2,0,0,0,0,16,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,28,54,        return argument;,12,2,0,0,0,1,0,0,0,16,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,44,                                        Object ... args) {,4,0,0,0,2,0,0,2,0,7,18,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,45,        context = new ExceptionContext(this);,4,0,1,1,2,0,0,2,0,10,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,51,        return context;,8,1,0,0,0,1,0,0,0,10,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,57,        return context.getMessage();,6,1,0,1,2,1,4,0,0,12,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,28,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,8,0,0,1,2,0,0,0,0,10,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,47,"        super(specific, 0, arguments);",10,1,0,1,2,0,0,0,0,11,30,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/ZeroException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,43,    public MathArithmeticException() {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,44,        context = new ExceptionContext(this);,8,2,1,1,2,0,0,2,0,23,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,10,0,0,14,58,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,58,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,0,0,11,34,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,63,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,69,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,28,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,53,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,10,0,0,10,45,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,55,        this.max = max;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,28,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,62,"        context.addMessage(pattern, args);",8,1,0,1,2,0,8,0,0,18,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,63,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,38,"        super(value, 0, false);",6,0,0,1,2,0,0,0,0,8,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,39,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,28,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,7,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,71,        this.boundIsAllowed = boundIsAllowed;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,28,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,69,        this.max = max;,6,0,0,0,0,0,0,0,0,8,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,70,        this.boundIsAllowed = boundIsAllowed;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,77,        return boundIsAllowed;,8,1,0,0,0,1,0,0,0,10,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,28,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,28,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,28,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,28,50,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,28,51,    },2,0,0,0,1,0,6,2,0,11,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0,0,0,1,2,0,0,0,0,3,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,28,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",8,0,0,1,2,0,0,0,0,8,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,59,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,60,        this.wrong = wrong.clone();,10,2,0,1,2,0,4,0,0,17,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,61,        this.expected = expected.clone();,6,1,0,1,2,0,4,0,0,13,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,68,        return wrong.clone();,0,0,1,1,2,1,4,0,0,13,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,74,        return expected.clone();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,82,        return wrong[index];,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,28,89,        return expected[index];,0,0,1,1,2,1,0,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,42,                              Class<?> type) {,6,1,0,0,2,0,0,2,0,9,16,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",0,0,0,1,3,0,0,0,0,4,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,53,                              int position) {,2,0,0,0,2,0,0,0,0,2,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,",4,0,0,1,3,0,4,0,0,8,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathParseException,28,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,28,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",6,2,0,1,2,0,0,0,0,8,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,28,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,28,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,28,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NoDataException,28,37,        this(LocalizedFormats.NO_DATA);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NoDataException,28,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NoDataException,28,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NoDataException,28,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,28,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,28,38,    },6,1,0,0,1,0,6,0,0,14,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,28,47,"        super(specific, value, 0, true);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,28,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3720,                  double xb) {,6,1,0,0,2,0,0,0,0,7,12,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3723,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3729,                double a = -k * 1.570796251296997;,6,1,0,0,0,0,0,0,0,8,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3730,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3731,                remB = -(remA - xa - a);,10,1,0,1,2,0,0,0,0,13,24,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3733,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3734,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3735,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3736,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3738,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3739,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3740,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3741,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3743,                if (remA > 0) {,4,1,0,1,3,0,0,0,0,5,15,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3744,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3750,                --k;,2,0,0,0,0,0,0,0,0,3,4,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3751,            },10,1,0,0,1,0,0,0,0,12,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3753,            this.finalK = k;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3754,            this.finalRemA = remA;,0,0,0,0,0,0,12,0,0,12,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3755,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3756,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3762,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3768,            return finalRemA;,6,1,0,0,0,2,0,0,0,8,17,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,28,3774,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,75,    private Precision() {},0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,131,"        return equals(x, y, 1);",0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,144,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,4,8,1,18,0,0,20,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,158,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,173,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0,0,0,3,6,1,0,0,0,10,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,195,        int xInt = Float.floatToIntBits(x);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,196,        int yInt = Float.floatToIntBits(y);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,199,        if (xInt < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,200,            xInt = SGN_MASK_FLOAT - xInt;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,202,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,203,            yInt = SGN_MASK_FLOAT - yInt;,6,1,0,0,0,0,0,0,0,8,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,206,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,208,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,2,1,0,2,4,1,12,0,0,17,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,224,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0,0,0,4,8,1,0,0,0,13,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,236,"        return equals(x, y, 1);",2,0,1,1,2,2,6,0,0,11,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,249,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,4,8,1,18,0,0,20,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,279,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,308,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,329,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,342,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,364,            return (new BigDecimal,0,0,0,0,1,1,0,2,0,2,22,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,368,        } catch (NumberFormatException ex) {,0,0,0,1,4,0,0,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,369,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,6,0,0,6,27,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,370,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,372,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,387,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,402,"        final float sign = FastMath.copySign(1f, x);",0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,403,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",10,3,0,2,4,1,6,0,0,21,63,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,404,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,422,        switch (roundingMethod) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,424,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,425,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,427,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,81,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,429,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,431,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",36,14,0,2,4,0,10,0,0,62,82,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,432,            break;,10,2,0,0,0,0,2,0,0,16,6,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,434,            if (sign == -1) {,4,1,0,1,3,0,12,2,0,20,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,435,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,437,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,439,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,441,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,442,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,443,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,444,                unscaled = FastMath.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,446,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,448,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,451,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,452,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,453,                unscaled = FastMath.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,454,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,455,                unscaled = FastMath.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,458,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,0,12,0,0,15,57,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,460,                    unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,462,                    unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,12,0,0,15,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,465,            break;,4,1,0,0,0,0,0,0,0,5,6,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,468,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,6,0,0,13,66,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,469,            double fraction = unscaled - FastMath.floor(unscaled);,8,1,0,1,2,0,6,0,0,16,54,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,470,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,471,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,473,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,475,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,28,478,            if (unscaled != FastMath.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,0,0,0,0,0,1,0,0,0,1,11,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,0,0,0,0,0,0,0,0,0,0,17,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,8,0,0,0,0,0,0,0,0,10,26,3,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,1.8,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,1.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,        int perturb = perturb(hash);,0,0,0,1,2,0,0,0,0,3,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,        int j = index;,0,0,0,0,0,0,0,0,0,0,14,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,6,1,0,0,0,1,0,0,0,8,25,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,        return (j << 2) + j + perturb + 1;,2,0,0,1,2,1,4,0,0,7,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,        final int hash  = hashOf(key);,0,0,0,1,2,0,8,0,0,8,30,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,        keys[index]   = 0;,0,0,1,1,2,0,0,0,0,5,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,10,4,0,1,2,0,12,0,0,27,24,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,8,1,1,1,2,1,4,0,0,19,38,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,2,0,0,0,0,0,0,0,0,3,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,592,            entries.remove(index);,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,210,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.9,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,421,                growTable();,0,0,0,1,2,0,0,0,0,3,12,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,434,        final int oldLength      = states.length;,0,0,0,0,0,0,0,0,0,0,41,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,435,        final int[] oldKeys      = keys;,16,5,0,1,2,0,0,0,0,21,32,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,436,        final double[] oldValues = values;,2,0,0,1,2,0,0,2,0,4,34,13,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,437,        final byte[] oldStates   = states;,0,0,0,1,2,0,0,0,0,3,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,439,        final int newLength = RESIZE_MULTIPLIER * oldLength;,0,0,0,0,0,0,0,0,0,0,52,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,440,        final int[] newKeys = new int[newLength];,2,0,1,2,4,1,0,0,0,5,41,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,441,        final double[] newValues = new double[newLength];,0,0,0,2,4,0,0,0,0,6,49,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,442,        final byte[] newStates = new byte[newLength];,4,0,1,2,4,4,0,0,0,10,45,1,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,443,        final int newMask = newLength - 1;,0,0,0,0,0,0,0,0,0,0,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,444,        for (int i = 0; i < oldLength; ++i) {,8,1,0,1,3,0,0,0,0,10,37,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,445,            if (oldStates[i] == FULL) {,0,0,0,2,5,0,0,0,0,7,27,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,446,                final int key = oldKeys[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,447,"                final int index = findInsertionIndex(newKeys, newStates, key, newMask);",8,1,0,1,2,0,0,0,0,10,71,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,448,                newKeys[index]   = key;,0,0,0,1,2,0,0,0,0,3,23,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,449,                newValues[index] = oldValues[i];,0,0,0,2,4,0,0,0,0,6,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,450,                newStates[index] = FULL;,0,0,0,1,2,0,0,0,0,3,24,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,454,        mask   = newMask;,0,0,0,0,0,0,0,0,0,0,17,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,455,        keys   = newKeys;,2,0,0,0,0,0,0,0,0,3,17,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,456,        values = newValues;,8,0,0,0,0,0,0,0,0,11,19,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,457,        states = newStates;,4,0,0,0,0,0,0,0,0,5,19,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,459,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,179,    public OpenMapRealVector(OpenMapRealVector v) {,0,0,0,1,3,0,12,0,0,12,47,10,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,180,        virtualSize = v.getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,4,2,0,2,4,0,0,0,0,6,53,6,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,182,        epsilon = v.epsilon;,2,0,0,0,0,0,0,0,0,3,20,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,183,    },0,0,0,0,1,0,0,0,0,1,1,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,591,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,0,0,0,8,40,4,0.64286,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,207,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,208,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,209,"        if (containsKey(key, index)) {",0,0,0,2,5,0,0,0,0,7,30,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,208,        return entries;,0,0,0,0,0,1,0,0,0,1,15,4,0.6,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,130,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,0,0,0,1,3,0,0,0,0,4,68,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,131,        final int length = source.keys.length;,0,0,0,0,0,0,0,0,0,0,38,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,132,        keys = new int[length];,8,1,1,1,2,1,0,0,0,13,23,3,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,133,"        System.arraycopy(source.keys, 0, keys, 0, length);",2,0,0,1,2,0,6,0,0,8,50,5,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,134,        values = new double[length];,4,0,0,1,2,0,0,2,0,7,28,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,135,"        System.arraycopy(source.values, 0, values, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,136,        states = new byte[length];,2,0,1,1,2,0,0,0,0,5,26,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,137,"        System.arraycopy(source.states, 0, states, 0, length);",8,1,0,1,2,0,8,0,0,17,54,3,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,138,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,139,        size  = source.size;,12,4,0,0,0,0,0,0,0,17,20,9,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,140,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,141,        count = source.count;,0,0,0,0,0,0,0,0,0,0,21,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5625,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,526,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,529,            if (current < 0) {,2,1,0,1,3,0,4,0,0,7,18,1,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,532,            return keys[current];,2,0,0,1,2,2,4,0,0,7,21,4,0.45,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,274,            return changeIndexSign(index);,0,0,0,1,2,1,0,0,0,4,30,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,332,        return -index - 1;,2,1,0,0,0,1,0,0,0,4,18,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,411,            index = changeIndexSign(index);,6,0,0,1,2,0,4,0,0,12,31,3,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,412,            previous = values[index];,2,0,1,1,2,0,0,0,0,7,25,6,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,413,            newMapping = false;,2,0,0,0,0,0,0,0,0,3,19,2,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,176,        int d = getDimension();,0,0,0,1,2,0,0,0,0,3,23,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,177,        if (d != n) {,2,0,0,1,3,0,0,0,0,2,13,4,0.42857,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,273,        } else if (states[index] == FULL && keys[index] == key) {,4,3,1,3,8,0,4,0,0,19,57,3,0.3913,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,238,        return new Iterator();,0,0,0,1,2,1,0,0,0,4,22,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,37,public class OpenIntToDoubleHashMap implements Serializable {,2,1,1,0,1,0,0,0,0,9,61,6,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,495,        private Iterator() {,0,0,0,1,3,0,0,0,0,4,20,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,498,            referenceCount = count;,12,1,0,0,0,0,0,0,0,14,23,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,501,            next = -1;,4,0,0,0,0,0,4,0,0,11,10,2,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,503,                advance();,8,0,0,1,2,0,2,0,0,10,10,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,506,            },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,508,        },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,481,    public class Iterator {,2,0,0,0,1,1,0,0,0,3,23,2,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,515,            return next >= 0;,0,0,0,0,0,1,0,0,0,1,17,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,543,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,546,            if (current < 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,549,            return values[current];,0,0,1,1,2,1,0,0,0,4,23,6,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,560,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,565,            current = next;,0,0,0,0,0,0,0,0,0,0,15,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,569,                while (states[++next] != FULL) {,6,1,1,2,5,0,0,0,0,15,32,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,577,            },2,0,1,0,1,0,0,0,0,7,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,572,            } catch (ArrayIndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,44,7,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,573,                next = -2;,2,0,0,0,0,0,0,0,0,4,10,8,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,574,                if (current < 0) {,4,2,0,1,3,0,0,0,0,6,18,1,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,579,        },0,0,0,0,1,0,0,0,0,1,1,4,0.34615,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,183,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,184,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,343,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,1,1,2,0,0,4,0,17,52,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,350,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,351,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,352,"            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,354,        return res;,2,0,0,0,0,1,0,0,0,3,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,34,public class OpenMapRealVector extends SparseRealVector,2,0,0,0,0,1,0,2,0,5,55,1,0.32143,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,589,        if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,590,"            entries.put(index, value);",4,0,0,1,2,0,0,0,0,5,26,8,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,594,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28125,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,588,        checkIndex(index);,0,0,0,1,2,0,0,0,0,3,18,4,0.26471,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,449,        return entries.get(index);,0,0,0,1,2,1,6,0,0,6,26,5,0.25714,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,342,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,177,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,178,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,179,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,382,        return (key != 0 || states[index] == FULL) && keys[index] == key;,6,5,1,3,6,1,0,0,0,19,65,4,0.24324,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,448,        checkIndex(index);,0,0,0,1,2,0,0,0,0,3,18,4,0.23077,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,194,    },2,0,0,0,1,1,0,2,0,5,1,3,0.2093,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,140,"                entries.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,9,0.18,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,189,        if (index < 0 ||,0,0,0,0,1,0,0,0,0,1,16,4,0.16981,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,256,"        return findInsertionIndex(keys, states, key, mask);",0,0,0,1,2,1,0,0,0,4,51,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,269,        final int hash = hashOf(key);,2,0,0,1,2,1,4,0,0,7,29,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,270,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,271,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,272,            return index;,18,3,1,0,0,2,6,0,0,39,13,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,407,        int index = findInsertionIndex(key);,2,0,0,1,2,0,4,0,0,6,36,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,408,        double previous = missingEntries;,2,0,0,0,0,0,0,0,0,2,33,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,409,        boolean newMapping = true;,2,0,0,0,0,0,0,0,0,3,26,5,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,410,        if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,415,        keys[index]   = key;,0,0,0,1,2,0,0,0,0,3,20,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,416,        states[index] = FULL;,2,0,1,1,2,0,0,0,0,7,21,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,417,        values[index] = value;,2,0,1,1,2,0,0,0,0,7,22,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,418,        if (newMapping) {,2,0,0,1,3,0,0,0,0,2,17,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,419,            ++size;,2,0,0,0,0,0,0,0,0,3,7,6,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,420,            if (shouldGrowTable()) {,8,1,0,2,5,0,2,0,0,12,24,3,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,423,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,425,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,466,        return size > (mask + 1) * LOAD_FACTOR;,8,3,0,1,2,1,0,0,0,11,39,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,475,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,8,4,0,3,6,1,0,0,0,13,50,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,476,        return h ^ (h >>> 7) ^ (h >>> 4);,6,3,0,2,4,1,0,0,0,9,33,4,0.15517,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,123,"        this(values, DEFAULT_ZERO_TOLERANCE);",4,0,0,1,2,0,0,0,0,4,37,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,133,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,134,        virtualSize = values.length;,2,0,0,0,0,0,0,0,0,3,28,6,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,135,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,0,0,2,0,8,42,0,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,136,        this.epsilon = epsilon;,6,2,1,0,0,0,0,0,0,18,23,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,137,        for (int key = 0; key < values.length; key++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,138,            double value = values[key];,2,0,0,1,2,0,0,0,0,3,27,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,139,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.13846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,401,        return virtualSize;,2,0,0,0,0,1,0,0,0,2,19,4,0.12676,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,100,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",4,0,0,1,2,0,0,0,0,4,44,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,117,                                  final double missingEntries) {,2,0,0,0,2,1,0,0,0,3,30,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,118,        final int capacity = computeCapacity(expectedSize);,8,3,0,1,2,2,4,0,0,17,51,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,119,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,120,        values = new double[capacity];,0,0,0,1,2,0,0,0,0,3,30,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,121,        states = new byte[capacity];,2,0,1,1,2,0,0,0,0,5,28,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,122,        this.missingEntries = missingEntries;,0,0,0,0,0,0,0,0,0,0,37,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,123,        mask   = capacity - 1;,4,1,0,0,0,0,0,0,0,6,22,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,150,        if (expectedSize == 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,153,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,6,1,0,2,4,1,4,0,0,12,71,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,154,        final int powerOfTwo = Integer.highestOneBit(capacity);,2,0,0,1,2,1,6,0,0,9,55,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,155,        if (powerOfTwo == capacity) {,6,1,0,1,3,3,0,0,0,10,29,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,156,            return capacity;,8,1,0,0,0,1,4,0,0,14,16,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,0,0,0,0,3,49,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,126,    private static final double LN_HI_PREC_COEF[][] = {,2,2,1,2,5,0,0,0,0,13,51,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,6,0,0,6,44,5,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,158,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,177,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,196,    private static final double COSINE_TABLE_B[] =,6,2,1,1,2,6,0,0,0,23,46,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,216,    private static final double TANGENT_TABLE_A[] =,8,1,0,1,2,4,8,0,0,21,47,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3334,        if (x != x) { // NaN,2,0,1,1,3,0,4,0,0,9,20,0,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3342,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3343,        if (x < 0 && y != x) {,10,6,0,1,3,0,0,0,0,16,22,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3347,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3351,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3366,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3367,            return y;,4,1,0,0,0,1,6,0,0,11,9,3,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,59,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,29,1049,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,6,0,10,64,1,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,220,        return FastMath.abs(value) < epsilon;,2,1,0,1,2,1,6,0,0,9,37,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/linear/SparseRealVector,29,25,public abstract class SparseRealVector extends RealVector {},0,0,0,1,2,0,0,0,0,3,60,4,0.12329,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,180,            return values[index];,0,0,1,1,2,1,0,0,0,4,21,7,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3747,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,2,0,0,1,2,0,4,0,0,7,56,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,3776,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,92,"        this(DEFAULT_EXPECTED_SIZE, Double.NaN);",6,0,0,1,2,0,0,0,0,6,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,108,"        this(expectedSize, Double.NaN);",6,0,0,1,2,0,0,0,0,6,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,151,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,158,        return nextPowerOfTwo(capacity);,0,0,0,1,2,1,4,0,0,4,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,167,        return Integer.highestOneBit(i) << 1;,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,187,        int j = index;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,188,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,8,1,1,3,7,0,4,0,0,18,85,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,189,"            j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,190,            index = j & mask;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,191,"            if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,192,                return values[index];,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,196,        return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,213,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,214,            return false;,4,1,1,0,0,2,0,0,0,11,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,217,        int j = index;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,218,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0,0,0,3,7,0,0,0,0,10,85,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,219,"            j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,220,            index = j & mask;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,221,"            if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,222,                return true;,0,3,1,0,0,1,0,0,0,11,12,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,226,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,286,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,293,        } else if (states[index] == FULL) {,2,1,1,2,6,0,0,0,0,7,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,296,            return changeIndexSign(index);,0,0,0,1,2,1,4,0,0,4,30,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,299,        final int firstRemoved = index;,4,0,0,0,0,1,0,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,301,"            j = probe(perturb, j);",2,0,0,1,2,0,6,0,0,9,22,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,302,            index = j & mask;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,304,            if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,305,                return firstRemoved;,2,0,0,0,0,1,0,0,0,2,20,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,306,            } else if (states[index] == FULL && keys[index] == key) {,4,3,1,3,8,0,0,0,0,15,57,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,307,                return changeIndexSign(index);,0,0,0,1,2,1,4,0,0,4,30,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,310,            perturb >>= PERTURB_SHIFT;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,340,        return size;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,357,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,358,            return missingEntries;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,361,        int j = index;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,362,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,12,2,1,3,7,0,4,0,0,23,85,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,363,"            j = probe(perturb, j);",2,0,0,1,2,0,6,0,0,9,22,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,364,            index = j & mask;,8,1,0,0,0,1,2,0,0,13,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,365,"            if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,366,                return doRemove(index);,6,0,0,1,2,3,4,2,0,15,23,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,370,        return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,592,        stream.defaultReadObject();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,593,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,594,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,349,    private FastMath() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,362,            return d; // These are un-normalised - don't try to convert,2,0,0,0,0,1,0,0,0,2,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,364,        long xl = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,365,        xl = xl & MASK_30BITS; // Drop low order bits,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,375,        return Math.sqrt(a);,6,1,0,1,2,1,6,0,0,14,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,383,      if (x != x) {,12,2,0,1,3,0,0,0,0,16,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,384,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,392,      if (x > 20.0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,393,          return exp(x)/2.0;,10,1,0,1,2,1,0,0,0,12,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,396,      if (x < -20) {,2,2,1,1,3,0,0,0,0,14,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,397,          return exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,6,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,400,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,401,      if (x < 0.0) {,2,0,0,1,3,0,4,0,0,6,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,402,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,409,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,410,      double yaa = ya + temp - temp;,14,3,0,0,0,0,0,0,0,17,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,411,      double yab = ya - yaa;,12,2,0,0,0,0,0,0,0,14,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,415,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,416,      double recipa = recip + temp - temp;,10,2,0,0,0,3,0,0,0,15,36,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,417,      double recipb = recip - recipa;,0,1,0,0,0,0,4,0,0,5,31,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,422,      recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,425,      temp = ya + recipa;,10,1,0,0,0,0,0,0,0,14,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,426,      yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,428,      temp = ya + recipb;,8,1,0,0,0,0,0,0,0,11,19,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,429,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,430,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,432,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,433,      result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,434,      return result;,6,1,0,0,0,1,6,0,0,13,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,442,      boolean negate = false;,4,0,0,0,0,0,0,0,0,5,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,444,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,452,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,453,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,456,      if (x < -20) {,0,0,0,1,3,0,8,0,0,8,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,457,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,460,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,461,          return x;,2,0,0,0,0,2,4,2,0,9,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,464,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,465,          x = -x;,4,0,1,0,0,0,4,0,0,16,7,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,466,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,471,      if (x > 0.25) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,472,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,473,"          exp(x, 0.0, hiPrec);",2,0,0,1,2,0,6,0,0,8,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,475,          double ya = hiPrec[0] + hiPrec[1];,8,1,1,2,4,0,0,2,0,15,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,478,          double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,479,          double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,483,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,484,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,485,          double recipa = recip + temp - temp;,2,0,0,0,0,0,6,0,0,9,36,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,486,          double recipb = recip - recipa;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,491,          recipb += -yb * recip * recip;,2,0,0,0,0,1,0,0,0,3,30,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,493,          recipa = -recipa;,6,0,0,0,0,2,0,0,0,10,17,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,494,          recipb = -recipb;,16,2,0,0,0,0,0,0,0,23,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,497,          temp = ya + recipa;,4,0,0,0,0,0,0,0,0,5,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,498,          yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,499,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,500,          temp = ya + recipb;,12,2,0,0,0,0,0,0,0,16,19,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,501,          yb += -(temp - ya - recipb);,10,1,0,1,2,0,0,2,0,15,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,502,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,504,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,505,          result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,506,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,508,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,509,"          expm1(x, hiPrec);",2,1,0,1,2,0,6,0,0,9,17,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,511,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,515,          double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,516,          double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,517,          double denomb = -(denom - 1.0 - ya) + yb;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,518,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,519,          double temp = ratio * HEX_40000000;,8,2,0,0,0,0,2,0,0,14,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,29,520,          double ra = ratio + temp - temp;,12,2,0,0,0,0,0,0,0,14,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,82,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,0,0,0,2,5,0,0,0,0,7,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,71,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,10,5,0,0,0,1,6,0,0,23,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,0,0,0,1,2,0,0,0,0,3,52,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,0,0,0,2,4,0,12,0,0,12,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",6,0,0,1,2,0,6,0,0,13,71,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,18,7,0,1,2,4,6,0,0,35,51,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,14,2,0,0,0,1,0,0,0,18,47,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",0,0,0,1,2,1,0,0,0,4,59,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,1,1,0,1,0,2,0,0,8,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",0,0,0,1,2,1,0,0,0,4,42,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,0,0,0,0,1,0,0,0,0,1,74,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,4,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,0,0,0,2,4,0,0,0,0,6,55,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,14,0,0,1,3,3,0,0,0,18,39,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,1,0,0,0,7,41,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,4,0,0,0,0,0,4,4,0,13,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,212,                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,4,1,0,1,2,0,18,2,0,26,19,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,2,0,0,2,4,0,0,0,0,2,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,0,0,0,0,0,0,0,0,0,0,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,4,3,0,3,6,0,0,0,0,7,34,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,2,0,0,3,6,1,6,0,0,9,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,4,0,0,1,3,0,0,0,0,4,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,0,0,0,0,0,0,0,0,0,0,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",0,0,0,2,5,0,0,0,0,7,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,0,0,0,3,6,0,0,0,0,9,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,11,34,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,0,0,0,2,5,0,0,0,0,7,58,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,2,0,1,1,3,1,0,0,0,7,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",0,0,0,1,2,0,6,0,0,6,31,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,387,        if (nanPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,388,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,18,4,0,1,3,0,0,0,0,23,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,410,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,53,    protected AbstractRealDistribution() { },0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,8,0,0,0,0,1,4,0,0,15,73,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },2,0,0,0,1,0,0,0,0,3,1,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,6,0,0,0,1,1,0,0,0,7,37,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,8,0,0,0,0,2,6,0,0,17,23,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },2,0,0,0,1,0,2,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,69,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,2,0,1,2,0,0,0,0,4,55,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,0,0,0,2,5,0,0,0,0,7,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,16,5,0,3,6,1,4,0,0,27,62,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,8,1,0,0,0,1,0,2,0,13,36,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,169,    },12,0,0,0,1,0,0,4,0,19,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,1,4,0,0,11,35,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,2,1,0,1,3,0,8,0,0,11,16,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,12,4,0,1,2,1,6,0,0,23,18,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,6,0,0,1,2,1,4,4,0,16,37,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,158,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,2,0,0,0,1,2,4,0,0,8,35,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,10,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,14,4,1,1,2,3,4,0,0,36,56,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3776,        },4,2,0,0,1,0,10,0,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,2,2,0,2,5,0,12,0,0,17,56,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,10,2,0,1,2,4,0,0,0,16,44,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,8,2,1,1,2,3,0,0,0,16,44,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,10,1,0,1,2,3,0,0,0,16,47,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,6,3,0,2,5,3,0,0,0,13,54,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,2,0,0,1,3,1,0,0,0,3,14,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,14,2,0,1,2,2,4,2,0,26,18,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,4,1,0,1,3,0,0,0,0,5,20,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,3,0,0,0,5,71,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,2,0,0,2,64,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,8,2,0,0,0,0,0,0,0,11,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,3,0,2,0,21,41,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,4,0,0,0,0,0,0,0,0,5,63,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",2,0,0,1,2,1,4,0,0,9,20,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,15,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,14,6,0,2,5,0,10,0,0,30,40,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,0,0,5,10,0,0,0,0,3,73,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1215,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1218,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1221,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1224,            double xb = ab;,0,0,0,0,0,0,8,0,0,8,15,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1227,            double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,12,3,0,1,2,0,4,0,0,20,59,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,14,4,0,0,0,0,0,0,0,20,35,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1230,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1238,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1239,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1241,                tmp = aa * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1242,                ya = aa + tmp - tmp;,2,0,0,0,0,0,0,0,0,3,20,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1243,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1249,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1250,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1251,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1264,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1265,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1266,        } else {,2,0,0,0,2,0,0,0,0,4,8,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1269,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1270,            lnza = lnza * epsilon + 0.19999954120254515;,10,1,0,0,0,0,0,0,0,12,44,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1274,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,6,1,1,0,0,0,0,0,0,14,22,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1292,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1294,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,8,1,0,0,0,0,0,0,0,11,10,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1301,        a = c;,10,2,0,0,0,0,0,0,0,12,6,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1304,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1305,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1307,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,4,1,1,1,2,0,2,0,0,10,15,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1310,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1312,        b = b + d;,14,1,0,0,0,0,0,0,0,16,10,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1316,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1317,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,16,6,1,1,2,0,0,0,0,30,14,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1321,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1324,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,8,3,0,2,4,2,8,4,0,26,35,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1422,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1431,        if (x == 0) {,0,0,0,1,3,0,12,0,0,12,13,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1456,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1467,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,12,1,0,1,3,1,0,0,0,14,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,6,0,0,7,36,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1517,        if (x < 0) {,0,0,1,1,3,0,0,0,0,6,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1534,        if (y < 8e298 && y > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1535,            double tmp1 = y * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1536,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1537,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1538,        } else {,8,2,0,0,2,0,0,0,0,11,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",2,0,0,1,2,1,6,0,0,9,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1551,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1552,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1555,        double tmp1 = lna * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,33,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1556,        double tmp2 = lna + tmp1 - tmp1;,10,2,0,0,0,1,0,0,0,13,32,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1557,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1558,        lna = tmp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1561,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1564,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1565,        lnb = -(lna - aa - ab);,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1567,        double z = 1.0 / 120.0;,4,1,0,0,0,0,4,2,0,11,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1568,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1569,        z = z * lnb + (1.0 / 6.0);,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1570,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1571,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1572,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1574,"        final double result = exp(lna, z, null);",6,1,1,1,2,1,6,0,0,18,40,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,1576,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3334,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3342,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3343,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3347,        if (y == 0) {,2,0,0,1,3,0,0,0,0,3,13,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3351,        return y;,2,0,1,0,0,1,0,0,0,7,9,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,30,3366,        if (y == x) {,6,1,1,1,3,0,0,0,0,10,13,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,8,1,0,1,2,1,8,2,0,21,58,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,14,2,0,0,0,1,0,0,0,18,49,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,10,5,0,3,6,1,0,0,0,15,84,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,0,0,0,0,5,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,4,1,1,0,0,0,4,0,0,23,37,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,4,0,0,0,0,1,0,0,0,4,25,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,12,6,0,1,3,0,10,0,0,28,24,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,0,0,0,0,0,1,0,0,0,1,45,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,8,3,1,1,2,1,0,0,0,20,36,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,4,2,0,0,0,1,10,0,0,17,35,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,96,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,",0,0,0,0,1,0,0,0,0,1,54,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",12,3,0,1,2,0,0,0,0,17,67,4,0.10256,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,147,            double n = numeratorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,4,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,148,            double m = denominatorDegreesOfFreedom;,4,0,0,0,0,0,4,0,0,8,39,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,150,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",0,0,0,2,5,0,0,0,0,7,49,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,49,"    public BinomialDistribution(int trials, double p) {",0,0,0,1,3,0,0,0,0,4,51,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,50,        if (trials < 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,54,        if (p < 0 || p > 1) {,6,1,0,1,3,0,0,0,0,8,21,12,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,58,        probabilityOfSuccess = p;,4,0,0,0,0,0,0,0,0,5,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,59,        numberOfTrials = trials;,4,0,0,0,0,0,0,0,0,5,24,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,60,    },2,1,0,0,1,0,0,0,0,3,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,144,        if (x <= 0) {,8,0,0,1,3,2,0,4,0,15,13,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,154,        return ret;,8,0,1,0,0,2,0,0,0,12,11,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,104,            double k = FastMath.sqrt((1.0 - p) / p);,6,2,0,2,4,0,4,0,0,12,40,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,105,            double tmp = mu - k * sigma;,4,1,0,0,0,1,6,2,0,14,28,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,106,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,107,                lower = ((int) Math.ceil(tmp)) - 1;,0,0,0,3,6,0,0,0,0,9,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,109,            k = 1.0 / k;,0,0,0,0,0,0,0,0,0,0,12,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,110,            tmp = mu + k * sigma;,6,2,0,0,0,0,4,0,0,12,21,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,111,            if (tmp < upper) {,6,0,0,1,3,0,0,0,0,8,18,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,112,                upper = ((int) Math.ceil(tmp)) - 1;,0,0,0,3,6,0,0,0,0,9,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,138,                        m = n / 2.0;,8,0,0,0,0,0,0,0,0,9,12,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,139,                        ret = (m * (b - m) * x) /,6,1,1,2,4,0,0,0,0,15,25,3,0.08,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,133,            int xm = (lower + upper) / 2;,6,2,0,1,2,0,0,0,0,8,29,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,134,            if (xm < lower || xm > upper) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,143,            double pm = checkedCumulativeProbability(xm);,2,0,0,1,2,0,4,0,0,6,45,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,200,        double result = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,201,        result = cumulativeProbability(argument);,6,1,0,1,2,0,0,0,0,8,41,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,128,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,0,0,0,3,8,0,0,0,0,1,43,3,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,131,            ContinuedFraction fraction = new ContinuedFraction() {,2,0,0,1,3,1,2,0,0,5,54,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,154,            ret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -,6,1,0,4,9,0,6,4,0,17,72,3,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,131,            ContinuedFraction fraction = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,54,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,137,                    if (n % 2 == 0) { // even,0,0,0,1,3,0,0,0,0,4,25,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,142,                        m = (n - 1.0) / 2.0;,0,0,0,1,2,0,0,0,0,3,20,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,143,                        ret = -((a + m) * (a + b + m) * x) /,0,0,0,3,6,0,0,0,0,9,36,4,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,146,                    return ret;,2,0,0,0,0,1,0,0,0,2,11,13,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,151,                    return 1.0;,2,0,0,0,0,1,0,0,0,2,11,7,0.07018,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0,0,1,2,4,0,2,0,0,11,45,6,0.0678,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,50,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,1,2,1,0,2,0,5,68,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,120,        if (Double.isNaN(x) ||,0,4,0,1,3,0,6,0,0,10,22,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,195,        if (Double.isNaN(a) ||,0,2,0,1,3,0,6,0,0,8,22,4,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/special/Beta,31,205,        return ret;,12,2,1,0,0,1,4,0,0,22,11,3,0.06154,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,68,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",16,3,0,0,1,0,2,0,0,21,60,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,70,    },2,0,0,0,1,0,6,0,0,8,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,88,        throws NotStrictlyPositiveException {,0,0,0,0,1,0,0,0,0,1,37,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,52,    private double numericalVariance = Double.NaN;,2,0,0,0,0,0,0,0,0,3,46,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,55,    private boolean numericalVarianceIsCalculated = false;,2,0,0,0,0,1,0,0,0,4,54,2,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,89,        if (numeratorDegreesOfFreedom <= 0) {,4,1,0,1,3,1,0,0,0,6,37,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,93,        if (denominatorDegreesOfFreedom <= 0) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,97,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,59,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,98,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,5,63,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,99,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,108,        double yMax = computeObjectiveValue(max);,2,0,0,1,2,0,4,0,0,6,41,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,99,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,100,        final double sigma = FastMath.sqrt(getNumericalVariance());,0,0,0,2,4,0,0,0,0,6,59,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,101,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,103,        if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,116,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,0,0,0,4,58,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,132,        while (lower + 1 < upper) {,4,2,0,1,3,0,0,0,0,6,27,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0,0,0,2,4,0,0,0,0,6,52,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,830,                if (hiPrec != null) {,6,4,0,1,3,0,0,0,0,10,21,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,834,                return 0.0;,4,1,0,0,0,1,0,0,0,5,11,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,139,            if (chebyshevApplies) {,22,2,0,1,3,0,0,0,0,27,23,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,6,1,0,0,0,0,0,0,0,8,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,2,0,0,0,0,0,0,0,0,3,11,2,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,190,            n++;,2,0,0,0,0,0,0,0,0,3,4,6,0.04082,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,191,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04082,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,79,        int lower = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,80,        if (p == 0.0) {,12,1,0,1,3,0,8,0,0,22,15,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,83,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,88,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,92,        int upper = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,93,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,0,0,0,1,3,0,0,0,0,4,61,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,122,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,45,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,138,        if (upperBound == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,156,"        double x = UnivariateSolverUtils.solve(toSolve,",0,0,0,0,1,0,0,0,0,1,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,52,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,61,"        this(max,",2,0,0,0,1,0,0,0,0,2,9,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,78,                       MaxCountExceededCallback cb) {,6,0,0,0,2,3,0,2,0,11,30,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,40,    private int count = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,79,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,80,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,91,        maximalCount = max;,8,2,0,0,0,0,0,0,0,11,19,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,150,        if (++count > maximalCount) {,8,1,0,1,3,0,0,0,0,11,29,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,153,    },4,1,0,0,1,0,0,0,0,7,1,9,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,159,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,160,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/Incrementor,31,62,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,2,0,2,32,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,73,        if (function == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,76,        final UnivariateSolver solver = new BrentSolver(absoluteAccuracy);,4,0,0,1,2,1,0,4,0,9,66,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,77,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",4,0,0,1,2,1,10,0,0,14,57,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,336,        if (lower >= upper) {,6,1,0,1,3,0,0,0,0,8,21,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,354,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,355,"        verifyInterval(initial, upper);",10,1,0,1,2,0,6,0,0,18,31,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,356,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,53,        super(absoluteAccuracy);,0,0,0,1,2,0,0,0,0,3,24,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,83,        double min = getMin();,2,0,0,1,2,0,2,0,0,4,22,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,84,        double max = getMax();,2,0,0,1,2,0,2,0,0,4,22,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,85,        final double initial = getStartValue();,2,0,0,1,2,1,2,0,0,5,39,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,86,        final double functionValueAccuracy = getFunctionValueAccuracy();,4,0,0,1,2,1,2,0,0,7,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,88,"        verifySequence(min, initial, max);",0,0,0,1,2,0,0,0,0,3,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,91,        double yInitial = computeObjectiveValue(initial);,0,0,0,1,2,0,0,0,0,3,49,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,92,        if (FastMath.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,54,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,97,        double yMin = computeObjectiveValue(min);,2,0,0,1,2,0,4,0,0,6,41,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,98,        if (FastMath.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,31,103,        if (yInitial * yMin < 0) {,16,6,0,1,3,3,0,0,0,26,26,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,37,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,65,"        this(DEFAULT_RELATIVE_ACCURACY,",2,0,0,0,1,0,0,0,0,2,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,92,                                               final double functionValueAccuracy) {,2,0,0,0,2,1,0,0,0,3,37,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,49,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,93,        this.absoluteAccuracy = absoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,94,        this.relativeAccuracy = relativeAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,95,        this.functionValueAccuracy = functionValueAccuracy;,4,0,0,0,0,0,0,0,0,5,51,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,110,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,116,        return searchMax;,2,0,0,0,0,1,6,0,0,8,17,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,122,        return searchStart;,2,0,0,0,0,1,0,0,0,2,19,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,153,        incrementEvaluationCount();,0,0,0,1,2,0,2,0,0,2,27,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,154,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,173,        MathUtils.checkNotNull(f);,0,0,0,1,2,0,6,0,0,6,26,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,176,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,177,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,178,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,179,        function = f;,8,1,0,0,0,0,6,0,0,17,13,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,180,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,181,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,187,"        setup(maxEval, f, min, max, startValue);",0,0,0,1,2,0,12,0,0,12,40,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,190,        return doSolve();,0,0,0,1,2,1,0,0,0,4,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,268,"        UnivariateSolverUtils.verifySequence(lower, initial, upper);",0,0,0,1,2,0,10,0,0,10,60,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,269,    },4,1,1,0,1,0,0,0,0,10,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,294,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,297,        },2,0,0,0,1,0,0,0,0,3,1,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,124,        final double small = 1e-50;,2,0,0,0,0,1,0,0,0,3,27,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,125,"        double hPrev = getA(0, x);",0,0,0,1,2,0,0,0,0,3,26,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,2,5,0,0,0,0,7,42,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,132,        int n = 1;,2,2,0,0,0,0,0,0,0,4,10,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,133,        double dPrev = 0.0;,0,0,0,0,0,0,0,0,0,0,19,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,135,        double q1 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,136,        double cPrev = hPrev;,0,0,0,0,0,0,0,0,0,0,21,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,137,        double hN = hPrev;,2,0,0,0,0,0,0,0,0,2,18,8,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,139,        while (n < maxIterations) {,4,1,0,1,3,0,0,0,0,5,27,4,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,140,"            final double a = getA(n, x);",10,2,0,1,2,4,6,0,0,23,28,1,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,141,"            final double b = getB(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,145,            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {,0,0,0,3,7,0,0,0,0,10,53,4,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,8,1,0,0,0,1,0,0,0,10,38,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,2,1,0,0,0,0,8,0,0,11,20,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,172,            if (Double.isInfinite(hN)) {,0,0,0,2,5,0,6,0,0,6,28,7,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,176,            if (Double.isNaN(hN)) {,0,0,0,2,5,0,6,0,0,6,23,7,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,181,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,4,2,0,2,5,0,4,0,0,10,43,6,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,265,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,18,0,0,27,53,3,0.03774,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3002,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,301,        long xInt = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,302,        long yInt = Double.doubleToLongBits(y);,4,1,1,1,2,0,6,0,0,16,39,1,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,305,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,308,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,312,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,314,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,1,0,2,4,1,8,0,0,9,55,6,0.03604,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,63,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,70,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,31,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,31,257,        if (o == null) {,4,1,0,1,3,0,0,0,0,5,16,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,31,260,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,111,        double lowerBound = getSupportLowerBound();,0,0,0,1,2,0,0,0,0,3,43,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,112,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,116,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,117,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,75,        if (p < 0.0 || p > 1.0) {,10,3,0,1,3,0,0,0,0,13,25,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,98,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,99,            double sum = lanczos(x);,2,0,0,1,2,0,4,0,0,6,24,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,100,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,0,0,0,3,6,0,0,0,0,9,44,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,95,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,0.02878,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,105,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.02878,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,350,        double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,5,0.02685,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.02685,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,352,            sum = sum + (LANCZOS[i] / (x + i));,8,3,1,3,6,0,0,0,0,16,35,6,0.02685,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,354,        return sum + LANCZOS[0];,0,0,0,1,2,1,0,0,0,4,24,4,0.02685,0,0,-1
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,31,107,        if (p < 0.0 || p > 1.0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.02632,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,375,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.02516,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,45,    private static final double[] LANCZOS = {,0,0,0,1,3,0,0,0,0,4,41,4,0.02469,0,0,-1
defect4j,math,org/apache/commons/math3/special/Gamma,31,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,6,2,0,1,2,3,4,0,0,15,82,2,0.02469,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.02395,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.02353,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,922,            result = tempC*z + tempB + tempA;,16,6,1,0,0,0,0,0,0,26,33,6,0.02326,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,126,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,129,    private SecureRandom secRand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,169,    },0,0,0,0,1,0,0,0,0,1,1,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,2,4,0,0,10,35,1,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,140,        double qi = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,141,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,151,        while (qi < 1) {,0,0,0,1,3,0,0,0,0,4,16,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",2,1,0,2,4,0,14,0,0,18,58,6,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,153,            ra.addElement(qi);,0,0,0,1,2,0,6,0,0,6,18,7,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,157,        EXPONENTIAL_SA_QI = ra.getElements();,2,0,0,1,2,0,4,0,0,7,37,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,31,158,    },0,0,0,0,1,0,4,0,0,4,1,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,31,35,    static final long[] FACTORIALS = new long[] {,8,1,0,2,5,2,0,0,0,12,45,1,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,31,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,31,303,        if (n > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,31,306,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3334,        if (x != x) { // NaN,14,3,0,1,3,0,0,0,0,19,20,3,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,12,6,0,1,3,0,2,0,0,21,46,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3342,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3343,        if (x < 0 && y != x) {,14,4,1,1,3,0,4,0,0,27,22,3,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3347,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3351,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3365,        y = floor(x);,0,0,0,1,2,0,0,0,0,3,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3366,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,31,3367,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,93,    private float contractionCriteria = 2.5f;,2,0,0,0,0,1,0,0,0,3,41,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,103,    private float expansionFactor = 2.0f;,0,0,1,0,0,0,0,0,0,6,37,8,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,109,    private int expansionMode = MULTIPLICATIVE_MODE;,22,7,0,0,0,1,0,0,0,31,48,1,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,115,    private int initialCapacity = 16;,4,0,0,0,0,1,0,0,0,6,33,0,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,126,    private int numElements = 0;,2,0,0,0,0,1,0,0,0,3,28,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,134,    private int startIndex = 0;,2,0,0,0,0,1,0,0,0,3,27,2,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,160,    public ResizableDoubleArray(int initialCapacity) {,0,0,0,1,3,0,0,0,0,4,50,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,161,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,162,        internalArray = new double[this.initialCapacity];,4,0,0,1,2,0,0,0,0,5,49,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,163,    },16,1,1,0,1,1,10,0,0,42,1,0,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,301,        numElements++;,2,0,0,0,0,0,0,0,0,3,14,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,302,        if ((startIndex + numElements) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,56,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,303,            expand();,0,0,0,1,2,0,0,0,0,3,9,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,305,        internalArray[startIndex + (numElements - 1)] = value;,8,2,1,2,4,0,0,2,0,15,54,3,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,306,        if (shouldContract()) {,0,0,0,2,5,0,2,0,0,2,23,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,307,            contract();,0,0,0,1,2,0,2,0,0,2,11,7,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,309,    },0,0,0,0,1,0,0,0,0,1,1,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,432,        double[] tempArray = new double[numElements + 1];,4,1,0,2,4,0,0,0,0,5,49,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,435,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,1,2,0,18,0,0,18,71,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,436,        internalArray = tempArray;,0,1,1,0,0,0,0,0,0,5,26,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,439,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,440,    },0,0,0,0,1,0,0,0,0,1,1,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,532,        int newSize = 0;,4,2,1,0,0,0,0,0,0,18,16,3,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,20,7,0,1,3,0,0,0,0,27,43,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,534,            newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);,10,1,0,2,4,0,4,0,0,17,70,0,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,538,        double[] tempArray = new double[newSize];,0,0,0,2,4,0,0,0,0,6,41,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",4,0,0,1,2,0,8,0,0,12,71,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,542,        internalArray = tempArray;,10,1,0,0,0,0,0,0,0,12,26,3,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,543,    },0,0,0,0,1,0,0,0,0,1,1,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,599,        double[] elementArray = new double[numElements];,2,0,1,2,4,0,0,0,0,4,48,5,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",2,1,1,0,1,0,10,0,0,18,61,3,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,602,        return elementArray;,2,0,0,0,0,1,0,0,0,2,20,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,755,        if (initialCapacity > 0) {,2,1,0,1,3,0,0,0,0,3,26,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,756,            synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,757,                this.initialCapacity = initialCapacity;,4,0,0,0,0,0,0,0,0,5,39,8,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,758,            },0,0,0,0,1,0,0,0,0,1,1,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,764,    },0,0,0,0,1,0,0,0,0,1,1,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,31,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,0,0,0,5,43,4,0.016,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",0,0,0,4,8,0,0,0,0,12,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,0,0,0,1,2,0,0,0,0,3,72,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,0,0,0,2,4,1,0,0,0,7,92,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,0,0,0,4,8,1,0,0,0,13,47,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,0,6,2,0,10,54,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,4,0,0,1,2,0,0,0,0,5,54,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,        final double ca1        = SPLIT_FACTOR * a1;,12,1,0,0,0,1,0,0,0,15,44,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,        final double a1High     = ca1 - (ca1 - a1);,16,3,1,1,2,1,0,0,0,24,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,        final double a1Low      = a1 - a1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,        final double ca2        = SPLIT_FACTOR * a2;,6,1,1,0,0,1,0,0,0,13,44,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,0,0,0,5,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,        final double cb2        = SPLIT_FACTOR * b2;,6,0,0,0,0,4,0,4,0,15,44,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,        final double b2Low      = b2 - b2High;,12,4,1,0,0,1,12,0,0,34,38,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,9,0,3,6,1,0,0,0,32,110,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,699,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,        double result = s12High + (prod1Low + prod2Low + s12Low);,2,0,1,1,2,0,0,0,0,5,57,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,706,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,        return result;,0,0,0,0,0,1,4,0,0,4,14,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,        final double a1High     = ca1 - (ca1 - a1);,8,1,0,1,2,0,0,0,0,9,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,        final double a1Low      = a1 - a1High;,14,3,0,0,0,0,6,0,0,23,38,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,758,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,        final double prod1High  = a1 * b1;,16,2,0,0,0,1,0,0,0,21,34,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,6,0,0,12,38,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,770,        final double b2High     = cb2 - (cb2 - b2);,16,2,0,1,2,1,4,4,0,28,43,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,771,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,        final double prod2High  = a2 * b2;,8,2,0,0,0,0,0,0,0,10,34,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,775,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,778,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,779,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,        final double a3Low      = a3 - a3High;,8,2,0,0,0,0,0,0,0,10,38,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,781,        final double cb3        = SPLIT_FACTOR * b3;,8,4,0,0,0,0,6,2,0,20,44,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,782,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,783,        final double b3Low      = b3 - b3High;,4,0,1,0,0,1,12,0,0,19,38,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,786,        final double prod3High  = a3 * b3;,2,0,0,0,0,0,0,0,0,2,34,9,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,787,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,790,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,791,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,792,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,3,0,3,6,3,0,0,0,19,86,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,795,        final double s123High   = s12High + prod3High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,796,        final double s123Prime  = s123High - prod3High;,14,1,0,0,0,0,0,0,0,17,47,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,797,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0,0,0,3,6,0,0,0,0,9,87,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,801,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,803,        if (Double.isNaN(result)) {,10,0,0,2,5,2,0,2,0,16,27,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathArrays,32,809,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,50,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,51,    },34,10,0,0,1,4,14,0,0,65,1,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,395,        if (barycenter == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,398,        return barycenter;,2,0,0,0,0,1,8,0,0,11,18,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,482,            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);,0,0,0,1,2,0,0,0,0,3,72,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,485,"            recurseSides(node.getPlus(), split.getPlus(), sides);",0,0,0,3,6,0,12,0,0,12,53,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,488,            if (!(sides.plusFound() && sides.minusFound())) {,4,0,0,4,9,0,12,0,0,18,49,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,489,"                recurseSides(node.getMinus(), split.getMinus(), sides);",0,0,0,3,6,0,12,0,0,12,55,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,503,                    sides.rememberMinusFound();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,95,"    public Vector3D(double x, double y, double z) {",8,0,0,1,3,1,0,0,0,9,47,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,96,        this.x = x;,0,0,0,0,0,0,0,0,0,0,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,97,        this.y = y;,2,0,1,0,0,0,2,0,0,8,11,11,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,98,        this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,138,        this.x = a * u.x;,10,1,0,0,0,0,0,0,0,13,17,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,139,        this.y = a * u.y;,12,2,0,0,0,0,0,0,0,15,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,140,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,141,    },2,0,0,0,1,0,0,0,0,3,1,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",14,0,0,1,3,1,6,6,0,28,65,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",10,1,0,1,2,0,12,0,0,24,58,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",0,0,0,1,2,0,0,0,0,3,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",12,2,0,1,2,3,0,4,0,22,60,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,206,        return y;,2,0,0,0,0,1,4,0,0,6,9,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,275,        final Vector3D v3 = (Vector3D) v;,8,0,0,1,2,1,0,4,0,13,33,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",22,3,0,1,2,1,0,2,0,28,50,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,321,        double threshold = 0.6 * getNorm();,0,0,0,1,2,0,0,0,0,3,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,322,        if (threshold == 0) {,2,0,0,1,3,0,0,0,0,2,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,326,        if ((x >= -threshold) && (x <= threshold)) {,8,3,0,3,7,0,0,0,0,12,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,14,4,0,1,2,0,4,0,0,23,51,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,328,"            return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,329,        } else if ((y >= -threshold) && (y <= threshold)) {,8,3,0,3,8,0,0,0,0,12,51,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,330,            double inverse  = 1 / FastMath.sqrt(x * x + z * z);,18,5,0,1,2,0,4,0,0,27,51,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,462,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,68,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,519,        return v1.crossProduct(v2);,0,0,0,1,2,1,6,0,0,6,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,118,        getTree(true).visit(new FacetsContributionVisitor());,0,0,0,3,6,0,4,2,0,7,53,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,42,"public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,78,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,54,"    public Line(final Vector3D p1, final Vector3D p2) {",10,0,0,1,3,4,0,8,0,22,51,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,55,"        reset(p1, p2);",0,1,1,1,2,0,6,0,0,14,14,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,74,        final Vector3D delta = p2.subtract(p1);,4,0,0,1,2,4,6,2,0,16,39,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,75,        final double norm2 = delta.getNormSq();,6,1,0,1,2,1,4,0,0,13,39,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",0,0,0,2,4,0,0,0,0,6,65,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,94,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,120,"        return new Vector3D(1.0, zero, abscissa, direction);",10,3,0,1,2,1,0,2,0,15,52,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,134,        return pointAt(((Vector1D) point).getX());,2,0,0,4,8,1,4,2,0,8,42,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,55,    public Plane(final Vector3D normal) {,6,0,1,1,3,2,0,2,0,13,37,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,56,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,57,        originOffset = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,58,        setFrame();,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,66,"    public Plane(final Vector3D p, final Vector3D normal) {",6,0,0,1,3,3,0,4,0,13,55,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,67,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,68,        originOffset = -p.dotProduct(w);,6,1,0,1,2,0,6,0,0,16,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,69,        setFrame();,8,0,0,1,2,0,0,0,0,8,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,90,    public Plane(final Plane plane) {,0,0,0,1,3,0,0,0,0,4,33,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,91,        originOffset = plane.originOffset;,6,0,0,0,0,0,0,0,0,7,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,92,        origin = plane.origin;,6,0,0,0,0,0,0,0,0,7,22,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,93,        u      = plane.u;,6,0,0,0,0,0,0,0,0,7,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,94,        v      = plane.v;,10,0,0,0,0,0,0,0,0,11,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,95,        w      = plane.w;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,105,        return new Plane(this);,0,0,0,1,2,1,0,2,0,2,23,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,137,        final double norm = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,37,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,138,        if (norm < 1.0e-10) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,141,"        w = new Vector3D(1.0 / norm, normal);",10,4,1,1,2,0,0,2,0,21,37,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,147,"        origin = new Vector3D(-originOffset, w);",6,0,0,1,2,0,0,2,0,10,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,148,        u = w.orthogonal();,2,0,0,1,2,0,4,0,0,7,19,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,149,"        v = Vector3D.crossProduct(w, u);",2,0,0,1,2,0,8,0,0,11,32,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,171,        return w;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,225,"        return new Vector2D(point.dotProduct(u), point.dotProduct(v));",0,0,0,3,6,1,12,2,0,14,62,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,235,        final Vector2D p2D = (Vector2D) point;,4,0,0,1,2,1,0,4,0,9,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,236,"        return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);",0,0,1,3,6,1,4,0,0,13,68,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,322,"        final Vector3D direction = Vector3D.crossProduct(w, other.w);",0,0,0,1,2,0,0,0,0,3,61,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,323,        if (direction.getNorm() < 1.0e-10) {,0,1,0,2,5,0,4,0,0,5,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,326,"        final Vector3D point = intersection(this, other, new Plane(direction));",8,0,0,2,4,1,4,4,0,18,71,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,327,"        return new Line(point, point.add(direction));",8,0,1,2,4,1,6,2,0,19,45,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,339,        final double a1 = plane1.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,340,        final double b1 = plane1.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,341,        final double c1 = plane1.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,342,        final double d1 = plane1.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,344,        final double a2 = plane2.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,345,        final double b2 = plane2.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,346,        final double c2 = plane2.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,347,        final double d2 = plane2.originOffset;,14,1,0,0,0,1,0,0,0,17,38,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,349,        final double a3 = plane3.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,350,        final double b3 = plane3.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,351,        final double c3 = plane3.w.getZ();,4,2,0,1,2,0,4,0,0,11,34,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,352,        final double d3 = plane3.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,356,        final double a23         = b2 * c3 - b3 * c2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,357,        final double b23         = c2 * a3 - c3 * a2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,358,        final double c23         = a2 * b3 - a3 * b2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,359,        final double determinant = a1 * a23 + b1 * b23 + c1 * c23;,14,5,0,0,0,1,0,0,0,20,58,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,360,        if (FastMath.abs(determinant) < 1.0e-10) {,0,2,0,2,5,0,12,0,0,14,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,364,        final double r = 1.0 / determinant;,4,1,0,0,0,1,0,0,0,6,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,365,        return new Vector3D(,0,0,0,0,1,1,0,2,0,2,20,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,376,"        return new SubPlane(this, new PolygonsSet());",0,0,0,2,4,1,0,0,0,7,45,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,34,"public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,92,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,42,"        super(hyperplane, remainingRegion);",4,0,0,1,2,0,0,0,0,4,35,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,43,    },4,1,0,0,1,0,0,0,0,5,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,49,"        return new SubPlane(hyperplane, remainingRegion);",4,0,0,1,2,1,0,2,0,6,49,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,56,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,57,        final Plane thisPlane  = (Plane) getHyperplane();,0,0,0,2,4,0,0,0,0,6,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,58,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,60,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,74,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,75,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,76,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",2,0,0,3,6,0,12,2,0,16,85,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,77,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,0,0,0,3,7,0,0,0,0,10,52,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,78,            final Vector2D tmp = p;,0,0,0,0,0,0,0,0,0,0,23,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,79,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,80,            q           = tmp;,4,0,0,0,0,0,0,0,0,5,18,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,82,        final org.apache.commons.math3.geometry.euclidean.twod.Line line2D =,22,4,0,0,0,1,16,0,0,44,68,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,86,        return getRemainingRegion().side(line2D);,2,0,0,2,4,1,6,0,0,9,41,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,99,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,100,        final Plane thisPlane  = (Plane) getHyperplane();,2,0,0,2,4,1,2,4,0,9,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,101,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,103,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,112,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,113,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,114,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",4,0,0,3,6,0,18,2,0,25,85,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,115,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,2,1,0,3,7,0,8,0,0,12,52,0,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,116,            final Vector2D tmp = p;,4,0,0,0,0,1,0,2,0,7,23,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,117,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,118,            q           = tmp;,10,0,0,0,0,0,8,0,0,20,18,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,120,        final SubHyperplane<Euclidean2D> l2DMinus =,2,0,0,0,0,1,0,4,0,7,43,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,122,        final SubHyperplane<Euclidean2D> l2DPlus =,2,0,0,0,0,1,0,4,0,7,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,125,        final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus);,0,0,0,3,6,0,0,0,0,9,91,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,126,        final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?,2,0,0,3,6,1,8,4,0,15,90,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,131,        final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?,12,1,0,3,6,1,8,4,0,27,91,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,136,"        return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),",0,0,0,3,7,1,0,0,0,11,105,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,137,        public FacetsContributionVisitor() {,0,0,0,1,3,0,0,0,0,4,36,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,138,            setSize(0);,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,139,"            setBarycenter(new Vector3D(0, 0, 0));",0,0,0,2,4,0,2,2,0,4,37,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,140,        },2,0,0,0,1,1,0,0,0,3,1,2,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,144,            return Order.MINUS_SUB_PLUS;,4,0,0,0,0,1,0,0,0,4,28,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,150,            final BoundaryAttribute<Euclidean3D> attribute =,2,0,0,0,0,1,0,4,0,7,48,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,152,            if (attribute.getPlusOutside() != null) {,0,1,0,2,5,0,4,0,0,5,41,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,153,"                addContribution(attribute.getPlusOutside(), false);",0,0,1,2,4,0,4,0,0,6,51,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,155,            if (attribute.getPlusInside() != null) {,0,0,0,2,5,0,0,0,0,7,40,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,158,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,162,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,170,            final Region<Euclidean2D> polygon = ((SubPlane) facet).getRemainingRegion();,0,0,0,3,6,0,0,0,0,9,76,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,171,            final double area    = polygon.getSize();,2,0,0,1,2,1,4,0,0,7,41,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,173,            if (Double.isInfinite(area)) {,0,0,0,2,5,0,6,0,0,6,30,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,178,                final Plane    plane  = (Plane) facet.getHyperplane();,0,0,0,2,4,0,0,0,0,6,54,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,179,                final Vector3D facetB = plane.toSpace(polygon.getBarycenter());,2,0,0,2,4,0,0,0,0,3,63,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,180,                double   scaled = area * facetB.dotProduct(plane.getNormal());,4,1,0,2,4,0,8,0,0,13,62,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,181,                if (reversed) {,2,0,0,1,3,0,0,0,0,2,15,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,185,                setSize(getSize() + scaled);,2,1,0,2,4,0,4,0,0,7,28,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,186,"                setBarycenter(new Vector3D(1.0, (Vector3D) getBarycenter(), scaled, facetB));",6,1,0,4,8,0,4,4,0,15,77,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,190,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,242,        final Line otherL = (Line) other;,0,0,0,1,2,0,0,0,0,3,33,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,243,        return (sin * otherL.sin + cos * otherL.cos) >= 0.0;,8,1,0,1,2,1,0,0,0,11,52,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,132,        final Vector2D[][] v = getVertices();,2,0,0,3,6,1,2,2,0,7,37,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,134,        if (v.length == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,151,            double sum  = 0;,1,0,0,0,0,0,0,0,0,1,16,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,152,            double sumX = 0;,2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,153,            double sumY = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,155,            for (Vector2D[] loop : v) {,4,0,0,2,5,0,0,2,0,6,27,7,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,156,                double x1 = loop[loop.length - 1].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,157,                double y1 = loop[loop.length - 1].getY();,8,1,1,2,4,0,2,0,0,14,41,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,158,                for (final Vector2D point : loop) {,0,0,0,1,3,0,0,0,0,4,35,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,159,                    final double x0 = x1;,14,2,0,0,0,1,6,0,0,25,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,160,                    final double y0 = y1;,4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,161,                    x1 = point.getX();,4,0,0,1,2,3,4,0,0,12,18,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,162,                    y1 = point.getY();,2,0,0,1,2,0,4,0,0,7,18,11,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,163,                    final double factor = x0 * y1 - y0 * x1;,10,3,0,0,0,1,0,0,0,14,40,11,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,164,                    sum  += factor;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,165,                    sumX += factor * (x0 + x1);,8,2,0,1,2,0,0,0,0,11,27,11,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,166,                    sumY += factor * (y0 + y1);,10,2,0,1,2,0,0,0,0,14,27,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,170,            if (sum < 0) {,4,1,0,1,3,3,0,4,0,12,14,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,175,                setSize(sum / 2);,2,1,0,1,2,0,2,0,0,5,17,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,176,"                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));",8,4,0,4,8,0,2,2,0,16,64,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,510,                    final Skew s = right.left.skew;,2,2,1,0,0,0,0,0,0,13,31,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,511,                    right.rotateCW();,0,0,0,1,2,0,4,0,0,4,17,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,512,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,513,                    switch (s) {,2,0,0,1,3,0,0,0,0,2,12,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,523,                        left.skew  = Skew.BALANCED;,8,0,0,0,0,0,0,0,0,9,27,10,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,524,                        right.skew = Skew.BALANCED;,2,1,1,0,0,0,0,0,0,8,27,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,526,                    skew = Skew.BALANCED;,8,0,1,0,0,1,0,4,0,16,21,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,527,                    return true;,0,0,0,0,0,1,0,0,0,1,12,9,0.16667,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2458,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0,0,0,4,8,0,0,0,0,12,89,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2570,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,198,                plusList.add(other);,2,0,0,1,2,3,6,4,0,15,20,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,199,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,500,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,9,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,501,                    skew      = Skew.BALANCED;,6,0,0,0,0,0,0,0,0,7,26,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,502,                    left.skew = Skew.BALANCED;,10,0,0,0,0,0,0,0,0,11,26,1,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,503,                    return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,504,                } else if (right.skew == Skew.BALANCED) {,8,1,0,1,4,0,0,0,0,9,41,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2445,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2446,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2447,            negate = true;,32,3,1,0,0,1,4,0,0,59,14,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2557,            final double pia = 1.5707963267948966 * 2;,0,0,0,0,0,0,0,0,0,0,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2558,            final double pib = 6.123233995736766E-17 * 2;,0,0,0,0,0,0,0,0,0,0,45,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2560,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2561,            zb = -(za - pia + result);,8,2,0,1,2,0,0,0,0,12,26,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2562,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2564,            result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2565,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,443,                skew = Skew.BALANCED;,10,0,0,0,0,0,0,0,0,12,21,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,444,                return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,461,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,9,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,462,                    skew      = Skew.BALANCED;,8,0,0,0,0,1,4,2,0,16,26,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,463,                    left.skew = Skew.BALANCED;,10,0,0,0,0,0,4,0,0,16,26,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,364,        long xl = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,37,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,365,        xl = xl & MASK_30BITS; // Drop low order bits,8,2,0,0,0,0,6,0,0,17,45,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,366,        return Double.longBitsToDouble(xl);,6,0,0,1,2,1,6,0,0,12,35,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2306,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2436,        boolean negate = false;,4,0,0,0,0,1,0,4,0,10,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,56,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2443,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2450,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2455,        if (xa < 1) {,4,1,0,1,3,3,0,0,0,8,13,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,6,2,1,1,2,0,0,0,0,12,40,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,16,5,1,2,4,1,0,0,0,27,50,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2463,        epsB += xb - TANGENT_TABLE_B[idx];,8,2,1,1,2,0,4,0,0,20,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2465,        double temp = epsA + epsB;,8,2,0,0,0,0,0,0,0,10,26,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2466,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2467,        epsA = temp;,0,0,0,0,0,0,0,0,0,0,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2470,        temp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2471,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2472,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,10,25,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2473,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2474,        xb += yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2477,        if (idx == 0) {,6,2,0,1,3,1,2,0,0,13,15,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,2,0,0,1,2,0,0,0,0,2,41,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2486,            double za = 1d + temp2;,4,1,1,0,0,0,0,0,0,12,23,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2487,            double zb = -(za - 1d - temp2);,10,1,0,1,2,0,0,0,0,13,31,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,14,4,1,2,4,0,0,0,0,28,62,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2489,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2490,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2491,            za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2493,            zb += xb * TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2494,            ya = epsA / za;,8,1,0,0,0,1,4,0,0,15,15,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2496,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2497,            final double yaa = (ya + temp) - temp;,2,1,0,1,2,0,4,0,0,7,38,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2498,            final double yab = ya - yaa;,12,2,0,0,0,1,0,0,0,16,28,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2500,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2501,            final double zaa = (za + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2502,            final double zab = za - zaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,6,0,0,38,65,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2507,            yb += -epsA * zb / za / za;,0,0,0,0,0,0,0,0,0,0,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2508,            yb += epsB / za;,6,1,0,0,0,0,0,0,0,8,16,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2512,        epsA = ya;,0,0,0,0,0,0,0,0,0,0,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2513,        epsB = yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2516,        final double epsA2 = epsA * epsA;,6,1,0,0,0,1,0,0,0,8,33,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2527,        yb = 0.07490822288864472;,0,0,0,0,0,0,0,0,0,0,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2528,        yb = yb * epsA2 + -0.09088450866185192;,14,4,0,0,0,0,0,0,0,20,39,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2529,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2530,        yb = yb * epsA2 + -0.1428571423679182;,24,6,1,0,0,0,6,0,0,43,38,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2531,        yb = yb * epsA2 + 0.19999999999923582;,8,2,1,0,0,0,8,0,0,22,38,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2532,        yb = yb * epsA2 + -0.33333333333333287;,14,3,0,0,0,0,0,0,0,19,39,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2533,        yb = yb * epsA2 * epsA;,10,1,0,0,0,2,0,0,0,14,23,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2536,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2538,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2539,        yb = -(temp - ya - yb);,14,2,0,1,2,0,0,0,0,19,23,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2540,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2543,        yb += epsB / (1d + epsA * epsA);,8,3,0,1,2,0,0,0,0,13,32,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2546,        double za = EIGHTHS[idx] + ya;,4,1,1,1,2,0,0,0,0,9,30,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2547,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2548,        temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2549,        zb += -(temp - za - yb);,6,1,0,1,2,1,0,0,0,8,24,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2550,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2552,        double result = za + zb;,8,1,0,0,0,0,2,2,0,13,24,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2553,        double resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,10,37,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2555,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2569,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2573,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2671,        final double r = y / x;,6,1,0,0,0,1,0,0,0,8,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,2,0,0,2,5,1,6,0,0,9,70,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2676,        double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2677,        double rb = r - ra;,8,2,0,0,0,0,0,0,0,10,19,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2680,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2681,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,22,9,0,1,2,0,0,0,0,32,54,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2685,        final double temp = ra + rb;,12,2,0,0,0,2,4,0,0,20,28,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2686,        rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2687,        ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2694,"        final double result = atan(ra, rb, x < 0);",4,1,0,1,2,1,10,0,0,16,42,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2696,        return result;,2,1,0,0,0,1,14,0,0,18,14,13,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,3056,        if ((n > -1023) && (n < 1024)) {,6,3,0,3,7,0,0,0,0,10,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,32,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,2,0,0,1,2,0,4,0,0,6,20,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",6,0,0,2,5,2,0,4,0,11,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,4,0,0,1,2,0,0,0,0,4,21,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,0,1,3,0,0,2,0,4,15,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,0,0,0,0,4,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",0,0,0,2,4,0,0,0,0,6,74,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,        final double[] p = getKey();,10,3,0,2,4,1,4,0,0,18,28,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,63,        return key;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,4,1,1,1,2,0,6,0,0,16,44,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,1,1,3,0,8,0,0,16,50,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,        double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,2,0,0,2,5,0,8,0,0,11,51,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,            sum -= coefficient;,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,347,            columnsToDrop.add(col);,0,0,0,1,2,0,0,0,0,3,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,181,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,224,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack",2,1,0,2,4,0,8,0,0,12,73,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,14,2,0,1,2,2,0,8,0,26,55,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,333,        columnsToDrop.add(0);,0,0,0,1,2,0,4,0,0,4,21,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0,0,0,3,7,0,0,0,0,10,82,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,337,"            final double entry = tableau.getEntry(0, i);",10,3,0,1,2,0,0,0,0,13,44,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,0,0,2,5,0,0,0,0,7,50,4,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,3,2,4,0,19,55,1,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,345,          int col = i + getArtificialVariableOffset();,0,0,0,1,2,0,0,0,0,3,44,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,346,          if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0,0,0,7,14,0,0,0,0,21,83,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,352,        for (int i = 1; i < getHeight(); i++) {,2,0,1,2,5,1,0,0,0,9,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,353,          int col = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,354,          for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,0,0,0,7,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0,0,0,3,6,0,0,0,0,9,46,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,0,0,0,2,5,0,0,0,0,7,53,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,362,          columnLabels.remove((int) columnsToDrop.get(i));,20,10,1,3,6,0,4,0,0,46,48,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,2,0,0,2,32,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,367,    },16,1,1,0,1,0,20,2,0,46,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,33,257,        if (o == null) {,8,1,0,1,3,3,0,0,0,12,16,1,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/util/MathUtils,33,260,    },4,0,0,0,1,0,0,0,0,5,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",2,0,0,0,1,3,0,0,0,5,75,2,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,75,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,262,        if (data == null) {,6,3,0,1,3,0,8,0,0,17,19,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,263,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,266,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,269,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,270,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,271,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,275,            final int nCols = subMatrix[0].length;,6,0,1,1,2,1,16,0,0,27,38,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,276,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,279,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,280,            for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,281,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,286,        } else {,8,0,0,0,2,0,0,0,0,8,8,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,290,    },10,3,0,0,1,0,8,0,0,22,1,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,526,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,0,0,0,3,23,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,527,    },4,0,0,0,1,0,0,4,0,10,1,0,0.05882,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,174,            doIteration(tableau);,4,1,0,1,2,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,41,"        this(point, value, true);",4,0,0,1,2,0,0,0,0,5,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,55,        super(copyArray ? ((point == null) ? null :,0,0,0,1,4,0,0,0,0,5,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,59,    },8,1,0,0,1,0,0,0,0,10,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,42,"    public Pair(K k, V v) {",0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,43,        key = k;,16,1,0,0,0,0,0,0,0,19,8,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,44,        value = v;,0,0,0,0,0,0,0,0,0,0,10,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,45,    },6,0,0,0,1,0,0,0,0,7,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,317,                return null;,2,0,0,0,0,1,0,0,0,2,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,320,        return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,10,1,0,1,2,0,10,2,0,23,72,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,0,0,0,1,2,0,0,0,0,3,92,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,0,0,2,4,0,0,0,0,6,102,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,401,      Set<Integer> basicRows = new HashSet<Integer>();,0,0,0,1,2,0,0,0,0,3,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,403,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",4,1,0,1,2,0,4,0,0,10,45,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,405,          if (colIndex < 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,409,          Integer basicRow = getBasicRow(colIndex);,10,1,0,1,2,0,10,2,0,24,41,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,410,          if (basicRow != null && basicRow == 0) {,4,3,0,1,3,0,10,0,0,17,40,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,415,          } else if (basicRows.contains(basicRow)) {,4,0,0,2,6,0,0,2,0,6,42,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,420,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,10,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,421,              coefficients[i] =,12,1,0,1,2,0,0,0,0,16,17,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,426,"      return new PointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,66,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",4,1,0,2,4,1,4,2,0,12,81,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,448,        if (v instanceof ArrayRealVector) {,0,1,1,1,3,0,0,0,0,5,35,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,449,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,450,            checkVectorDimensions(vData.length);,0,0,0,1,2,0,0,0,0,3,36,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,451,            double dot = 0;,4,0,0,0,0,0,0,0,0,5,15,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,452,            for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,453,                dot += data[i] * vData[i];,2,1,1,2,4,0,0,0,0,12,26,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,455,            return dot;,2,0,0,0,0,1,0,0,0,2,11,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,173,        while (!tableau.isOptimal()) {,2,0,0,2,5,0,4,4,0,12,30,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,16,0,0,17,82,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,201,        return tableau.getSolution();,2,0,0,1,2,1,16,0,0,19,29,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,116,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,196,        tableau.dropPhase1Objective();,0,0,0,1,2,0,4,0,0,4,30,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,198,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,4,0,0,5,30,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,311,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,312,        for (int i = 0; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,313,"            final double entry = getEntry(i, col);",4,1,0,1,2,1,10,0,0,16,38,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,314,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",2,2,0,3,7,0,8,0,0,12,60,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,315,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,316,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,328,        if (getNumObjectiveFunctions() == 1) {,0,0,0,2,5,0,0,0,0,7,38,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,385,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,439,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,3,0,0,0,10,38,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,440,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,442,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,456,"        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)",4,1,0,1,3,0,16,0,0,21,65,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,458,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,127,        if (++iterations > maxIterations) {,6,1,0,1,3,0,4,0,0,13,35,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,130,    },2,0,0,0,1,0,0,0,0,2,1,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,70,        double minValue = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,71,        Integer minPos = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,73,"            final double entry = tableau.getEntry(0, i);",8,0,0,1,2,2,6,0,0,16,44,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {",0,0,0,2,5,0,0,0,0,7,56,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,75,                minValue = entry;,4,0,0,0,0,0,0,0,0,5,17,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,76,                minPos = i;,0,0,0,0,0,0,0,0,0,0,11,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,79,        return minPos;,14,4,0,0,0,2,4,0,0,23,14,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,90,        List<Integer> minRatioPositions = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,59,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,91,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,92,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,0,0,2,4,0,0,0,0,2,63,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,94,"            final double entry = tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",8,1,0,2,5,0,0,2,0,11,50,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,97,                final double ratio = rhs / entry;,6,1,0,0,0,1,0,0,0,8,33,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);",2,0,0,1,2,1,10,0,0,13,62,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,99,                if (cmp == 0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,101,                } else if (cmp < 0) {,2,1,0,1,4,0,0,0,0,3,21,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,102,                    minRatio = ratio;,8,1,1,0,0,0,8,0,0,24,17,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,103,                    minRatioPositions = new ArrayList<Integer>();,6,1,0,1,2,1,0,0,0,8,45,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,109,        if (minRatioPositions.size() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,111,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,125,        return minRatioPositions.get(0);,0,0,0,1,2,1,4,0,0,4,32,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,137,        incrementIterationsCounter();,2,0,0,1,2,0,2,0,0,5,29,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,139,        Integer pivotCol = getPivotColumn(tableau);,4,0,0,1,2,0,4,2,0,10,43,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,1,0,1,2,0,0,0,0,3,50,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,141,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,147,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,0,0,0,3,38,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,150,        for (int i = 0; i < tableau.getHeight(); i++) {,8,1,0,2,5,3,4,0,0,17,47,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,151,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,152,"                double multiplier = tableau.getEntry(i, pivotCol);",2,0,0,1,2,0,8,0,0,10,50,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,153,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,0,0,0,3,45,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,156,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,92,            return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,309,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,155,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,168,"        columnLabels.add(""a"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,188,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,4,0,0,5,26,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,225,            } else if (constraint.getRelationship() == Relationship.GEQ) {,6,1,0,2,6,3,8,2,0,20,62,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,232,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,0,2,4,0,6,0,0,9,69,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,233,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",2,1,0,2,4,0,8,0,0,12,73,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,234,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,16,0,0,16,82,9,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,508,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,516,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,115,"        if (equals(x, y, maxUlps)) {",0,0,0,2,5,0,0,0,0,7,28,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,117,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,118,            return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,120,        return 1;,0,0,1,0,0,1,0,0,0,10,9,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,165,"        columnLabels.add(""s"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,382,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,6,2,0,3,7,0,4,0,0,13,67,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,383,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,384,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,388,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,473,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,74,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,75,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,4,0,0,4,41,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,82,        return nonNegative;,2,0,0,0,0,1,0,0,0,2,19,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,89,        return goal;,2,1,1,0,0,1,0,0,0,7,12,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,96,        return function;,6,0,1,0,0,1,10,2,0,27,16,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,103,        return Collections.unmodifiableCollection(linearConstraints);,0,0,0,1,2,1,6,0,0,6,61,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,108,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,139,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,140,        this.linearConstraints = constraints;,4,0,0,0,0,0,0,0,0,5,37,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,141,        this.goal              = goalType;,0,0,0,0,0,0,0,0,0,0,34,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,142,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,144,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,147,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",8,0,0,1,2,0,0,0,0,9,36,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,52,    },0,0,0,0,1,0,8,0,0,8,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",6,0,0,1,3,3,0,0,0,9,63,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,60,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,169,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,187,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,195,        solvePhase1(tableau);,2,0,0,1,2,3,4,0,0,9,21,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,89,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,90,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,91,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,94,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,265,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,465,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,482,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,500,        return getNumObjectiveFunctions() + numDecisionVariables;,2,1,0,1,2,1,2,0,0,5,57,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,139,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,235,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,254,    private static final long RECIP_2PI[] = new long[] {,4,0,0,2,5,3,0,0,0,7,52,1,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,275,    private static final long PI_O_4_BITS[] = new long[] {,4,0,0,2,5,0,0,0,0,5,54,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,33,3002,        return (x < 0l) ? -x : x;,10,4,0,1,2,1,0,0,0,16,25,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,63,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,4,2,0,2,4,0,4,0,0,11,65,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,70,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,71,    },0,0,1,0,1,0,0,0,0,5,1,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,301,        long xInt = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,302,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,305,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,306,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,0,0,0,11,23,0,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,308,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,312,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/util/Precision,33,314,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,6,2,0,2,4,1,12,0,0,22,55,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,265,"        return new LinearConstraint(constraint.getCoefficients(),",0,0,0,1,3,1,4,2,0,6,57,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,63,    public ArrayRealVector(int size) {,6,0,0,1,3,1,0,0,0,7,34,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,64,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,316,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,16,2,0,20,35,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,317,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,318,            final int dim = vData.length;,6,0,1,0,0,1,0,0,0,12,29,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,319,            checkVectorDimensions(dim);,0,0,0,1,2,0,0,0,0,3,27,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,320,            ArrayRealVector result = new ArrayRealVector(dim);,0,0,0,1,2,0,0,0,0,3,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,321,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,322,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,323,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,12,35,9,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,325,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,623,        return data[index];,4,0,0,1,2,1,8,0,0,12,19,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,478,"        return new ArrayRealVector(getRow(row), false);",0,0,1,2,4,1,4,2,0,12,47,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,483,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,484,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,485,        if (vector.getDimension() != nCols) {,0,0,0,2,5,0,0,0,0,7,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,489,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,490,"            setEntry(row, i, vector.getEntry(i));",0,0,0,2,4,0,0,0,0,6,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,492,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,514,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,515,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,516,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,517,        for (int i = 0; i < nCols; ++i) {,16,2,0,1,3,0,0,0,0,21,33,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,518,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,521,        return out;,2,0,0,0,0,1,0,2,0,4,11,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,102,"    public ArrayRealVector(double[] d, boolean copyArray) {",6,0,0,2,5,1,0,0,0,7,55,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,103,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,106,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,763,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,766,    },0,0,0,0,1,0,2,0,0,2,1,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,296,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,27,public enum GoalType implements Serializable {,2,0,1,0,1,1,0,2,0,12,46,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/GoalType,33,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,134,                   final int maxUlps) {,2,0,0,0,2,1,0,0,0,3,20,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,84,    private final List<String> columnLabels = new ArrayList<String>();,0,0,0,1,2,0,0,0,0,3,66,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,135,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,136,        this.constraints            = normalizeConstraints(constraints);,2,0,0,1,2,0,4,0,0,7,64,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,137,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,138,        this.epsilon                = epsilon;,6,0,0,0,0,0,0,0,0,8,38,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,139,        this.maxUlps                = maxUlps;,0,0,0,0,0,0,0,0,0,0,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,140,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,0,0,0,2,4,0,0,0,0,6,66,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,142,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,6,1,0,1,2,0,2,0,0,10,73,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,144,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,8,1,0,1,2,0,2,0,0,12,72,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,146,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,18,3,0,1,2,0,2,0,0,24,60,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,147,        initializeColumnLabels();,2,0,0,1,2,0,0,0,0,4,25,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,154,      if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,157,"      columnLabels.add(""Z"");",4,1,1,1,2,1,4,0,0,15,22,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,158,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,61,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,159,"        columnLabels.add(""x"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,161,      if (!restrictToNonNegative) {,0,0,0,1,3,0,0,0,0,4,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,164,      for (int i = 0; i < getNumSlackVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,167,      for (int i = 0; i < getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,170,"      columnLabels.add(""RHS"");",0,0,0,1,2,0,4,0,0,5,24,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,171,    },2,0,0,0,1,0,2,0,0,5,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,181,        int width = numDecisionVariables + numSlackVariables +,6,1,0,0,0,0,0,0,0,7,54,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,183,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,184,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",6,0,0,1,2,0,0,4,0,10,70,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,187,        if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,190,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,2,1,0,2,4,0,2,0,0,5,55,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,191,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",2,0,0,1,2,0,8,0,0,11,51,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,192,        RealVector objectiveCoefficients =,0,0,0,0,0,0,0,0,0,0,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,194,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",0,0,1,4,8,0,10,0,0,12,72,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,195,"        matrix.setEntry(zIndex, width - 1,",2,1,0,0,1,0,6,0,0,9,34,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,198,        if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,204,        int slackVar = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,205,        int artificialVar = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,206,        for (int i = 0; i < constraints.size(); i++) {,6,1,0,2,5,0,4,0,0,12,46,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,207,            LinearConstraint constraint = constraints.get(i);,6,0,0,1,2,0,6,2,0,15,49,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,208,            int row = getNumObjectiveFunctions() + i;,4,1,0,1,2,0,2,0,0,7,41,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,211,"            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",0,0,0,5,10,0,0,0,0,15,76,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,214,            if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,220,"            matrix.setEntry(row, width - 1, constraint.getValue());",10,2,0,2,4,0,10,0,0,24,55,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,223,            if (constraint.getRelationship() == Relationship.LEQ) {,0,0,0,2,5,0,0,0,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,230,            if ((constraint.getRelationship() == Relationship.EQ) ||,0,0,0,2,5,0,0,0,0,7,56,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,238,        return matrix;,2,0,0,0,0,1,0,0,0,2,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,247,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,2,0,0,1,2,0,0,8,0,10,70,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,248,        for (LinearConstraint constraint : originalConstraints) {,4,0,0,1,3,0,0,2,0,6,57,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,249,            normalized.add(normalize(constraint));,0,0,0,2,4,0,8,0,0,8,38,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,250,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,251,        return normalized;,2,0,0,0,0,1,0,0,0,2,18,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,260,        if (constraint.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,274,        return this.numArtificialVariables > 0 ? 2 : 1;,2,1,0,0,0,1,0,0,0,3,47,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,283,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,284,        for (final LinearConstraint constraint : constraints) {,4,0,0,1,3,1,0,2,0,7,55,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,285,            if (constraint.getRelationship() == relationship) {,2,1,0,2,5,0,4,0,0,7,51,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,286,                ++count;,0,0,0,0,0,0,0,0,0,0,8,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,288,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,289,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,374,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",4,0,0,2,4,0,10,0,0,14,71,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,375,    },2,1,1,0,1,1,0,0,0,12,1,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,539,        return f.getCoefficients().getDimension();,8,2,1,2,4,1,6,0,0,22,42,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,547,        return numSlackVariables;,2,0,0,0,0,1,0,0,0,2,25,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,555,        return numArtificialVariables;,0,0,0,0,0,1,0,0,0,1,30,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,44,    },2,0,0,0,1,0,0,0,0,2,1,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,31,"    LEQ(""<=""),",0,0,0,1,2,0,0,0,0,3,10,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,34,"    GEQ("">="");",4,1,1,1,2,1,2,0,0,14,10,0,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,58,public abstract class RealVector {,0,0,0,0,1,0,0,0,0,1,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,527,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,82,    },8,2,0,0,1,1,0,0,0,11,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,100,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,101,        this.relationship = relationship;,4,0,0,0,0,0,0,0,0,5,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,102,        this.value        = value;,4,0,0,0,0,0,0,0,0,5,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,168,        return coefficients;,4,1,0,0,0,1,6,0,0,11,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,176,        return relationship;,2,0,0,0,0,1,0,0,0,2,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearConstraint,33,184,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,58,"        this(new ArrayRealVector(coefficients), constantTerm);",4,0,0,2,4,0,0,2,0,6,54,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",0,0,0,1,3,0,0,0,0,4,78,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,67,        this.constantTerm = constantTerm;,4,1,1,0,0,0,0,0,0,19,33,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,75,        return coefficients;,2,0,0,0,0,1,0,0,0,2,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,83,        return constantTerm;,2,0,0,0,0,1,0,0,0,2,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,84,    public ArrayRealVector(double[] d) {,10,0,0,2,5,1,6,0,0,18,36,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,85,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,198,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0,0,0,1,3,0,0,0,0,4,57,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,199,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,285,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,0,0,4,39,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,374,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,375,            data[i] = data[i] * d;,0,0,0,2,4,0,0,0,0,6,22,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,377,        return this;,4,4,0,0,0,1,0,0,0,8,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,629,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,733,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,33,37,public class ArrayRealVector extends RealVector implements Serializable {,4,0,0,0,1,1,10,4,0,19,73,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,33,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,0,0,0,0,3,57,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,33,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/util/CompositeFormat,33,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",10,1,0,1,3,3,0,0,0,14,81,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,54,        if (rowDimension < 1) {,12,2,0,1,3,0,0,0,0,15,23,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,57,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,33,53,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,106,"                            final String separator, final NumberFormat format) {",2,0,0,0,2,0,0,0,0,3,52,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,113,        this.format      = format;,6,0,1,0,0,1,0,4,0,16,26,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,33,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,2,0,0,2,4,1,6,2,0,10,76,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,56,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,57,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,58,    },0,0,0,0,1,1,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,255,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,1,1,2,0,0,0,0,7,48,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,303,        data[row][column] = value;,4,0,1,2,4,0,0,0,0,11,26,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,304,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,323,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,4,1,5,10,1,0,0,0,17,66,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,367,"        checkRowIndex(m, row);",0,0,0,1,2,0,0,0,0,3,22,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,12,0,0,12,28,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,369,    },8,4,1,0,1,0,0,0,0,19,1,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,379,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,384,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,394,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,33,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,77,        return getKey();,0,0,0,1,2,1,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,52,"    public Pair(Pair<? extends K, ? extends V> entry) {",6,0,0,1,3,1,2,10,0,19,51,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,53,        key = entry.getKey();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,54,        value = entry.getValue();,2,0,1,1,2,0,8,0,0,20,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,72,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,84,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,85,            return false;,0,0,0,0,0,1,8,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,87,        if (!(o instanceof Pair)) {,2,0,0,2,5,0,0,2,0,5,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,88,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,90,"            Pair<?, ?> oP = (Pair<?, ?>) o;",8,0,0,1,2,0,0,4,0,13,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,91,            return (key == null ?,4,1,0,0,1,1,6,0,0,12,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/util/Pair,33,107,        return (key == null ? 0 : key.hashCode()) ^,2,2,0,2,4,1,4,0,0,8,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,117,"        this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);",12,0,0,1,2,0,0,0,0,12,77,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,118,    },10,3,0,0,1,0,0,0,0,13,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,329,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,414,              coefficients[i] = 0;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,418,              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);,0,0,0,2,4,0,0,0,0,6,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,492,"        tableau.setEntry(row, column, value);",0,0,0,1,2,0,10,0,0,10,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,493,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,530,        return numDecisionVariables;,0,0,0,0,0,1,0,0,0,1,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,563,        return tableau.getData();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,570,      if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,571,        return true;,4,0,0,0,0,1,0,0,0,6,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,574,      if (other instanceof SimplexTableau) {,2,0,0,1,3,0,0,2,0,4,38,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,575,          SimplexTableau rhs = (SimplexTableau) other;,4,0,0,1,2,0,0,4,0,8,44,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,576,          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&,6,2,0,1,2,1,0,0,0,8,63,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,586,      return false;,6,1,0,0,0,1,0,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,592,        return Boolean.valueOf(restrictToNonNegative).hashCode() ^,0,1,0,2,4,1,8,0,0,9,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,609,        oos.defaultWriteObject();,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,610,"        MatrixUtils.serializeRealMatrix(tableau, oos);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,611,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,620,        ois.defaultReadObject();,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,621,"        MatrixUtils.deserializeRealMatrix(this, ""tableau"", ois);",0,0,0,1,2,0,6,0,0,7,56,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,622,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,49,        return stringValue;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,61,            return LEQ;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,63,            return EQ;,8,1,0,0,0,1,0,0,0,10,10,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,98,"        setEntry(index, getEntry(index) + increment);",2,1,0,2,4,0,8,0,0,11,45,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,162,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,173,        int d = getDimension();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,174,        if (d != n) {,12,4,0,1,3,1,0,0,0,17,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,175,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,177,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,186,        if (index < 0 ||,8,2,0,0,1,0,0,0,0,11,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,188,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",8,0,0,0,1,1,0,14,0,23,53,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,191,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,203,        RealVector result = v.copy();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,204,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,206,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,18,0,0,23,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,207,            final int index = e.getIndex();,10,1,0,1,2,1,4,0,0,17,31,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,208,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,209,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,210,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,223,        RealVector result = v.copy();,4,0,0,1,2,0,4,4,0,13,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,224,        Iterator<Entry> it = sparseIterator();,4,0,0,1,2,0,2,4,0,10,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,226,        while (it.hasNext() && (e = it.next()) != null) {,4,2,0,4,9,0,8,0,0,16,49,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,227,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,228,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,229,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,230,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,241,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,6,0,0,6,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,252,        if (d != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,253,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,8,2,0,10,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,255,        return this;,2,0,0,0,0,2,4,0,0,7,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,274,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,275,        double d = 0;,14,3,0,0,0,1,0,0,0,18,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,276,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,278,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,279,            d += e.getValue() * v.getEntry(e.getIndex());,2,1,0,3,6,0,12,0,0,16,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,281,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,292,        final double norm = getNorm();,4,0,0,1,2,1,2,0,0,8,30,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,293,        final double vNorm = v.getNorm();,8,2,0,1,2,1,4,0,0,15,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,295,        if (norm == 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,297,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,299,        return dotProduct(v) / (norm * vNorm);,4,2,0,2,4,1,4,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,337,        checkVectorDimensions(v);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,338,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,339,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,341,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,342,            final double diff = e.getValue() - v.getEntry(e.getIndex());,6,1,0,3,6,1,12,0,0,21,60,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,343,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,344,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,345,        return FastMath.sqrt(d);,2,0,0,1,2,1,10,4,0,16,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,359,        double sum = 0;,2,0,0,0,0,0,6,0,0,8,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,360,        Iterator<Entry> it = sparseIterator();,4,1,0,1,2,0,2,4,0,11,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,362,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,363,            final double value = e.getValue();,4,0,0,1,2,0,0,0,0,5,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,364,            sum += value * value;,10,1,0,0,0,1,0,0,0,13,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,365,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,366,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,380,        double norm = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,381,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,8,4,0,14,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,383,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,384,            norm += FastMath.abs(e.getValue());,2,0,0,2,4,0,14,0,0,17,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,386,        return norm;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,400,        double norm = 0;,6,0,0,0,0,0,4,4,0,16,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,401,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,403,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,404,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,406,        return norm;,12,2,1,0,0,1,4,0,0,24,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,421,        checkVectorDimensions(v);,2,0,0,1,2,1,6,0,0,9,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,422,        double d = 0;,12,1,0,0,0,0,0,0,0,14,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,423,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,425,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,426,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,2,1,0,4,8,0,16,0,0,20,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,428,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,446,        checkVectorDimensions(v);,2,1,0,1,2,0,4,0,0,7,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,447,        double d = 0;,4,0,0,0,0,0,6,0,0,10,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,448,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,450,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,451,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",6,1,0,5,10,0,22,0,0,30,75,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,453,        return d;,6,0,0,0,0,1,0,0,0,6,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,463,        int minIndex    = -1;,12,1,0,0,0,0,0,0,0,16,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,464,        double minValue = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,465,        Iterator<Entry> iterator = iterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,466,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,467,            final Entry entry = iterator.next();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,468,            if (entry.getValue() <= minValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,469,                minIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,470,                minValue = entry.getValue();,2,0,0,1,2,0,10,0,0,13,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,472,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,473,        return minIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,483,        final int minIndex = getMinIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,484,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,6,1,0,1,2,1,4,0,0,11,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,494,        int maxIndex    = -1;,16,2,0,0,0,3,0,0,0,22,21,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,495,        double maxValue = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,496,        Iterator<Entry> iterator = iterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,497,        while (iterator.hasNext()) {,6,4,0,2,5,0,4,0,0,14,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,498,            final Entry entry = iterator.next();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,499,            if (entry.getValue() >= maxValue) {,2,1,0,2,5,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,500,                maxIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,501,                maxValue = entry.getValue();,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,503,        },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,504,        return maxIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,514,        final int maxIndex = getMaxIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,515,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,6,1,0,1,2,1,4,0,0,11,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,538,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,8,2,0,10,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,549,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,560,        return mapAddToSelf(-d);,12,1,1,1,2,2,8,2,0,30,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,571,        return copy().mapDivideToSelf(d);,0,0,0,2,4,1,6,0,0,6,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,582,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,3,6,1,8,2,0,10,64,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,593,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,2,1,0,1,3,0,0,4,0,7,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,594,"            product = new OpenMapRealMatrix(this.getDimension(),",2,0,0,1,3,0,2,2,0,7,52,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,597,"            product = new Array2DRowRealMatrix(this.getDimension(),",4,1,0,1,3,0,2,2,0,10,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,600,        Iterator<Entry> thisIt = sparseIterator();,2,0,0,1,2,0,2,4,0,8,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,601,        Entry thisE = null;,10,0,0,0,0,1,2,2,0,16,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,602,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,0,0,0,4,9,0,0,0,0,13,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,603,            Iterator<Entry> otherIt = v.sparseIterator();,2,0,0,1,2,0,4,4,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,604,            Entry otherE = null;,2,0,0,0,0,0,0,2,0,4,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,605,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,2,2,0,4,9,0,8,0,0,13,64,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,606,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",4,0,0,2,5,0,16,0,0,20,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,609,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,611,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,631,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,632,        Entry e = null;,2,0,0,0,0,0,0,2,0,4,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,633,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,634,            e.setValue(value);,0,0,0,1,2,0,6,0,0,6,18,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,636,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,646,        int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,647,        double[] values = new double[dim];,2,0,1,2,4,0,0,0,0,4,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,648,        for (int i = 0; i < dim; i++) {,14,2,0,1,3,0,0,0,0,18,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,649,            values[i] = getEntry(i);,6,0,1,2,4,0,4,0,0,17,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,651,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,662,        RealVector copy = copy();,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,663,        copy.unitize();,6,1,0,1,2,0,4,0,0,12,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,664,        return copy;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/linear/RealVector,33,675,        mapDivideToSelf(getNorm());,0,0,0,2,4,0,4,0,0,4,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,0,0,0,1,2,0,0,0,0,3,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,2,2,0,3,7,0,8,0,0,12,67,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,6,1,0,1,2,0,0,0,0,7,22,12,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,2,0,0,1,3,0,6,0,0,8,40,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,4,3,0,1,3,0,0,0,0,7,20,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },2,0,0,0,1,0,0,0,0,3,1,8,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },4,1,0,0,1,0,6,0,0,11,1,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,0,0,0,1,2,0,0,0,0,3,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,10,2,1,1,3,0,0,0,0,26,30,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,8,5,1,3,6,0,0,0,0,20,60,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,8,3,0,0,0,1,4,0,0,15,13,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,42,    public AbstractListChromosome(final List<T> representation) {,16,2,0,1,3,0,0,0,0,21,61,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,43,        checkValidity(representation);,12,2,0,1,2,1,8,4,0,28,30,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,44,        this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));,0,0,0,2,4,0,0,0,0,6,86,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,45,    },10,2,0,0,1,0,0,0,0,13,1,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,2,0,0,0,1,1,0,4,0,7,75,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",6,0,0,1,3,3,0,4,0,13,86,2,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,0,0,0,2,5,0,0,0,0,7,43,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,4,0,7,31,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,2,2,0,0,0,0,0,0,0,4,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",0,0,0,1,2,0,0,0,0,3,36,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },20,5,1,0,1,3,0,4,0,46,1,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,0,0,0,0,0,0,0,0,0,0,39,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,0,0,5,62,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },8,0,0,0,1,1,6,0,0,16,1,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,0,0,0,0,0,0,0,0,0,0,31,4,0.4,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,52,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,",4,0,0,0,1,0,0,2,0,6,101,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,56,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,0,0,1,2,0,0,2,0,8,96,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,71,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,1,0,1,2,1,0,0,0,8,96,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,82,        this.chromosomes = chromosomes;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,83,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,90,        return chromosomes;,12,1,0,0,0,1,0,0,0,14,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,98,        this.chromosomes.add(chromosome);,2,0,0,1,2,0,4,0,0,6,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,107,        Chromosome bestChromosome = this.chromosomes.get(0);,4,0,0,1,2,0,2,2,0,8,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,108,        for (Chromosome chromosome : this.chromosomes) {,14,2,1,1,3,0,0,2,0,32,48,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,109,            if (chromosome.compareTo(bestChromosome) > 0) {,6,1,0,2,5,0,6,0,0,13,47,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,111,                bestChromosome = chromosome;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,113,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,114,        return bestChromosome;,2,0,1,0,0,1,0,0,0,5,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,122,        return this.populationLimit;,4,0,0,0,0,1,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,130,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,131,    },6,0,1,0,1,1,0,0,0,15,1,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,138,        return this.chromosomes.size();,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,146,        return this.chromosomes.toString();,2,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,155,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,28,"public abstract class Chromosome implements Comparable<Chromosome>,Fitness {",4,0,1,0,1,2,0,6,0,20,76,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,33,    private double fitness = NO_FITNESS;,2,1,0,0,0,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,45,        if (this.fitness == NO_FITNESS) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,47,            this.fitness = fitness();,2,0,0,1,2,0,2,0,0,5,25,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,49,        return this.fitness;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,65,        return ((Double)this.getFitness()).compareTo(another.getFitness());,0,0,0,5,10,1,0,0,0,16,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,76,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,89,        for (Chromosome anotherChr : population) {,4,0,0,1,3,0,0,2,0,6,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,90,            if (this.isSame(anotherChr)) {,0,0,0,2,5,0,0,0,0,7,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,91,                return anotherChr;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,93,        },2,1,0,0,1,0,6,0,0,9,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,94,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,104,        Chromosome sameChromosome = findSameChromosome(population);,2,0,0,1,2,0,4,2,0,8,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,105,        if (sameChromosome != null) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",8,0,0,1,2,0,6,0,0,15,56,3,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,6,0,0,0,0,0,0,0,0,7,30,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,2,0,0,1,2,1,6,2,0,11,36,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,0,0,0,1,2,0,0,0,0,3,22,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,8,0,0,1,2,0,0,0,0,8,22,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,2,0,0,0,0,0,0,0,0,2,18,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0,0,0,2,4,0,0,0,0,6,46,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,0,0,0,9,55,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },4,3,1,0,1,0,0,0,0,11,1,11,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,4,0,0,1,2,3,0,4,0,11,57,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,8,1,0,1,2,1,4,0,0,15,57,3,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,2,0,0,1,2,3,0,4,0,9,58,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,2,0,0,1,2,3,0,4,0,9,64,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,1,1,1,2,3,10,4,0,29,66,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0,0,0,1,2,0,0,0,0,3,68,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,0,0,2,0,4,69,5,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0,0,0,1,2,0,0,0,0,3,71,4,0.05405,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",12,1,0,1,2,3,0,4,0,21,69,1,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",2,0,0,1,2,3,0,4,0,9,67,2,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,0,0,0,1,2,0,0,0,0,3,70,4,0.05405,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },4,0,0,0,1,1,0,0,0,5,1,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",6,0,0,5,10,0,6,0,0,14,67,0,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,2,108,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",10,1,0,2,4,0,0,0,0,12,94,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",10,0,0,3,6,0,8,2,0,21,97,3,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0,0,0,1,2,0,0,0,0,3,131,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,1,1,2,4,0,6,0,0,13,78,3,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,6,0,1,1,3,2,6,0,0,18,21,3,1.77778,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,1.77778,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,0,0,1,3,0,0,2,0,7,13,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,392,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,14,2,0,0,0,0,0,0,0,17,23,3,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,1.6,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,1.6,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,12,3,0,0,0,1,0,0,0,16,26,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1023,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);,0,0,0,2,4,0,0,0,0,6,59,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1066,        double real2 = 2.0 * real;,0,0,0,0,0,0,0,0,0,0,26,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1067,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,4,1,0,2,4,0,12,0,0,17,59,3,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",4,1,0,1,3,1,0,0,0,5,46,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,1.23077,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,464,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,471,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,472,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,473,"          exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,475,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,0,0,3,6,0,0,0,0,8,42,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,478,          double temp = ya * HEX_40000000;,4,1,1,0,0,0,8,0,0,19,32,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,479,          double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,483,          double recip = 1.0/ya;,4,1,0,0,0,0,0,0,0,5,22,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,484,          temp = recip * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,485,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,486,          double recipb = recip - recipa;,8,2,0,0,0,0,0,0,0,11,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,24,9,0,1,2,0,0,0,0,35,76,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,491,          recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,493,          recipa = -recipa;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,494,          recipb = -recipb;,0,0,0,0,0,0,10,0,0,10,17,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,497,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,498,          yb += -(temp - ya - recipa);,2,0,0,1,2,0,0,0,0,3,28,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,499,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,500,          temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,501,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,502,          ya = temp;,2,0,1,0,0,0,0,0,0,11,10,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,504,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,505,          result *= 0.5;,2,0,0,0,0,0,2,0,0,5,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,506,      },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,545,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,549,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,8,0,0,1,3,1,0,0,0,10,12,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,2,0,0,1,3,0,6,0,0,8,12,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,396,      if (x < -20) {,2,2,0,1,3,0,10,0,0,14,14,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,400,      double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,401,      if (x < 0.0) {,4,1,0,1,3,0,0,0,0,5,14,1,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,409,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,410,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,411,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,415,      temp = recip * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,416,      double recipa = recip + temp - temp;,2,1,0,0,0,0,0,0,0,3,36,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,417,      double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,422,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,425,      temp = ya + recipa;,10,1,0,0,0,0,4,0,0,16,19,2,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,426,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,428,      temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,429,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,430,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,432,      double result = ya + yb;,0,0,0,0,0,0,0,0,0,0,24,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,433,      result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,434,      return result;,2,0,0,0,0,4,0,0,0,5,14,2,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,456,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,460,      if (x == 0) {,2,0,0,1,3,0,0,0,0,3,13,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,927,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,2,0,1,1,2,0,0,0,0,7,58,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,826,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,864,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,866,            if (intVal > 709) {,10,1,0,1,3,0,0,0,0,12,19,6,0.69565,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,922,            result = tempC*z + tempB + tempA;,2,0,0,0,0,0,2,0,0,5,33,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3754,    private static class ExpFracTable {,10,4,0,0,1,0,4,0,0,19,35,8,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,2,0,0,1,3,0,0,0,0,2,34,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0,0,0,1,2,0,0,0,0,3,56,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3787,        },0,0,0,0,1,0,0,0,0,1,1,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,4,0,0,3,6,0,0,0,0,5,50,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,6,0,1,1,2,1,0,0,0,9,64,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,8,0,1,1,2,1,0,4,0,16,64,3,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,0,0,1,2,0,0,0,0,5,55,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,900,        z = z * epsilon + 0.1666666505023083;,6,2,0,0,0,0,0,0,0,9,37,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,902,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,903,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,16,5,0,0,0,0,0,0,0,22,82,0,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,917,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3711,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3722,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,4,0,0,1,3,0,0,0,0,4,34,1,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3747,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0,0,0,1,2,0,0,0,0,3,54,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3748,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,1,1,1,2,0,10,0,0,21,54,1,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,3750,        },2,0,0,0,1,0,0,0,0,2,1,4,0.40909,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2261,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2267,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2268,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2269,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2271,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2272,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,7,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2273,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2274,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2276,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2277,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2278,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2279,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2281,                if (remA > 0.0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2282,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2290,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2291,            xa = remA;,0,0,0,0,0,0,0,0,0,0,10,4,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2292,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.34783,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,29,    private static final double[] EXP_INT_A = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,1535,    private static final double[] EXP_INT_B = new double[] {,6,3,0,2,5,0,0,0,0,9,56,4,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,3043,    private static final double[] EXP_FRAC_A = new double[] {,8,0,0,2,5,3,0,0,0,13,57,1,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,37,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,80,public class FastMath {,10,1,0,0,1,1,0,0,0,13,23,1,0.32143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2175,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2181,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2182,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2183,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2185,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2186,                double b = remA;,8,1,0,0,0,0,0,0,0,10,16,8,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2187,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2188,                remB += -(remA - b - a);,14,3,0,1,2,0,0,0,0,19,24,3,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2190,                a = -k * 6.123233995736766E-17;,6,1,0,0,0,0,0,0,0,10,31,0,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2191,                b = remA;,6,0,0,0,0,0,0,0,0,8,9,0,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2192,                remA = a + b;,2,1,1,0,0,0,0,0,0,8,13,4,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2193,                remB += -(remA - b - a);,20,11,1,1,2,1,0,0,0,49,24,3,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2195,                if (remA > 0.0) {,0,0,0,1,3,0,0,2,0,2,17,11,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2196,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2204,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2205,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2206,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.25397,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2246,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.23529,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2247,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2298,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.23529,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2233,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.22857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2236,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.22857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2237,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.22857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.22857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2302,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.20455,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,10,5,0,2,5,0,0,0,0,16,44,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1732,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1733,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1734,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1735,            b = b + d;,6,1,0,0,0,0,0,0,0,8,10,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1751,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1752,        final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1754,        final double a = pi2a - xa;,6,1,0,0,0,1,4,0,0,13,27,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1755,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1756,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,1758,"        return sinQ(a, b);",0,0,0,1,2,1,0,0,0,4,18,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2161,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.19512,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2209,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.19512,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,37,2213,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.19512,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,6,2,0,11,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,12,2,0,1,2,0,4,0,0,19,27,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,4,0,0,1,3,0,0,0,0,5,26,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,4,3,0,1,2,0,16,0,0,23,31,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0,1,1,1,3,0,0,0,0,20,26,10,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,        this.point = (point == null) ? null : point.clone();,0,0,0,2,4,0,0,0,0,6,52,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,6,1,1,0,0,0,0,0,0,13,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",6,1,0,1,2,0,8,0,0,17,48,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,0,12,0,0,21,34,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,6,1,0,2,5,0,6,0,0,15,45,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,                    if (upperDifference.getEntry(nfxm) == ZERO) {,0,0,0,2,5,0,0,0,0,7,45,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,                    final int ih = nfx * (nfx + 1) / 2 - 1;,0,0,0,1,2,0,0,0,0,3,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",0,1,0,3,6,0,8,0,0,9,107,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",8,4,0,3,6,0,16,0,0,29,118,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,                    if (stepa * stepb < ZERO) {,0,0,0,1,3,0,0,0,0,4,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,0,0,2,4,0,0,0,0,4,79,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",6,1,0,1,2,0,0,0,0,8,44,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,                            if (trustRegionCenterInterpolationPointIndex == nfm) {,0,0,0,1,3,0,0,0,0,4,54,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);",0,0,0,1,2,0,0,0,0,3,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",10,3,0,3,6,1,10,0,0,25,62,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,4,1,2,4,0,32,0,0,47,81,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,",0,0,0,0,1,0,0,0,0,1,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",4,1,0,2,4,0,24,0,0,29,53,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",6,1,0,0,1,0,10,0,0,17,31,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },18,1,0,0,1,0,6,0,0,28,1,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,6,1,0,1,2,1,4,0,0,12,30,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,1,0,0,2,0,0,0,5,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,        isMinimize = (getGoalType() == GoalType.MINIMIZE);,0,0,0,2,4,0,0,0,0,6,50,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,        currentBest = new ArrayRealVector(getStartPoint());,0,0,0,2,4,0,0,0,0,6,51,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);",0,0,0,1,2,0,0,0,0,3,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,        printMethod(); // XXX,0,0,0,1,2,0,0,0,0,3,21,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,        final int n = currentBest.getDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,2,0,0,1,2,0,0,0,0,2,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",4,1,0,3,6,0,0,0,0,5,69,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));",0,0,0,3,6,0,0,0,0,9,69,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {,8,4,0,2,5,0,0,0,0,12,63,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,24,6,0,2,6,1,6,0,0,39,69,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);",2,0,0,1,2,1,0,0,0,3,38,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,2,0,0,1,2,0,6,0,0,8,21,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,2,0,0,1,2,1,0,0,0,3,41,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,        final int npt = numberOfInterpolationPoints;,4,0,0,0,0,0,2,0,0,6,44,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,4,1,0,0,0,0,0,0,0,6,21,10,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,        final int nptm = npt - np;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,6,2,0,0,0,1,0,2,0,11,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,        final ArrayRealVector work1 = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,        final ArrayRealVector work3 = new ArrayRealVector(npt);,0,0,0,1,2,0,0,0,0,3,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,        double cauchy = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,14,5,1,0,0,0,0,0,0,21,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,        double dsq = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,8,0,1,0,0,0,0,2,0,14,27,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,        trustRegionCenterInterpolationPointIndex = 0;,0,0,0,0,0,0,0,0,0,0,45,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",2,0,0,1,2,3,0,0,0,5,31,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,23,21,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,0,0,1,2,1,6,0,0,16,41,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,1,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,        final int ndim = bMatrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,2,0,1,0,0,0,0,4,0,11,73,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,2,0,0,0,0,0,0,0,0,4,32,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,6,1,0,0,0,4,0,0,0,11,21,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,2,0,0,1,3,0,0,0,0,2,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1598,"            originShift.setEntry(j, currentBest.getEntry(j));",0,0,0,2,4,0,0,0,0,6,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1600,"                interpolationPoints.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1602,            for (int i = 0; i < ndim; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1606,"        for (int i = 0, max = n * np / 2; i < max; i++) {",0,0,0,1,3,0,0,0,0,4,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",4,0,0,1,2,1,8,0,0,13,47,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,        for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",10,1,0,1,2,0,0,0,0,12,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,6,0,0,23,47,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1612,"                zMatrix.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,4,2,1,0,0,0,0,0,0,8,12,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,        int jpt = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,4,0,0,1,2,0,0,0,0,4,33,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,            final int nfx = nfm - n;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,            final int nfmm = nfm - 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,0,0,0,6,19,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,6,1,0,0,0,0,14,0,0,22,33,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,4,1,0,2,5,1,6,0,0,12,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1638,"                    interpolationPoints.setEntry(nfm, nfmm, stepa);",0,0,0,1,2,0,10,0,0,10,47,11,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,4,1,0,1,4,0,0,0,0,5,21,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",0,0,0,1,5,0,0,0,0,6,56,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",2,1,0,3,7,0,14,0,0,18,74,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0,1,0,3,7,0,14,0,0,15,74,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,0,0,0,0,0,0,0,0,0,0,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1686,"            fAtInterpolationPoints.setEntry(nfm, f);",0,0,0,1,2,0,8,0,0,8,40,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,2,1,0,1,3,0,4,0,0,7,19,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,4,0,0,0,0,0,0,0,0,5,9,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,1,1,0,0,0,0,0,0,11,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,10,91,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,0,0,0,7,27,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,6,2,0,0,1,3,0,0,0,12,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1704,"                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);",0,0,0,2,4,0,0,0,0,6,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,10,2,0,1,3,0,0,0,0,13,24,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,2,1,0,2,5,0,2,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,6,2,1,1,3,0,0,0,0,11,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,2,0,1,1,2,0,4,0,0,9,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,12,1,0,0,0,0,0,0,0,14,54,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,6,1,0,1,3,0,0,0,0,8,32,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",6,1,0,0,1,0,0,2,0,10,75,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",8,0,0,0,1,0,0,2,0,11,75,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,45,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,0,0,0,1,2,0,0,0,0,3,74,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,10,1,0,1,2,0,0,2,0,14,57,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2426,        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,61,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,6,0,0,1,2,1,6,6,0,20,49,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2428,        upperDifference = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,4,0,0,1,2,0,0,2,0,7,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,0,0,5,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2432,        trialStepPoint = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,6,1,0,1,2,0,0,2,0,10,88,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2435,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,8,1,0,0,1,2,0,0,0,12,34,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,2,0,1,1,2,3,4,0,0,22,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,6,1,1,0,0,1,14,0,0,26,19,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,0,0,0,1,2,0,0,0,0,3,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,680,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,681,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,109,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,150,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",16,1,0,1,3,4,6,2,0,29,81,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,6,3,0,1,3,0,0,0,0,9,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,4,0,0,7,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,8,0,0,0,1,2,6,0,0,18,42,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,295,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,8,0,0,14,48,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,106,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,2,0,7,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,367,"        checkRowIndex(m, row);",8,1,0,1,2,0,0,0,0,11,22,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,379,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,384,    },2,1,1,0,1,0,0,0,0,8,1,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,8,4,1,2,5,0,4,0,0,21,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,105,        if (f == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,108,        if (goalType == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,111,        if (startPoint == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,116,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,6,0,0,6,37,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,117,        evaluations.resetCount();,2,0,0,1,2,0,4,0,0,7,25,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,120,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,121,        goal = goalType;,0,0,0,0,0,0,0,0,0,0,16,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,122,        start = startPoint.clone();,4,0,0,1,2,0,4,0,0,10,27,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,125,        return doOptimize();,2,0,0,1,2,1,2,0,0,5,20,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,139,        return start.clone();,0,0,0,1,2,1,4,0,0,4,21,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,235,        final double[] lowerBound = getLowerBound();,2,0,0,2,4,1,2,0,0,5,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,236,        final double[] upperBound = getUpperBound();,2,0,0,2,4,1,2,0,0,5,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,239,"        setup(lowerBound, upperBound);",2,0,0,1,2,0,6,0,0,9,30,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2384,        printMethod(); // XXX,0,0,0,1,2,0,0,0,0,3,21,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2386,        double[] init = getStartPoint();,2,0,0,2,4,0,2,0,0,4,32,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2387,        final int dimension = init.length;,6,1,1,0,0,1,0,0,0,14,34,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2390,        if (dimension < MINIMUM_PROBLEM_DIMENSION) {,6,2,0,1,3,0,8,0,0,16,44,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2466,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,72,        return lowerBound.clone();,0,0,1,1,2,1,4,0,0,9,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,79,        return upperBound.clone();,2,2,1,1,2,1,4,0,0,17,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,120,        if (lower == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,128,        if (upper == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,138,"        return super.optimize(maxEval, f, goalType, startPoint);",10,0,0,1,2,1,0,0,0,10,56,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,91,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,159,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,160,    },2,0,0,0,1,3,0,0,0,5,1,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,106,        if (upper != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,39,    public SimpleScalarValueChecker() {},2,0,0,2,4,1,0,0,0,3,36,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,52,    public AbstractConvergenceChecker() {,2,0,0,1,3,1,0,0,0,3,37,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,53,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,54,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,55,    },0,0,0,0,1,0,4,0,0,4,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,27,public enum GoalType implements Serializable {,2,0,0,0,1,1,14,2,0,19,46,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,30,"    MAXIMIZE,",2,0,1,0,0,0,0,0,0,12,9,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,38,33,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,60,        this(new SimpleScalarValueChecker());,0,0,0,2,4,0,0,2,0,2,37,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,65,    protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<RealPointValuePair> checker) {,8,0,0,1,3,1,0,4,0,14,93,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,44,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,66,        this.checker = checker;,0,0,0,0,0,0,0,0,0,0,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,67,    },4,1,1,0,1,0,0,0,0,16,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,211,"        this(numberOfInterpolationPoints,",0,0,0,0,1,0,0,0,0,1,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,214,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,226,                           double stoppingTrustRegionRadius) {,0,0,0,0,2,0,0,0,0,2,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,227,        this.numberOfInterpolationPoints = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,0,63,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,228,        this.initialTrustRegionRadius = initialTrustRegionRadius;,0,0,0,0,0,0,0,0,0,0,57,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,229,        this.stoppingTrustRegionRadius = stoppingTrustRegionRadius;,2,0,0,0,0,0,0,0,0,2,59,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,230,    },4,0,0,0,1,0,0,0,0,4,1,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,59,    protected BaseAbstractMultivariateSimpleBoundsOptimizer() {},0,0,0,2,4,0,0,0,0,6,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,93,        final int dim = startPoint.length;,6,0,0,0,0,1,0,0,0,7,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,94,        if (lower != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,52,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,61,"        this(max,",2,0,0,0,1,0,0,0,0,3,9,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,78,                       MaxCountExceededCallback cb) {,2,0,0,0,2,0,0,2,0,4,30,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,40,    private int count = 0;,2,0,0,0,0,1,0,0,0,3,22,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,79,        maximalCount = max;,6,0,0,0,0,1,0,0,0,8,19,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,80,        maxCountCallback = cb;,6,0,1,0,0,0,0,0,0,12,22,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,38,62,             new MaxCountExceededCallback() {,0,0,0,1,3,0,0,0,0,4,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,57,                              final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,58,        this.point = copyArray ?,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,61,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,68,        return (point == null) ? null : point.clone();,0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,77,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,84,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,52,"        super(relativeThreshold, absoluteThreshold);",4,0,0,1,2,0,0,0,0,4,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,75,        final double p = previous.getValue();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,76,        final double c = current.getValue();,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,77,        final double difference = FastMath.abs(p - c);,6,1,0,1,2,1,4,0,0,12,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,78,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));",0,0,0,3,6,0,0,0,0,9,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,79,        return difference <= size * getRelativeThreshold() ||,6,4,0,1,2,1,2,0,0,12,53,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,38,34,public class SimpleScalarValueChecker,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,64,                                      final double absoluteThreshold) {,2,0,0,0,2,0,0,0,0,2,33,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,65,        this.relativeThreshold = relativeThreshold;,4,0,0,0,0,0,0,0,0,5,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,66,        this.absoluteThreshold = absoluteThreshold;,4,0,0,0,0,0,0,0,0,5,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,73,        return relativeThreshold;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,38,80,        return absoluteThreshold;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,71,        return evaluations.getMaximalCount();,2,1,1,1,2,1,4,0,0,16,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,81,        return checker;,4,0,0,0,0,1,6,0,0,10,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,95,        } catch (MaxCountExceededException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,96,            throw new TooManyEvaluationsException(e.getMax());,0,0,0,2,4,0,4,2,0,6,50,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,106,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,109,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,112,            throw new NullArgumentException();,0,0,0,1,2,0,10,2,0,12,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2479,"            super(PATH_IS_EXPLORED + "" "" + BOBYQAOptimizer.caller(3));",2,1,0,2,4,0,4,2,0,10,58,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2480,        },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,246,"        return new RealPointValuePair(currentBest.getDataRef(),",0,0,0,1,3,1,4,2,0,6,55,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,303,                if (lowerDifference.getEntry(j) >= ZERO) {,2,1,0,2,5,0,6,0,0,9,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,304,"                    currentBest.setEntry(j, lowerBound[j]);",0,0,1,2,4,0,6,0,0,10,39,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,305,"                    lowerDifference.setEntry(j, ZERO);",0,0,0,1,2,0,8,0,0,8,34,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,306,"                    upperDifference.setEntry(j, boundDiff);",2,0,0,1,2,1,8,8,0,19,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,308,"                    currentBest.setEntry(j, lowerBound[j] + initialTrustRegionRadius);",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,309,"                    lowerDifference.setEntry(j, -initialTrustRegionRadius);",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,311,                    final double deltaOne = upperBound[j] - currentBest.getEntry(j);,0,0,0,2,4,0,0,0,0,6,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,312,"                    upperDifference.setEntry(j, Math.max(deltaOne, initialTrustRegionRadius));",0,0,0,2,4,0,14,0,0,14,74,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,313,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,315,                if (upperDifference.getEntry(j) <= ZERO) {,2,1,0,2,5,0,6,0,0,9,42,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,316,"                    currentBest.setEntry(j, upperBound[j]);",0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,317,"                    lowerDifference.setEntry(j, -boundDiff);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,318,"                    upperDifference.setEntry(j, ZERO);",0,0,0,1,2,0,8,0,0,8,34,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,320,"                    currentBest.setEntry(j, upperBound[j] - initialTrustRegionRadius);",12,3,1,2,4,0,6,0,0,26,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,322,                    final double deltaOne = lowerBound[j] - currentBest.getEntry(j);,2,1,1,2,4,1,6,0,0,14,64,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,323,                    final double deltaTwo = -initialTrustRegionRadius;,0,0,0,0,0,0,0,0,0,0,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,324,"                    lowerDifference.setEntry(j, Math.min(deltaOne, deltaTwo));",0,0,0,2,4,0,14,0,0,14,58,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,325,"                    upperDifference.setEntry(j, initialTrustRegionRadius);",0,0,0,1,2,0,8,0,0,8,54,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,408,        double xoptsq = ZERO;,4,0,0,0,0,0,0,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,409,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,410,"            trustRegionCenterOffset.setEntry(i, interpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex, i));",2,1,1,2,4,0,14,0,0,21,111,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,412,            final double deltaOne = trustRegionCenterOffset.getEntry(i);,8,1,0,1,2,1,6,0,0,16,60,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,413,            xoptsq += deltaOne * deltaOne;,8,1,0,0,0,0,0,0,0,11,30,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,415,        double fsave = fAtInterpolationPoints.getEntry(0);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,416,        final int kbase = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,420,        int ntrits = 0;,2,0,0,0,0,0,6,0,0,8,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,421,        int itest = 0;,4,0,0,0,0,0,0,0,0,5,14,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,422,        int knew = 0;,10,3,0,0,0,0,0,0,0,13,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,423,        int nfsav = getEvaluations();,2,0,0,1,2,0,2,0,0,4,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,424,        double rho = initialTrustRegionRadius;,4,0,0,0,0,0,0,0,0,4,38,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,425,        double delta = rho;,10,1,0,0,0,0,0,0,0,11,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,426,        double diffa = ZERO;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,427,        double diffb = ZERO;,4,0,0,0,0,0,0,0,0,4,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,428,        double diffc = ZERO;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,429,        double f = ZERO;,6,1,0,0,0,0,0,0,0,7,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,430,        double beta = ZERO;,4,0,0,0,0,0,0,0,0,4,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,431,        double adelt = ZERO;,8,2,0,0,0,0,0,0,0,10,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,432,        double denom = ZERO;,4,0,0,0,0,0,0,0,0,4,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,433,        double ratio = ZERO;,10,1,0,0,0,0,0,0,0,12,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,434,        double dnorm = ZERO;,8,2,0,0,0,0,0,0,0,10,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,435,        double scaden = ZERO;,4,0,0,0,0,0,0,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,436,        double biglsq = ZERO;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,437,        double distsq = ZERO;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,442,        int state = 20;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,443,        for(;;) switch (state) {,4,1,1,2,5,0,0,0,0,9,24,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,445,            printState(20); // XXX,0,0,0,1,2,0,2,0,0,2,22,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,446,            if (trustRegionCenterInterpolationPointIndex != kbase) {,4,1,0,1,3,0,0,0,0,5,56,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,447,                int ih = 0;,2,0,0,0,0,0,0,0,0,2,11,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,448,                for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,449,                    for (int i = 0; i <= j; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,450,                        if (i < j) {,4,1,0,1,3,0,0,0,0,5,12,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,451,"                            gradientAtTrustRegionCenter.setEntry(j,  gradientAtTrustRegionCenter.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * trustRegionCenterOffset.getEntry(i));",0,2,0,4,8,0,24,0,0,26,164,16,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,453,"                        gradientAtTrustRegionCenter.setEntry(i,  gradientAtTrustRegionCenter.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * trustRegionCenterOffset.getEntry(j));",0,0,0,4,8,0,0,0,0,12,164,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,454,                        ih++;,4,1,1,0,0,0,0,0,0,11,5,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,457,                if (getEvaluations() > npt) {,2,1,0,2,5,0,2,0,0,5,29,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,458,                    for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,459,                        double temp = ZERO;,4,0,0,0,0,0,0,0,0,4,19,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,460,                        for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,461,"                            temp += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);",0,0,0,2,4,0,0,0,0,6,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,463,                        temp *= modelSecondDerivativesParameters.getEntry(k);,0,1,0,1,2,0,14,0,0,15,53,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,464,                        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,465,"                            gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + temp * interpolationPoints.getEntry(k, i));",2,2,1,3,6,0,24,0,0,32,125,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,468,                    throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,481,            printState(60); // XXX,12,3,0,1,2,0,2,0,0,18,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,482,            final ArrayRealVector gnew = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,483,            final ArrayRealVector xbdi = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,484,            final ArrayRealVector s = new ArrayRealVector(n);,4,0,0,1,2,1,0,4,0,9,49,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,485,            final ArrayRealVector hs = new ArrayRealVector(n);,4,0,0,1,2,0,0,0,0,4,50,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,486,            final ArrayRealVector hred = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,488,"            final double[] dsqCrvmin = trsbox(delta, gnew, xbdi, s,",0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,490,            dsq = dsqCrvmin[0];,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,491,            crvmin = dsqCrvmin[1];,16,2,1,1,2,0,0,0,0,22,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,494,            double deltaOne = delta;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,495,            double deltaTwo = Math.sqrt(dsq);,4,0,0,1,2,0,6,2,0,12,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,496,"            dnorm = Math.min(deltaOne, deltaTwo);",2,0,0,1,2,0,8,0,0,11,37,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,497,            if (dnorm < HALF * rho) {,6,2,0,1,3,0,0,0,0,8,25,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,498,                ntrits = -1;,2,0,0,0,0,0,0,0,0,4,12,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,500,                deltaOne = TEN * rho;,8,1,0,0,0,0,0,2,0,12,21,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,501,                distsq = deltaOne * deltaOne;,2,0,0,0,0,1,2,0,0,5,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,502,                if (getEvaluations() <= nfsav + 2) {,0,0,0,2,5,0,0,2,0,2,36,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,503,                    state = 650; break;,8,1,0,0,0,1,0,0,0,11,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,513,"                deltaOne = Math.max(diffa, diffb);",2,0,0,1,2,0,8,0,0,11,34,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,514,"                final double errbig = Math.max(deltaOne, diffc);",0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,515,                final double frhosq = rho * ONE_OVER_EIGHT * rho;,2,1,0,0,0,0,0,0,0,3,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,516,                if (crvmin > ZERO &&,0,0,0,0,1,0,2,0,0,2,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,518,                    state = 650; break;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,520,                final double bdtol = errbig / rho;,2,2,0,0,0,0,0,0,0,4,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,521,                for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,522,                    double bdtest = bdtol;,4,0,0,0,0,0,0,2,0,6,22,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,523,                    if (newPoint.getEntry(j) == lowerDifference.getEntry(j)) {,0,0,1,3,7,0,0,0,0,10,58,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,524,                        bdtest = work1.getEntry(j);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,526,                    if (newPoint.getEntry(j) == upperDifference.getEntry(j)) {,0,1,0,3,7,0,12,0,0,13,58,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,527,                        bdtest = -work1.getEntry(j);,6,0,0,1,2,0,6,2,0,16,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,529,                    if (bdtest < bdtol) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,530,                        double curv = modelSecondDerivativesValues.getEntry((j + j * j) / 2);,8,3,0,2,4,0,4,0,0,15,69,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,531,                        for (int k = 0; k < npt; k++) {,8,1,0,1,3,0,0,0,0,10,31,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,533,"                            final double d1 = interpolationPoints.getEntry(k, j);",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,534,                            curv += modelSecondDerivativesParameters.getEntry(k) * (d1 * d1);,6,2,0,2,4,0,6,0,0,15,65,15,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,536,                        bdtest += HALF * curv * rho;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,537,                        if (bdtest < bdtol) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,538,                            state = 650; break;,2,0,0,0,0,0,0,0,0,3,19,15,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,540,                        throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,543,                state = 680; break;,2,0,0,0,0,0,0,0,0,3,19,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,545,            ++ntrits;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,555,            printState(90); // XXX,0,0,0,1,2,0,2,0,0,2,22,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,556,            if (dsq <= xoptsq * ONE_OVER_A_THOUSAND) {,6,2,0,1,3,0,0,0,0,8,42,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,557,                final double fracsq = xoptsq * ONE_OVER_FOUR;,6,1,0,0,0,1,0,0,0,8,45,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,558,                double sumpq = ZERO;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,561,                for (int k = 0; k < npt; k++) {,8,1,0,1,3,0,0,0,0,10,31,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,562,                    sumpq += modelSecondDerivativesParameters.getEntry(k);,2,0,0,1,2,0,6,0,0,9,54,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,563,                    double sum = -HALF * xoptsq;,12,1,0,0,0,0,0,2,0,16,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,564,                    for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,565,"                        sum += interpolationPoints.getEntry(k, i) * trustRegionCenterOffset.getEntry(i);",2,1,0,2,4,0,0,0,0,3,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,568,"                    work2.setEntry(k, sum);",0,0,0,1,2,0,8,0,0,8,23,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,569,                    final double temp = fracsq - HALF * sum;,2,0,1,0,0,1,0,2,0,9,40,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,570,                    for (int i = 0; i < n; i++) {,10,1,0,1,3,0,0,0,0,12,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,571,"                        work1.setEntry(i, bMatrix.getEntry(k, i));",0,0,0,2,4,0,0,2,0,2,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,572,"                        lagrangeValuesAtNewPoint.setEntry(i, sum * interpolationPoints.getEntry(k, i) + temp * trustRegionCenterOffset.getEntry(i));",0,0,0,3,6,0,0,0,0,9,124,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,573,                        final int ip = npt + i;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,574,                        for (int j = 0; j <= i; j++) {,8,2,1,1,3,0,0,0,0,18,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,575,"                            bMatrix.setEntry(ip, j,",0,0,0,0,1,0,0,0,0,1,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,585,                for (int m = 0; m < nptm; m++) {,12,2,0,1,3,0,0,0,0,16,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,586,                    double sumz = ZERO;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,587,                    double sumw = ZERO;,8,1,0,0,0,1,0,0,0,13,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,588,                    for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,589,"                        sumz += zMatrix.getEntry(k, m);",2,1,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,590,"                        lagrangeValuesAtNewPoint.setEntry(k, work2.getEntry(k) * zMatrix.getEntry(k, m));",0,0,0,3,6,0,0,0,0,9,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,591,                        sumw += lagrangeValuesAtNewPoint.getEntry(k);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,593,                    for (int j = 0; j < n; j++) {,2,0,0,1,3,0,0,0,0,2,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,594,                        double sum = (fracsq * sumz - HALF * sumw) * trustRegionCenterOffset.getEntry(j);,10,4,0,2,4,0,6,0,0,20,81,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,595,                        for (int k = 0; k < npt; k++) {,8,1,0,1,3,0,0,0,0,10,31,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,596,"                            sum += lagrangeValuesAtNewPoint.getEntry(k) * interpolationPoints.getEntry(k, j);",0,0,0,2,4,0,0,0,0,6,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,598,"                        work1.setEntry(j, sum);",0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,599,                        for (int k = 0; k < npt; k++) {,4,3,0,1,3,0,0,0,0,7,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,600,"                            bMatrix.setEntry(k, j,",10,1,0,0,1,0,8,0,0,20,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,605,                    for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,606,                        final int ip = i + npt;,8,1,0,0,0,1,0,0,0,10,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,607,                        final double temp = work1.getEntry(i);,2,0,0,1,2,1,6,0,0,9,38,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,608,                        for (int j = 0; j <= i; j++) {,8,1,0,1,3,0,0,0,0,10,30,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,609,"                            bMatrix.setEntry(ip, j,",0,0,0,0,1,0,0,0,0,1,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,619,                int ih = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,620,                for (int j = 0; j < n; j++) {,14,1,0,1,3,0,10,0,0,26,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,621,"                    work1.setEntry(j, -HALF * sumpq * trustRegionCenterOffset.getEntry(j));",6,1,0,2,4,1,0,0,0,8,71,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,622,                    for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,623,"                        work1.setEntry(j, work1.getEntry(j) + modelSecondDerivativesParameters.getEntry(k) * interpolationPoints.getEntry(k, j));",0,0,0,4,8,0,0,0,0,12,121,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,624,"                        interpolationPoints.setEntry(k, j, interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j));",0,1,0,3,6,0,22,0,0,23,109,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,626,                    for (int i = 0; i <= j; i++) {,8,1,0,1,3,0,0,0,0,10,30,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,627,"                         modelSecondDerivativesValues.setEntry(ih,",4,0,0,0,1,0,10,0,0,16,41,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,631,"                        bMatrix.setEntry(npt + i, j, bMatrix.getEntry(npt + j, i));",8,2,0,2,4,0,12,2,0,24,59,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,632,                        ih++;,22,9,0,0,0,0,0,0,0,33,5,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,635,                for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,636,"                    originShift.setEntry(i, originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i));",0,0,0,3,6,0,0,0,0,9,87,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,637,"                    newPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));",2,1,0,3,6,0,18,0,0,21,81,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,638,"                    lowerDifference.setEntry(i, lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0,0,0,3,6,0,6,0,0,6,95,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,639,"                    upperDifference.setEntry(i, upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0,0,0,3,6,0,0,0,0,9,95,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,640,"                    trustRegionCenterOffset.setEntry(i, ZERO);",0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,642,                xoptsq = ZERO;,4,0,0,0,0,0,0,0,0,5,14,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,644,            if (ntrits == 0) {,4,1,0,1,3,0,0,4,0,9,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,645,                state = 210; break;,2,0,0,0,0,0,0,0,0,3,19,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,647,            state = 230; break;,0,0,0,0,0,0,6,0,0,6,19,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,660,            printState(210); // XXX,0,0,0,1,2,0,2,0,0,2,23,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,672,"            final double[] alphaCauchy = altmov(knew, adelt);",0,0,0,2,4,0,0,0,0,6,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,673,            alpha = alphaCauchy[0];,2,0,1,1,2,0,0,0,0,5,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,674,            cauchy = alphaCauchy[1];,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,676,            for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,677,"                trialStepPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0,0,0,3,6,0,0,0,0,9,87,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,686,            printState(230); // XXX,6,1,0,1,2,0,2,0,0,10,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,687,            for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,688,                double suma = ZERO;,4,0,1,0,0,0,0,0,0,9,19,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,689,                double sumb = ZERO;,4,0,0,0,0,0,0,0,0,4,19,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,690,                double sum = ZERO;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,691,                for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,692,"                    suma += interpolationPoints.getEntry(k, j) * trialStepPoint.getEntry(j);",0,0,0,2,4,0,0,0,0,6,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,693,"                    sumb += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);",2,1,0,2,4,0,14,0,0,18,81,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,694,"                    sum += bMatrix.getEntry(k, j) * trialStepPoint.getEntry(j);",4,1,0,2,4,0,24,0,0,31,59,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,696,"                work3.setEntry(k, suma * (HALF * suma + sumb));",2,0,0,2,4,1,4,2,0,9,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,697,"                lagrangeValuesAtNewPoint.setEntry(k, sum);",2,1,0,1,2,0,8,0,0,11,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,698,"                work2.setEntry(k, suma);",0,0,0,1,2,0,8,0,0,8,24,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,700,            beta = ZERO;,4,0,0,0,0,0,0,0,0,5,12,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,701,            for (int m = 0; m < nptm; m++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,702,                double sum = ZERO;,4,0,0,0,0,0,0,0,0,4,18,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,703,                for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,704,"                    sum += zMatrix.getEntry(k, m) * work3.getEntry(k);",8,2,0,2,4,0,18,0,0,29,50,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,706,                beta -= sum * sum;,6,1,0,0,0,0,0,0,0,8,18,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,707,                for (int k = 0; k < npt; k++) {,8,1,0,1,3,0,0,0,0,10,31,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,708,"                    lagrangeValuesAtNewPoint.setEntry(k, lagrangeValuesAtNewPoint.getEntry(k) + sum * zMatrix.getEntry(k, m));",2,2,0,3,6,0,20,0,0,24,106,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,711,            dsq = ZERO;,10,1,0,0,0,0,0,0,0,13,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,712,            double bsum = ZERO;,10,1,0,0,0,0,0,0,0,12,19,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,713,            double dx = ZERO;,4,0,0,0,0,0,0,0,0,4,17,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,714,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,716,                final double d1 = trialStepPoint.getEntry(j);,2,0,0,1,2,1,6,0,0,9,45,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,717,                dsq += d1 * d1;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,718,                double sum = ZERO;,6,0,1,0,0,0,4,2,0,22,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,719,                for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,720,"                    sum += work3.getEntry(k) * bMatrix.getEntry(k, j);",2,1,0,2,4,0,14,0,0,18,50,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,722,                bsum += sum * trialStepPoint.getEntry(j);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,723,                final int jp = npt + j;,6,1,0,0,0,1,0,0,0,8,23,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,724,                for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,725,"                    sum += bMatrix.getEntry(jp, i) * trialStepPoint.getEntry(i);",10,3,0,2,4,1,18,0,0,33,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,727,"                lagrangeValuesAtNewPoint.setEntry(jp, sum);",0,0,0,1,2,0,8,0,0,8,43,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,728,                bsum += sum * trialStepPoint.getEntry(j);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,729,                dx += trialStepPoint.getEntry(j) * trustRegionCenterOffset.getEntry(j);,2,1,0,2,4,0,12,0,0,16,71,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,732,            beta = dx * dx + dsq * (xoptsq + dx + dx + HALF * dsq) + beta - bsum; // Original,0,0,0,1,2,0,0,0,0,3,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,736,"            lagrangeValuesAtNewPoint.setEntry(trustRegionCenterInterpolationPointIndex,",0,0,0,0,1,0,6,0,0,6,75,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,743,            if (ntrits == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,745,                final double d1 = lagrangeValuesAtNewPoint.getEntry(knew);,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,746,                denom = d1 * d1 + alpha * beta;,10,3,0,0,0,0,0,0,0,14,31,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,747,                if (denom < cauchy && cauchy > ZERO) {,8,3,0,1,3,0,0,0,0,11,38,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,748,                    for (int i = 0; i < n; i++) {,14,4,0,1,3,1,6,0,0,26,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,749,"                        newPoint.setEntry(i, alternativeNewPoint.getEntry(i));",46,21,0,2,4,0,12,0,0,80,54,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,750,"                        trialStepPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));",6,0,0,3,6,0,0,0,0,7,87,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,0,0,0,2,4,0,0,0,0,6,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,0,0,0,1,3,0,0,0,0,4,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,0,2,4,0,0,0,0,6,30,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },4,2,0,0,1,0,0,0,0,6,1,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,8,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,2,0,0,0,0,0,0,0,0,2,17,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,4,0,0,0,0,0,0,0,0,7,27,0,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,4,0,0,2,5,3,8,0,0,16,37,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,18,4,0,1,3,4,2,0,0,29,42,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,6,0,0,2,5,4,12,4,0,26,44,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,              for (int i = 0; i < scale.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,12,2,1,3,6,3,4,0,0,31,78,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,115,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",10,0,0,1,2,0,0,0,0,10,76,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,117,    this.fsal      = fsal;,0,0,0,0,0,0,0,0,0,0,22,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,118,    this.c         = c;,4,0,0,0,0,0,0,0,0,4,19,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,119,    this.a         = a;,8,1,0,0,0,0,0,0,0,10,19,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,120,    this.b         = b;,6,0,0,0,0,0,0,0,0,7,19,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,121,    this.prototype = prototype;,0,0,0,0,0,0,0,0,0,0,27,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,123,    exp = -1.0 / getOrder();,0,0,0,1,2,0,0,0,0,3,24,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,126,    setSafety(0.9);,6,0,0,1,2,0,0,0,0,6,15,2,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,127,    setMinReduction(0.2);,12,1,0,1,2,0,0,0,0,16,21,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,128,    setMaxGrowth(10.0);,0,0,0,1,2,0,0,0,0,3,19,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,130,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,110,    super(name);,6,0,0,1,2,0,4,0,0,11,12,3,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,111,"    setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",0,0,0,1,2,0,0,0,0,3,83,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,112,    resetInternalState();,0,0,0,1,2,0,0,0,0,3,21,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,114,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,157,      minStep     = FastMath.abs(minimalStep);,2,0,0,1,2,0,6,0,0,9,40,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,158,      maxStep     = FastMath.abs(maximalStep);,2,1,0,1,2,0,6,0,0,10,40,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,159,      initialStep = -1;,8,0,0,0,0,2,4,0,0,16,17,2,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,161,      scalAbsoluteTolerance = absoluteTolerance;,4,0,0,0,0,0,0,0,0,5,42,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,162,      scalRelativeTolerance = relativeTolerance;,6,4,0,0,0,0,10,0,0,20,42,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,163,      vecAbsoluteTolerance  = null;,0,0,0,0,0,0,0,0,0,0,29,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,164,      vecRelativeTolerance  = null;,2,0,0,0,0,0,4,2,0,8,29,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,166,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,827,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,829,            if (intVal > 746) {,4,2,0,1,3,0,0,0,0,6,19,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,847,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,2,1,1,2,0,6,0,0,21,71,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,862,            intVal = -intVal;,2,1,0,0,0,0,0,0,0,3,17,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,98,            return primaryMapper.getDimension();,0,0,0,1,2,1,0,0,0,4,36,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,258,    double yOnScale2 = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,259,    double yDotOnScale2 = 0;,2,0,0,0,0,0,0,0,0,2,24,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,260,    for (int j = 0; j < scale.length; ++j) {,12,1,0,1,3,0,0,0,0,14,40,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,261,      ratio         = y0[j] / scale[j];,2,1,1,2,4,0,0,0,0,12,33,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,262,      yOnScale2    += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,30,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,263,      ratio         = yDot0[j] / scale[j];,4,1,0,2,4,0,6,0,0,11,36,1,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,264,      yDotOnScale2 += ratio * ratio;,0,0,0,0,0,0,0,0,0,0,30,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,267,    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?,0,0,0,3,6,0,0,0,0,9,64,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,269,    if (! forward) {,2,0,0,1,3,0,0,0,0,3,16,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,274,    for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,275,      y1[j] = y0[j] + h * yDot0[j];,2,1,0,3,6,0,4,0,0,7,29,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,277,"    computeDerivatives(t0 + h, y1, yDot1);",4,1,0,1,2,0,6,0,0,11,38,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,280,    double yDDotOnScale = 0;,0,0,0,0,0,0,0,0,0,0,24,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,281,    for (int j = 0; j < scale.length; ++j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,282,      ratio         = (yDot1[j] - yDot0[j]) / scale[j];,0,0,0,4,8,0,0,0,0,12,49,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,283,      yDDotOnScale += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,30,6,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,285,    yDDotOnScale = FastMath.sqrt(yDDotOnScale) / h;,4,1,0,1,2,0,14,0,0,20,47,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,289,"    final double maxInv2 = FastMath.max(FastMath.sqrt(yDotOnScale2), yDDotOnScale);",4,0,0,2,4,2,0,0,0,7,79,0,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,290,    final double h1 = (maxInv2 < 1.0e-15) ?,4,1,1,1,2,1,0,0,0,12,39,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,293,"    h = FastMath.min(100.0 * FastMath.abs(h), h1);",0,0,0,2,4,0,0,0,0,6,46,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,294,"    h = FastMath.max(h, 1.0e-12 * FastMath.abs(t0));  // avoids cancellation when computing t1 - t0",6,0,0,2,4,0,0,0,0,7,95,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,295,    if (h < getMinStep()) {,2,1,0,2,5,0,2,0,0,5,23,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,298,    if (h > getMaxStep()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,301,    if (! forward) {,0,0,0,1,3,0,4,0,0,4,16,5,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,305,    return h;,2,0,0,0,0,1,0,0,0,2,9,4,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,362,    return minStep;,8,2,0,0,0,1,8,0,0,18,15,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,369,    return maxStep;,10,4,0,0,0,1,14,0,0,28,15,3,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,218,        if (y.length != equations.getDimension()) {,4,1,0,2,5,0,4,0,0,9,43,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,223,        final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);,0,0,0,1,2,0,0,0,0,3,81,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,224,        expandableODE.setTime(t0);,0,0,0,1,2,0,6,0,0,6,26,5,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,225,        expandableODE.setPrimaryState(y0);,6,1,0,1,2,1,6,0,0,14,34,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,228,"        integrate(expandableODE, t);",6,3,0,1,2,0,16,0,0,25,28,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,233,        if (firstTime) {,2,0,0,1,3,0,0,0,0,2,16,5,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,234,          final double[] scale = new double[mainSetDimension];,2,0,1,2,4,1,0,0,0,5,52,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,235,          if (vecAbsoluteTolerance == null) {,2,1,0,1,3,0,4,0,0,7,35,3,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,244,"          hNew = initializeStep(forward, getOrder(), scale,",2,0,0,1,3,0,8,0,0,11,49,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,246,          firstTime = false;,4,0,0,0,0,0,0,2,0,7,18,8,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,249,        stepSize = hNew;,4,0,0,0,0,0,0,0,0,5,16,8,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,252,        for (int k = 1; k < stages; ++k) {,0,0,0,1,3,0,0,0,0,4,34,4,0.01724,1,1,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,254,          for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,10,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,255,            double sum = a[k-1][0] * yDotK[0][j];,4,2,1,4,8,0,0,0,0,12,37,13,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,256,            for (int l = 1; l < k; ++l) {,8,1,0,1,3,0,0,0,0,10,29,12,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,257,              sum += a[k-1][l] * yDotK[l][j];,0,0,0,4,8,0,0,0,0,12,31,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,259,            yTmp[j] = y[j] + stepSize * sum;,4,2,1,2,4,0,0,0,0,15,32,12,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,262,"          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);",0,0,0,3,6,0,0,0,0,9,66,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,39,266,    },6,0,0,0,1,1,0,0,0,7,1,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,116,"        primaryMapper.insertEquationData(primaryStateDot, yDot);",20,4,1,1,2,2,8,0,0,39,56,1,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,119,        for (final SecondaryComponent component : components) {,4,0,0,1,3,1,0,2,0,7,55,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,39,126,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,181,        currentState     = null;,2,1,0,0,0,0,10,0,0,14,24,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,182,        primaryMapper    = null;,4,0,0,0,0,0,0,0,0,5,24,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,183,        secondaryMappers = null;,2,0,0,0,0,0,0,0,0,3,24,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,184,        allocateInterpolatedArrays(-1);,0,0,0,1,2,0,0,0,0,3,31,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,248,    globalPreviousTime    = Double.NaN;,6,0,0,0,0,0,0,0,0,7,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,249,    globalCurrentTime     = Double.NaN;,6,0,0,0,0,0,0,0,0,7,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,250,    softPreviousTime      = Double.NaN;,8,2,0,0,0,0,6,0,0,17,35,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,251,    softCurrentTime       = Double.NaN;,6,0,0,0,0,0,0,0,0,7,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,252,    h                     = Double.NaN;,0,0,0,0,0,0,0,0,0,0,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,253,    interpolatedTime      = Double.NaN;,0,0,0,0,0,0,0,0,0,0,35,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,254,    currentState          = y;,4,0,0,0,0,0,0,0,0,5,26,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,255,    finalized             = false;,2,0,0,0,0,0,0,0,0,4,30,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,256,    this.forward          = isForward;,4,0,0,0,0,0,0,0,0,5,34,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,257,    this.dirtyState       = true;,2,0,0,0,0,0,0,0,0,4,29,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,258,    this.primaryMapper    = primary;,4,0,0,0,0,0,0,0,0,5,32,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,259,    this.secondaryMappers = secondary.clone();,6,0,0,1,2,1,4,4,0,16,42,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,260,    allocateInterpolatedArrays(y.length);,6,0,0,1,2,1,8,2,0,17,37,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,39,262,  },4,0,0,0,1,2,0,4,0,10,1,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,85,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,87,    if (interpolator.currentState != null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,97,      previousState = null;,6,1,1,0,0,0,0,0,0,10,21,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,98,      yDotK = null;,2,0,0,0,0,0,0,0,0,3,13,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,103,    integrator = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,105,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,134,"    reinitialize(y, forward, primaryMapper, secondaryMappers);",0,0,0,1,2,0,0,0,0,3,58,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,135,    this.previousState = null;,0,0,0,0,0,0,0,0,0,0,26,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,136,    this.yDotK = yDotArray;,4,0,0,0,0,0,0,0,0,5,23,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,137,    this.integrator = rkIntegrator;,4,0,0,0,0,0,0,2,0,7,31,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,138,  },8,1,0,0,1,0,0,0,0,10,1,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,143,    previousState = currentState.clone();,2,0,0,1,2,0,4,0,0,7,37,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,144,    super.shift();,0,0,0,1,2,0,0,0,0,3,14,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,39,145,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,195,    setEquations(equations);,0,0,0,1,2,0,4,0,0,4,24,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,196,    final boolean forward = t > equations.getTime();,8,3,1,1,2,1,4,0,0,23,48,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,199,    final double[] y0  = equations.getCompleteState();,0,0,0,2,4,0,0,0,0,6,50,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,200,    final double[] y = y0.clone();,0,0,0,2,4,0,0,0,0,6,30,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,201,    final int stages = c.length + 1;,12,2,0,0,0,4,0,0,0,18,32,1,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,202,    final double[][] yDotK = new double[stages][y.length];,6,0,1,4,8,1,0,0,0,9,54,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,203,    final double[] yTmp    = y0.clone();,8,4,0,2,4,1,4,0,0,17,36,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,204,    final double[] yDotTmp = new double[y.length];,6,0,0,2,4,1,0,0,0,7,46,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,207,    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();,2,0,0,2,4,1,4,4,0,11,94,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,208,"    interpolator.reinitialize(this, yTmp, yDotK, forward,",0,0,0,0,1,0,10,0,0,10,53,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,210,    interpolator.storeTime(equations.getTime());,0,0,0,2,4,0,8,0,0,8,44,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,213,    stepStart         = equations.getTime();,6,1,0,1,2,0,4,0,0,12,40,3,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,214,    double  hNew      = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,215,    boolean firstTime = true;,0,0,0,0,0,0,0,0,0,0,25,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,216,"    initIntegration(equations.getTime(), y0, t);",0,0,0,2,4,0,0,0,0,6,44,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,219,    isLastStep = false;,2,0,0,0,0,0,0,0,0,4,19,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,222,      interpolator.shift();,0,0,0,1,2,0,0,0,0,3,21,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,225,      double error = 10;,2,0,0,0,0,0,0,0,0,2,18,7,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,226,      while (error >= 1.0) {,2,1,0,1,3,0,0,0,0,3,22,6,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,228,        if (firstTime || !fsal) {,4,1,0,1,3,0,0,0,0,6,25,8,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,230,"          computeDerivatives(stepStart, y, yDotK[0]);",0,0,1,2,4,0,6,0,0,8,43,11,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,39,250,    if (initialStep > 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.01695,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3754,    private static class ExpFracTable {,0,0,0,0,1,0,0,0,0,1,35,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,4,0,0,1,3,3,4,0,0,11,34,1,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,2,0,0,1,2,0,4,0,0,7,56,8,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,2,0,1,1,2,0,4,0,0,12,56,1,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3787,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3711,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3722,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,2,0,0,1,3,0,0,0,0,2,34,5,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3747,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,8,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3748,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,6,1,1,1,2,1,4,0,0,18,54,1,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,3750,        },0,0,0,0,1,0,0,0,0,1,1,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,29,    private static final double[] EXP_INT_A = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,4,0,0,4,57,5,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,4074,    private static final double[] EXP_FRAC_B = new double[] {,4,0,0,2,5,3,0,2,0,9,57,1,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,5103,    private static final double[][] LN_MANT = new double[][] {,2,0,0,4,9,3,0,0,0,5,58,2,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6142,        return EXP_INT_A;,0,0,0,0,0,1,0,0,0,1,17,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6150,        return EXP_INT_B;,2,0,0,0,0,1,0,0,0,2,17,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6158,        return EXP_FRAC_A;,2,0,0,0,0,1,4,0,0,7,18,7,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6166,        return EXP_FRAC_B;,0,0,0,0,0,1,0,0,0,1,18,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,39,6174,        return LN_MANT;,0,1,0,0,0,1,12,0,0,13,15,6,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,826,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,6,0,1,1,2,1,0,0,0,9,64,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,10,3,1,1,2,1,0,0,0,17,55,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,899,        double z = 0.04168701738764507;,10,2,1,0,0,0,0,0,0,16,31,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,900,        z = z * epsilon + 0.1666666505023083;,6,2,0,0,0,0,4,0,0,13,37,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,901,        z = z * epsilon + 0.5000000000042687;,10,2,0,0,0,0,0,0,0,14,37,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,902,        z = z * epsilon + 1.0;,4,3,1,0,0,0,0,0,0,16,22,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,903,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,910,        double tempA = intPartA * fracPartA;,18,4,0,0,0,0,0,0,0,22,36,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,20,6,0,0,0,0,0,0,0,27,82,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,919,        if (extra != 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,20,7,0,0,0,0,0,0,0,28,63,6,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,931,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1106,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,12,0,0,14,39,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1123,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,12,2,0,5,10,0,0,0,0,15,73,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,12,5,0,3,6,0,0,0,0,18,89,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1215,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1216,        double lnzb = 0.0;,4,0,0,0,0,0,0,0,0,4,18,5,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1218,        if (hiPrec != null) {,8,2,0,1,3,0,0,0,0,11,21,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1221,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1222,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1223,            double xa = aa;,4,0,0,0,0,0,4,0,0,8,15,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1224,            double xb = ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1227,            double numer = bits & 0x3ffffffffffL;,6,1,0,0,0,0,0,0,0,8,37,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,6,2,0,1,2,0,0,0,0,8,59,7,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1229,            aa = numer - xa*denom - xb * denom;,14,4,0,0,0,0,0,2,0,21,35,2,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1230,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,57,7,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,12,2,0,1,3,1,0,2,0,18,55,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1238,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1239,                ab = ya * xb + yb * xa + yb * xb;,6,0,0,0,0,1,0,2,0,9,33,3,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1241,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1242,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1243,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0,0,1,2,4,0,4,0,0,8,32,7,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1249,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1250,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1251,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1255,            aa = ya * xa;,8,1,0,0,0,1,0,4,0,15,13,1,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,39,1256,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.01667,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,0,0,0,6,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,1,0,0,0,5,33,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },4,0,0,0,1,0,0,0,0,6,1,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,2,0,0,0,0,0,0,0,0,3,6,12,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,0,0,0,0,0,0,0,0,0,0,33,4,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,294,                nbPoints = end - start;,0,0,0,0,0,0,0,0,0,0,23,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,295,"                System.arraycopy(x, start, x, 0, nbPoints);",0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,296,"                System.arraycopy(y, start, y, 0, nbPoints);",0,0,0,1,2,0,12,0,0,12,43,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,297,                signChangeIndex -= start;,8,1,0,0,0,0,8,0,0,18,25,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,260,                    if (signChangeIndex - start >= end - signChangeIndex) {,0,0,0,1,3,0,0,0,0,4,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,269,                    nextX = Double.NaN;,6,0,0,0,0,0,0,0,0,7,19,10,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,290,            if ((nbPoints > 2) && (end - start != nbPoints)) {,8,0,0,3,7,1,0,0,0,10,50,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,299,            } else  if (nbPoints == x.length) {,0,0,0,1,4,0,0,0,0,5,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,316,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",36,6,0,1,2,3,10,0,0,57,89,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,317,            x[signChangeIndex] = nextX;,2,0,1,1,2,0,0,0,0,7,27,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,318,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,319,            y[signChangeIndex] = nextY;,2,0,1,1,2,0,0,0,0,7,27,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,320,            ++nbPoints;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,323,            if (nextY * yA <= 0) {,22,6,0,1,3,0,20,0,0,48,22,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,325,                xB = nextX;,4,0,0,0,0,0,0,0,0,5,11,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,326,                yB = nextY;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,327,                absYB = FastMath.abs(yB);,8,3,0,1,2,0,16,0,0,28,25,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,328,                ++agingA;,8,2,0,0,0,0,12,0,0,22,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,329,                agingB = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,343,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,172,            nbPoints        = 2;,8,1,0,0,0,0,0,0,0,9,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,173,            signChangeIndex = 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,195,        final double[] tmpX = new double[x.length];,0,0,0,2,4,0,0,0,0,6,43,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,198,        double xA    = x[signChangeIndex - 1];,0,0,0,1,2,0,0,0,0,3,38,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,199,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,200,        double absYA = FastMath.abs(yA);,2,0,0,1,2,0,6,0,0,8,32,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,201,        int agingA   = 0;,4,1,0,0,0,0,4,0,0,10,17,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,202,        double xB    = x[signChangeIndex];,2,0,1,1,2,0,0,0,0,7,34,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,203,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,204,        double absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,32,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,205,        int agingB   = 0;,14,4,0,0,0,0,0,0,0,20,17,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,211,            final double xTol = getAbsoluteAccuracy() +,2,1,0,1,2,1,2,0,0,6,43,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",2,0,0,6,13,1,0,0,0,3,87,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,233,            if (agingA >= MAXIMAL_AGING) {,2,0,0,1,3,3,0,0,0,5,30,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,236,            } else if (agingB >= MAXIMAL_AGING) {,8,2,0,1,4,0,0,0,0,13,37,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,241,                targetY = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,246,            int start = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,247,            int end   = nbPoints;,0,0,0,0,0,0,0,0,0,0,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,251,"                System.arraycopy(x, start, tmpX, start, end - start);",0,0,0,1,2,0,0,0,0,3,53,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,252,"                nextX = guessX(targetY, tmpX, y, start, end);",2,0,0,1,2,0,12,0,0,15,45,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,254,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,273,            } while (Double.isNaN(nextX) && (end - start > 1));,4,3,0,3,7,0,6,0,0,13,51,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,275,            if (Double.isNaN(nextX)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,283,            final double nextY = computeObjectiveValue(nextX);,2,0,0,1,2,1,4,0,0,7,50,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,284,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,365,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,6,0,0,19,39,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,366,            final int delta = i + 1 - start;,0,0,0,0,0,0,0,0,0,0,32,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,367,            for (int j = end - 1; j > i; --j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,368,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,0,0,0,7,14,0,0,0,0,21,47,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,373,        double x0 = 0;,10,1,0,0,0,0,0,0,0,13,14,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,374,        for (int j = end - 1; j >= start; --j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,375,            x0 = x[j] + x0 * (targetY - y[j]);,0,0,0,3,6,0,0,0,0,9,34,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,378,        return x0;,2,0,0,0,0,1,0,0,0,2,10,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,128,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,134,        return relativeAccuracy;,10,2,0,0,0,2,0,0,0,14,24,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,140,        return functionValueAccuracy;,0,0,0,0,0,1,0,0,0,1,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,146,        final double[] x = new double[maximalOrder + 1];,0,0,0,2,4,0,6,0,0,6,48,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,147,        final double[] y = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,148,        x[0] = getMin();,8,1,1,2,4,0,2,0,0,15,16,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,149,        x[1] = getStartValue();,18,7,1,2,4,0,2,0,0,35,23,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,150,        x[2] = getMax();,2,0,0,2,4,0,0,0,0,2,16,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,151,"        verifySequence(x[0], x[1], x[2]);",2,1,0,4,8,0,0,0,0,3,33,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,154,        y[1] = computeObjectiveValue(x[1]);,0,0,0,3,6,0,0,0,0,9,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,155,"        if (Precision.equals(y[1], 0.0, 1)) {",4,0,1,3,7,1,4,2,0,13,37,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,161,        y[0] = computeObjectiveValue(x[0]);,0,0,1,3,6,0,2,0,0,7,35,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,162,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,169,        if (y[0] * y[1] < 0) {,2,0,0,3,7,0,0,2,0,4,22,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,40,257,        if (o == null) {,6,3,0,1,3,0,0,0,0,10,16,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,40,260,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,110,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,116,        return searchMax;,2,0,0,0,0,1,0,0,0,2,17,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,122,        return searchStart;,0,0,0,0,0,1,0,0,0,1,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,153,        incrementEvaluationCount();,0,0,0,1,2,0,0,0,0,3,27,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,154,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,173,        MathUtils.checkNotNull(f);,0,0,0,1,2,0,6,0,0,6,26,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,176,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,177,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,178,        searchStart = startValue;,2,0,0,0,0,0,2,2,0,6,25,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,179,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,180,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,181,        evaluations.resetCount();,0,0,0,1,2,0,0,0,0,3,25,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,187,"        setup(maxEval, f, min, max, startValue);",2,0,0,1,2,1,0,0,0,3,40,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,190,        return doSolve();,0,0,0,1,2,1,2,0,0,2,17,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,268,"        UnivariateRealSolverUtils.verifySequence(lower, initial, upper);",0,0,0,1,2,0,10,0,0,10,64,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,269,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,294,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,297,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,336,        if (lower >= upper) {,0,0,0,1,3,0,6,2,0,8,21,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,354,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,355,"        verifyInterval(initial, upper);",0,0,0,1,2,0,6,0,0,6,31,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,40,356,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,40,41,public enum AllowedSolution {,0,0,0,0,1,0,0,0,0,1,29,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,40,48,"    ANY_SIDE,",2,0,0,0,0,0,0,0,0,2,9,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,40,55,"    LEFT_SIDE,",2,0,0,0,0,0,0,0,0,2,10,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,40,62,"    RIGHT_SIDE,",4,0,0,0,0,0,0,0,0,5,11,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,40,68,"    BELOW_SIDE,",2,0,0,0,0,0,0,0,0,2,11,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,40,74,    ABOVE_SIDE;,2,0,0,0,0,0,0,0,0,2,11,2,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,92,                                               final double functionValueAccuracy) {,4,0,0,0,2,1,0,0,0,6,37,0,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,49,    private final Incrementor evaluations = new Incrementor();,2,0,1,1,2,2,0,4,0,13,58,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,93,        this.absoluteAccuracy = absoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,94,        this.relativeAccuracy = relativeAccuracy;,0,0,0,0,0,0,0,0,0,0,41,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,95,        this.functionValueAccuracy = functionValueAccuracy;,0,0,0,0,0,0,0,0,0,0,51,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,40,282,            xInt = SGN_MASK - xInt;,0,0,0,0,0,0,0,0,0,0,23,4,0.02778,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,3539,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.01639,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,40,277,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.01471,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,40,278,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.01471,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,40,281,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01471,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,40,284,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01471,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,40,288,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0,0,0,1,2,0,0,0,0,3,61,4,0.01471,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,40,290,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.01471,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,3005,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.01471,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,3542,            return b;,0,0,0,0,0,1,6,0,0,6,9,5,0.01389,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,150,        if (++count > maximalCount) {,4,1,0,1,3,0,0,0,0,6,29,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,3538,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.01333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,3541,        if (a < b) {,2,0,0,1,3,3,0,0,0,5,12,2,0.01333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,91,        maximalCount = max;,0,0,0,0,0,0,0,0,0,0,19,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,159,        count = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,160,    },1,0,0,0,1,1,0,0,0,2,1,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,2,0,0,0,0,2,0,0,0,5,71,2,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0,0,0,0,0,0,0,0,0,0,58,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,115,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,198,    private static final double COSINE_TABLE_B[] =,4,1,1,1,2,3,0,0,0,13,46,1,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,256,    private static final long RECIP_2PI[] = new long[] {,6,3,0,2,5,0,8,0,0,17,52,3,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,40,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.0119,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,52,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,61,"        this(max,",2,0,0,0,1,0,0,0,0,2,9,4,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,78,                       MaxCountExceededCallback cb) {,2,0,0,0,2,0,0,2,0,4,30,3,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,40,    private int count = 0;,4,0,0,0,0,3,0,4,0,11,22,2,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,79,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,80,        maxCountCallback = cb;,4,0,0,0,0,0,0,0,0,5,22,4,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/util/Incrementor,40,62,             new MaxCountExceededCallback() {,2,0,0,1,3,0,6,2,0,10,32,3,0.01136,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,61,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,43,    public MathArithmeticException() {,4,0,0,1,3,0,6,0,0,12,34,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,57,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,58,"        context.addMessage(pattern, args);",2,0,0,1,2,1,10,0,0,13,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,63,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,40,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathInternalError,40,37,    public MathInternalError() {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathInternalError,40,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,2,4,0,6,0,0,10,69,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathInternalError,40,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathInternalError,40,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,0,0,0,4,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,0,0,0,7,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,4,0,0,1,2,0,0,4,0,8,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",8,0,0,1,2,3,16,4,0,32,50,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",10,1,0,2,5,0,10,0,0,22,43,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,2,0,0,0,0,0,0,0,0,2,17,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,14,2,0,1,3,0,0,0,0,18,46,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,4,1,1,1,2,0,0,0,0,10,23,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,6,1,1,1,2,0,4,0,0,16,27,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,4,1,1,0,0,1,0,0,0,10,11,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",2,1,0,2,5,1,12,6,0,22,43,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",14,4,1,1,2,0,2,0,0,31,49,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",0,0,0,1,2,0,0,0,0,3,67,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,0,0,0,3,6,0,0,0,0,9,47,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,8,2,0,1,2,1,2,0,0,13,33,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,4,0,0,0,0,0,6,0,0,13,10,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,6,0,0,21,46,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,8,2,0,0,0,1,16,2,0,32,11,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,10,1,1,1,3,0,4,0,0,21,16,1,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,4,0,0,4,15,7,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01563,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,8,0,0,0,0,0,0,0,0,8,24,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",10,1,0,2,5,0,12,0,0,26,40,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,12,2,0,0,0,0,2,0,0,17,10,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,4,0,0,1,3,0,0,4,0,9,46,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,124,                sum += values[i];,0,0,0,1,2,0,0,0,0,3,17,4,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,2,1,0,0,0,1,4,0,0,7,11,7,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,92,        super.clear();,8,1,0,1,2,1,0,0,0,10,14,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,6,1,0,0,0,0,0,0,0,8,16,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,117,        m1 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,118,        n = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,2,0,0,0,0,0,0,0,0,2,17,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,2,0,0,0,0,0,10,0,0,12,18,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,79,    public Mean() {,0,0,0,1,3,0,0,0,0,4,15,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,80,        incMoment = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,81,        moment = new FirstMoment();,2,0,0,1,2,0,0,2,0,5,27,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0101,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,97,    public Variance() {,0,0,0,1,3,0,0,0,0,4,19,4,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,98,        moment = new SecondMoment();,2,0,0,1,2,0,0,2,0,5,28,4,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,99,    },2,0,0,0,1,0,0,0,0,3,1,9,0.00952,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,184,        return true;,16,3,0,0,0,1,0,0,0,22,12,3,0.00909,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,163,        if (values == null) {,2,0,0,1,3,0,6,0,0,8,21,10,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,167,        if (begin < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,171,        if (length < 0) {,4,0,0,1,3,0,0,0,0,5,17,10,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,175,        if (begin + length > values.length) {,0,0,0,1,3,0,0,0,0,4,37,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,180,        if (length == 0 && !allowEmpty) {,0,0,0,1,3,0,0,0,0,4,33,4,0.00901,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,56,    public Sum() {,4,0,0,1,3,0,0,0,0,4,14,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,57,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,58,        value = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,59,    },8,1,0,0,1,0,0,0,0,11,1,4,0.00758,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,75,    protected SecondMoment moment = null;,0,0,0,0,0,0,0,0,0,0,37,4,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,84,    protected boolean incMoment = true;,8,0,0,0,0,1,0,0,0,11,35,1,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,91,    private boolean isBiasCorrected = true;,2,0,0,0,0,1,0,0,0,4,39,2,0.00667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,375,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.00662,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,60,        super();,4,0,0,1,2,0,0,0,0,5,8,11,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,61,        m2 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,62,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0061,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,79,    public FirstMoment() {,0,0,0,1,3,0,0,0,0,4,22,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,80,        n = 0;,14,3,0,0,0,1,10,0,0,29,6,3,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,81,        m1 = Double.NaN;,6,0,0,0,0,0,0,0,0,7,16,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,82,        dev = Double.NaN;,8,1,1,0,0,0,0,0,0,15,17,1,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,83,        nDev = Double.NaN;,6,0,0,0,0,0,0,0,0,7,18,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,84,    },2,3,1,0,1,1,0,0,0,10,1,7,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,41,35,public abstract class AbstractStorelessUnivariateStatistic,0,0,0,0,0,0,0,0,0,0,58,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,39,public abstract class AbstractUnivariateStatistic,2,0,0,0,0,2,0,0,0,4,49,1,0.00578,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,2,0,0,0,0,2,0,0,0,5,71,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0,0,0,0,0,0,0,0,0,0,58,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,115,    private static final double LN_QUICK_COEF[][] = {,4,0,1,2,5,3,0,0,0,14,49,1,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,128,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,237,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,256,    private static final long RECIP_2PI[] = new long[] {,12,3,0,2,5,3,0,0,0,18,52,1,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.00526,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3754,    private static class ExpFracTable {,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3766,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,2,0,0,1,3,0,0,0,0,2,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3767,                EXP_FRAC_TABLE_A = new double[FastMath.EXP_FRAC_TABLE_LEN];,6,0,0,1,2,0,0,0,0,7,59,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3768,                EXP_FRAC_TABLE_B = new double[FastMath.EXP_FRAC_TABLE_LEN];,4,0,0,1,2,0,0,0,0,5,59,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3770,                final double tmp[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3773,                final double factor = 1d / (EXP_FRAC_TABLE_LEN - 1);,4,2,0,1,2,1,0,0,0,7,52,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3774,                for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,0,1,3,0,0,0,0,4,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3775,"                    FastMathCalc.slowexp(i * factor, tmp);",0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3776,                    EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3777,                    EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3779,            } else if (LOAD_RESOURCES) {,10,0,0,1,4,0,0,0,0,10,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3780,                final double[][] expFrac = FastMathResources.loadExpFrac();,0,0,0,3,6,0,0,0,0,9,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3781,                EXP_FRAC_TABLE_A = expFrac[0];,2,0,1,1,2,0,0,0,0,5,30,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3782,                EXP_FRAC_TABLE_B = expFrac[1];,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3783,            } else {,8,1,0,0,2,0,0,0,0,9,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3784,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3785,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,2,0,0,1,2,0,4,0,0,7,56,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,3787,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,349,    private FastMath() {},2,1,0,2,4,0,0,0,0,3,21,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,362,            return d; // These are un-normalised - don't try to convert,2,0,0,0,0,2,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,364,        long xl = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,365,        xl = xl & MASK_30BITS; // Drop low order bits,6,1,0,0,0,0,0,0,0,8,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,0,0,0,4,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,383,      if (x != x) {,4,1,0,1,3,0,4,0,0,10,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,384,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,392,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,396,      if (x < -20) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,397,          return exp(-x)/2.0;,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,400,      double hiPrec[] = new double[2];,4,0,0,2,4,0,0,0,0,4,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,401,      if (x < 0.0) {,2,0,1,1,3,0,0,0,0,7,14,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,402,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,404,"      exp(x, 0.0, hiPrec);",4,0,0,1,2,0,6,0,0,11,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,406,      double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,409,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,410,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,411,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,414,      double recip = 1.0/ya;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,415,      temp = recip * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,416,      double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,417,      double recipb = recip - recipa;,20,6,0,0,0,0,0,0,0,26,31,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,26,10,0,1,2,0,0,0,0,37,76,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,422,      recipb += -yb * recip * recip;,0,0,0,0,0,0,4,0,0,4,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,425,      temp = ya + recipa;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,426,      yb += -(temp - ya - recipa);,12,1,0,1,2,0,0,0,0,17,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,427,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,428,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,429,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,430,      ya = temp;,2,0,0,0,0,0,0,0,0,3,10,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,432,      double result = ya + yb;,6,1,0,0,0,0,8,0,0,15,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,433,      result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,434,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,442,      boolean negate = false;,4,1,1,0,0,0,4,0,0,12,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,443,      if (x != x) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,444,          return x;,4,0,0,0,0,1,0,2,0,6,9,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,452,      if (x > 20.0) {,2,0,0,1,3,1,0,0,0,3,15,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,453,          return exp(x)/2.0;,0,0,0,1,2,1,4,0,0,4,18,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,456,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,457,          return -exp(-x)/2.0;,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,460,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,461,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,464,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,465,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,466,          negate = true;,8,1,1,0,0,0,8,0,0,25,14,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,471,      if (x > 0.25) {,4,1,0,1,3,0,0,2,0,7,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,472,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,473,"          exp(x, 0.0, hiPrec);",4,0,0,1,2,0,0,0,0,5,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,475,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,41,478,          double temp = ya * HEX_40000000;,8,1,0,0,0,0,0,0,0,9,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,6,2,0,1,2,0,4,0,0,12,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,0,0,0,7,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0,0,0,3,6,0,0,0,0,9,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,2,0,0,3,6,0,10,0,0,12,48,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,2,21,9,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,1,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,448,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,0,0,0,4,36,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,            for (int i = 0; i < data.length; i++) {,2,0,0,1,3,0,0,0,0,2,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,452,                dot += data[i] * vData[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,0,0,0,0,1,10,0,0,15,11,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,4,0,0,2,5,0,0,0,0,4,30,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,        return tableau.getSolution();,6,1,0,1,2,1,4,0,0,12,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,44,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",0,0,0,2,4,1,0,0,0,7,81,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,                return null;,0,0,0,0,0,1,10,0,0,10,12,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,320,        return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,0,0,0,1,2,0,0,0,0,3,72,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,4,1,0,1,2,0,4,4,0,14,92,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,1,0,2,4,0,4,0,0,5,102,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,0,0,0,5,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,6,1,0,3,6,1,0,0,0,8,70,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,      for (int i = 0; i < coefficients.length; i++) {,8,0,0,1,3,0,0,0,0,10,47,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",0,0,0,1,2,0,0,0,0,3,45,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,          if (colIndex < 0) {,4,2,1,1,3,1,0,0,0,19,19,12,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,409,          Integer basicRow = getBasicRow(colIndex);,0,0,0,1,2,0,0,0,0,3,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.05556,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,419,              coefficients[i] =,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,424,"      return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,92,            return 0;,18,4,1,0,0,2,0,0,0,28,9,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,192,        tableau.dropPhase1Objective();,4,1,0,1,2,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,194,        while (!tableau.isOptimal()) {,2,0,0,2,5,2,4,0,0,9,30,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,98,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,70,        double minValue = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,71,        Integer minPos = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,10,1,0,3,7,0,2,2,0,15,83,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,73,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {",0,1,0,2,5,0,10,0,0,11,56,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,75,                minValue = entry;,2,0,0,0,0,0,0,0,0,2,17,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,76,                minPos = i;,0,0,0,0,0,0,0,0,0,0,11,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,79,        return minPos;,2,0,0,0,0,1,4,0,0,7,14,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,90,        List<Integer> minRatioPositions = new ArrayList<Integer>();,10,1,0,1,2,0,0,8,0,20,59,0,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,91,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,92,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,8,1,1,3,7,2,10,0,0,25,80,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",16,2,0,2,4,0,8,0,0,28,63,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,94,"            final double entry = tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,97,                final double ratio = rhs / entry;,6,1,0,0,0,1,0,0,0,8,33,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);",14,0,0,1,2,4,0,0,0,18,62,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,99,                if (cmp == 0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,101,                } else if (cmp < 0) {,8,4,1,1,4,0,0,0,0,23,21,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,102,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,11,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,103,                    minRatioPositions = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,45,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,12,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,109,        if (minRatioPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,36,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,111,        } else if (minRatioPositions.size() > 1) {,0,1,0,2,6,0,4,0,0,5,42,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,125,        return minRatioPositions.get(0);,0,0,0,1,2,1,0,0,0,4,32,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,137,        incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,139,        Integer pivotCol = getPivotColumn(tableau);,0,0,0,1,2,0,0,0,0,3,43,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",2,0,0,1,2,0,6,2,0,10,50,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,141,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,147,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,150,        for (int i = 0; i < tableau.getHeight(); i++) {,6,1,0,2,5,0,4,0,0,12,47,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,151,            if (i != pivotRow) {,6,1,0,1,3,0,0,0,0,8,20,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,152,"                double multiplier = tableau.getEntry(i, pivotCol);",4,0,0,1,2,1,14,2,0,21,50,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,153,"                tableau.subtractRow(i, pivotRow, multiplier);",4,0,0,1,2,0,10,0,0,14,45,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,156,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,311,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,312,        for (int i = 0; i < getHeight(); i++) {,10,1,0,2,5,0,2,0,0,15,39,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,313,"            final double entry = getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,38,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,314,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",4,2,0,3,7,3,8,0,0,17,60,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,315,                row = i;,10,3,0,0,0,1,2,0,0,17,8,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,316,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0,0,0,2,6,0,8,0,0,9,51,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,328,        if (getNumObjectiveFunctions() == 1) {,0,1,0,2,5,0,6,0,0,7,38,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,385,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,437,        for (int j = 0; j < getWidth(); j++) {,8,1,0,2,5,0,2,0,0,13,38,0,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,438,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,440,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,454,"        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)",0,0,0,1,3,0,12,0,0,12,65,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,456,    },0,0,1,0,1,0,4,0,0,8,1,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,68,            return -1;,4,7,1,0,0,1,0,0,0,27,10,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,285,            yInt = SGN_MASK - yInt;,8,1,0,0,0,0,0,2,0,12,23,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,155,"        columnLabels.add(""W"");",0,0,0,1,2,0,4,0,0,5,22,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,168,"        columnLabels.add(""a"" + i);",2,1,0,1,2,0,4,0,0,8,26,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,188,"            matrix.setEntry(0, 0, -1);",0,0,0,1,2,0,4,0,0,5,26,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,225,            } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,232,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",2,1,1,2,4,0,8,0,0,20,69,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,233,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",4,1,0,2,4,0,8,0,0,15,73,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,234,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0,0,0,4,8,0,16,0,0,16,82,9,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,506,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,4,1,0,1,2,1,2,0,0,7,77,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,514,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,91,"        if (equals(x, y, maxUlps)) {",0,0,0,2,5,0,8,0,0,8,28,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,93,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,94,            return -1;,2,0,0,0,0,2,4,0,0,8,10,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,96,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,73,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,74,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,0,0,0,3,41,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,79,        this.maxIterations = maxIterations;,6,0,0,0,0,0,0,0,0,8,35,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,110,        this.function          = f;,4,0,0,0,0,0,0,0,0,5,27,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,111,        this.linearConstraints = constraints;,6,0,0,0,0,0,0,0,0,7,37,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,112,        this.goal              = goalType;,4,0,0,0,0,0,0,0,0,5,34,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,113,        this.nonNegative       = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,47,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,115,        iterations  = 0;,2,0,1,0,0,0,4,0,0,11,16,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,118,        return doOptimize();,0,0,0,1,2,1,0,0,0,4,20,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",6,0,0,1,2,3,0,0,0,9,36,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,52,    },2,0,0,0,1,0,0,0,0,3,1,2,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",4,0,0,1,3,0,0,0,0,4,63,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,60,        this.epsilon = epsilon;,8,0,0,0,0,0,0,0,0,10,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,61,        this.maxUlps = maxUlps;,4,0,0,0,0,0,0,0,0,5,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,169,        if (tableau.getNumArtificialVariables() == 0) {,4,1,0,2,5,0,0,0,0,5,47,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,187,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,191,        solvePhase1(tableau);,2,0,0,1,2,0,8,0,0,10,21,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,382,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,6,2,0,3,7,0,4,0,0,13,67,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,383,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,384,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",4,1,0,2,5,0,14,0,0,19,50,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,388,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,471,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,3023,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,65,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,66,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,67,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,70,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,241,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,463,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,480,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,0,0,0,4,37,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,0,0,0,0,0,0,0,0,0,0,71,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0,0,0,0,0,0,0,0,0,0,58,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,128,    private static final double LN_HI_PREC_COEF[][] = {,12,3,0,2,5,0,0,0,0,15,51,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,0,0,0,0,2,44,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,198,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,237,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",8,0,0,2,4,3,0,0,0,12,126,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,42,3005,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,277,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,278,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,281,        if (xInt < 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,282,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,6,0,0,16,23,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,284,        if (yInt < 0) {,4,2,1,1,3,0,0,0,0,14,15,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,288,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0,0,0,1,2,0,0,0,0,3,61,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/Precision,42,290,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,478,"        return new ArrayRealVector(getRow(row), false);",2,0,0,2,4,1,4,2,0,9,47,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,483,"        MatrixUtils.checkRowIndex(this, row);",6,1,0,1,2,0,0,0,0,7,37,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,484,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,485,        if (vector.getDimension() != nCols) {,2,0,0,2,5,0,4,0,0,7,37,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,489,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,490,"            setEntry(row, i, vector.getEntry(i));",0,0,0,2,4,0,18,0,0,18,37,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,492,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,514,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,515,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,516,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,517,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,518,"            out[i] = getEntry(row, i);",2,0,1,2,4,0,6,0,0,13,26,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,521,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,64,    },0,0,1,0,1,0,0,0,0,3,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,315,        if (v instanceof ArrayRealVector) {,2,0,1,1,3,0,0,2,0,7,35,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,316,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,317,            final int dim = vData.length;,2,1,0,0,0,0,0,0,0,4,29,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,318,            checkVectorDimensions(dim);,2,0,0,1,2,0,4,0,0,6,27,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,319,            ArrayRealVector result = new ArrayRealVector(dim);,0,0,0,1,2,0,0,0,0,3,50,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,320,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,321,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,322,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,324,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,622,        return data[index];,0,0,1,1,2,1,0,0,0,4,19,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,265,"        return new LinearConstraint(constraint.getCoefficients(),",8,1,0,1,3,1,4,2,0,17,57,0,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,101,"    public ArrayRealVector(double[] d, boolean copyArray) {",6,0,0,2,5,1,0,0,0,7,55,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,102,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,105,        data = copyArray ? d.clone() :  d;,0,0,0,1,2,0,0,0,0,3,34,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,762,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,765,    },0,0,0,0,1,0,6,0,0,6,1,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,295,        return data[row][column];,4,0,1,2,4,3,2,0,0,20,25,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,58,public abstract class RealVector {,6,1,0,0,1,2,6,0,0,15,34,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,864,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,527,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",6,0,0,1,3,3,0,0,0,9,81,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,57,        if (columnDimension < 1) {,2,0,0,1,3,0,0,0,0,3,26,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,42,52,public abstract class RealLinearOperator {,2,1,0,0,1,0,0,0,0,3,42,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,83,    public ArrayRealVector(double[] d) {,20,3,1,2,5,1,0,0,0,35,36,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",8,0,0,1,3,1,0,2,0,12,57,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,198,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,199,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,284,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,2,0,3,39,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,373,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,374,            data[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,22,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,376,        return this;,4,1,0,0,0,1,6,0,0,11,12,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,628,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,37,public class ArrayRealVector extends RealVector implements Serializable {,2,0,0,0,1,1,0,4,0,7,73,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,57,    },2,0,0,0,1,0,6,0,0,8,1,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,254,        return data;,0,0,0,0,0,1,0,0,0,1,12,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",2,0,0,1,2,0,8,0,0,10,48,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",10,2,0,1,2,0,0,0,0,12,64,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,109,        this.separator   = separator;,10,1,1,0,0,0,0,0,0,16,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,110,        trimmedPrefix    = prefix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,111,        trimmedSuffix    = suffix.trim();,4,1,0,1,2,0,6,0,0,14,33,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,112,        trimmedSeparator = separator.trim();,4,0,0,1,2,0,0,0,0,5,36,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,162,        return getInstance(Locale.getDefault());,2,0,0,2,4,3,6,2,0,12,40,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,42,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,76,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,367,"        checkRowIndex(m, row);",6,1,0,1,2,0,6,0,0,14,22,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,369,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,379,        if (row < 0 ||,2,0,0,0,1,0,6,0,0,9,14,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,384,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,394,        if (column < 0 || column >= m.getColumnDimension()) {,0,0,0,2,5,0,4,0,0,4,53,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,42,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,58,"        this(new ArrayRealVector(coefficients), constantTerm);",4,0,0,2,4,0,0,2,0,6,54,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",0,0,0,1,3,0,0,0,0,4,78,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,67,        this.constantTerm = constantTerm;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,75,        return coefficients;,0,0,0,0,0,1,0,0,0,1,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,83,        return constantTerm;,0,0,0,0,0,1,0,0,0,1,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,42,27,public enum GoalType implements Serializable {,12,2,1,0,1,1,0,2,0,20,46,0,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,42,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,42,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,81,"        this(new ArrayRealVector(coefficients), relationship, value);",14,0,0,2,4,0,8,2,0,25,61,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,100,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,101,        this.relationship = relationship;,10,0,0,0,0,0,8,0,0,20,33,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,102,        this.value        = value;,10,2,1,0,0,0,6,0,0,21,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,168,        return coefficients;,2,0,0,0,0,1,0,0,0,2,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,176,        return relationship;,2,0,0,0,0,1,0,0,0,2,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,42,184,        return value;,2,0,0,0,0,1,0,2,0,4,13,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,42,    private Relationship(String stringValue) {,2,0,0,1,3,0,0,0,0,3,42,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,31,"    LEQ(""<=""),",2,0,0,1,2,0,0,0,0,3,10,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,34,"    GEQ("">="");",0,0,0,1,2,0,0,0,0,3,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,42,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,134,                   final int maxUlps) {,2,0,0,0,2,1,0,0,0,3,20,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,84,    private final List<String> columnLabels = new ArrayList<String>();,6,0,0,1,2,2,0,10,0,18,66,1,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,135,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,136,        this.constraints            = normalizeConstraints(constraints);,2,0,0,1,2,0,4,0,0,7,64,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,137,        this.restrictToNonNegative  = restrictToNonNegative;,0,0,0,0,0,0,0,0,0,0,52,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,138,        this.epsilon                = epsilon;,4,0,0,0,0,0,0,0,0,5,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,139,        this.maxUlps                = maxUlps;,4,0,0,0,0,0,0,0,0,5,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,140,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,2,1,0,2,4,0,6,0,0,10,66,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,142,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0,0,0,1,2,0,0,0,0,3,73,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,144,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,6,1,0,1,2,0,2,0,0,10,72,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,146,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,8,1,0,1,2,0,2,0,0,12,60,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,147,        initializeColumnLabels();,0,0,0,1,2,0,2,0,0,2,25,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,154,      if (getNumObjectiveFunctions() == 2) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,157,"      columnLabels.add(""Z"");",0,0,0,1,2,0,0,0,0,3,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,158,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,61,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,159,"        columnLabels.add(""x"" + i);",0,0,0,1,2,0,0,0,0,3,26,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,161,      if (!restrictToNonNegative) {,2,0,1,1,3,0,0,0,0,7,29,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,164,      for (int i = 0; i < getNumSlackVariables(); i++) {,6,1,0,2,5,0,2,0,0,10,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,167,      for (int i = 0; i < getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,55,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,170,"      columnLabels.add(""RHS"");",6,1,0,1,2,0,4,0,0,12,24,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,171,    },4,1,0,0,1,0,0,0,0,5,1,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,181,        int width = numDecisionVariables + numSlackVariables +,6,1,0,0,0,0,0,0,0,7,54,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,183,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,184,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",6,1,1,1,2,0,0,4,0,18,70,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,187,        if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,0,2,0,0,3,38,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,190,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,8,2,0,2,4,1,2,0,0,13,55,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,191,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",2,0,0,1,2,0,8,0,0,11,51,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,192,        RealVector objectiveCoefficients =,2,0,0,0,0,0,0,2,0,4,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,194,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",6,1,1,4,8,0,12,0,0,22,72,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,195,"        matrix.setEntry(zIndex, width - 1,",0,0,0,0,1,0,0,0,0,1,34,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,198,        if (!restrictToNonNegative) {,4,1,0,1,3,0,0,0,0,6,29,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,204,        int slackVar = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,205,        int artificialVar = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,206,        for (int i = 0; i < constraints.size(); i++) {,6,1,0,2,5,0,6,0,0,14,46,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,207,            LinearConstraint constraint = constraints.get(i);,8,4,0,1,2,0,0,0,0,13,49,10,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,208,            int row = getNumObjectiveFunctions() + i;,0,0,0,1,2,0,0,0,0,3,41,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,211,"            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",0,0,1,5,10,0,12,0,0,14,76,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,214,            if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,220,"            matrix.setEntry(row, width - 1, constraint.getValue());",2,1,0,2,4,0,10,0,0,13,55,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,223,            if (constraint.getRelationship() == Relationship.LEQ) {,4,1,0,2,5,0,4,0,0,9,55,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,230,            if ((constraint.getRelationship() == Relationship.EQ) ||,0,0,0,2,5,0,0,0,0,7,56,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,238,        return matrix;,26,3,0,0,0,1,0,0,0,32,14,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,247,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,2,0,0,1,2,0,0,8,0,10,70,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,248,        for (LinearConstraint constraint : originalConstraints) {,12,1,0,1,3,0,0,2,0,16,57,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,249,            normalized.add(normalize(constraint));,0,0,0,2,4,0,8,0,0,8,38,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,250,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,251,        return normalized;,2,0,0,0,0,1,0,0,0,2,18,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,260,        if (constraint.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,32,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,274,        return this.numArtificialVariables > 0 ? 2 : 1;,0,0,0,0,0,1,0,0,0,1,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,283,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,284,        for (final LinearConstraint constraint : constraints) {,26,9,0,1,3,1,0,2,0,39,55,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,285,            if (constraint.getRelationship() == relationship) {,0,0,0,2,5,0,0,0,0,7,51,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,286,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,288,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,289,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,374,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",4,0,0,2,4,0,10,0,0,14,71,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,375,    },2,0,0,0,1,3,0,0,0,5,1,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,537,        return f.getCoefficients().getDimension();,4,2,0,2,4,1,6,0,0,12,42,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,545,        return numSlackVariables;,4,1,0,0,0,1,0,0,0,5,25,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,553,        return numArtificialVariables;,2,0,0,0,0,1,0,0,0,2,30,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,42,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,1,0,1,2,1,10,2,0,16,57,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,42,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,42,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,810,        public Entry() {,2,0,0,1,3,1,0,0,0,3,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,811,            setIndex(0);,0,0,0,1,2,0,2,0,0,2,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,812,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,820,            return getEntry(getIndex());,0,0,0,2,4,1,8,0,0,8,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,829,"            setEntry(getIndex(), value);",4,0,0,2,4,0,6,0,0,11,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,830,        },2,0,0,0,1,0,6,0,0,8,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,838,            return index;,22,6,0,0,0,1,0,0,0,28,13,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,847,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,848,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,98,"        setEntry(index, getEntry(index) + increment);",6,1,1,2,4,2,8,2,0,26,45,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,162,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,4,0,0,4,40,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,173,        int d = getDimension();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,174,        if (d != n) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,175,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,177,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,186,        if (index < 0 ||,8,3,0,0,1,0,0,0,0,12,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,188,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,191,    },2,0,1,0,1,0,0,0,0,7,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,203,        RealVector result = v.copy();,8,1,0,1,2,0,4,2,0,16,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,204,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,206,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,207,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,208,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,209,        },2,0,0,0,1,0,0,0,0,3,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,210,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,223,        RealVector result = v.copy();,2,0,0,1,2,0,4,2,0,8,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,224,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,226,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,227,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,228,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,229,        },4,0,0,0,1,2,0,0,0,6,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,230,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,241,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,0,0,0,7,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,252,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,253,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,8,2,0,10,61,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,255,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,274,        checkVectorDimensions(v);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,275,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,276,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,14,0,0,14,38,14,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,278,        while (it.hasNext() && (e = it.next()) != null) {,4,2,0,4,9,0,12,4,0,23,49,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,279,            d += e.getValue() * v.getEntry(e.getIndex());,0,0,0,3,6,0,0,0,0,9,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,281,        return d;,4,0,0,0,0,4,0,0,0,7,9,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,292,        final double norm = getNorm();,4,0,0,1,2,1,2,0,0,7,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,293,        final double vNorm = v.getNorm();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,295,        if (norm == 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,297,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,299,        return dotProduct(v) / (norm * vNorm);,4,2,0,2,4,1,4,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,337,        checkVectorDimensions(v);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,338,        double d = 0;,4,0,0,0,0,1,0,0,0,5,13,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,339,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,341,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,342,            final double diff = e.getValue() - v.getEntry(e.getIndex());,2,1,0,3,6,1,12,0,0,16,60,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,343,            d += diff * diff;,14,3,1,0,0,0,4,0,0,32,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,344,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,345,        return FastMath.sqrt(d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,359,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,360,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,362,        while (it.hasNext() && (e = it.next()) != null) {,4,2,0,4,9,0,8,0,0,16,49,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,363,            final double value = e.getValue();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,364,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,365,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,366,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,380,        double norm = 0;,4,0,0,0,0,0,0,0,0,5,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,381,        Iterator<Entry> it = sparseIterator();,2,3,1,1,2,0,2,4,0,32,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,383,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,384,            norm += FastMath.abs(e.getValue());,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,386,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,400,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,401,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,403,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,404,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",4,0,0,3,6,0,20,0,0,26,54,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,406,        return norm;,16,1,0,0,0,1,0,0,0,20,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,421,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,422,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,423,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,425,        while (it.hasNext() && (e = it.next()) != null) {,6,2,0,4,9,0,8,2,0,19,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,426,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,4,1,0,4,8,0,18,4,0,28,59,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,428,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,446,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,447,        double d = 0;,4,0,0,0,0,0,0,0,0,4,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,448,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,450,        while (it.hasNext() && (e = it.next()) != null) {,12,2,1,4,9,0,8,8,0,38,49,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,451,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",12,1,1,5,10,0,22,0,0,40,75,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,453,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,463,        int minIndex    = -1;,4,0,0,0,0,0,0,0,0,5,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,464,        double minValue = Double.POSITIVE_INFINITY;,16,0,0,0,0,0,20,4,0,42,43,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,465,        Iterator<Entry> iterator = iterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,466,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,467,            final Entry entry = iterator.next();,2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,468,            if (entry.getValue() <= minValue) {,0,0,0,2,5,0,0,0,0,7,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,469,                minIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,470,                minValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,472,        },2,0,0,0,1,1,8,0,0,11,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,473,        return minIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,483,        final int minIndex = getMinIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,484,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,6,1,0,1,2,1,4,0,0,11,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,494,        int maxIndex    = -1;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,495,        double maxValue = Double.NEGATIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,496,        Iterator<Entry> iterator = iterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,497,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,498,            final Entry entry = iterator.next();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,499,            if (entry.getValue() >= maxValue) {,2,1,1,2,5,0,8,0,0,21,35,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,500,                maxIndex = entry.getIndex();,4,0,1,1,2,0,8,4,0,21,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,501,                maxValue = entry.getValue();,4,0,0,1,2,3,8,2,0,18,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,503,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,504,        return maxIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,514,        final int maxIndex = getMaxIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,515,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,6,1,0,1,2,1,4,0,0,11,54,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,538,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,8,2,0,10,66,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,549,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,560,        return mapAddToSelf(-d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,571,        return copy().mapDivideToSelf(d);,4,0,0,2,4,1,6,0,0,12,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,582,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,3,6,1,8,2,0,10,64,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,593,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,2,1,0,1,3,0,0,4,0,7,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,594,"            product = new OpenMapRealMatrix(this.getDimension(),",0,0,0,1,3,0,0,0,0,4,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,597,"            product = new Array2DRowRealMatrix(this.getDimension(),",2,0,0,1,3,0,2,2,0,7,55,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,600,        Iterator<Entry> thisIt = sparseIterator();,18,5,0,1,2,0,2,4,0,30,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,601,        Entry thisE = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,602,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,2,0,0,4,9,0,0,0,0,3,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,603,            Iterator<Entry> otherIt = v.sparseIterator();,2,0,0,1,2,0,4,4,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,604,            Entry otherE = null;,2,0,0,0,0,0,0,2,0,4,20,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,605,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,0,0,0,4,9,0,0,0,0,13,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,606,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0,0,0,2,5,0,12,0,0,12,53,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,609,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,611,        return product;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,631,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,632,        Entry e = null;,2,0,0,0,0,0,0,2,0,4,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,633,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,634,            e.setValue(value);,0,0,0,1,2,0,6,0,0,6,18,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,636,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,646,        int dim = getDimension();,2,0,0,1,2,0,2,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,647,        double[] values = new double[dim];,2,0,1,2,4,0,0,0,0,4,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,648,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,649,            values[i] = getEntry(i);,0,0,1,2,4,0,4,0,0,9,24,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,651,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,662,        RealVector copy = copy();,2,1,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,663,        copy.unitize();,0,0,0,1,2,0,4,0,0,4,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,664,        return copy;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,675,        mapDivideToSelf(getNorm());,0,0,0,2,4,0,4,0,0,4,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,676,    },2,0,1,0,1,0,0,0,0,6,1,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,690,        return new SparseEntryIterator();,0,0,1,1,2,1,0,2,0,8,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,700,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,701,        return new Iterator<Entry>() {,6,1,0,1,3,1,0,0,0,8,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,738,        return copy().mapToSelf(function);,6,1,0,2,4,1,0,0,0,8,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,755,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,2,1,0,4,8,0,8,4,0,15,78,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,757,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,758,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,12,0,0,12,41,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,760,        return this;,0,0,0,0,0,1,0,2,0,3,12,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,777,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,793,        checkVectorDimensions(y);,0,0,0,1,2,0,10,0,0,10,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,794,        for (int i = 0; i < getDimension(); i++) {,6,1,0,2,5,0,2,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,795,            final double xi = getEntry(i);,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,796,            final double yi = y.getEntry(i);,2,0,0,1,2,1,6,0,0,9,32,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,797,"            setEntry(i, a * xi + b * yi);",14,3,0,1,2,3,4,4,0,28,29,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,799,        return this;,2,0,0,0,0,1,0,0,0,3,12,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,949,        return new RealVector() {,2,0,0,1,3,1,0,2,0,4,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,873,        protected SparseEntryIterator() {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,874,            dim = getDimension();,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,875,            current = new Entry();,2,0,0,1,2,0,0,2,0,5,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,876,            next = new Entry();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,877,            if (next.getValue() == 0) {,0,1,0,2,5,0,10,0,0,11,27,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,878,                advance(next);,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,880,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,888,            if (e == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,889,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,892,                e.setIndex(e.getIndex() + 1);,0,1,0,2,4,0,8,0,0,9,29,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,893,            } while (e.getIndex() < dim && e.getValue() == 0);,2,3,1,3,7,0,8,0,0,20,50,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,894,            if (e.getIndex() >= dim) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,895,                e.setIndex(-1);,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,897,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,901,            return next.getIndex() >= 0;,2,1,1,1,2,2,4,0,0,12,28,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,906,            int index = next.getIndex();,2,0,0,1,2,0,4,0,0,6,28,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,907,            if (index < 0) {,4,1,0,1,3,1,8,0,0,14,16,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,908,                throw new NoSuchElementException();,0,0,0,1,2,0,0,2,0,2,35,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,910,            current.setIndex(index);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,911,            advance(next);,0,0,0,1,2,0,4,0,0,4,14,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,912,            return current;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,917,            throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,42,864,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,94,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,95,        this.rows = rows;,6,1,0,0,0,0,0,0,0,8,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,96,        this.columns = columns;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,99,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,100,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,103,"        blocks = createBlocksLayout(rows, columns);",2,0,0,1,2,0,6,0,0,9,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,104,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,120,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,139,"        super(rows, columns);",10,1,0,1,2,0,0,0,0,12,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,140,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,141,        this.columns = columns;,8,1,0,0,0,0,0,0,0,10,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,144,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,145,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,147,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,149,            blocks = new double[blockRows * blockColumns][];,6,1,0,2,4,0,0,0,0,8,48,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,152,            blocks = blockData;,8,0,0,0,0,0,0,2,0,11,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,155,        int index = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,156,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,157,            final int iHeight = blockHeight(iBlock);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,42,158,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",10,1,0,1,3,0,0,0,0,13,64,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6,0,0,1,3,1,4,0,0,12,12,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,0,0,0,0,0,0,0,0,5,20,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,0,0,0,0,0,2,2,0,11,25,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,2,0,0,0,0,2,0,0,0,4,20,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,10,0,0,0,0,0,0,2,0,15,8,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,0,0,0,0,2,53,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,1,0,2,4,0,4,0,0,21,53,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,1,0,0,0,0,12,0,0,15,33,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,24,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,0,0,2,4,3,0,0,0,5,30,2,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,30,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,20,5,1,0,0,1,0,0,0,29,33,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,20,6,0,0,0,0,0,0,0,28,24,3,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,0,0,0,0,0,1,6,0,0,6,15,5,1.28571,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,167,        if (begin < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,171,        if (length < 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,        if (begin + length > values.length) {,8,2,0,1,3,0,0,0,0,10,37,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,4,2,0,1,3,0,0,0,0,7,33,4,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,        return true;,4,0,0,0,0,1,0,0,0,5,12,10,1.16129,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,        if (values == null) {,6,1,0,1,3,6,0,4,0,17,21,1,1.14286,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,62,"        return evaluate(values, 0, values.length);",0,0,0,1,2,1,0,0,0,4,42,4,1.14286,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,577,        checkEmpty();,6,2,0,1,2,3,18,0,0,29,13,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,578,        this.geoMeanImpl = geoMeanImpl;,2,0,0,0,0,3,0,0,0,5,31,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,579,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,635,        checkEmpty();,4,0,0,1,2,0,2,0,0,7,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,636,        this.varianceImpl = varianceImpl;,0,0,0,0,0,0,0,0,0,0,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,637,    },2,0,0,0,1,1,6,0,0,9,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,84,        value += FastMath.log(d);,0,0,0,1,2,0,0,0,0,3,25,4,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,85,        n++;,4,0,1,0,0,1,0,0,0,10,4,3,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,86,    },2,0,0,0,1,3,0,0,0,5,1,2,0.85714,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,150,        sumImpl.increment(value);,4,0,0,1,2,0,0,0,0,5,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,151,        sumsqImpl.increment(value);,0,0,0,1,2,0,6,0,0,6,27,5,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,152,        minImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,153,        maxImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,25,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,154,        sumLogImpl.increment(value);,0,0,0,1,2,0,0,0,0,3,28,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,155,        secondMoment.increment(value);,0,0,0,1,2,0,0,0,0,3,30,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,8,1,0,2,5,0,0,2,0,13,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,6,1,0,2,5,0,0,0,0,7,42,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,4,0,0,2,5,0,0,0,0,5,46,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,167,        n++;,0,0,0,0,0,0,0,0,0,0,4,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,168,    },4,0,0,0,1,1,6,4,0,16,1,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,76,        if (d > value || Double.isNaN(value)) {,0,0,0,2,5,0,0,0,0,7,39,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,77,            value = d;,0,0,0,0,0,0,0,0,0,0,10,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,79,        n++;,6,1,0,0,0,0,0,0,0,8,4,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,43,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,76,        if (d < value || Double.isNaN(value)) {,4,2,0,2,5,0,6,0,0,12,39,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,77,            value = d;,6,0,0,0,0,0,0,0,0,7,10,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,79,        n++;,20,1,1,0,0,0,0,0,0,25,4,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,43,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,76,        value += d;,0,0,0,0,0,0,0,0,0,0,11,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,77,        n++;,6,1,0,0,0,0,0,0,0,8,4,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,78,    },10,1,0,0,1,0,0,0,0,13,1,0,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,75,        value += d * d;,0,0,0,0,0,0,0,0,0,0,15,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,76,        n++;,6,0,0,0,0,2,0,4,0,12,4,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,77,    },2,0,0,0,1,0,6,0,0,8,1,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,102,        if (n == 0) {,6,1,0,1,3,0,0,0,0,7,13,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,103,            m1 = 0.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,105,        n++;,0,0,0,0,0,0,0,0,0,0,4,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,106,        double n0 = n;,6,0,0,0,0,0,4,0,0,11,14,3,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,107,        dev = d - m1;,6,1,0,0,0,0,0,0,0,8,13,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,108,        nDev = dev / n0;,0,0,0,0,0,0,0,0,0,0,16,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,109,        m1 += nDev;,4,0,0,0,0,0,0,0,0,5,11,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,110,    },0,0,0,0,1,0,0,0,0,1,1,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,80,        if (n < 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,81,            m1 = m2 = 0.0;,0,0,0,0,0,0,0,0,0,0,14,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,83,        super.increment(d);,4,0,0,1,2,0,0,0,0,4,19,5,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,84,        m2 += ((double) n - 1) * dev * nDev;,0,0,0,2,4,0,0,0,0,6,36,4,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,85,    },10,1,0,0,1,0,2,2,0,16,1,3,0.78261,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1269,            lnza = -0.16624882440418567;,4,2,0,0,0,0,14,0,0,20,28,5,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1270,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1274,            lnza = lnza * epsilon + 1.0;,4,0,0,0,0,0,0,0,0,4,28,5,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1275,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.73469,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3791,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3796,            if (RECOMPUTE_TABLES_AT_RUNTIME) {,2,0,0,1,3,0,0,0,0,2,34,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3804,            } else if (LOAD_RESOURCES) {,0,0,0,1,4,0,0,0,0,5,28,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3807,                LN_MANT = FastMathLiteralArrays.loadLnMant();,4,0,0,1,2,0,4,0,0,8,45,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,3809,        },0,0,0,0,1,0,0,0,0,1,1,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,375,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1096,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,8,2,0,5,10,0,0,0,0,10,73,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,0,0,0,0,12,89,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1215,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1216,        double lnzb = 0.0;,8,1,0,0,0,0,0,0,0,10,18,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1218,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1292,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1294,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1295,        double d = -(c-a-lnm[0]);,12,2,1,2,4,1,0,0,0,18,25,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1297,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1299,        c = a + lnza;,8,1,0,0,0,0,0,0,0,10,13,3,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1300,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1301,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1302,        b = b + d;,2,0,0,0,0,0,0,0,0,3,10,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1304,        c = a + LN_2_B*exp;,8,2,0,0,0,0,0,0,0,11,19,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1305,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1307,        b = b + d;,2,0,1,0,0,1,0,0,0,7,10,6,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1309,        c = a + lnm[1];,10,2,1,1,2,2,0,0,0,17,15,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1310,        d = -(c - a - lnm[1]);,4,0,0,2,4,0,0,0,0,5,22,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1311,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1312,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1315,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1316,        a = c;,4,0,1,0,0,0,0,0,0,7,6,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1317,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1319,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1324,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,43,6174,        return LN_MANT;,0,0,0,0,0,1,0,0,0,1,15,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,123,    public SummaryStatistics() {,2,0,0,1,3,1,0,0,0,3,28,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,67,    protected long n = 0;,8,1,0,0,0,1,0,0,0,10,21,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,70,    protected SecondMoment secondMoment = new SecondMoment();,2,0,0,1,2,1,0,4,0,7,57,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,73,    protected Sum sum = new Sum();,0,0,0,1,2,0,0,0,0,3,30,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,76,    protected SumOfSquares sumsq = new SumOfSquares();,2,0,0,1,2,1,0,4,0,7,50,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,79,    protected Min min = new Min();,4,2,0,1,2,1,0,4,0,11,30,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,82,    protected Max max = new Max();,2,0,0,1,2,1,0,4,0,7,30,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,85,    protected SumOfLogs sumLog = new SumOfLogs();,4,0,0,1,2,1,0,4,0,10,45,0,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,88,    protected GeometricMean geoMean = new GeometricMean(sumLog);,4,0,0,1,2,1,0,4,0,9,60,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,91,    protected Mean mean = new Mean(secondMoment);,4,0,0,1,2,1,0,4,0,9,45,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,94,    protected Variance variance = new Variance(secondMoment);,16,3,0,1,2,1,0,6,0,27,57,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,97,    private StorelessUnivariateStatistic sumImpl = sum;,6,0,0,0,0,4,0,2,0,12,51,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,100,    private StorelessUnivariateStatistic sumsqImpl = sumsq;,4,0,0,0,0,1,0,2,0,7,55,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,103,    private StorelessUnivariateStatistic minImpl = min;,4,0,0,0,0,1,0,2,0,7,51,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,106,    private StorelessUnivariateStatistic maxImpl = max;,0,0,0,0,0,0,0,0,0,0,51,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,109,    private StorelessUnivariateStatistic sumLogImpl = sumLog;,4,0,0,0,0,1,0,2,0,7,57,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,112,    private StorelessUnivariateStatistic geoMeanImpl = geoMean;,4,0,1,0,0,1,0,2,0,14,59,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,115,    private StorelessUnivariateStatistic meanImpl = mean;,14,1,0,0,0,1,0,2,0,19,53,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,118,    private StorelessUnivariateStatistic varianceImpl = variance;,4,0,0,0,0,1,12,2,0,19,61,1,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,89,    public Mean(final FirstMoment m1) {,10,1,0,1,3,2,0,2,0,16,35,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,90,        this.moment = m1;,4,0,0,0,0,0,0,0,0,5,17,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,91,        incMoment = false;,2,0,0,0,0,0,0,0,0,4,18,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,92,    },0,0,0,0,1,0,0,0,0,1,1,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,84,    public GeometricMean(SumOfLogs sumOfLogs) {,6,0,0,1,3,1,0,2,0,10,43,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,85,        this.sumOfLogs = sumOfLogs;,4,0,0,0,0,0,0,0,0,5,27,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,43,86,    },6,1,0,0,1,0,0,0,0,7,1,11,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,111,    public Variance(final SecondMoment m2) {,4,0,0,1,3,2,0,2,0,8,40,2,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,112,        incMoment = false;,0,0,0,0,0,0,0,0,0,0,18,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,113,        this.moment = m2;,4,0,0,0,0,0,0,0,0,5,17,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.70588,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1106,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.67925,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.67925,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.67925,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1123,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.67925,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1132,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.67925,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.67925,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.67925,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,607,        this.meanImpl = meanImpl;,0,0,0,0,0,0,0,0,0,0,25,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,608,    },4,1,1,0,1,0,0,0,0,8,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,124,    public Variance(boolean isBiasCorrected) {,4,0,0,1,3,1,0,0,0,5,42,2,0.66667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,125,        moment = new SecondMoment();,2,0,0,1,2,0,0,2,0,5,28,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,126,        this.isBiasCorrected = isBiasCorrected;,4,0,0,0,0,0,0,0,0,5,39,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,420,                    var = (accum - (accum2 * accum2 / len)) / len;,12,4,0,2,4,0,0,0,0,17,46,11,0.66667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,80,public class FastMath {,2,1,0,0,1,0,0,0,0,3,23,6,0.65455,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,43,29,    private static final double[] EXP_INT_A = new double[] {,6,1,1,2,5,3,0,0,0,16,56,1,0.65455,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,43,1535,    private static final double[] EXP_INT_B = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.65455,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,43,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.65455,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,43,4074,    private static final double[] EXP_FRAC_B = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.65455,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,43,5103,    private static final double[][] LN_MANT = new double[][] {,2,0,0,4,9,3,0,0,0,5,58,2,0.65455,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,104,    private static /* final */ boolean RECOMPUTE_TABLES_AT_RUNTIME = false;,0,0,0,0,0,0,0,0,0,0,71,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,106,    private static /* final */ boolean LOAD_RESOURCES = false;,0,0,0,0,0,0,0,0,0,0,58,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,6,51,1,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,160,    private static final double SINE_TABLE_B[] =,0,1,0,1,2,0,6,0,0,7,44,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,1,47,11,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,237,    private static final double TANGENT_TABLE_B[] =,2,0,0,1,2,0,0,0,0,3,47,2,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,43,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.52941,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,120,        double sum = Double.NaN;,14,2,0,0,0,0,0,0,0,17,24,3,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,121,"        if (test(values, begin, length, true)) {",0,0,0,2,5,0,0,0,0,7,40,4,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,122,            sum = 0.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,123,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,124,                sum += values[i];,2,0,1,1,2,0,0,0,0,7,17,8,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,127,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,157,"        if (test(values, begin, length)) {",0,0,0,2,5,0,8,0,0,8,34,5,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,158,            Sum sum = new Sum();,2,0,0,1,2,0,0,4,0,6,20,6,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,159,            double sampleSize = length;,0,0,0,0,0,0,0,0,0,0,27,4,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,162,"            double xbar = sum.evaluate(values, begin, length) / sampleSize;",4,1,0,1,2,0,10,0,0,15,63,7,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,165,            double correction = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,166,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,6,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,167,                correction += values[i] - xbar;,4,1,0,1,2,0,2,0,0,8,31,4,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,43,169,            return xbar + (correction/sampleSize);,6,2,0,1,2,1,0,0,0,8,38,6,0.51613,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,79,    public FirstMoment() {,2,0,0,1,3,1,0,0,0,3,22,2,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,80,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,81,        m1 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,82,        dev = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,83,        nDev = Double.NaN;,0,0,0,0,0,0,0,0,0,0,18,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,43,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,35,public abstract class AbstractStorelessUnivariateStatistic,2,0,0,0,0,2,0,0,0,4,58,1,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,39,public abstract class AbstractUnivariateStatistic,2,0,0,0,0,2,0,0,0,4,49,1,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,60,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,61,        m2 = Double.NaN;,6,0,0,0,0,0,0,0,0,7,16,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,43,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,56,    public Sum() {,0,0,0,1,3,0,0,0,0,4,14,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,57,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,58,        value = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,43,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,64,    public SumOfLogs() {,2,0,0,1,3,1,0,0,0,3,20,2,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,65,       value = 0d;,0,0,0,0,0,0,0,0,0,0,11,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,66,       n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,43,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,55,    public SumOfSquares() {,2,0,0,1,3,1,0,0,0,3,23,2,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,56,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,57,        value = 0;,6,2,0,0,0,0,4,0,0,13,10,3,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,43,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,43,75,    protected SecondMoment moment = null;,2,0,0,0,0,1,0,2,0,5,37,2,0.51429,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,0,0,0,0,0,0,0,0,0,0,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,0,0,0,0,0,1,0,0,0,1,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,4,0,0,0,0,1,0,0,0,5,9,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,            nbPoints        = 2;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,            signChangeIndex = 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);",4,0,0,1,2,0,18,0,0,23,36,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,                    resetOccurred = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,6,0,1,4,9,0,0,0,0,9,77,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,        if (nextAction == EventHandler.Action.RESET_STATE) {,12,1,0,1,3,0,0,4,0,18,52,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,336,        pendingEvent      = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {",2,1,0,2,5,0,6,0,0,9,41,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,287,                return nextX;,2,0,0,0,0,1,0,0,0,2,13,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,146,        final double[] x = new double[maximalOrder + 1];,2,0,0,2,4,0,0,0,0,2,48,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,147,        final double[] y = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,148,        x[0] = getMin();,0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,149,        x[1] = getStartValue();,4,0,0,2,4,0,6,0,0,11,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,150,        x[2] = getMax();,0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,151,"        verifySequence(x[0], x[1], x[2]);",0,0,0,4,8,0,0,0,0,12,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,154,        y[1] = computeObjectiveValue(x[1]);,0,0,1,3,6,0,8,0,0,13,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,155,"        if (Precision.equals(y[1], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,161,        y[0] = computeObjectiveValue(x[0]);,0,0,0,3,6,0,0,0,0,9,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,162,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,169,        if (y[0] * y[1] < 0) {,0,2,1,3,7,0,0,0,0,6,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,195,        final double[] tmpX = new double[x.length];,6,0,0,2,4,1,0,0,0,7,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,198,        double xA    = x[signChangeIndex - 1];,4,2,1,1,2,0,8,0,0,16,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,199,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,200,        double absYA = FastMath.abs(yA);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,201,        int agingA   = 0;,4,0,0,0,0,1,0,8,0,13,17,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,202,        double xB    = x[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,203,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,204,        double absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,205,        int agingB   = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,211,            final double xTol = getAbsoluteAccuracy() +,6,2,0,1,2,1,2,0,0,11,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",0,0,0,6,13,0,0,0,0,19,87,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,233,            if (agingA >= MAXIMAL_AGING) {,0,0,0,1,3,0,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,236,            } else if (agingB >= MAXIMAL_AGING) {,0,0,0,1,4,0,0,0,0,5,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,241,                targetY = 0;,6,0,0,0,0,0,0,0,0,8,12,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,246,            int start = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,247,            int end   = nbPoints;,0,0,0,0,0,0,0,0,0,0,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,251,"                System.arraycopy(x, start, tmpX, start, end - start);",8,2,0,1,2,0,12,0,0,22,53,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,252,"                nextX = guessX(targetY, tmpX, y, start, end);",0,0,0,1,2,0,0,0,0,3,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,254,                if (!((nextX > xA) && (nextX < xB))) {,0,0,0,4,9,0,0,0,0,13,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,273,            } while (Double.isNaN(nextX) && (end - start > 1));,4,0,0,3,7,0,0,0,0,5,51,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,275,            if (Double.isNaN(nextX)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,283,            final double nextY = computeObjectiveValue(nextX);,12,1,0,1,2,1,4,0,0,18,50,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,284,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,365,        for (int i = start; i < end - 1; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,366,            final int delta = i + 1 - start;,2,0,0,0,0,0,0,0,0,4,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,367,            for (int j = end - 1; j > i; --j) {,32,11,0,1,3,1,18,0,0,63,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,368,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,30,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,373,        double x0 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,374,        for (int j = end - 1; j >= start; --j) {,10,2,0,1,3,0,0,2,0,16,40,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,375,            x0 = x[j] + x0 * (targetY - y[j]);,0,0,0,3,6,0,0,0,0,9,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,378,        return x0;,6,1,0,0,0,1,0,0,0,8,10,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,385,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,386,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,232,                    } else {,2,1,0,0,2,0,0,0,0,3,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,128,"        addEventHandler(handler, maxCheckInterval, convergence,",0,0,0,0,1,0,0,0,0,1,55,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,131,    },6,1,0,0,1,0,8,0,0,15,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,304,                    occuringEvents.add(state);,6,2,0,1,2,0,10,0,0,19,26,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,311,                final Iterator<EventState> iterator = occuringEvents.iterator();,0,0,0,1,2,0,0,0,0,3,64,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,312,                final EventState currentEvent = iterator.next();,0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,313,                iterator.remove();,2,1,0,1,2,0,16,0,0,20,18,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,316,                final double eventT = currentEvent.getEventTime();,0,0,0,1,2,0,0,0,0,3,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,317,                interpolator.setSoftPreviousTime(previousT);,0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,318,                interpolator.setSoftCurrentTime(eventT);,0,0,0,1,2,0,0,0,0,3,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,321,                interpolator.setInterpolatedTime(eventT);,0,0,0,1,2,0,6,0,0,6,41,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,322,                final double[] eventY = interpolator.getInterpolatedState();,4,0,0,2,4,1,4,0,0,9,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,323,"                currentEvent.stepAccepted(eventT, eventY);",0,0,0,1,2,0,0,0,0,3,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,324,                isLastStep = currentEvent.stop();,0,0,0,1,2,0,0,0,0,3,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,327,                for (final StepHandler handler : stepHandlers) {,8,0,0,1,3,1,0,2,0,12,48,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,331,                if (isLastStep) {,2,1,0,1,3,0,4,0,0,8,17,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,296,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());",6,1,0,3,6,3,16,2,0,28,77,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,320,      this.softPreviousTime = softPreviousTime;,0,0,0,0,0,0,0,0,0,0,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,321,  },2,0,0,0,1,0,0,0,0,2,1,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,334,      this.softCurrentTime  = softCurrentTime;,0,0,0,0,0,0,0,0,0,0,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,335,  },4,1,0,0,1,0,0,0,0,5,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,82,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,83,        if (maximalOrder < 2) {,4,1,0,1,3,0,0,0,0,6,23,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,86,        this.maximalOrder = maximalOrder;,4,0,0,0,0,0,0,0,0,5,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,87,        this.allowed = AllowedSolution.ANY_SIDE;,10,0,1,0,0,0,10,0,0,25,40,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,122,        return searchStart;,2,0,0,0,0,2,6,0,0,9,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",4,0,0,2,4,1,6,0,0,11,60,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,268,"        UnivariateRealSolverUtils.verifySequence(lower, initial, upper);",0,0,0,1,2,0,10,0,0,10,64,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,269,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,354,"        verifyInterval(lower, initial);",0,0,0,1,2,0,6,0,0,6,31,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,355,"        verifyInterval(initial, upper);",4,0,0,1,2,0,0,0,0,5,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,356,    },12,6,1,0,1,1,8,0,0,33,1,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,227,                        BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =,2,0,0,0,0,0,0,4,0,6,66,10,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,229,                        root = forward ?,4,0,0,0,0,0,0,0,0,5,16,10,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,246,                    if ((!Double.isNaN(previousEventTime)) &&,0,1,0,2,5,0,6,0,0,8,41,8,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,254,                    } else if (Double.isNaN(previousEventTime) ||,0,0,0,1,4,0,0,0,0,5,45,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,256,                        pendingEventTime = root;,4,1,0,0,0,1,0,0,0,6,24,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,257,                        pendingEvent = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,258,                        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,285,        return pendingEvent ?,2,0,0,0,0,1,0,0,0,2,21,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,303,            previousEventTime = t;,4,0,0,0,0,0,0,0,0,5,22,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,304,            g0Positive        = increasing;,8,0,0,0,0,0,0,4,0,14,31,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,305,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));",6,1,0,2,4,0,8,0,0,17,73,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,37,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,65,"        this(DEFAULT_RELATIVE_ACCURACY,",2,0,0,0,1,0,8,0,0,10,31,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,221,                    increasing = gb >= ga;,6,1,0,0,0,0,0,0,0,8,22,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,225,                    if (solver instanceof BracketedUnivariateRealSolver<?>) {,0,0,0,1,3,0,0,0,0,4,57,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,307,            g0Positive = g0 >= 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,308,            nextAction = EventHandler.Action.CONTINUE;,10,0,1,0,0,0,0,0,0,16,42,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,317,        return nextAction == EventHandler.Action.STOP;,8,1,0,0,0,1,0,0,0,9,46,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,44,public class EventState {,2,0,0,0,1,1,4,0,0,7,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,202,                    interpolator.setInterpolatedTime(t);,0,0,0,1,2,0,6,0,0,6,36,11,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,203,"                    return handler.g(t, interpolator.getInterpolatedState());",2,0,0,2,4,1,14,0,0,17,57,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,139,"        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,",6,0,0,0,2,0,4,2,0,12,71,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,285,                    state.reinitializeBegin(interpolator);,0,0,0,1,2,0,6,0,0,6,38,9,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,286,                },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,302,                if (state.evaluateStep(interpolator)) {,0,0,0,2,5,0,6,0,0,6,39,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,306,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,362,"                state.stepAccepted(currentT, currentY);",0,0,0,1,2,0,0,0,0,3,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,363,                isLastStep = isLastStep || state.stop();,4,1,0,1,2,0,4,0,0,10,40,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,364,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3370,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,110,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,116,        return searchMax;,2,0,0,0,0,1,0,0,0,2,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,128,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,134,        return relativeAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,140,        return functionValueAccuracy;,0,0,0,0,0,1,0,0,0,1,29,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,153,        incrementEvaluationCount();,0,0,0,1,2,0,2,0,0,2,27,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,154,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,173,        MathUtils.checkNotNull(f);,2,0,0,1,2,0,0,0,0,2,26,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,176,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,177,        searchMax = max;,0,0,0,0,0,0,0,0,0,0,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,178,        searchStart = startValue;,0,0,0,0,0,0,0,0,0,0,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,179,        function = f;,10,2,0,0,0,0,0,0,0,15,13,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,180,        evaluations.setMaximalCount(maxEval);,0,0,0,1,2,0,0,0,0,3,37,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,181,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,182,    },6,1,0,0,1,0,0,0,0,8,1,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,187,"        setup(maxEval, f, min, max, startValue);",0,0,0,1,2,0,0,0,0,3,40,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,190,        return doSolve();,0,0,0,1,2,1,2,0,0,2,17,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,294,            evaluations.incrementCount();,2,0,0,1,2,0,4,0,0,6,29,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,297,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,298,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,336,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,340,    },2,0,0,0,1,2,0,0,0,5,1,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,53,    public enum Action {,0,0,0,0,1,0,0,0,0,1,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,60,"        STOP,",2,0,0,0,0,0,0,0,0,2,5,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,69,"        RESET_STATE,",6,1,0,0,0,0,4,0,0,11,12,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,79,"        RESET_DERIVATIVES,",2,0,0,0,0,0,0,0,0,2,18,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,86,        CONTINUE;,2,0,0,0,0,0,0,0,0,2,9,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,102,                      final UnivariateRealSolver solver) {,2,0,0,0,2,1,0,2,0,5,36,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,103,        this.handler           = handler;,8,0,0,0,0,0,0,0,0,10,33,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,104,        this.maxCheckInterval  = maxCheckInterval;,4,0,0,0,0,0,0,0,0,5,42,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,105,        this.convergence       = FastMath.abs(convergence);,2,0,0,1,2,0,6,0,0,9,51,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,106,        this.maxIterationCount = maxIterationCount;,10,2,0,0,0,0,0,0,0,14,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,107,        this.solver            = solver;,4,0,0,0,0,0,0,0,0,5,32,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,110,        t0                = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,111,        g0                = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,112,        g0Positive        = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,113,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,114,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,115,        previousEventTime = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,116,        increasing        = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,117,        nextAction        = EventHandler.Action.CONTINUE;,8,0,0,0,0,0,0,0,0,9,49,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,119,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,154,        t0 = interpolator.getPreviousTime();,2,0,0,1,2,0,4,0,0,7,36,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,155,        interpolator.setInterpolatedTime(t0);,0,0,0,1,2,0,6,0,0,6,37,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,156,"        g0 = handler.g(t0, interpolator.getInterpolatedState());",2,0,0,2,4,0,10,0,0,13,56,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,157,        if (g0 == 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,177,        g0Positive = g0 >= 0;,4,1,0,0,0,0,0,0,0,6,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,190,            forward = interpolator.isForward();,2,0,0,1,2,0,4,0,0,7,35,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,191,            final double t1 = interpolator.getCurrentTime();,2,0,0,1,2,1,4,0,0,7,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,192,            final double dt = t1 - t0;,0,0,0,0,0,0,0,0,0,0,26,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,193,            if (FastMath.abs(dt) < convergence) {,0,0,0,2,5,0,0,0,0,7,37,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,197,"            final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));",4,1,0,4,8,1,14,0,0,20,91,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,198,            final double h = dt / n;,6,1,0,0,0,1,0,0,0,8,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,200,            final UnivariateRealFunction f = new UnivariateRealFunction() {,2,0,0,1,3,1,0,4,0,7,63,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,207,            double ta = t0;,6,1,1,0,0,0,0,0,0,12,15,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,208,            double ga = g0;,4,0,0,0,0,0,0,0,0,4,15,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,209,            for (int i = 0; i < n; ++i) {,10,1,0,1,3,0,0,0,0,13,29,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,212,                final double tb = t0 + (i + 1) * h;,0,0,0,1,2,0,0,0,0,3,35,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,213,                interpolator.setInterpolatedTime(tb);,0,0,0,1,2,0,0,0,0,3,37,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,214,"                final double gb = handler.g(tb, interpolator.getInterpolatedState());",2,1,1,2,4,0,0,0,0,8,69,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,217,                if (g0Positive ^ (gb >= 0)) {,0,0,0,2,5,0,0,0,0,7,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,267,                    ta = tb;,4,0,0,0,0,0,0,0,0,5,8,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,268,                    ga = gb;,4,0,0,0,0,0,0,0,0,5,8,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,274,            pendingEvent     = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,275,            pendingEventTime = Double.NaN;,0,0,0,0,0,0,0,0,0,0,30,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,276,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,298,        t0 = t;,4,0,0,0,0,0,0,0,0,5,7,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,299,"        g0 = handler.g(t, y);",2,0,0,1,2,0,8,0,0,11,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,301,        if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {,8,3,0,3,7,0,4,0,0,15,74,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,310,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,200,            final UnivariateRealFunction f = new UnivariateRealFunction() {,2,1,1,1,3,1,0,4,0,12,63,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3364,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3368,        y = floor(x);,0,0,0,1,2,0,0,0,0,3,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,44,3369,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,92,                                               final double functionValueAccuracy) {,2,0,0,0,2,1,0,0,0,3,37,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,49,    private final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,58,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,93,        this.absoluteAccuracy = absoluteAccuracy;,2,0,0,0,0,0,0,0,0,3,41,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,94,        this.relativeAccuracy = relativeAccuracy;,4,0,0,0,0,0,0,0,0,5,41,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,95,        this.functionValueAccuracy = functionValueAccuracy;,4,0,0,0,0,0,0,0,0,5,51,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,96,    },2,0,0,0,1,0,0,0,0,3,1,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,41,public enum AllowedSolution {,0,0,0,0,1,0,0,0,0,1,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,48,"    ANY_SIDE,",2,0,0,0,0,0,0,0,0,2,9,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,55,"    LEFT_SIDE,",10,1,0,0,0,0,0,0,0,11,10,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,62,"    RIGHT_SIDE,",2,0,0,0,0,0,0,0,0,2,11,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,68,"    BELOW_SIDE,",2,0,0,0,0,0,0,0,0,2,11,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,74,    ABOVE_SIDE;,2,0,0,0,0,0,0,0,0,2,11,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,318,    if (! vectorsInitialized) {,2,1,1,1,3,0,0,0,0,11,27,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,320,      if (v == null) {,8,2,0,1,3,0,0,0,0,10,16,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,328,      finalizeStep();,0,0,0,1,2,0,2,0,0,2,15,7,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,331,      for (int i = 0; i < interpolatedState.length; ++i) {,12,1,0,1,3,1,6,2,0,23,52,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,332,          final double yDot1  = yDotK[0][i];,4,1,1,2,4,1,0,0,0,15,34,1,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,333,          final double yDot6  = yDotK[5][i];,10,1,1,2,4,1,0,0,0,18,34,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,334,          final double yDot7  = yDotK[6][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,335,          final double yDot8  = yDotK[7][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,336,          final double yDot9  = yDotK[8][i];,2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,337,          final double yDot10 = yDotK[9][i];,6,2,1,2,4,1,12,0,0,25,34,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,338,          final double yDot11 = yDotK[10][i];,2,0,1,2,4,1,0,0,0,7,35,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,339,          final double yDot12 = yDotK[11][i];,2,0,1,2,4,1,0,0,0,7,35,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,340,          final double yDot13 = yDotK[12][i];,0,0,0,2,4,0,4,0,0,4,35,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,341,          final double yDot14 = yDotKLast[0][i];,2,0,1,2,4,1,0,0,0,7,38,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,342,          final double yDot15 = yDotKLast[1][i];,2,0,1,2,4,1,0,0,0,7,38,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,343,          final double yDot16 = yDotKLast[2][i];,14,3,1,2,4,1,0,0,0,22,38,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,344,          v[0][i] = B_01 * yDot1  + B_06 * yDot6 + B_07 * yDot7 +,12,10,1,2,4,0,0,0,0,27,55,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,347,          v[1][i] = yDot1 - v[0][i];,4,1,1,4,8,0,0,0,0,15,26,0,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,348,          v[2][i] = v[0][i] - v[1][i] - yDotK[12][i];,0,0,0,8,16,0,0,0,0,24,43,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,349,          for (int k = 0; k < D.length; ++k) {,10,1,0,1,3,0,0,0,0,12,36,8,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,350,              v[k+3][i] = D[k][0] * yDot1  + D[k][1]  * yDot6  + D[k][2]  * yDot7  +,8,15,1,8,16,0,8,0,0,48,70,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,357,      vectorsInitialized = true;,0,0,0,0,0,0,0,0,0,0,26,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,361,    final double eta      = 1 - theta;,4,1,0,0,0,1,0,0,0,6,34,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,362,    final double twoTheta = 2 * theta;,4,1,0,0,0,1,0,0,0,6,34,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,363,    final double theta2   = theta * theta;,6,1,0,0,0,1,0,0,0,8,38,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,364,    final double dot1 = 1 - twoTheta;,0,0,0,0,0,0,0,0,0,0,33,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,365,    final double dot2 = theta * (2 - 3 * theta);,20,4,0,1,2,1,6,0,0,33,44,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,366,    final double dot3 = twoTheta * (1 + theta * (twoTheta -3));,8,4,0,2,4,1,0,0,0,13,59,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,367,    final double dot4 = theta2 * (3 + theta * (5 * theta - 8));,0,0,0,2,4,0,0,0,0,6,59,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,368,    final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));,10,7,0,3,6,1,0,0,0,19,76,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,369,    final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));,0,0,0,3,6,0,0,0,0,9,84,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,371,    for (int i = 0; i < interpolatedState.length; ++i) {,10,1,0,1,3,0,0,0,0,12,52,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,372,      interpolatedState[i] = currentState[i] -,0,1,1,2,4,0,0,0,0,10,40,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,380,      interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,4,8,1,7,14,0,0,0,0,29,73,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,385,  },0,0,0,0,1,0,0,0,0,1,1,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,397,    final double[] yTmp = new double[currentState.length];,6,0,0,2,4,1,0,0,0,7,54,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,398,    final double pT = getGlobalPreviousTime();,2,0,0,1,2,1,2,0,0,5,42,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,401,    for (int j = 0; j < currentState.length; ++j) {,10,1,0,1,3,0,0,0,0,12,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,402,      s = K14_01 * yDotK[0][j]  + K14_06 * yDotK[5][j]  + K14_07 * yDotK[6][j] +,8,11,1,6,12,0,0,0,0,32,74,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,405,      yTmp[j] = currentState[j] + h * s;,4,2,1,2,4,0,0,0,0,15,34,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,407,"    integrator.computeDerivatives(pT + C14 * h, yTmp, yDotKLast[0]);",14,3,1,2,4,0,6,0,0,26,64,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,410,    for (int j = 0; j < currentState.length; ++j) {,10,1,0,1,3,0,0,0,0,12,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,411,     s = K15_01 * yDotK[0][j]  + K15_06 * yDotK[5][j]  + K15_07 * yDotK[6][j] +,0,0,0,6,12,0,0,0,0,18,74,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,415,     yTmp[j] = currentState[j] + h * s;,4,2,1,2,4,0,0,0,0,15,34,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,417,"    integrator.computeDerivatives(pT + C15 * h, yTmp, yDotKLast[1]);",0,0,0,2,4,0,0,0,0,6,64,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,420,    for (int j = 0; j < currentState.length; ++j) {,10,1,0,1,3,0,0,0,0,12,47,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,421,      s = K16_01 * yDotK[0][j]  + K16_06 * yDotK[5][j]  + K16_07 * yDotK[6][j] +,8,13,1,6,12,0,0,0,0,34,74,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,425,      yTmp[j] = currentState[j] + h * s;,4,2,1,2,4,0,0,0,0,15,34,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,427,"    integrator.computeDerivatives(pT + C16 * h, yTmp, yDotKLast[2]);",6,7,1,2,4,0,6,0,0,36,64,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,429,  },4,1,1,0,1,0,0,0,0,7,1,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,255,    double error1 = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,256,    double error2 = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,258,    for (int j = 0; j < mainSetDimension; ++j) {,8,1,0,1,3,0,0,0,0,10,44,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,259,      final double errSum1 = E1_01 * yDotK[0][j]  + E1_06 * yDotK[5][j] +,6,9,1,4,8,1,0,0,0,24,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,263,      final double errSum2 = E2_01 * yDotK[0][j]  + E2_06 * yDotK[5][j] +,6,9,1,4,8,1,0,0,0,24,67,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,268,"      final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));",2,0,1,5,10,1,12,0,0,23,77,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,269,      final double tol = (vecAbsoluteTolerance == null) ?,4,1,0,1,2,1,0,0,0,6,51,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,272,      final double ratio1  = errSum1 / tol;,6,1,0,0,0,1,0,0,0,8,37,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,273,      error1        += ratio1 * ratio1;,4,0,0,0,0,0,0,0,0,5,33,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,274,      final double ratio2  = errSum2 / tol;,6,1,0,0,0,1,0,0,0,8,37,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,275,      error2        += ratio2 * ratio2;,6,1,0,0,0,0,0,0,0,8,33,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,278,    double den = error1 + 0.01 * error2;,0,0,0,0,0,0,0,0,0,0,36,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,279,    if (den <= 0.0) {,4,1,0,1,3,1,4,4,0,14,17,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,283,    return FastMath.abs(h) * error1 / FastMath.sqrt(mainSetDimension * den);,6,3,0,2,4,1,10,0,0,19,72,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,249,      v         = null;,2,0,0,0,0,1,0,0,0,3,17,2,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,250,      vectorsInitialized = false;,12,3,0,0,0,0,0,0,0,17,27,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,278,    return new DormandPrince853StepInterpolator(this);,0,0,0,1,2,1,0,0,0,4,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",14,0,0,1,2,0,0,0,0,14,83,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00388,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },2,1,1,0,1,0,0,0,0,7,1,4,0.00388,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.00386,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,                this.startColumn = startColumn;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,                destination[row - startRow][column - startColumn] = value;,10,2,1,2,4,0,0,0,0,15,58,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,366,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,            throw new NotStrictlyPositiveException(rowDimension);,0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,            throw new NotStrictlyPositiveException(columnDimension);,14,2,0,1,2,3,0,4,0,23,56,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,        final int rowCount    = getRowDimension();,2,2,0,1,2,1,10,0,0,15,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,74,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,        return out;,6,1,1,0,0,1,6,0,0,18,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,48,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,        final int rowCount    = getRowDimension();,6,1,0,1,2,0,0,0,0,7,42,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,91,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,        for (int row = 0; row < rowCount; ++row) {,10,1,0,1,3,0,0,0,0,12,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,94,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,        return out;,2,0,0,0,0,1,0,0,0,2,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,104,        final int rowCount    = getRowDimension();,10,1,0,1,2,1,2,0,0,15,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,        final int columnCount = getColumnDimension();,10,5,0,1,2,3,6,0,0,24,45,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,107,        for (int row = 0; row < rowCount; ++row) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,108,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,8,0,0,8,45,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,109,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,        return out;,16,3,0,0,0,1,0,0,0,21,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,118,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,119,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,        for (int row = 0; row < rowCount; ++row) {,2,1,0,1,3,0,0,0,0,3,42,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,123,"                out.setEntry(row, col, getEntry(row, col) * d);",2,2,0,2,4,0,26,0,0,30,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,127,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,135,        final int nRows = getRowDimension();,8,0,0,1,2,1,6,0,0,15,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,136,        final int nCols = m.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,137,        final int nSum  = getColumnDimension();,2,0,0,1,2,0,4,0,0,7,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,139,        for (int row = 0; row < nRows; ++row) {,4,1,1,1,3,0,0,0,0,10,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,140,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,141,                double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,142,                for (int i = 0; i < nSum; ++i) {,14,2,0,1,3,0,0,0,0,18,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,145,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,149,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,154,        return m.multiply(this);,6,1,0,1,2,1,6,0,0,14,24,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,159,        if (p < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,163,        if (!isSquare()) {,4,0,0,2,5,2,0,4,0,10,18,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",2,0,0,3,6,3,0,0,0,5,76,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,167,        if (p == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,2,1,0,2,4,1,0,0,0,3,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,171,        if (p == 1) {,2,0,0,1,3,0,0,2,0,4,13,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,172,            return this.copy();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,175,        final int power = p - 1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,186,        int maxI = -1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,10,1,0,1,3,0,0,0,0,12,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,189,            if (binaryRepresentation[i] == '1') {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,190,                final int pos = binaryRepresentation.length - i - 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,191,                nonZeroPositions.add(pos);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,194,                if (maxI == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,195,                    maxI = pos;,24,8,0,0,0,1,0,0,0,34,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,8,2,0,2,4,1,0,4,0,15,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,201,        results[0] = this.copy();,12,2,1,2,4,1,0,2,0,20,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,203,        for (int i = 1; i <= maxI; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,204,            results[i] = results[i-1].multiply(results[i-1]);,0,0,0,4,8,0,0,0,0,12,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,207,        RealMatrix result = this.copy();,2,0,0,1,2,0,2,2,0,6,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,209,        for (Integer i : nonZeroPositions) {,10,5,1,1,3,0,0,2,0,26,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,210,            result = result.multiply(results[i]);,2,0,0,2,4,1,6,0,0,9,37,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,211,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,213,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,4,0,0,6,12,0,0,0,0,4,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,220,        for (int i = 0; i < data.length; ++i) {,4,0,0,1,3,0,0,2,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,221,            final double[] dataI = data[i];,6,1,0,2,4,0,6,0,0,13,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,222,            for (int j = 0; j < dataI.length; ++j) {,18,2,0,1,3,0,0,0,0,21,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,223,"                dataI[j] = getEntry(i, j);",0,0,1,2,4,0,6,0,0,11,26,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,227,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",10,0,0,1,2,0,12,0,0,22,80,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,299,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,301,        for (int i = startRow; i <= endRow; ++i) {,10,1,0,1,3,0,0,0,0,12,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,302,            for (int j = startColumn; j <= endColumn; ++j) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",8,2,0,2,4,0,10,0,0,20,66,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,307,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",2,0,0,1,2,0,4,2,0,8,69,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,316,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,0,0,0,0,5,71,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,328,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,336,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,12,0,0,12,80,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,337,        final int rowsCount    = endRow + 1 - startRow;,6,2,0,0,0,1,0,0,0,9,47,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,338,        final int columnsCount = endColumn + 1 - startColumn;,6,2,0,0,0,1,0,0,0,9,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,10,3,1,4,9,0,0,0,0,15,81,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",6,0,1,1,3,0,0,2,0,10,85,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,369,    },2,1,0,0,1,0,4,0,0,7,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,374,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,375,        if ((destination.length < selectedRows.length) ||,8,2,0,1,3,0,0,0,0,10,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",10,0,1,1,3,2,0,2,0,16,85,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,382,        for (int i = 0; i < selectedRows.length; i++) {,14,1,0,1,3,0,0,0,0,17,47,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,383,            final double[] destinationI = destination[i];,2,0,1,2,4,1,0,0,0,7,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,384,            for (int j = 0; j < selectedColumns.length; j++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,0,4,8,0,0,0,0,12,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,388,    },16,5,0,0,1,0,0,0,0,23,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,393,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,394,        final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,395,        if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,396,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,399,        final int nCols = subMatrix[0].length;,6,1,0,1,2,0,4,0,0,11,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,400,        if (nCols == 0) {,8,2,0,1,3,0,0,0,0,11,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,8,0,0,1,2,0,0,2,0,11,64,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,404,        for (int r = 1; r < nRows; ++r) {,22,2,0,1,3,0,0,0,0,27,33,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,405,            if (subMatrix[r].length != nCols) {,8,1,0,2,5,1,0,0,0,10,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",4,0,1,2,4,0,0,2,0,10,65,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,410,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,411,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",6,2,0,1,2,0,4,0,0,13,55,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,415,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,6,0,0,16,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,416,            for (int j = 0; j < nCols; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",8,2,1,3,6,0,2,0,0,18,47,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,420,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,424,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,425,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,426,"        final RealMatrix out = createMatrix(1, nCols);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,427,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,428,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,2,4,0,12,0,0,12,37,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,431,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,436,"        MatrixUtils.checkRowIndex(this, row);",2,0,0,1,2,0,6,0,0,9,37,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,437,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,438,        if ((matrix.getRowDimension() != 1) ||,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,440,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,444,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,445,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,447,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,451,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,452,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,0,0,0,13,49,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,253,        MathUtils.checkNotNull(divisor);,2,0,0,1,2,0,16,0,0,18,32,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,254,        if (isNaN || divisor.isNaN) {,0,0,0,1,3,0,0,0,0,4,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,583,        if (isNaN) {,12,3,0,1,3,1,10,0,0,26,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,            if (hiPrec != null) {,8,4,0,1,3,0,14,0,0,28,21,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,329,                return isNaN;,10,0,0,0,0,1,0,2,0,14,13,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,430,            return INF;,12,1,0,0,0,1,0,0,0,14,11,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,276,            double q = d / c;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,277,            double denominator = d * q + c;,8,3,0,0,0,0,4,0,0,16,31,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,",8,1,0,1,3,1,0,0,0,10,58,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,122,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,263,        if (divisor.isInfinite() && !isInfinite()) {,10,2,0,3,7,0,0,0,0,13,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,267,        final double c = divisor.getReal();,0,0,0,1,2,0,0,0,0,3,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,268,        final double d = divisor.getImaginary();,6,0,0,1,2,1,4,0,0,12,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,270,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2337,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,754,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,8,0,0,8,41,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1256,"        return log(x, null);",10,1,0,1,2,1,10,0,0,22,20,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,2334,        if (o == null) {,8,2,0,1,3,0,0,0,0,11,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1269,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,2,0,0,2,5,1,0,0,0,3,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1283,        if (x == Double.POSITIVE_INFINITY) {,4,0,0,1,3,0,0,0,0,4,36,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,164,"        return createComplex(real + addend.getReal(),",0,0,0,1,3,1,0,0,0,5,45,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1266,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3003,        if (y == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,36,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,46,85,    private static final long[] FACTORIALS = new long[] {,8,2,1,2,5,0,0,0,0,16,53,1,0.05,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,379,        return isNaN;,0,0,0,0,0,1,0,0,0,1,13,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,750,        if (isNaN) {,6,0,0,1,3,0,0,0,0,7,12,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2977,        if (y == 0.0) {,8,1,0,1,3,1,0,0,0,10,15,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,497,"        return createComplex(real - subtrahend.getReal(),",2,1,0,1,3,1,6,0,0,9,49,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,2973,        if (x !=x || y != y) {,0,0,0,1,3,0,0,0,0,4,22,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,159,        MathUtils.checkNotNull(addend);,0,0,0,1,2,0,0,0,0,3,31,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,160,        if (isNaN || addend.isNaN) {,24,6,0,1,3,4,12,0,0,47,28,2,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,492,        MathUtils.checkNotNull(subtrahend);,14,3,0,1,2,3,0,0,0,20,35,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,493,        if (isNaN || subtrahend.isNaN) {,0,0,0,1,3,0,0,0,0,4,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,425,        if (Double.isInfinite(real) ||,2,0,0,1,3,0,0,0,0,2,30,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,121,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,118,        if (isNaN) {,0,0,0,1,3,0,0,0,0,4,12,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,421,        MathUtils.checkNotNull(factor);,4,3,0,1,2,0,6,0,0,13,31,6,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,422,        if (isNaN || factor.isNaN) {,6,1,0,1,3,0,0,0,0,7,28,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,12,61,3,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,327,            Complex c = (Complex)other;,4,0,0,1,2,0,0,4,0,8,27,6,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,328,            if (c.isNaN) {,22,2,0,1,3,0,0,0,0,26,14,1,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,326,        if (other instanceof Complex){,4,0,0,1,3,0,0,2,0,6,30,3,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,392,        return isInfinite;,4,0,0,0,0,1,0,0,0,5,18,12,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,99,"    public Complex(double real, double imaginary) {",0,0,0,1,3,0,0,0,0,4,47,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,100,        this.real = real;,8,0,0,0,0,0,10,0,0,19,17,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,101,        this.imaginary = imaginary;,0,0,0,0,0,0,0,0,0,0,27,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,103,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,4,1,0,2,4,0,12,4,0,21,54,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,104,        isInfinite = !isNaN &&,10,1,1,0,0,0,0,0,0,16,22,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,106,        isZero = real == 0 && imaginary == 0;,14,6,0,0,0,0,0,2,0,23,37,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,58,"    public static final Complex I = new Complex(0.0, 1.0);",0,0,0,1,2,0,0,0,0,3,54,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,61,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,22,70,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,64,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,98,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,66,"    public static final Complex ONE = new Complex(1.0, 0.0);",2,0,0,1,2,2,0,0,0,4,56,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,68,"    public static final Complex ZERO = new Complex(0.0, 0.0);",0,0,0,1,2,0,0,0,0,3,57,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,323,        if (this == other) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,1,0,0,0,3,65,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,98,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,110,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,2,62,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,165,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,233,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,235,            FACT[i] = FACT[i-1] * i;,6,3,1,2,4,0,6,0,0,22,24,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,238,        double tmp[] = new double[2];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,239,        double recip[] = new double[2];,4,1,0,2,4,0,0,0,0,7,31,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,242,        for (i = 0; i < 750; i++) {,4,1,1,1,3,0,0,0,0,10,27,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,243,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,0,0,2,4,0,0,0,0,2,32,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,251,                EXP_INT_TABLE_B[750-i] = recip[1];,8,1,0,2,4,0,0,0,0,9,34,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,2,0,0,1,3,0,4,2,0,8,47,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,257,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,10,1,1,2,4,0,0,0,0,19,29,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,263,        for (i = 0; i < LN_MANT.length; i++) {,14,1,0,1,3,1,0,2,0,20,38,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,4,0,0,10,79,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,265,            LN_MANT[i] = slowLog(d);,8,2,0,2,4,0,4,0,0,15,24,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,269,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1012,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1013,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1014,        final double facts[] = new double[2];,6,0,0,2,4,2,0,2,0,10,37,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1015,        final double as[] = new double[2];,2,0,0,2,4,1,4,2,0,9,34,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1016,"        split(x, xs);",2,0,0,1,2,0,6,0,0,9,13,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1017,        ys[0] = ys[1] = 0.0;,12,9,1,2,4,0,0,0,0,28,20,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1019,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1020,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1021,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1022,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1024,"            split(FACT[i], as);",2,0,1,2,4,0,4,0,0,10,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1025,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1027,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1028,            ys[0] = as[0];,2,0,0,2,4,0,0,0,0,2,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1029,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1032,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1033,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1034,            result[1] = ys[1];,2,0,0,2,4,0,0,0,0,3,18,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1037,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1046,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1047,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1048,            split[0] = (d + a) - a;,2,0,0,2,4,3,0,0,0,5,23,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1049,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1050,        } else {,10,1,0,0,2,0,0,0,0,12,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1055,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1062,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1063,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1065,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1066,            double z = c * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1067,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1068,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1069,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1070,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1071,            a[0] = (c + z - c) * HEX_40000000;,10,4,1,2,4,0,4,0,0,30,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1072,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1082,        ans[0] = a[0] * b[0];,2,1,0,3,6,0,2,0,0,5,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1086,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1087,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1095,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1096,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1098,        resplit(ans);,8,0,0,1,2,0,6,0,0,15,13,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1120,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1121,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1123,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1128,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,7,1,9,18,0,0,0,0,26,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1132,            result[1] = 0.0;,6,2,0,1,2,0,0,0,0,9,16,10,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1136,        resplit(result);,2,0,0,1,2,0,4,0,0,7,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1138,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1143,            err = err * (result[0] + result[1]);,2,0,0,3,6,0,6,0,0,9,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1145,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1155,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1156,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1157,        final double zs[] = new double[2];,10,1,0,2,4,1,0,0,0,14,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1160,"        split(a[0], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1161,"        split(b[0], ys);",4,0,1,2,4,0,4,0,0,11,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1162,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1164,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1165,        result[1] = zs[1];,4,1,1,2,4,0,0,0,0,11,18,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1168,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1169,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1171,        double tmp = result[0] + zs[0];,8,2,1,2,4,1,0,0,0,15,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,5,1,5,10,0,0,0,0,21,50,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1173,        result[0] = tmp;,6,2,0,1,2,1,0,0,0,9,16,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1174,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1176,        result[0] = tmp;,2,0,0,1,2,3,0,0,0,5,16,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1179,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1180,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1181,"        splitMult(xs, ys, zs);",4,1,0,1,2,0,0,0,0,5,22,10,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1183,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1185,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1186,        tmp = result[0] + zs[1];,4,1,1,2,4,0,4,0,0,19,24,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1188,        result[0] = tmp;,4,1,1,1,2,0,6,0,0,19,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1191,"        split(a[1], xs);",0,5,1,2,4,0,0,0,0,20,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1192,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1193,"        splitMult(xs, ys, zs);",4,0,0,1,2,0,0,0,0,6,22,10,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1195,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,1,0,5,10,0,0,0,0,3,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1197,        result[0] = tmp;,2,0,0,1,2,1,0,2,0,5,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1198,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,2,1,5,10,1,4,0,0,24,50,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1200,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1210,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1211,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1212,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1221,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1222,        xs[1] = 1.4456468917292502E-16;,0,0,0,1,2,0,0,0,0,3,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1224,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1226,        while (p > 0) {,8,1,0,1,3,0,0,0,0,10,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1227,            if ((p & 1) != 0) {,4,1,0,2,5,0,0,0,0,5,19,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1228,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1229,                ys[0] = as[0]; ys[1] = as[1];,0,1,1,4,8,0,14,0,0,25,29,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1232,"            quadMult(xs, xs, as);",0,0,0,1,2,0,8,0,0,8,21,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1233,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1235,            p >>= 1;,0,0,0,0,0,0,0,0,0,0,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1238,        if (result != null) {,0,0,1,1,3,0,6,0,0,13,21,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1239,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1240,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1242,            resplit(result);,0,0,0,1,2,0,4,0,0,4,16,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1245,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1743,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1744,        double x2[] = new double[2];,2,0,0,2,4,0,0,0,0,3,28,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1745,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1746,        double a[] = new double[2];,6,1,1,2,4,0,0,0,0,12,27,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1748,"        split(xi, x);",4,1,0,1,2,0,6,0,0,11,13,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1751,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1752,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1753,"        splitReciprocal(x, a);",2,1,0,1,2,0,10,0,0,13,22,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1754,        x[0] -= 2.0;,0,0,0,1,2,0,10,0,0,10,12,10,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1755,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1756,"        splitMult(x, a, y);",2,0,0,1,2,0,0,0,0,3,19,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1757,        x[0] = y[0];,0,0,1,2,4,0,0,0,0,5,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1758,        x[1] = y[1];,0,0,1,2,4,0,0,0,0,5,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1761,"        splitMult(x, x, x2);",0,0,0,1,2,0,0,0,0,3,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1767,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,12,3,1,3,6,0,0,0,0,20,48,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1768,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1770,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,2,0,0,1,3,0,0,0,0,2,51,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1771,"            splitMult(y, x2, a);",0,0,0,1,2,0,0,0,0,3,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1772,            y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1773,            y[1] = a[1];,6,2,1,2,4,1,0,0,0,16,12,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);",6,1,1,2,4,1,6,0,0,18,33,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1775,            y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1776,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1779,"        splitMult(y, x, a);",0,0,0,1,2,0,6,0,0,6,19,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1780,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1781,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1783,        return y;,10,1,0,0,0,1,0,0,0,12,9,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1793,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1794,        final double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,3,34,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1795,        final double facts[] = new double[2];,4,1,1,2,4,1,0,0,0,11,37,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1796,        final double as[] = new double[2];,4,0,0,2,4,1,6,0,0,12,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1797,"        split(x, xs);",10,0,0,1,2,3,0,4,0,17,13,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1798,        ys[0] = ys[1] = 0.0;,8,1,1,2,4,0,0,0,0,17,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1800,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1801,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1802,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1804,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1805,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1808,"            split(FACT[i], as);",12,2,1,2,4,0,4,0,0,24,19,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1809,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1811,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1812,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1813,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1816,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1817,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1820,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1821,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1822,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1825,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1836,        final double xs[] = new double[2];,2,0,0,2,4,1,4,0,0,7,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1837,        final double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,3,34,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1838,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,46,1839,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,8,1,0,1,3,0,0,0,0,11,28,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,6,0,1,0,0,3,4,0,0,14,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,251,        MathUtils.checkNotNull(divisor);,0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,8,1,0,1,3,0,6,0,0,15,29,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,579,        if (isNaN) {,16,1,0,1,3,0,10,4,0,33,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,268,            double q = c / d;,8,1,1,0,0,0,0,0,0,13,17,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,269,            double denominator = c * q + d;,8,2,0,0,0,0,0,0,0,10,31,7,0.2,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,",8,0,0,1,3,2,0,2,0,12,58,1,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1315,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,747,            return NaN;,16,7,0,0,0,1,4,0,0,27,11,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,                return result;,2,0,1,0,0,2,0,0,0,7,14,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2978,            double result = x*y;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2979,            double invx = 1.0/x;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,            double invy = 1.0/y;,6,1,0,0,0,0,6,0,0,13,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2982,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,273,            double q = d / c;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,274,            double denominator = d * q + c;,8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,275,"            return createComplex((imaginary * q + real) / denominator,",8,3,0,1,3,1,6,0,0,18,58,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1429,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1430,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1431,            lnza = lnza * epsilon + -0.2499999997677497;,4,0,0,0,0,0,0,0,0,4,44,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1432,            lnza = lnza * epsilon + 0.3333333333332802;,0,1,0,0,0,0,4,0,0,5,43,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1433,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1434,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1435,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,260,        if (divisor.isInfinite() && !isInfinite()) {,2,0,0,3,7,0,0,0,0,2,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,264,        final double c = divisor.getReal();,2,0,0,1,2,1,4,0,0,7,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,265,        final double d = divisor.getImaginary();,14,1,0,1,2,2,6,0,0,24,40,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,267,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,0,0,3,7,0,0,0,0,10,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,419,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2337,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,2334,        if (o == null) {,16,2,0,1,3,0,0,0,0,20,16,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1256,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1362,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1373,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1375,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1376,        double lnzb = 0.0;,6,1,0,0,0,1,0,0,0,8,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1378,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1452,        double a = LN_2_A*exp;,6,1,1,0,0,3,0,0,0,14,22,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1453,        double b = 0.0;,0,0,0,0,0,0,6,0,0,6,15,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1454,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1455,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1456,        a = c;,4,3,0,0,0,0,0,0,0,7,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1457,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1459,        c = a + lnza;,16,3,0,0,0,0,0,0,0,22,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1460,        d = -(c - a - lnza);,2,0,0,1,2,1,4,0,0,7,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1461,        a = c;,10,5,0,0,0,0,0,0,0,16,6,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1462,        b = b + d;,2,0,0,0,0,1,4,0,0,7,10,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1464,        c = a + LN_2_B*exp;,2,0,0,0,0,0,0,0,0,3,19,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1465,        d = -(c - a - LN_2_B*exp);,0,0,0,1,2,0,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1466,        a = c;,6,0,0,0,0,0,0,0,0,7,6,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1467,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1469,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1470,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1471,        a = c;,6,3,1,0,0,0,4,0,0,15,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1472,        b = b + d;,10,2,0,0,0,0,0,0,0,13,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1474,        c = a + lnzb;,12,2,0,0,0,0,14,0,0,33,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1475,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1476,        a = c;,2,1,0,0,0,0,0,0,0,3,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1477,        b = b + d;,10,1,0,0,0,0,0,0,0,12,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1479,        if (hiPrec != null) {,2,0,1,1,3,0,0,0,0,7,21,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1484,        return a + b;,4,3,0,0,0,1,0,0,0,7,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,750,"        return createComplex(FastMath.log(abs()),",0,0,0,2,5,1,0,0,0,8,41,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,132,            double q = imaginary / real;,6,1,0,0,0,0,0,0,0,7,28,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,133,            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);,4,3,0,2,4,1,10,0,0,17,53,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1292,        int exp = (int)(bits >> 52)-1023;,18,5,0,2,4,0,0,0,0,24,33,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1294,        if ((bits & 0x7ff0000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1314,        if (exp == -1 || exp == 0) {,2,0,0,1,3,0,8,0,0,11,28,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,129,            if (real == 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1269,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1283,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1266,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,162,"        return createComplex(real + addend.getReal(),",8,0,0,1,3,3,0,0,0,11,45,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,47,85,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2977,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,746,        if (isNaN) {,2,0,0,1,3,0,0,0,0,2,12,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,2973,        if (x !=x || y != y) {,8,3,0,1,3,0,10,0,0,21,22,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,428,"        return createComplex(real * factor.real - imaginary * factor.imaginary,",16,5,1,0,1,1,2,0,0,36,71,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,493,"        return createComplex(real - subtrahend.getReal(),",0,0,0,1,3,1,0,0,0,5,49,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,157,        MathUtils.checkNotNull(addend);,0,0,0,1,2,0,6,0,0,6,31,5,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,158,        if (isNaN || addend.isNaN) {,0,0,0,1,3,0,0,0,0,4,28,4,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,488,        MathUtils.checkNotNull(subtrahend);,0,0,0,1,2,0,0,0,0,3,35,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,489,        if (isNaN || subtrahend.isNaN) {,6,1,0,1,3,0,0,0,0,7,32,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,421,        if (Double.isInfinite(real) ||,10,2,0,1,3,0,18,0,0,31,30,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,364,        return real;,0,0,0,0,0,1,0,0,0,1,12,4,0.03604,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,355,        return imaginary;,6,1,0,0,0,2,0,0,0,8,17,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,122,        if (FastMath.abs(real) < FastMath.abs(imaginary)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,119,        if (isInfinite()) {,0,0,0,2,5,0,0,0,0,7,19,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,302,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,116,        if (isNaN) {,0,0,0,1,3,0,0,0,0,4,12,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,417,        MathUtils.checkNotNull(factor);,0,0,0,1,2,0,6,0,0,6,31,5,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,418,        if (isNaN || factor.isNaN) {,6,1,0,1,3,0,0,0,0,7,28,4,0.02857,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,327,                return (real == c.real) && (imaginary == c.imaginary);,12,3,0,2,4,1,0,0,0,15,54,8,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,323,            Complex c = (Complex)other;,4,0,0,1,2,0,0,4,0,8,27,6,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,324,            if (c.isNaN) {,6,0,0,1,3,1,0,0,0,7,14,3,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,322,        if (other instanceof Complex){,2,0,0,1,3,0,0,2,0,4,30,5,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,388,        return isInfinite;,0,0,0,0,0,1,4,0,0,5,18,5,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.02174,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,99,        this.real = real;,4,0,0,0,0,0,0,0,0,5,17,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,100,        this.imaginary = imaginary;,4,0,0,0,0,0,4,0,0,9,27,3,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,102,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,2,1,0,2,4,0,12,0,0,16,54,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,103,        isInfinite = !isNaN &&,8,0,0,0,0,2,0,0,0,10,22,1,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,105,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,58,"    public static final Complex I = new Complex(0.0, 1.0);",2,0,0,1,2,3,0,4,0,9,54,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,61,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",10,0,0,1,2,3,0,4,0,17,70,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,64,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",10,0,0,1,2,3,0,4,0,17,98,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,66,"    public static final Complex ONE = new Complex(1.0, 0.0);",2,0,0,1,2,3,0,4,0,9,56,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,68,"    public static final Complex ZERO = new Complex(0.0, 0.0);",2,0,0,1,2,3,0,4,0,9,57,2,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,319,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,98,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,110,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,162,    private static final double COSINE_TABLE_B[] = new double[14];,6,1,0,2,4,1,0,0,0,8,62,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,165,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,168,    private static final double TANGENT_TABLE_B[] = new double[14];,4,0,0,2,4,3,0,0,0,7,63,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,192,    private static final long PI_O_4_BITS[] = new long[] {,4,1,0,2,5,0,0,0,0,5,54,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",8,1,0,1,3,4,0,0,0,14,61,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,233,        FACT[0] = 1.0;,4,3,1,1,2,0,0,0,0,11,14,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,234,        for (i = 1; i < FACT.length; i++) {,10,1,0,1,3,0,0,0,0,13,35,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,235,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,238,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,239,        double recip[] = new double[2];,2,0,1,2,4,0,0,0,0,7,31,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,242,        for (i = 0; i < 750; i++) {,8,2,0,1,3,1,0,0,0,11,27,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,243,"            expint(i, tmp);",0,0,0,1,2,0,6,0,0,6,15,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,6,0,0,6,28,9,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,250,                EXP_INT_TABLE_A[750-i] = recip[0];,6,4,1,2,4,0,0,0,0,16,34,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,251,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,3,0,1,3,0,4,0,0,19,47,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,257,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,2,4,0,0,0,0,7,29,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,263,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,265,            LN_MANT[i] = slowLog(d);,0,0,1,2,4,0,14,0,0,19,24,1,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,269,        buildSinCosTables();,0,0,0,1,2,0,2,0,0,2,20,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,270,    },0,0,0,0,1,0,8,0,0,8,1,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1012,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1013,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1014,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1015,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1016,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1017,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1019,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1020,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1021,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1022,            ys[1] = as[1];,16,4,1,2,4,0,0,0,0,27,14,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1024,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1025,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1027,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1028,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1029,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1032,        if (result != null) {,10,1,0,1,3,0,0,0,0,12,21,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1033,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1034,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1037,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1046,        if (d < 8e298 && d > -8e298) {,10,1,0,1,3,0,0,0,0,12,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1047,            final double a = d * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1048,            split[0] = (d + a) - a;,0,0,0,2,4,0,10,0,0,10,23,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1049,            split[1] = d - split[0];,6,0,0,2,4,1,0,4,0,11,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1050,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1055,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1062,        final double c = a[0] + a[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1063,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1065,        if (c < 8e298 && c > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1066,            double z = c * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1067,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1068,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1069,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1070,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1071,            a[0] = (c + z - c) * HEX_40000000;,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1072,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,2,0,2,20,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1082,        ans[0] = a[0] * b[0];,2,1,1,3,6,0,0,0,0,11,21,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,0,0,7,14,0,0,0,0,21,49,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1086,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1087,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1095,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1096,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1098,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1120,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1121,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1123,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1128,        result[0] = a / in[0];,10,2,1,2,4,0,0,0,0,18,22,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,7,1,9,18,0,0,2,0,29,60,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1132,            result[1] = 0.0;,6,3,1,1,2,0,6,0,0,18,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1136,        resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1138,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1143,            err = err * (result[0] + result[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1145,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1155,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1156,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1157,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1160,"        split(a[0], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1161,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1162,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1164,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1165,        result[1] = zs[1];,0,0,1,2,4,0,4,0,0,9,18,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1168,"        split(b[1], ys);",8,2,1,2,4,0,4,0,0,17,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1169,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1171,        double tmp = result[0] + zs[0];,6,1,1,2,4,0,0,2,0,13,31,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,4,2,1,5,10,0,0,2,0,18,50,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1173,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1174,        tmp = result[0] + zs[1];,4,1,1,2,4,0,0,0,0,11,24,0,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1176,        result[0] = tmp;,6,0,1,1,2,0,0,0,0,10,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1179,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1180,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1181,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1183,        tmp = result[0] + zs[0];,2,1,1,2,4,0,8,0,0,16,24,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,0,0,5,10,0,0,0,0,2,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1185,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1186,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1188,        result[0] = tmp;,10,1,1,1,2,0,6,0,0,28,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1191,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1192,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1193,"        splitMult(xs, ys, zs);",12,1,0,1,2,1,4,0,0,18,22,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1195,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1197,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1198,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1200,        result[0] = tmp;,2,0,0,1,2,0,0,0,0,2,16,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1210,        final double xs[] = new double[2];,8,0,0,2,4,1,0,2,0,11,34,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1211,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1212,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1221,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1222,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1224,"        split(1.0, ys);",0,0,0,1,2,0,4,0,0,4,15,5,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1226,        while (p > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1227,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1228,"                quadMult(ys, xs, as);",4,1,0,1,2,0,8,0,0,14,21,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1229,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,17,29,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1232,"            quadMult(xs, xs, as);",4,0,0,1,2,0,8,0,0,13,21,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1233,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1235,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1238,        if (result != null) {,6,1,0,1,3,0,0,0,0,8,21,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1239,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1240,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1242,            resplit(result);,2,0,1,1,2,0,4,0,0,9,16,3,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1245,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1743,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,47,1744,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.01351,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,0,0,0,3,6,0,0,0,0,9,64,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",0,0,0,1,2,0,0,0,0,3,68,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",14,5,0,1,2,0,0,0,0,20,131,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",4,1,0,1,2,0,6,0,0,11,55,12,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",4,2,0,3,6,0,6,0,0,12,46,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,3,2,0,0,10,112,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,0,0,0,0,8,86,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,16,290,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,1,1,2,1,0,0,0,7,52,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,1,2,0,0,5,72,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,3,0,0,0,5,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,8,0,0,13,49,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0,0,0,5,10,0,0,0,0,15,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,4,1,1,2,0,0,0,0,22,51,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",6,1,0,4,8,1,4,0,0,12,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",20,8,0,1,2,1,0,0,0,29,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",8,0,0,4,8,3,4,0,0,16,78,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",20,0,0,3,6,4,0,6,0,31,81,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",4,2,0,1,2,0,0,2,0,9,36,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",6,1,0,3,6,1,0,0,0,8,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",4,1,0,2,4,0,0,0,0,5,69,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,108,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",6,0,0,3,6,0,10,2,0,19,50,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",0,0,1,3,6,0,12,0,0,16,32,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,1,1,3,6,0,0,0,0,8,51,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",22,2,0,3,6,1,0,0,0,28,79,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,8,0,0,11,72,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",10,1,0,4,8,0,0,0,0,12,121,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,129,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",10,0,0,2,4,0,8,0,0,19,50,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",8,0,0,1,2,0,0,0,0,10,41,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,1,0,4,8,0,0,0,0,3,56,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",0,0,0,1,2,0,8,0,0,8,38,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",4,0,0,4,8,1,6,0,0,12,132,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0,0,0,2,4,0,0,0,0,6,55,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0,0,0,5,10,0,0,0,0,15,68,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",8,0,0,3,6,0,0,0,0,8,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",6,1,0,3,6,0,0,0,0,8,89,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0,0,0,1,2,0,0,0,0,3,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,1,1,6,12,0,4,0,0,11,85,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",10,1,0,1,2,0,0,0,0,13,80,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,0,0,3,6,0,0,0,0,6,77,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,38,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,7,34,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,69,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",6,0,0,3,6,1,0,2,0,11,32,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,11,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,9,107,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",6,0,0,2,4,0,0,0,0,7,70,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",4,0,0,8,16,3,0,0,0,8,134,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",6,0,0,1,2,4,8,10,0,29,30,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",8,1,0,1,2,0,0,0,0,11,62,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",4,0,0,1,2,0,0,2,0,7,70,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",10,3,1,6,12,0,0,0,0,17,75,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",12,4,1,1,2,0,6,0,0,29,51,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,246,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,251,"    NUMERATOR(""numerator""), /* keep */",0,0,0,1,2,0,0,0,0,3,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,252,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,48,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",4,0,0,1,2,3,0,0,0,8,38,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,255,"    WHOLE_FORMAT(""whole format""), /* keep */",0,0,0,1,2,0,0,0,0,3,40,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,256,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",4,0,1,4,8,0,0,0,0,9,69,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,258,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,259,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,98,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,262,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,263,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",4,0,0,3,6,0,6,0,0,11,150,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,266,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,269,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",0,0,0,5,10,0,0,0,0,15,150,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",12,2,0,6,12,0,0,0,0,16,96,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",6,0,0,1,2,0,8,0,0,15,63,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",4,0,0,3,6,1,2,0,0,8,56,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,276,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0,0,0,3,6,0,0,0,0,9,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",20,3,1,1,2,2,8,2,0,40,69,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,285,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,286,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,287,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,288,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,6,0,0,9,72,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",8,1,0,1,2,0,0,0,0,10,66,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",4,0,0,3,6,1,0,0,0,6,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,302,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,9,136,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,303,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,305,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0,0,0,3,6,0,0,0,0,9,156,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",4,0,1,2,4,0,0,0,0,8,76,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,309,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,1,0,1,2,0,0,0,0,3,85,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,312,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",6,0,0,1,2,1,0,0,0,8,70,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,315,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0,0,0,1,2,0,0,0,0,3,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,2,118,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",4,0,0,5,10,0,0,0,0,5,103,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,319,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,320,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,321,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,68,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,1,0,8,16,0,2,0,0,6,106,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,327,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,328,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",0,0,0,2,4,0,0,0,0,6,49,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",4,0,0,2,4,1,6,4,0,16,103,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,330,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,331,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,333,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",8,1,0,4,8,0,0,0,0,11,75,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",8,3,0,3,6,0,0,0,0,12,64,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,337,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,69,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,338,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",4,0,0,1,2,0,0,0,0,5,23,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,341,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,342,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,42,        final List<Object> list = new ArrayList<Object>();,0,0,0,1,2,0,0,0,0,3,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,50,                    list.add(o);,0,0,0,1,2,0,0,0,0,3,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,54,        return list.toArray();,0,0,0,1,2,1,0,0,0,4,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,0,0,0,2,5,0,0,0,0,7,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",4,1,0,2,5,1,4,0,0,10,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,2,1,0,1,2,0,0,0,0,3,18,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,6,1,0,1,2,0,0,0,0,7,24,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,2,0,1,0,0,0,0,0,0,8,7,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,4,0,0,0,0,3,0,2,0,10,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,10,1,0,0,0,1,4,0,0,15,16,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,6,1,0,1,2,1,16,0,0,25,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,2,2,0,4,13,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,6,0,0,6,22,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,6,1,0,0,0,1,0,0,0,7,12,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,4,0,0,1,3,2,0,2,0,8,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,2,0,1,1,2,0,0,0,0,5,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",4,0,0,1,2,0,8,0,0,12,50,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,2,0,1,1,2,0,0,0,0,5,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,138,"        System.arraycopy(source.values, 0, values, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,4,2,1,1,2,0,12,2,0,25,26,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,140,"        System.arraycopy(source.states, 0, states, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,10,0,0,0,0,0,6,0,0,17,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,144,        count = source.count;,0,0,0,0,0,0,0,0,0,0,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",14,2,0,1,3,1,0,0,0,17,57,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,75,        virtualSize = dimension;,0,0,0,0,0,0,0,0,0,0,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,76,        entries = new OpenIntToDoubleHashMap(0.0);,0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,77,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,78,    },6,0,0,0,1,0,0,0,0,7,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,12,1,1,1,3,1,8,2,0,32,47,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,180,        virtualSize = v.getDimension();,2,0,0,1,2,0,4,0,0,7,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,0,0,0,2,4,0,0,0,0,6,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,182,        epsilon = v.epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,183,    },6,0,0,0,1,0,10,2,0,21,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,0,0,0,1,3,0,4,0,0,5,18,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,4,0,1,1,2,1,0,2,0,10,21,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,208,        return entries;,6,0,0,0,0,1,0,0,0,7,15,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,663,        checkIndex(index);,2,0,0,1,2,0,4,0,0,7,18,0,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,664,        if (!isDefaultValue(value)) {,2,0,0,2,5,0,2,2,0,6,29,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",6,1,0,1,2,0,0,0,0,8,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,669,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,241,        return new Iterator();,8,1,1,1,2,1,0,2,0,18,22,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,40,public class OpenIntToDoubleHashMap implements Serializable {,6,0,0,0,1,1,8,2,0,18,61,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,498,        private Iterator() {,2,0,0,1,3,1,0,0,0,3,20,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,501,            referenceCount = count;,0,0,0,0,0,0,0,0,0,0,23,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,504,            next = -1;,4,0,0,0,0,0,0,0,0,6,10,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,506,                advance();,0,0,0,1,2,0,0,0,0,3,10,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,509,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,511,        },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,484,    public class Iterator {,10,0,0,0,1,3,0,0,0,13,23,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,518,            return next >= 0;,2,0,0,0,0,1,4,2,0,8,17,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,546,            if (referenceCount != count) {,8,5,0,1,3,0,4,0,0,17,30,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,549,            if (current < 0) {,4,1,0,1,3,0,0,0,0,6,18,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,552,            return values[current];,2,0,1,1,2,4,0,0,0,9,23,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,563,            if (referenceCount != count) {,0,0,0,1,3,0,0,0,0,4,30,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,568,            current = next;,0,0,0,0,0,0,0,0,0,0,15,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,572,                while (states[++next] != FULL) {,4,1,1,2,5,0,0,0,0,8,32,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,580,            },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,582,        },0,0,0,0,1,0,2,0,0,2,1,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,479,        checkIndex(index);,0,0,1,1,2,0,4,0,0,13,18,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,480,        return entries.get(index);,0,0,0,1,2,1,6,0,0,6,26,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,180,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,181,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,182,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,385,        return (key != 0 || states[index] == FULL) && keys[index] == key;,0,0,0,3,6,1,0,0,0,10,65,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,76,        if (index < 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,103,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",8,0,0,1,2,0,4,0,0,13,44,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,104,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,120,                                  final double missingEntries) {,18,4,0,0,2,1,18,0,0,42,30,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,121,        final int capacity = computeCapacity(expectedSize);,2,0,0,1,2,1,4,0,0,7,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,122,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,123,        values = new double[capacity];,2,0,1,1,2,0,0,0,0,5,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,124,        states = new byte[capacity];,4,0,1,1,2,0,0,0,0,7,28,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,125,        this.missingEntries = missingEntries;,4,0,0,0,0,0,0,0,0,5,37,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,126,        mask   = capacity - 1;,0,0,1,0,0,0,0,0,0,7,22,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,153,        if (expectedSize == 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,156,        final int capacity   = (int) FastMath.ceil(expectedSize / LOAD_FACTOR);,6,1,0,2,4,1,4,0,0,12,71,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,157,        final int powerOfTwo = Integer.highestOneBit(capacity);,2,0,0,1,2,1,6,0,0,9,55,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,158,        if (powerOfTwo == capacity) {,4,1,0,1,3,0,0,0,0,5,29,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,159,            return capacity;,2,0,0,0,0,1,0,0,0,2,16,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,259,"        return findInsertionIndex(keys, states, key, mask);",2,2,0,1,2,1,16,0,0,21,51,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,272,        final int hash = hashOf(key);,2,0,0,1,2,1,4,0,0,7,29,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,273,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,274,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,275,            return index;,2,0,0,0,0,1,6,0,0,8,13,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,410,        int index = findInsertionIndex(key);,2,0,0,1,2,0,4,0,0,6,36,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,411,        double previous = missingEntries;,0,0,0,0,0,0,0,0,0,0,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,412,        boolean newMapping = true;,0,0,0,0,0,0,0,0,0,0,26,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,413,        if (index < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,418,        keys[index]   = key;,2,0,1,1,2,0,0,0,0,7,20,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,419,        states[index] = FULL;,2,0,1,1,2,0,0,0,0,7,21,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,420,        values[index] = value;,0,0,0,1,2,0,0,0,0,3,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,421,        if (newMapping) {,2,0,0,1,3,0,0,0,0,2,17,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,422,            ++size;,2,0,0,0,0,0,0,0,0,3,7,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,423,            if (shouldGrowTable()) {,2,0,0,2,5,0,2,0,0,5,24,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,426,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,428,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,469,        return size > (mask + 1) * LOAD_FACTOR;,10,4,0,1,2,1,0,0,0,14,39,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,478,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,8,4,0,3,6,1,0,0,0,13,50,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,479,        return h ^ (h >>> 7) ^ (h >>> 4);,6,3,0,2,4,1,0,0,0,9,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3757,            return y;,16,6,0,0,0,1,4,0,0,27,9,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,220,        return FastMath.abs(value) < epsilon;,2,1,0,1,2,1,6,0,0,9,37,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,422,        return virtualSize;,2,0,0,0,0,1,0,0,0,2,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3724,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3728,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3732,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3733,        if (x < 0 && y != x) {,8,3,0,1,3,0,0,0,0,12,22,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3737,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3741,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3751,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3755,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3756,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,4,1,0,2,4,0,0,0,0,5,66,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,0,2,4,4,0,0,0,8,66,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,98,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,101,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,3,0,0,0,5,61,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,110,    private static final double LN_SPLIT_COEF[][] = {,4,1,1,2,5,3,0,0,0,13,49,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,143,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,153,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,4,0,0,9,60,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,156,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,159,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,162,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,192,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",6,3,0,1,3,3,0,0,0,13,61,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,233,        FACT[0] = 1.0;,6,1,0,1,2,0,0,0,0,8,14,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,235,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,238,        double tmp[] = new double[2];,6,1,0,2,4,0,0,0,0,8,29,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,239,        double recip[] = new double[2];,2,0,0,2,4,0,6,0,0,8,31,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,242,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,243,"            expint(i, tmp);",0,0,0,1,2,0,6,0,0,6,15,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,4,1,1,2,4,0,0,0,0,10,32,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,250,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,251,                EXP_INT_TABLE_B[750-i] = recip[1];,4,1,1,2,4,2,0,0,0,19,34,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,1,0,1,3,0,0,0,0,13,47,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,257,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,8,3,1,2,4,1,0,0,0,19,29,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,2,0,1,2,4,0,0,0,0,9,29,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,263,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,265,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,269,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,270,    },8,1,1,0,1,1,6,2,0,23,1,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1012,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1013,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1014,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1015,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1016,"        split(x, xs);",2,0,0,1,2,0,6,0,0,8,13,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1017,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1019,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1020,"            splitMult(xs, ys, as);",0,0,1,1,2,0,0,0,0,5,22,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1021,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1022,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1024,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1025,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1027,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1028,            ys[0] = as[0];,4,0,1,2,4,0,0,0,0,10,14,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1029,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1032,        if (result != null) {,4,2,0,1,3,0,6,0,0,12,21,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1033,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1034,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1037,        return ys[0] + ys[1];,2,0,0,2,4,1,0,2,0,4,21,13,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1046,        if (d < 8e298 && d > -8e298) {,0,0,1,1,3,0,0,0,0,5,30,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1047,            final double a = d * HEX_40000000;,2,0,0,0,0,3,0,0,0,5,34,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1048,            split[0] = (d + a) - a;,6,2,1,2,4,0,0,0,0,11,23,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1049,            split[1] = d - split[0];,6,1,1,2,4,0,0,0,0,13,24,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1050,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1055,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1062,        final double c = a[0] + a[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1063,        final double d = -(c - a[0] - a[1]);,6,2,1,3,6,1,0,0,0,15,36,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1065,        if (c < 8e298 && c > -8e298) {,6,3,0,1,3,1,0,0,0,11,30,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1066,            double z = c * HEX_40000000;,8,1,0,0,0,1,0,0,0,10,28,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1067,            a[0] = (c + z) - z;,8,1,0,2,4,0,0,0,0,9,19,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1068,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1069,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1070,            double z = c * 9.31322574615478515625E-10;,6,0,0,0,0,3,0,0,0,9,42,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1071,            a[0] = (c + z - c) * HEX_40000000;,12,3,1,2,4,0,6,0,0,25,34,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1072,            a[1] = c - a[0] + d;,4,2,0,2,4,0,0,2,0,9,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1082,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1086,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1087,    },0,0,1,0,1,0,0,0,0,5,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1095,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1096,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1098,        resplit(ans);,2,1,0,1,2,0,2,0,0,5,13,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1120,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1121,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1123,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1128,        result[0] = a / in[0];,4,1,1,2,4,0,0,0,0,11,22,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,6,7,1,9,18,0,0,0,0,29,60,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,0,0,4,9,0,0,0,0,13,63,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1132,            result[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1136,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1138,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0,0,0,4,8,0,0,0,0,12,58,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1143,            err = err * (result[0] + result[1]);,4,0,0,3,6,0,0,0,0,5,36,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1145,            result[1] += err;,4,1,0,1,2,0,0,0,0,5,17,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1155,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1156,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1157,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1160,"        split(a[0], xs);",2,0,0,2,4,0,2,2,0,6,16,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1161,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1162,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1164,        result[0] = zs[0];,12,3,1,2,4,0,0,0,0,20,18,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1165,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1168,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1169,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1171,        double tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1173,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1174,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1176,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1179,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1180,"        split(b[0], ys);",0,0,1,2,4,0,12,0,0,14,16,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1181,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1183,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1185,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1186,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,1,1,5,10,0,0,0,0,10,50,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1188,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1191,"        split(a[1], xs);",6,0,1,2,4,0,4,0,0,12,16,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1192,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1193,"        splitMult(xs, ys, zs);",4,2,0,1,2,0,16,0,0,23,22,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1195,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1197,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1198,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,2,0,10,24,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1200,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1210,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1211,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1212,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1221,        xs[0] = 2.718281828459045;,10,1,1,1,2,0,0,0,0,15,26,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1222,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1224,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1226,        while (p > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1227,            if ((p & 1) != 0) {,4,1,1,2,5,3,0,0,0,13,19,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1228,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1229,                ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1232,"            quadMult(xs, xs, as);",2,0,1,1,2,0,0,0,0,7,21,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1233,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1235,            p >>= 1;,0,0,0,0,0,0,0,0,0,0,8,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1238,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1239,            result[0] = ys[0];,4,0,1,2,4,0,14,0,0,23,18,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1240,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1242,            resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1245,        return ys[0] + ys[1];,2,1,1,2,4,1,0,0,0,7,21,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1743,        double x[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1744,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1745,        double y[] = new double[2];,4,0,0,2,4,0,0,0,0,5,27,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1746,        double a[] = new double[2];,2,0,1,2,4,0,6,0,0,12,27,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1748,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1751,        x[0] += 1.0;,0,0,1,1,2,0,0,0,0,3,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1752,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1753,"        splitReciprocal(x, a);",0,0,0,1,2,0,6,0,0,6,22,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1754,        x[0] -= 2.0;,0,0,1,1,2,0,0,0,0,3,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1755,        resplit(x);,0,0,0,1,2,0,0,0,0,3,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1756,"        splitMult(x, a, y);",0,0,0,1,2,0,8,0,0,8,19,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1757,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1758,        x[1] = y[1];,8,1,0,2,4,0,0,0,0,11,12,0,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1761,"        splitMult(x, x, x2);",0,0,0,1,2,0,0,0,0,3,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1767,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,6,0,0,3,6,0,0,0,0,7,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1768,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,0,0,0,3,6,0,0,0,0,9,48,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1770,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,2,0,0,1,3,0,0,0,0,2,51,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1771,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1772,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1773,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);",2,0,1,2,4,0,6,2,0,14,33,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1775,            y[0] = a[0];,2,1,1,2,4,0,0,0,0,8,12,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1776,            y[1] = a[1];,4,1,1,2,4,0,0,0,0,9,12,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1779,"        splitMult(y, x, a);",6,0,1,1,2,1,0,0,0,9,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1780,        y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1781,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1783,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1793,        final double xs[] = new double[2];,2,0,0,2,4,0,6,0,0,8,34,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1794,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1795,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1796,        final double as[] = new double[2];,8,2,1,2,4,1,0,0,0,14,34,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1797,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1798,        ys[0] = ys[1] = 0.0;,2,0,1,2,4,0,0,0,0,9,20,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1800,        for (int i = 19; i >= 0; i--) {,4,1,1,1,3,4,0,0,0,13,31,1,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1801,"            splitMult(xs, ys, as);",2,0,0,1,2,0,8,0,0,10,22,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1802,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1804,            if ( (i & 1) == 0) {,0,0,0,2,5,0,8,0,0,8,20,9,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1805,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1808,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,49,1809,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,0,0,0,0,0,1,0,0,0,1,10,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,2,0,4,18,3,0.05,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",2,1,0,2,4,1,6,0,0,9,60,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,205,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,                x0 = x1;,6,1,0,0,0,4,2,0,0,13,8,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,175,                f0 = f1;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,                switch (method) {,22,1,0,1,3,0,8,0,0,34,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,198,            x1 = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,199,            f1 = fx;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,204,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,235,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,252,        },6,3,0,0,1,0,0,0,0,10,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,68,        super(absoluteAccuracy);,2,1,0,1,2,0,0,0,0,3,24,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,69,        this.allowed = AllowedSolution.ANY_SIDE;,6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,70,        this.method = method;,8,0,0,0,0,0,0,0,0,12,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,149,        final double ftol = getFunctionValueAccuracy();,2,0,0,1,2,1,2,0,0,5,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,150,        final double atol = getAbsoluteAccuracy();,0,0,0,1,2,0,0,0,0,3,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,151,        final double rtol = getRelativeAccuracy();,2,1,1,1,2,0,4,0,0,15,42,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,155,        boolean inverted = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,22,7,0,4,8,2,0,0,0,31,53,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,161,            final double fx = computeObjectiveValue(x);,0,0,0,1,2,0,0,0,0,3,43,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,166,            if (fx == 0.0) {,4,1,1,1,3,0,0,0,0,8,16,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,128,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,134,        return relativeAccuracy;,4,0,0,0,0,2,0,0,0,5,24,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,283,    },2,0,1,0,1,0,0,0,0,6,1,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,380,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,2,0,0,2,4,4,6,0,0,11,61,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3925,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3928,        if (a < b) {,6,1,0,1,3,0,0,0,0,7,12,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,3929,            return b;,14,2,0,0,0,2,0,0,0,18,9,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,146,"        verifyBracketing(x0, x1);",0,0,0,1,2,0,6,0,0,6,25,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",0,0,0,1,2,0,10,0,0,10,67,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,116,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,2,0,2,31,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,117,"        return super.solve(maxEval, f, min, max, startValue);",12,0,0,1,2,1,0,0,0,12,53,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,130,        double x0 = getMin();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,131,        double x1 = getMax();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,132,        double f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,6,38,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,133,        double f1 = computeObjectiveValue(x1);,4,2,0,1,2,0,10,0,0,16,38,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,138,        if (f0 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,141,        if (f1 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,41,public enum AllowedSolution {,12,3,0,0,1,0,0,0,0,15,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,48,"    ANY_SIDE,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,55,"    LEFT_SIDE,",4,1,0,0,0,0,4,0,0,10,10,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,62,"    RIGHT_SIDE,",6,1,1,0,0,0,0,0,0,9,11,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,68,"    BELOW_SIDE,",12,1,0,0,0,0,0,0,0,14,11,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,50,74,    ABOVE_SIDE;,12,2,0,0,0,1,6,0,0,22,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,256,    protected enum Method {,2,1,0,0,1,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,262,"        REGULA_FALSI,",0,0,0,0,0,0,0,0,0,0,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,265,"        ILLINOIS,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,268,        PEGASUS;,4,0,0,0,0,0,0,2,0,6,8,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,305,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,308,        final double fLo = function.value(lower);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,309,        final double fHi = function.value(upper);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0,0,0,2,4,1,0,0,0,7,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,336,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,371,        if (function == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,374,"        verifyInterval(lower, upper);",4,1,0,1,2,0,10,0,0,15,29,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,375,"        if (!isBracketing(function, lower, upper)) {",0,0,0,2,5,0,10,0,0,12,44,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,1,6,0,0,9,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,1,2,4,0,0,0,0,11,66,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,98,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,101,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,1,4,0,0,7,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,110,    private static final double LN_SPLIT_COEF[][] = {,12,1,1,2,5,0,0,0,0,19,49,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,130,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,156,    private static final double SINE_TABLE_B[] = new double[14];,4,0,0,2,4,0,0,0,0,4,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,159,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,162,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,10,0,0,10,62,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,168,    private static final double TANGENT_TABLE_B[] = new double[14];,6,0,0,2,4,0,0,0,0,8,63,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,171,    private static final long RECIP_2PI[] = new long[] {,4,0,0,2,5,0,0,0,0,5,52,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,233,        FACT[0] = 1.0;,0,0,0,1,2,0,0,0,0,3,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,235,            FACT[i] = FACT[i-1] * i;,2,1,0,2,4,0,0,0,0,3,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,238,        double tmp[] = new double[2];,4,0,0,2,4,0,0,0,0,5,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,239,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,242,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,243,"            expint(i, tmp);",4,1,0,1,2,0,6,2,0,13,15,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,251,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,1,2,4,0,0,0,0,8,34,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,1,0,1,3,0,8,0,0,21,47,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,257,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,0,2,4,0,0,0,0,2,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,1,1,2,4,0,0,0,0,14,29,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,263,        for (i = 0; i < LN_MANT.length; i++) {,10,1,0,1,3,0,0,0,0,13,38,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,0,0,4,8,0,0,0,0,5,79,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,265,            LN_MANT[i] = slowLog(d);,6,2,1,2,4,0,8,0,0,22,24,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,269,        buildSinCosTables();,0,0,0,1,2,0,2,0,0,2,20,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1012,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1013,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1014,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1015,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1016,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1017,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1019,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1020,"            splitMult(xs, ys, as);",6,1,0,1,2,4,0,0,0,11,22,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1021,            ys[0] = as[0];,0,1,1,2,4,0,0,0,0,5,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1022,            ys[1] = as[1];,6,5,1,2,4,0,0,0,0,26,14,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1024,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1025,"            splitReciprocal(as, facts);",2,0,0,1,2,0,6,0,0,8,27,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1027,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,8,0,0,10,24,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1028,            ys[0] = as[0];,2,0,1,2,4,0,0,0,0,7,14,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1029,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1032,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1033,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1034,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1037,        return ys[0] + ys[1];,6,2,1,2,4,1,0,0,0,13,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1046,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1047,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1048,            split[0] = (d + a) - a;,6,2,1,2,4,0,0,0,0,11,23,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1049,            split[1] = d - split[0];,2,1,1,2,4,0,0,0,0,8,24,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1050,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1055,    },2,0,0,0,1,0,0,0,0,3,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1062,        final double c = a[0] + a[1];,1,1,1,2,4,0,0,0,0,6,29,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1063,        final double d = -(c - a[0] - a[1]);,4,6,1,3,6,1,0,0,0,26,36,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1065,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1066,            double z = c * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1067,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1068,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,1,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1069,        } else {,4,0,0,0,2,0,0,2,0,7,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1070,            double z = c * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,42,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1071,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1072,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1082,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,0,0,7,14,0,0,0,0,21,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1086,        resplit(ans);,2,0,0,1,2,1,4,0,0,7,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1087,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1095,        ans[0] = a[0] + b[0];,8,1,0,3,6,0,0,0,0,10,21,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1096,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1098,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1120,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1121,        final double a = 1.0 - b;,0,0,0,0,0,0,0,0,0,0,25,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1123,        if (in[0] == 0.0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1128,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1132,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1136,        resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1138,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1143,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1145,            result[1] += err;,0,0,0,1,2,0,0,0,0,3,17,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1155,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1156,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1157,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1160,"        split(a[0], xs);",2,2,0,2,4,0,0,0,0,4,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1161,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1162,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1164,        result[0] = zs[0];,0,0,1,2,4,0,0,0,0,5,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1165,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1168,"        split(b[1], ys);",6,2,1,2,4,0,10,0,0,21,16,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1169,"        splitMult(xs, ys, zs);",4,3,0,1,2,0,0,0,0,7,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1171,        double tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1173,        result[0] = tmp;,0,0,0,1,2,0,4,0,0,4,16,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1174,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,1,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1176,        result[0] = tmp;,2,1,1,1,2,0,0,0,0,8,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1179,"        split(a[1], xs);",0,1,1,2,4,0,4,0,0,11,16,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1180,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1181,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1183,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1185,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1186,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,8,2,0,5,10,0,0,0,0,10,50,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1188,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1191,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1192,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1193,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1195,        tmp = result[0] + zs[0];,2,0,0,2,4,0,6,0,0,8,24,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1197,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1198,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1200,        result[0] = tmp;,4,0,0,1,2,0,0,0,0,5,16,12,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1201,    },2,1,0,0,1,0,4,0,0,7,1,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1210,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1211,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1212,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1221,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1222,        xs[1] = 1.4456468917292502E-16;,0,0,0,1,2,0,0,0,0,3,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1224,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1226,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1227,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1228,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1229,                ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,0,0,0,0,13,29,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1232,"            quadMult(xs, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1233,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1235,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1238,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1239,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1240,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1242,            resplit(result);,2,0,0,1,2,0,4,0,0,7,16,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1245,        return ys[0] + ys[1];,0,0,0,2,4,1,2,0,0,2,21,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1743,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1744,        double x2[] = new double[2];,6,0,0,2,4,0,0,0,0,8,28,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1745,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1746,        double a[] = new double[2];,4,0,0,2,4,0,8,0,0,12,27,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1748,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1751,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1752,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1753,"        splitReciprocal(x, a);",0,0,0,1,2,0,0,0,0,3,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1754,        x[0] -= 2.0;,0,0,1,1,2,0,0,0,0,3,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1755,        resplit(x);,2,1,0,1,2,0,0,0,0,3,11,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1756,"        splitMult(x, a, y);",0,0,0,1,2,0,0,0,0,3,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1757,        x[0] = y[0];,0,0,1,2,4,0,0,0,0,5,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1758,        x[1] = y[1];,0,0,1,2,4,0,0,0,0,5,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1761,"        splitMult(x, x, x2);",8,2,0,1,2,1,8,0,0,19,20,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1767,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1768,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,0,0,0,3,6,0,0,0,0,9,48,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1770,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,51,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1771,"            splitMult(y, x2, a);",0,0,0,1,2,0,0,0,0,3,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1772,            y[0] = a[0];,2,0,1,2,4,0,0,0,0,9,12,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1773,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1775,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1776,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1779,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1780,        y[0] = a[0];,2,0,1,2,4,0,0,0,0,7,12,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1781,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1783,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1793,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1794,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1795,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1796,        final double as[] = new double[2];,6,1,0,2,4,1,0,0,0,8,34,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1797,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1798,        ys[0] = ys[1] = 0.0;,10,5,1,2,4,0,0,0,0,22,20,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1800,        for (int i = 19; i >= 0; i--) {,4,1,0,1,3,0,0,0,0,5,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1801,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1802,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1804,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1805,                continue;,2,0,0,0,0,0,0,0,0,3,9,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1808,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1809,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1811,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,6,2,0,12,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1812,                facts[0] = -facts[0];,2,0,1,2,4,1,0,0,0,9,21,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1813,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1816,"            splitAdd(ys, facts, as);",10,1,0,1,2,1,0,0,0,13,24,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1817,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1820,        if (result != null) {,10,1,0,1,3,0,0,0,0,13,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1821,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1822,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1825,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1836,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1837,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1838,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1839,        final double as[] = new double[2];,4,1,0,2,4,1,6,0,0,12,34,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1840,"        split(x, xs);",2,0,0,1,2,0,6,0,0,9,13,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1841,        ys[0] = ys[1] = 0.0;,2,0,1,2,4,1,16,0,0,25,20,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1843,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1844,"            splitMult(xs, ys, as);",2,0,0,1,2,0,0,0,0,2,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1845,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1847,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1848,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1851,"            split(FACT[i], as);",2,0,1,2,4,1,6,0,0,13,19,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1852,"            splitReciprocal(as, facts);",2,0,0,1,2,0,6,0,0,8,27,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1854,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1855,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1856,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1859,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1860,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,4,0,0,4,29,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1863,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1864,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1865,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1868,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1874,        final double result[] = new double[2];,18,0,0,2,4,0,6,0,0,25,38,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1877,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1878,            double x = i / 8.0;,0,0,0,0,0,0,0,0,0,0,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1880,"            slowSin(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1881,            SINE_TABLE_A[i] = result[0];,2,1,1,2,4,0,0,0,0,10,28,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1882,            SINE_TABLE_B[i] = result[1];,2,1,1,2,4,0,0,0,0,8,28,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1884,"            slowCos(x, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1885,            COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1886,            COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1890,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1891,            double xs[] = new double[2];,8,2,0,2,4,0,0,0,0,10,28,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1892,            double ys[] = new double[2];,4,0,0,2,4,0,12,0,0,16,28,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1893,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1894,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1895,            double temps[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1897,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1899,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1900,                xs[1] = SINE_TABLE_B[i/2];,6,0,0,2,4,0,0,0,0,7,26,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1901,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1902,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1905,"                splitMult(xs, ys, result);",6,0,0,1,2,0,0,0,0,7,26,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1906,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,2,4,0,0,0,0,15,34,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1907,                SINE_TABLE_B[i] = result[1] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1910,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1911,"                splitMult(xs, xs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,50,1912,                temps[0] = -temps[0];,4,1,0,2,4,0,4,0,0,9,21,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0,0,0,1,3,0,6,0,0,6,17,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,6,2,1,1,3,0,0,0,0,12,18,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,6,3,0,0,0,0,0,0,0,10,21,0,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,1,1,3,0,0,0,0,11,17,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,8,1,1,2,5,0,14,6,0,37,31,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },16,4,1,0,1,0,22,6,0,70,1,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,        this.method = method;,0,0,0,0,0,0,0,0,0,0,21,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,8,1,0,1,2,3,0,0,0,12,47,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,4,0,0,7,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,        boolean inverted = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,14,5,0,4,8,1,0,0,0,20,53,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,            final double fx = computeObjectiveValue(x);,0,0,0,1,2,0,0,0,0,3,43,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,128,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,134,        return relativeAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,140,        return functionValueAccuracy;,2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,283,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,380,    },4,0,0,0,1,3,0,4,0,13,1,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3925,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3928,        if (a < b) {,6,1,0,1,3,0,0,0,0,7,12,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,3929,            return b;,4,0,0,0,0,1,0,0,0,4,9,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,146,"        verifyBracketing(x0, x1);",0,0,0,1,2,0,6,0,0,6,25,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,116,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,117,"        return super.solve(maxEval, f, min, max, startValue);",0,0,0,1,2,1,0,0,0,4,53,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,130,        double x0 = getMin();,0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,131,        double x1 = getMax();,2,0,0,1,2,0,2,0,0,4,21,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,132,        double f0 = computeObjectiveValue(x0);,4,0,1,1,2,1,4,0,0,13,38,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,133,        double f1 = computeObjectiveValue(x1);,0,0,0,1,2,0,0,0,0,3,38,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,138,        if (f0 == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,141,        if (f1 == 0.0) {,6,5,0,1,3,0,0,0,0,11,16,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",2,0,0,1,2,1,18,0,0,21,67,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,305,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,308,        final double fLo = function.value(lower);,2,1,0,1,2,0,2,0,0,7,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,309,        final double fHi = function.value(upper);,0,0,0,1,2,0,0,0,0,3,41,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0,0,0,2,4,1,0,0,0,7,56,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,336,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,340,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,371,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,374,"        verifyInterval(lower, upper);",0,0,0,1,2,0,0,0,0,3,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,375,"        if (!isBracketing(function, lower, upper)) {",4,1,0,2,5,0,8,0,0,14,44,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,41,public enum AllowedSolution {,4,0,0,0,1,1,0,0,0,5,29,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,48,"    ANY_SIDE,",12,3,0,0,0,0,4,0,0,20,9,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,55,"    LEFT_SIDE,",0,0,0,0,0,0,0,0,0,0,10,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,62,"    RIGHT_SIDE,",10,2,0,0,0,0,4,0,0,16,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,68,"    BELOW_SIDE,",0,0,0,0,0,0,0,0,0,0,11,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,51,74,    ABOVE_SIDE;,4,0,0,0,0,0,10,2,0,16,11,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,250,    protected enum Method {,0,0,0,0,1,0,0,0,0,1,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,256,"        REGULA_FALSI,",0,0,0,0,0,0,0,0,0,0,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,259,"        ILLINOIS,",0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,262,        PEGASUS;,0,0,0,0,0,0,0,0,0,0,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,4,0,0,2,4,0,0,0,0,5,65,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,6,0,0,2,4,1,0,8,0,15,66,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,98,    private static final double FACT[] = new double[20];,6,0,0,2,4,4,4,0,0,15,52,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,110,    private static final double LN_SPLIT_COEF[][] = {,8,1,0,2,5,0,0,0,0,11,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,130,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,153,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,156,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,6,0,0,6,60,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,159,    private static final double COSINE_TABLE_A[] = new double[14];,14,0,0,2,4,4,4,4,0,28,62,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,162,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,0,0,0,0,3,62,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,168,    private static final double TANGENT_TABLE_B[] = new double[14];,10,4,1,2,4,0,8,0,0,28,63,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,171,    private static final long RECIP_2PI[] = new long[] {,10,1,0,2,5,3,0,0,0,15,52,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,192,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,233,        FACT[0] = 1.0;,0,0,0,1,2,0,0,0,0,3,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,234,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,235,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,238,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,239,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,242,        for (i = 0; i < 750; i++) {,6,1,0,1,3,0,0,0,0,9,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,243,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,8,2,0,2,4,1,0,0,0,11,32,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,12,3,1,2,4,0,0,0,0,22,32,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,247,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0,1,0,2,4,0,6,0,0,7,34,9,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,251,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,1,0,1,3,0,0,0,0,13,47,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,257,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,2,4,0,0,0,0,7,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,263,        for (i = 0; i < LN_MANT.length; i++) {,10,1,0,1,3,0,0,0,0,13,38,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,10,6,0,4,8,0,4,0,0,20,79,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,265,            LN_MANT[i] = slowLog(d);,0,0,1,2,4,0,4,0,0,9,24,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,269,        buildSinCosTables();,0,0,0,1,2,0,2,0,0,2,20,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1012,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1013,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1014,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1015,        final double as[] = new double[2];,6,3,0,2,4,1,12,0,0,22,34,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1016,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1017,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1019,        for (int i = 19; i >= 0; i--) {,2,0,0,1,3,3,0,0,0,5,31,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1020,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1021,            ys[0] = as[0];,0,0,1,2,4,0,4,0,0,9,14,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1022,            ys[1] = as[1];,0,1,1,2,4,0,6,0,0,13,14,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1024,"            split(FACT[i], as);",2,0,0,2,4,0,0,0,0,3,19,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1025,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1027,"            splitAdd(ys, facts, as);",2,1,0,1,2,0,6,0,0,9,24,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1028,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1029,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1032,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1033,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1034,            result[1] = ys[1];,4,1,0,2,4,1,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1037,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1046,        if (d < 8e298 && d > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1047,            final double a = d * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1048,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1049,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1050,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1055,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1062,        final double c = a[0] + a[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1063,        final double d = -(c - a[0] - a[1]);,2,0,0,3,6,3,0,0,0,5,36,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1065,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1066,            double z = c * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1067,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1068,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1069,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1070,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1071,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1072,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1082,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1086,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1087,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1095,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1096,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1098,        resplit(ans);,0,0,1,1,2,0,4,0,0,6,13,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1120,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1121,        final double a = 1.0 - b;,2,0,1,0,0,1,0,2,0,9,25,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1123,        if (in[0] == 0.0) {,2,1,1,2,5,0,0,0,0,6,19,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1128,        result[0] = a / in[0];,6,1,0,2,4,1,0,0,0,8,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,0,0,4,9,0,0,0,0,13,63,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1132,            result[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1136,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1138,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1143,            err = err * (result[0] + result[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1145,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1155,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1156,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1157,        final double zs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1160,"        split(a[0], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1161,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1162,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,14,0,0,14,22,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1164,        result[0] = zs[0];,0,0,1,2,4,0,0,0,0,5,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1165,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1168,"        split(b[1], ys);",2,0,1,2,4,0,10,0,0,14,16,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1169,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1171,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,10,2,1,5,10,3,0,4,0,28,50,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1173,        result[0] = tmp;,4,0,0,1,2,0,0,0,0,5,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1174,        tmp = result[0] + zs[1];,4,0,1,2,4,1,0,0,0,8,24,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,2,1,5,10,0,0,2,0,21,50,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1176,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1179,"        split(a[1], xs);",0,1,1,2,4,0,0,0,0,6,16,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1180,"        split(b[0], ys);",2,0,1,2,4,0,8,0,0,17,16,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1181,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1183,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1185,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1186,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1188,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1191,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1192,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1193,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,2,0,3,22,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1195,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,0,0,5,10,1,0,2,0,9,50,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1197,        result[0] = tmp;,8,1,1,1,2,3,0,0,0,20,16,1,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1198,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1200,        result[0] = tmp;,6,1,1,1,2,0,0,0,0,10,16,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1201,    },10,3,1,0,1,0,0,0,0,16,1,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1210,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1211,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1212,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1221,        xs[0] = 2.718281828459045;,6,1,0,1,2,0,0,0,0,8,26,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1222,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1224,"        split(1.0, ys);",12,1,0,1,2,0,0,0,0,13,15,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1226,        while (p > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1227,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1228,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1229,                ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1232,"            quadMult(xs, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1233,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1235,            p >>= 1;,4,1,1,0,0,0,0,0,0,11,8,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1238,        if (result != null) {,10,2,0,1,3,0,0,0,0,13,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1239,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1240,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1242,            resplit(result);,0,0,0,1,2,0,4,0,0,4,16,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1245,        return ys[0] + ys[1];,0,1,1,2,4,1,0,2,0,11,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1743,        double x[] = new double[2];,6,0,0,2,4,0,2,4,0,13,27,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1744,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1745,        double y[] = new double[2];,4,0,0,2,4,0,2,0,0,6,27,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1746,        double a[] = new double[2];,2,0,0,2,4,0,8,0,0,11,27,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1748,"        split(xi, x);",0,0,0,1,2,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1751,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1752,        resplit(x);,2,0,0,1,2,0,4,0,0,7,11,0,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1753,"        splitReciprocal(x, a);",8,2,0,1,2,0,6,0,0,17,22,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1754,        x[0] -= 2.0;,0,0,1,1,2,0,0,0,0,3,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1755,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1756,"        splitMult(x, a, y);",0,0,0,1,2,0,0,0,0,3,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1757,        x[0] = y[0];,12,3,1,2,4,0,0,0,0,23,12,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1758,        x[1] = y[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1761,"        splitMult(x, x, x2);",6,1,1,1,2,0,8,0,0,20,20,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1767,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,0,0,0,3,6,0,0,0,0,9,48,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1768,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1770,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,51,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1771,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1772,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1773,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1775,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1776,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1779,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1780,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1781,        y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1783,        return y;,2,0,0,0,0,1,0,2,0,4,9,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1793,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1794,        final double ys[] = new double[2];,2,0,1,2,4,0,0,0,0,7,34,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1795,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1796,        final double as[] = new double[2];,4,0,0,2,4,2,0,0,0,6,34,2,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1797,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1798,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1800,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1801,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1802,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1804,            if ( (i & 1) == 0) {,2,0,0,2,5,1,2,0,0,5,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1805,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1808,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1809,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1811,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1812,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1813,                facts[1] = -facts[1];,8,2,1,2,4,0,0,0,0,17,21,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1816,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1817,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1820,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1821,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1822,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1825,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1836,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1837,        final double ys[] = new double[2];,0,0,0,2,4,0,6,0,0,6,34,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1838,        final double facts[] = new double[2];,8,3,0,2,4,1,0,0,0,12,37,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1839,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1840,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1841,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1843,        for (int i = 19; i >= 0; i--) {,8,2,0,1,3,0,0,0,0,12,31,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1844,"            splitMult(xs, ys, as);",2,1,0,1,2,0,8,0,0,11,22,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1845,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1847,            if ( (i & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,51,1848,                continue;,2,0,1,0,0,0,0,0,0,6,9,7,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,  double v2v2 = v2.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,  double coeffU = u1u2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,  Vector3D v2Su2 = v2.subtract(u2);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,0,0,0,1,2,0,0,0,0,3,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,1,0,3,6,0,0,0,0,3,46,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",2,0,0,1,3,3,0,0,0,5,65,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },6,1,0,0,1,0,0,0,0,7,1,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,0,0,0,0,2,0,0,0,0,2,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,    this.q2 = q2;,0,0,0,0,0,0,0,0,0,0,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },4,0,1,0,1,1,4,0,0,14,1,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",2,0,0,1,2,0,0,0,0,3,80,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,120,"    public Vector3D(double a, Vector3D u) {",16,3,0,1,3,0,0,0,0,20,39,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,121,        this.x = a * u.x;,12,1,0,0,0,1,6,0,0,21,17,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,122,        this.y = a * u.y;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,123,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2375,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2376,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2377,        final double a1Low      = a1 - a1High;,12,3,1,0,0,1,0,0,0,21,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2378,        final double cb1        = SPLIT_FACTOR * b1;,4,0,0,0,0,0,0,2,0,6,44,7,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2379,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2380,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2383,        final double prod1High  = a1 * b1;,10,4,0,0,0,1,12,0,0,27,34,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2384,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2387,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,0,0,0,0,7,44,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2388,        final double a2High     = ca2 - (ca2 - a2);,12,3,0,1,2,1,10,0,0,27,43,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2389,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2390,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,2,2,0,12,44,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2391,        final double b2High     = cb2 - (cb2 - b2);,4,0,0,1,2,1,0,0,0,5,43,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2392,        final double b2Low      = b2 - b2High;,4,0,1,0,0,0,0,0,0,10,38,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2395,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2396,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2399,        final double s12High    = prod1High + prod2High;,4,0,0,0,0,0,0,0,0,5,48,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2400,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,2,1,0,3,6,0,4,0,0,7,86,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2405,        return s12High + (prod1Low + prod2Low + s12Low);,4,0,0,1,2,1,0,0,0,5,48,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,261,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,262,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,437,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,438,"        return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,67,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2448,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2449,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2450,        final double a1Low      = a1 - a1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2451,        final double cb1        = SPLIT_FACTOR * b1;,2,0,1,0,0,0,0,0,0,6,44,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2452,        final double b1High     = cb1 - (cb1 - b1);,8,1,0,1,2,4,0,0,0,13,43,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2453,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2456,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2457,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2460,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2461,        final double a2High     = ca2 - (ca2 - a2);,12,2,0,1,2,1,0,2,0,19,43,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2462,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2463,        final double cb2        = SPLIT_FACTOR * b2;,12,2,0,0,0,1,6,0,0,22,44,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2464,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2465,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2468,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2469,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2472,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2473,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2474,        final double a3Low      = a3 - a3High;,2,0,0,0,0,0,0,2,0,5,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2475,        final double cb3        = SPLIT_FACTOR * b3;,0,0,0,0,0,0,0,0,0,0,44,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2476,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2477,        final double b3Low      = b3 - b3High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2480,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2481,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,22,8,0,3,6,1,0,0,0,32,110,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2484,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2485,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2486,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2489,        final double s123High   = s12High + prod3High;,8,1,1,0,0,1,0,0,0,13,46,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2490,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,0,0,8,47,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2491,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,2495,        return s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,12,2,0,1,2,1,0,0,0,14,70,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,428,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,429,"        return MathUtils.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,62,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,181,        return x;,2,0,0,0,0,1,0,0,0,2,9,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,189,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,197,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,52,85,    private static final long[] FACTORIALS = new long[] {,0,0,0,2,5,0,0,0,0,7,53,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,4,0,1,2,4,3,0,0,0,11,65,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,98,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,101,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,1,61,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,110,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,130,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,143,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,153,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,156,    private static final double SINE_TABLE_B[] = new double[14];,8,1,0,2,4,6,6,0,0,21,60,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,159,    private static final double COSINE_TABLE_A[] = new double[14];,2,1,0,2,4,0,2,0,0,5,62,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,162,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,165,    private static final double TANGENT_TABLE_A[] = new double[14];,10,0,0,2,4,3,0,2,0,15,63,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,168,    private static final double TANGENT_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,171,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,192,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,233,        FACT[0] = 1.0;,2,0,1,1,2,0,4,0,0,10,14,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,234,        for (i = 1; i < FACT.length; i++) {,12,3,0,1,3,1,6,0,0,23,35,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,235,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,238,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,239,        double recip[] = new double[2];,4,2,1,2,4,0,0,0,0,15,31,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,242,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,243,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,4,1,0,2,4,0,0,0,0,5,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,247,            if (i != 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,249,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,250,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,251,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,1,2,4,0,0,0,0,8,34,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,257,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,2,4,0,0,0,0,7,29,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,263,        for (i = 0; i < LN_MANT.length; i++) {,10,1,0,1,3,0,0,0,0,13,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,4,0,0,10,79,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,265,            LN_MANT[i] = slowLog(d);,2,2,1,2,4,0,4,0,0,20,24,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,269,        buildSinCosTables();,0,0,0,1,2,0,10,0,0,10,20,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,270,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,302,        return Math.sqrt(a);,14,2,0,1,2,1,6,0,0,24,20,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1012,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1013,        final double ys[] = new double[2];,6,0,0,2,4,1,0,0,0,8,34,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1014,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1015,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1016,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1017,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1019,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1020,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1021,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1022,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1024,"            split(FACT[i], as);",6,7,1,2,4,0,4,0,0,21,19,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1025,"            splitReciprocal(as, facts);",2,2,1,1,2,0,0,0,0,13,27,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1027,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1028,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1029,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1032,        if (result != null) {,10,2,0,1,3,1,0,0,0,14,21,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1033,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1034,            result[1] = ys[1];,2,0,1,2,4,0,2,2,0,11,18,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1037,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1046,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,6,0,0,6,30,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1047,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1048,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1049,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1050,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1055,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1062,        final double c = a[0] + a[1];,4,2,1,2,4,1,8,0,0,19,29,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1063,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1065,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1066,            double z = c * HEX_40000000;,2,0,0,0,0,3,0,0,0,5,28,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1067,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1068,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1069,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1070,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1071,            a[0] = (c + z - c) * HEX_40000000;,0,0,0,2,4,0,0,0,0,6,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1072,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1074,    },4,2,0,0,1,0,4,0,0,11,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1082,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1086,        resplit(ans);,6,2,0,1,2,0,4,0,0,13,13,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1087,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1095,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1096,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1098,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1099,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1120,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1121,        final double a = 1.0 - b;,6,1,0,0,0,1,0,2,0,10,25,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1123,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1128,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,7,1,9,18,0,0,0,0,26,60,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,0,0,4,9,0,0,0,0,13,63,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1132,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1136,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1138,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0,0,0,4,8,0,0,0,0,12,58,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1143,            err = err * (result[0] + result[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1145,            result[1] += err;,0,0,0,1,2,0,0,0,0,3,17,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1155,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1156,        final double ys[] = new double[2];,2,0,0,2,4,0,6,0,0,8,34,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1157,        final double zs[] = new double[2];,8,1,0,2,4,1,0,0,0,10,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1160,"        split(a[0], xs);",0,0,1,2,4,0,4,0,0,11,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1161,"        split(b[0], ys);",2,0,1,2,4,0,4,2,0,10,16,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1162,"        splitMult(xs, ys, zs);",4,1,0,1,2,0,8,0,0,13,22,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1164,        result[0] = zs[0];,0,0,1,2,4,0,0,0,0,5,18,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1165,        result[1] = zs[1];,10,2,1,2,4,0,0,0,0,17,18,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1168,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1169,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1171,        double tmp = result[0] + zs[0];,6,1,1,2,4,1,0,4,0,16,31,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1173,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1174,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1176,        result[0] = tmp;,6,2,1,1,2,0,0,0,0,13,16,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1179,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1180,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1181,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1183,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1185,        result[0] = tmp;,2,0,1,1,2,0,6,0,0,11,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1186,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,2,1,5,10,0,0,0,0,15,50,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1188,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1191,"        split(a[1], xs);",2,0,1,2,4,1,4,0,0,9,16,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1192,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1193,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1195,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1197,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1198,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1200,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1210,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1211,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1212,        final double ys[] = new double[2];,4,0,0,2,4,0,0,0,0,5,34,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1221,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1222,        xs[1] = 1.4456468917292502E-16;,0,0,0,1,2,0,0,0,0,3,31,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1224,"        split(1.0, ys);",0,0,0,1,2,0,4,0,0,4,15,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1226,        while (p > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1227,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1228,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1229,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1232,"            quadMult(xs, xs, as);",0,0,0,1,2,0,8,0,0,8,21,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1233,            xs[0] = as[0]; xs[1] = as[1];,8,0,1,4,8,0,0,0,0,18,29,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1235,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1238,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1239,            result[0] = ys[0];,2,0,0,2,4,3,0,4,0,9,18,2,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1240,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1242,            resplit(result);,0,0,0,1,2,0,4,0,0,4,16,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1245,        return ys[0] + ys[1];,0,0,0,2,4,1,2,0,0,2,21,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1743,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1744,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1745,        double y[] = new double[2];,4,0,0,2,4,3,0,0,0,7,27,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1746,        double a[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1748,"        split(xi, x);",6,0,0,1,2,0,6,2,0,14,13,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1751,        x[0] += 1.0;,0,0,1,1,2,0,0,0,0,3,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1752,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1753,"        splitReciprocal(x, a);",0,0,0,1,2,0,6,0,0,6,22,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1754,        x[0] -= 2.0;,0,0,1,1,2,0,4,0,0,7,12,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1755,        resplit(x);,0,0,0,1,2,0,0,0,0,3,11,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1756,"        splitMult(x, a, y);",0,0,0,1,2,0,0,0,0,3,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1757,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1758,        x[1] = y[1];,0,0,1,2,4,0,0,0,0,5,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1761,"        splitMult(x, x, x2);",6,1,1,1,2,0,14,0,0,24,20,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1767,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,0,0,0,3,6,0,0,0,0,9,48,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1768,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,0,0,0,3,6,0,0,0,0,9,48,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1770,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,51,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1771,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1772,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1773,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,0,2,4,0,0,0,0,6,33,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1775,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1776,            y[1] = a[1];,4,1,1,2,4,0,6,0,0,17,12,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1779,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1780,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1781,        y[1] = a[1];,2,1,1,2,4,0,0,0,0,8,12,8,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1783,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1793,        final double xs[] = new double[2];,6,0,0,2,4,0,0,0,0,7,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1794,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1795,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1796,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,52,1797,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,152,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,0,0,0,3,28,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",0,0,0,1,3,1,0,0,0,5,42,4,0.05263,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,2,0,0,0,0,1,4,0,0,6,13,3,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },10,0,0,0,1,1,8,0,0,19,1,3,0.02381,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2331,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.02326,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,    private static final long[] FACTORIALS = new long[] {,6,0,0,2,5,0,0,0,0,6,53,6,0.01587,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,997,"        return new Complex(realPart, imaginaryPart);",0,0,0,1,2,1,0,0,0,4,44,4,0.01449,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,308,        return real;,2,0,0,0,0,1,0,0,0,2,12,4,0.0098,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,299,        return imaginary;,2,0,0,0,0,1,0,0,0,2,17,4,0.00971,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,90,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,91,        this.real = real;,4,0,0,0,0,0,0,0,0,5,17,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,92,        this.imaginary = imaginary;,4,0,0,0,0,0,0,0,0,5,27,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,94,        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);,0,0,0,2,4,0,0,0,0,6,54,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,95,        isInfinite = !isNaN &&,0,0,0,0,0,0,0,0,0,0,22,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,97,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,52,"    public static final Complex I = new Complex(0.0, 1.0);",0,0,0,1,2,0,0,0,0,3,54,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,56,"    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,70,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,60,"    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,98,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,63,"    public static final Complex ONE = new Complex(1.0, 0.0);",6,1,0,1,2,0,0,0,0,7,56,4,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,66,"    public static final Complex ZERO = new Complex(0.0, 0.0);",2,0,0,1,2,3,0,4,0,9,57,2,0.00606,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,110,        if (isNaN) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,111,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,114,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,115,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,118,        if (FastMath.abs(real) < FastMath.abs(imaginary)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,119,            if (imaginary == 0.0) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,120,                return FastMath.abs(real);,2,1,0,1,2,1,4,0,0,7,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,122,            double q = real / imaginary;,6,1,0,0,0,0,0,0,0,7,28,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,123,            return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);,4,1,0,2,4,1,0,0,0,5,58,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,125,            if (real == 0.0) {,2,1,0,1,3,0,0,0,0,3,18,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,126,                return FastMath.abs(imaginary);,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,128,            double q = imaginary / real;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,129,            return FastMath.abs(real) * FastMath.sqrt(1 + q * q);,8,2,0,2,4,1,4,0,0,15,53,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,172,        if (isNaN) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,173,            return NaN;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,175,"        return createComplex(real, -imaginary);",0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,215,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,216,        if (isNaN || rhs.isNaN) {,6,1,0,1,3,0,0,0,0,7,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,217,            return NaN;,6,1,0,0,0,1,0,0,0,8,11,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,220,        double c = rhs.getReal();,8,2,0,1,2,0,6,0,0,18,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,221,        double d = rhs.getImaginary();,12,0,0,1,2,0,10,2,0,26,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,222,        if (c == 0.0 && d == 0.0) {,2,0,0,1,3,0,0,0,0,2,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,223,            return NaN;,26,0,0,0,0,1,12,0,0,43,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,226,        if (rhs.isInfinite() && !isInfinite()) {,0,1,0,3,7,0,6,0,0,8,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,227,            return ZERO;,4,1,0,0,0,1,0,0,0,5,12,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,230,        if (FastMath.abs(c) < FastMath.abs(d)) {,0,0,0,3,7,0,0,0,0,10,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,231,            double q = c / d;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,232,            double denominator = c * q + d;,2,0,0,0,0,3,0,0,0,5,31,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,233,"            return createComplex((real * q + imaginary) / denominator,",12,0,0,1,3,2,6,4,0,25,58,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,236,            double q = d / c;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,237,            double denominator = d * q + c;,8,2,0,0,0,0,0,0,0,10,31,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,238,"            return createComplex((imaginary * q + real) / denominator,",2,1,0,1,3,1,0,0,0,3,58,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,263,        if (this == other) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,264,            return true;,6,2,0,0,0,1,0,0,0,10,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,266,        if (other instanceof Complex){,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,267,            Complex rhs = (Complex)other;,0,1,0,1,2,0,6,0,0,8,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,268,            if (rhs.isNaN) {,4,0,0,1,3,0,0,0,0,4,16,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,269,                return isNaN;,4,0,0,0,0,1,4,0,0,9,13,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,271,                return (real == rhs.real) && (imaginary == rhs.imaginary);,2,1,0,2,4,1,0,0,0,3,58,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,274,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,286,        if (isNaN) {,6,0,0,1,3,0,8,0,0,16,12,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,287,            return 7;,2,0,0,0,0,2,8,0,0,11,9,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,289,        return 37 * (17 * MathUtils.hash(imaginary) +,12,5,0,1,3,1,6,0,0,24,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,332,        return isInfinite;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,364,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,365,        if (isNaN || rhs.isNaN) {,4,0,0,1,3,1,0,4,0,9,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,366,            return NaN;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,368,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,0,0,0,2,5,0,0,0,0,7,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,371,            return INF;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,373,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",0,0,0,0,1,1,0,0,0,2,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,404,        if (isNaN || Double.isNaN(rhs)) {,4,2,0,2,5,0,6,0,0,12,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,405,            return NaN;,8,0,0,0,0,1,0,0,0,8,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,407,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,2,0,0,2,5,1,12,2,0,17,62,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,410,            return INF;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,412,"        return createComplex(real * rhs, imaginary * rhs);",2,0,0,1,2,1,0,0,0,3,50,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,424,        if (isNaN) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,425,            return NaN;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,428,"        return createComplex(-real, -imaginary);",0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,53,451,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,50,9,1,1,2,0,0,2,0,66,18,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,0,0,0,0,0,0,0,0,0,0,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,10,1,0,0,0,0,0,0,0,12,11,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,        return nans == INFINITE;,0,0,0,0,0,1,0,0,0,1,24,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,6,0,0,0,0,1,0,0,0,6,19,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,        Dfp y = this;,0,0,0,0,0,0,0,0,0,0,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,        if (lessThan(getZero())) {,0,0,0,3,7,0,0,0,0,10,26,4,0.05263,1,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,2,0,0,3,6,0,0,0,0,2,39,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,6,2,0,1,3,0,4,0,0,13,19,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",0,0,0,2,4,0,0,0,0,6,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2332,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2336,        exponent--;,0,0,0,0,0,0,0,0,0,0,11,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",0,0,0,3,6,0,0,0,0,9,46,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2341,        if (exponent > -1023) {,0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,14,4,0,1,3,0,6,0,0,25,23,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,0,1,0,1,3,0,8,0,0,9,22,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2355,        String str = y.toString();,0,0,0,1,2,0,0,0,0,3,26,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);",8,1,1,2,4,1,8,0,0,21,39,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,6,0,0,1,2,0,0,0,0,7,36,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2359,        if (mantissa == 4503599627370496L) {,0,0,0,1,3,0,0,0,0,4,36,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,        if (exponent <= -1023) {,2,0,0,1,3,0,0,0,0,3,24,8,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2370,        while (exponent < -1023) {,2,1,0,1,3,0,0,0,0,4,26,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2375,        long bits = mantissa | ((exponent + 1023L) << 52);,6,3,0,2,4,0,0,0,0,9,50,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2376,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2378,        if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2382,        return x;,2,0,0,0,0,2,0,0,0,3,9,2,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,661,        return field.getTwo();,0,0,0,1,2,1,6,0,0,6,22,5,0.05,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,414,        return two;,2,1,0,0,0,1,4,0,0,7,11,7,0.05,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1096,        if (mant[mant.length-1] > 1000) {,4,2,1,2,5,0,0,0,0,8,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1099,        if (mant[mant.length-1] > 100) {,10,3,1,2,5,0,0,0,0,15,32,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1102,        if (mant[mant.length-1] > 10) {,0,0,0,2,5,0,0,0,0,7,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,539,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",22,2,1,1,3,5,2,2,0,38,71,2,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,540,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,541,        this.mant    = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,47,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,542,        this.sign    = sign;,0,0,0,0,0,0,0,0,0,0,20,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,543,        this.exp     = 0;,2,0,0,0,0,0,4,0,0,7,17,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,544,        this.nans    = nans;,0,0,0,0,0,0,0,0,0,0,20,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,545,    },4,0,0,0,1,0,0,0,0,5,1,6,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,918,        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);,6,0,0,1,2,1,2,0,0,8,52,5,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2153,                    def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2154,                    def.nans = QNAN;,0,0,0,0,0,0,0,0,0,0,16,4,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,393,"        return new Dfp(this, sign, nans);",14,2,0,1,2,2,2,2,0,22,33,3,0.04167,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,383,"        return new Dfp(this, s);",2,0,0,1,2,1,0,2,0,4,24,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,959,        boolean changed = false;,0,0,0,0,0,0,0,0,0,0,24,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,961,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,965,        if (nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,969,        if (mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,976,        if (exp < 0) {,2,0,1,1,3,0,0,0,0,6,14,9,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,987,        if (exp >= mant.length) {,0,0,0,1,3,0,0,0,0,4,25,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,994,        Dfp result = newInstance(this);,8,3,0,1,2,0,2,0,0,13,31,7,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,995,        for (int i = 0; i < mant.length-result.exp; i++) {,22,3,0,1,3,0,0,0,0,27,50,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,996,            changed |= result.mant[i] != 0;,8,1,1,1,2,0,0,0,0,12,31,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,997,            result.mant[i] = 0;,10,1,1,1,2,0,0,0,0,15,19,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1000,        if (changed) {,0,0,0,1,3,0,0,0,0,4,14,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1634,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,6,0,0,1,2,0,4,0,0,12,47,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1635,            result = newInstance(getZero());,0,0,0,2,4,0,8,0,0,8,32,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1636,            result.sign = (byte) (sign * divisor.sign);,0,0,0,2,4,0,0,0,0,6,43,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1637,            result.nans = INFINITE;,10,0,0,0,0,0,0,0,0,12,23,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1638,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",6,0,0,1,2,0,8,0,0,15,70,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1639,            return result;,6,2,0,0,0,1,0,0,0,8,14,7,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2144,                if (nans == FINITE && mant[mant.length-1] != 0) {,0,0,0,2,5,0,0,0,0,7,49,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2146,                    def = newInstance(getZero());,4,0,0,2,4,0,0,0,0,5,29,10,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2147,                    def.sign = (byte)(sign*oper.sign);,0,0,0,2,4,0,0,0,0,6,34,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2148,                    def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2151,                if (nans == FINITE && mant[mant.length-1] == 0) {,2,0,0,2,5,0,0,0,0,2,49,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2157,                if (nans == INFINITE || nans == QNAN) {,0,0,0,1,3,0,0,2,0,3,39,9,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2162,                if (nans == INFINITE || nans == SNAN) {,0,0,0,1,3,0,0,0,0,4,39,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,295,        ieeeFlags = 0;,4,3,0,0,0,0,0,0,0,8,14,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,296,    },14,6,1,0,1,3,0,0,0,30,1,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,654,        return field.getOne();,4,0,0,1,2,1,8,0,0,13,22,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,54,407,        return one;,0,0,0,0,0,1,0,0,0,1,11,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,399,            sign = -1;,16,2,0,0,0,1,0,4,0,23,10,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,423,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,485,            decimalPos = q-offset;,0,0,0,0,0,0,0,0,0,0,22,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1001,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,202,"        this(field, (long) x);",0,0,0,2,4,0,0,0,0,6,22,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,209,"    protected Dfp(final DfpField field, long x) {",6,0,0,1,3,2,0,2,0,10,45,2,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,214,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,216,        boolean isLongMin = false;,8,2,0,0,0,1,0,0,0,11,26,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,225,        if (x < 0) {,6,5,0,1,3,0,0,0,0,11,12,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,226,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,229,            sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,232,        exp = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,233,        while (x != 0) {,4,1,0,1,3,0,0,0,0,6,16,0,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",12,2,0,1,2,0,10,0,0,24,76,7,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,235,            mant[mant.length - 1] = (int) (x % RADIX);,8,2,1,3,6,0,0,0,0,13,42,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,236,            x /= RADIX;,4,0,0,0,0,0,0,0,0,6,11,1,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,237,            exp++;,2,0,0,0,0,0,0,0,0,3,6,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,240,        if (isLongMin) {,2,0,0,1,3,0,0,0,0,2,16,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,319,    public Dfp(final Dfp d) {,4,0,0,1,3,2,0,2,0,8,25,2,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,320,        mant  = d.mant.clone();,6,0,0,1,2,0,2,0,0,9,23,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,321,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,322,        exp   = d.exp;,8,0,0,0,0,3,0,0,0,12,14,1,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,323,        nans  = d.nans;,0,0,0,0,0,0,0,0,0,0,15,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,324,        field = d.field;,0,0,0,0,0,0,0,0,0,0,16,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,325,    },4,0,0,0,1,3,0,0,0,7,1,1,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,331,"    protected Dfp(final DfpField field, final String s) {",0,0,0,1,3,0,0,0,0,4,53,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,334,        mant = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,39,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,335,        sign = 1;,2,0,0,0,0,0,0,0,0,3,9,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,336,        exp = 0;,4,0,0,0,0,0,0,0,0,5,8,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,337,        nans = FINITE;,6,0,0,0,0,0,0,0,0,7,14,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,338,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,340,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,341,        final int rsize = 4;   // size of radix in decimal digits,0,0,0,0,0,0,0,0,0,0,57,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,342,        final int offset = 4;  // Starting offset into Striped,0,0,0,0,0,0,0,0,0,0,54,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,343,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0,0,0,3,6,0,0,0,0,9,71,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,346,        if (s.equals(POS_INFINITY_STRING)) {,2,0,0,2,5,1,6,0,0,9,36,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,352,        if (s.equals(NEG_INFINITY_STRING)) {,6,1,0,2,5,1,0,0,0,8,36,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,358,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,365,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,4,0,0,5,23,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,366,        if (p == -1) { // try upper case?,2,1,0,1,3,0,0,0,0,4,33,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,367,"            p = s.indexOf(""E"");",0,0,0,1,2,0,0,0,0,3,19,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,371,        int sciexp = 0;,8,0,0,0,0,0,0,2,0,10,15,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,372,        if (p != -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,394,            fpdecimal = s;,0,0,0,0,0,0,0,0,0,0,14,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,398,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,403,        p = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,406,        int decimalPos = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,408,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,3,7,0,12,0,0,17,63,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,409,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,412,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,6,0,0,7,49,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,413,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,416,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,417,                decimalFound = true;,2,0,0,0,0,0,0,0,0,4,20,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,420,            p++;,10,1,0,0,0,2,0,4,0,18,4,1,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,422,            if (p == fpdecimal.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,428,        int q = offset;,2,0,0,0,0,0,0,2,0,5,15,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,429,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,430,        striped[1] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,431,        striped[2] = '0';,0,0,1,1,2,0,0,2,0,7,17,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,432,        striped[3] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,433,        int significantDigits=0;,4,0,0,0,0,3,0,0,0,7,24,1,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,435,            if (p == (fpdecimal.length())) {,8,3,0,3,7,0,4,0,0,16,32,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,436,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,440,            if (q == mant.length*rsize+offset+1) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,441,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,444,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,445,                decimalFound = true;,2,0,0,0,0,0,0,0,0,4,20,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,446,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,447,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,448,                continue;,0,0,1,0,0,0,0,0,0,9,9,10,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,451,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,456,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,457,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,458,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,459,            significantDigits++;,0,0,0,0,0,0,0,0,0,0,20,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,464,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,466,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,467,                if (q == offset) {,14,8,1,1,3,0,0,0,0,40,18,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,470,                if (striped[q] == '0') {,0,1,1,2,5,0,0,0,0,6,24,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,471,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,479,        if (decimalFound && significantDigits == 0) {,0,0,1,1,3,0,14,0,0,18,45,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,484,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,489,        q = offset;  // set q to point to first sig digit,4,0,0,0,0,0,0,0,0,5,49,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,490,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,492,        int trailingZeros = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,493,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,494,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,495,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,502,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,4,1,1,2,4,0,0,0,0,10,62,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,503,        q -= i;,0,0,0,0,0,0,0,0,0,0,7,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,504,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,507,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,508,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,509,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,515,        for (i = mant.length - 1; i >= 0; i--) {,14,4,1,1,3,0,0,0,0,25,40,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,516,            mant[i] = (striped[q]   - '0') * 1000 +,0,5,1,3,6,0,0,0,0,15,39,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,520,            q += 4;,0,0,0,0,0,0,0,0,0,0,7,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,524,        exp = (decimalPos+sciexp) / rsize;,0,0,0,1,2,0,0,0,0,3,34,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,526,        if (q < striped.length) {,8,2,1,1,3,0,0,0,0,15,25,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,528,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,531,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,595,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,602,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,633,        return field;,0,0,0,0,0,1,0,0,0,1,13,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,640,        return field.getRadixDigits();,0,0,0,1,2,1,4,0,0,4,30,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,647,        return field.getZero();,2,0,0,1,2,1,4,0,0,6,23,1,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,667,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,668,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,670,        mant[0] = 0;,0,0,0,1,2,0,0,0,0,3,12,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,671,        exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,672,    },2,1,0,0,1,0,0,0,0,3,1,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,679,        for (int i = 0; i < mant.length - 1; i++) {,14,3,0,1,3,0,0,0,0,18,43,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,680,            mant[i] = mant[i+1];,0,0,0,2,4,0,0,0,0,6,20,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,682,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,683,        exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,684,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,695,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,696,        boolean inexact = false;,12,1,1,0,0,0,6,0,0,30,24,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,698,        int diff = exp - e;,6,1,1,0,0,0,0,0,0,14,19,1,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,700,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,701,        if (adiff < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,702,            adiff = -adiff;,6,0,0,0,0,1,0,0,0,9,15,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,705,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,706,            return 0;,2,0,0,0,0,1,0,0,0,2,9,2,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,709,        if (adiff > (mant.length + 1)) {,6,2,0,2,5,0,0,0,0,8,32,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,711,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,712,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,714,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,0,6,4,0,12,46,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,715,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,717,            return 0;,4,3,0,0,0,1,0,0,0,7,9,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,720,        for (int i = 0; i < adiff; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,721,            if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,726,                if (lostdigit != 0) {,12,2,0,1,3,0,0,0,0,15,21,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,727,                    inexact = true;,0,0,0,0,0,0,0,0,0,0,15,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,730,                lostdigit = mant[0];,2,0,1,1,2,0,0,0,0,5,20,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,732,                shiftRight();,8,2,0,1,2,0,0,0,0,11,13,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,738,        if (inexact) {,2,0,1,1,3,0,0,0,0,5,14,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,739,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,0,0,1,2,0,4,0,0,11,46,0,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,740,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,743,        return lostdigit;,0,0,0,0,0,1,0,0,0,1,17,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,754,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,763,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,769,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,779,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,10,2,0,3,7,0,6,0,0,18,57,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,788,        if (isNaN() || x.isNaN()) {,8,3,0,3,7,0,6,0,0,18,27,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,794,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,808,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,818,        if (other instanceof Dfp) {,0,0,0,1,3,0,0,0,0,4,27,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,819,            final Dfp x = (Dfp) other;,6,0,0,1,2,2,0,4,0,12,26,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,820,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,824,"            return compare(this, x) == 0;",0,0,0,1,2,1,0,0,0,4,29,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,845,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,849,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,860,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,22,7,0,2,5,0,0,0,0,29,71,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,862,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,865,        if (a.sign != b.sign) {,12,1,0,1,3,0,0,0,0,14,23,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,874,        if (a.nans == INFINITE && b.nans == FINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,878,        if (a.nans == FINITE && b.nans == INFINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,882,        if (a.nans == INFINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,887,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,20,5,0,3,7,0,0,0,0,25,67,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,888,            if (a.exp < b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,889,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,892,            if (a.exp > b.exp) {,2,0,0,1,3,0,0,0,0,2,20,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,893,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,898,        for (int i = a.mant.length - 1; i >= 0; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,899,            if (a.mant[i] > b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,900,                return a.sign;,6,0,0,0,0,1,0,0,0,7,14,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,903,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,904,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,908,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1145,        extra = RADIX-extra;,8,1,0,0,0,0,0,0,0,11,20,0,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1146,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1147,            mant[i] = RADIX-mant[i]-1;,2,1,1,2,4,0,0,0,0,12,26,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1150,        int rh = extra / RADIX;,2,0,0,0,0,0,0,0,0,3,23,2,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1151,        extra = extra - rh * RADIX;,0,0,0,0,0,0,0,0,0,0,27,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1152,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1153,            final int r = mant[i] + rh;,4,1,1,1,2,1,0,0,0,10,27,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1154,            rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1155,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1158,        return extra;,6,2,1,0,0,1,0,0,0,14,13,0,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1168,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1176,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1207,        Dfp a = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1208,        Dfp b = newInstance(x);,8,2,0,1,2,0,0,0,0,10,23,7,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1211,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1214,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1215,        final byte bsign = b.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1217,        a.sign = 1;,6,0,0,0,0,0,0,0,0,6,11,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1218,        b.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1221,        byte rsign = bsign;,0,0,0,0,0,0,0,0,0,0,19,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1222,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1223,            rsign = asign;,4,0,0,0,0,0,0,0,0,5,14,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1229,        if (b.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1230,            b.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,14,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1233,        if (a.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1238,        int aextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1239,        int bextradigit = 0;,8,0,0,0,0,0,0,0,0,9,20,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1240,        if (a.exp < b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1241,            aextradigit = a.align(b.exp);,14,1,0,1,2,0,4,2,0,22,29,5,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1243,            bextradigit = b.align(a.exp);,0,0,0,1,2,0,0,0,0,3,29,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1247,        if (asign != bsign) {,8,2,0,1,3,0,0,0,0,10,21,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1248,            if (asign == rsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1249,                bextradigit = b.complement(bextradigit);,0,0,0,1,2,0,0,0,0,3,40,4,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1251,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1256,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,2,0,0,4,33,1,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1257,        for (int i = 0; i < mant.length; i++) {,16,2,0,1,3,0,0,0,0,19,39,3,0.01613,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",0,0,0,1,2,1,0,0,0,4,101,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,0,0,1,0,0,1,0,0,0,5,9,10,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,    return z;,0,0,0,0,0,1,0,0,0,1,9,4,0.02564,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,0,0,0,0,0,0,0,0,0,0,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",4,0,1,1,2,3,0,4,0,16,60,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",6,1,0,1,2,3,6,4,0,21,62,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,1,1,1,2,0,0,0,0,11,62,8,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,  public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,  private static final Vector3DFormat DEFAULT_FORMAT =,0,0,0,0,0,0,0,0,0,0,52,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,159,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.01266,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,56,        final NumberFormat nf = NumberFormat.getInstance(locale);,8,1,0,1,2,1,6,2,0,18,57,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,57,        nf.setMaximumFractionDigits(2);,12,2,0,1,2,0,18,2,0,34,31,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,58,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,80,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",10,1,0,1,2,0,6,0,0,17,64,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,103,"                          final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,104,        this.prefix      = prefix;,2,2,0,0,0,0,0,0,0,4,26,6,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,105,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,106,        this.separator   = separator;,10,3,0,0,0,0,12,2,0,28,29,3,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,107,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,108,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,109,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,110,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,168,        return new Vector3DFormat(CompositeFormat.getDefaultNumberFormat(locale));,4,1,0,2,4,1,6,0,0,11,74,16,0.01149,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,63,    public MathRuntimeException() {},4,0,0,2,4,1,0,2,0,7,32,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,47,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,53,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,0,0,0,3,6,0,0,0,0,9,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,71,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,77,        msgPatterns.add(pattern);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,78,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,83,"        context.put(key, value);",2,0,0,1,2,3,0,4,0,10,24,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,84,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,88,        return context.get(key);,6,1,0,1,2,1,0,0,0,8,24,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,93,        return context.keySet();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,103,"        return buildMessage(locale, "": "");",6,0,0,1,2,3,0,4,0,12,34,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,115,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,121,        return getMessage(Locale.US);,2,0,0,1,2,1,0,0,0,2,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,127,        return getMessage(Locale.getDefault());,2,0,0,2,4,1,0,0,0,3,39,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,139,        final StringBuilder sb = new StringBuilder();,6,1,0,1,2,1,0,4,0,12,45,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,140,        int count = 0;,6,1,0,0,0,0,0,0,0,9,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,141,        final int len = msgPatterns.size();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,142,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,143,            final Localizable pat = msgPatterns.get(i);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,145,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",0,0,0,1,3,0,0,0,0,4,75,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,147,            sb.append(fmt.format(args));,0,0,0,2,4,0,10,0,0,10,28,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,148,            if (++count < len) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,150,                sb.append(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,154,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,165,        serializeMessages(out);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,166,        serializeContext(out);,4,0,0,1,2,0,6,0,0,10,22,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,178,        deSerializeMessages(in);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,179,        deSerializeContext(in);,2,0,1,1,2,0,0,0,0,9,23,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,191,        final int len = msgPatterns.size();,2,1,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,192,        out.writeInt(len);,10,2,1,1,2,0,0,0,0,15,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,194,        for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,2,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,195,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,197,            out.writeObject(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,198,            final Object[] args = msgArguments.get(i);,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,199,            final int aLen = args.length;,2,0,0,0,0,0,0,0,0,3,29,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,201,            out.writeInt(aLen);,4,0,0,1,2,1,6,0,0,11,19,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,202,            for (int j = 0; j < aLen; j++) {,4,1,0,1,3,0,6,0,0,13,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,203,                if (args[j] instanceof Serializable) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,205,                    out.writeObject(args[j]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,208,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,225,        final int len = in.readInt();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,226,        msgPatterns = new ArrayList<Localizable>(len);,0,0,0,1,2,0,8,0,0,8,46,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,227,        msgArguments = new ArrayList<Object[]>(len);,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,229,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,231,            final Localizable pat = (Localizable) in.readObject();,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,232,            msgPatterns.add(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,234,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,235,            final Object[] args = new Object[aLen];,6,1,1,2,4,1,8,4,0,28,39,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,236,            for (int j = 0; j < aLen; j++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,238,                args[j] = in.readObject();,0,0,1,2,4,0,4,0,0,9,26,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,240,            msgArguments.add(args);,2,0,0,1,2,1,6,0,0,9,23,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,242,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,253,        final int len = context.keySet().size();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,254,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,255,        for (String key : context.keySet()) {,4,0,0,2,5,0,0,0,0,4,37,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,257,            out.writeObject(key);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,258,            final Object value = context.get(key);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,259,            if (value instanceof Serializable) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,261,                out.writeObject(value);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,264,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,0,0,0,6,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,266,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,280,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,281,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,282,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,284,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,286,            final Object value = in.readObject();,2,0,0,1,2,0,0,0,0,3,37,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,287,"            context.put(key, value);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,289,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,299,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",4,2,0,3,6,1,16,2,0,29,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathParseException,55,40,                              Class<?> type) {,0,0,0,0,2,0,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathParseException,55,41,"        addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",4,0,0,0,1,0,2,0,0,6,49,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathParseException,55,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathParseException,55,51,                              int position) {,2,0,0,0,2,0,0,0,0,2,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathParseException,55,52,"        addMessage(LocalizedFormats.CANNOT_PARSE,",4,0,0,0,1,0,2,0,0,6,41,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathParseException,55,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,38,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,50,                                   Object ... args) {,2,0,0,0,2,0,8,2,0,12,18,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,51,"        addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,36,    private CompositeFormat() {},2,0,0,2,4,1,0,0,0,3,28,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,45,        return getDefaultNumberFormat(Locale.getDefault());,2,1,1,2,4,1,6,0,0,14,51,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,70,"        parseNextCharacter(source, pos);",0,0,0,1,2,0,6,0,0,6,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,71,        pos.setIndex(pos.getIndex() - 1);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,72,    },20,9,1,0,1,0,2,0,0,49,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,83,         int index = pos.getIndex();,8,1,0,1,2,1,4,0,0,14,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,84,         final int n = source.length();,2,0,0,1,2,1,4,0,0,7,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,85,         char ret = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,87,         if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,90,                 c = source.charAt(index++);,4,0,0,1,2,0,4,2,0,11,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,91,             } while (Character.isWhitespace(c) && index < n);,4,2,0,2,5,0,6,0,0,12,49,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,92,             pos.setIndex(index);,0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,94,             if (index < n) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,95,                 ret = c;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,99,         return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,113,        Number ret = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,115,        StringBuilder sb = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,116,        sb.append('(');,0,0,0,1,3,0,4,0,0,5,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,117,        sb.append(value);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,118,        sb.append(')');,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,120,        final int n = sb.length();,2,2,1,1,2,0,0,0,0,13,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,121,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,122,        final int endIndex = startIndex + n;,6,1,0,0,0,1,0,0,0,8,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,123,        if (endIndex < source.length()) {,2,1,0,2,5,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,124,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0,1,0,4,9,0,14,0,0,15,75,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,125,                ret = Double.valueOf(value);,2,0,0,1,2,0,6,0,0,9,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,126,                pos.setIndex(endIndex);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,130,        return ret;,4,0,1,0,0,1,0,0,0,9,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,145,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,146,"        Number number = format.parse(source, pos);",2,0,0,1,2,0,8,2,0,12,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,147,        final int endIndex = pos.getIndex();,22,7,0,1,2,1,4,0,0,35,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,150,        if (startIndex == endIndex) {,8,1,1,1,3,0,0,0,0,12,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,152,            final double[] special = {,2,0,0,1,3,1,0,0,0,3,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,155,            for (int i = 0; i < special.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,156,"                number = parseNumber(source, special[i], pos);",2,0,1,2,4,0,6,0,0,13,46,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,157,                if (number != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,158,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,163,        return number;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,177,        final int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,178,        final int endIndex = startIndex + expected.length();,4,1,0,1,2,1,4,0,0,10,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,179,        if ((startIndex >= source.length()) ||,6,2,0,2,5,0,10,0,0,18,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,183,            pos.setIndex(startIndex);,0,0,0,1,2,0,14,0,0,14,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,184,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,6,0,0,6,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,185,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,189,        pos.setIndex(endIndex);,0,0,0,1,2,0,6,0,0,6,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,190,        return true;,2,0,0,0,0,1,0,0,0,4,12,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,213,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0,0,0,3,7,0,0,0,0,10,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,214,            toAppendTo.append('(');,0,0,0,1,3,0,4,0,0,5,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,215,            toAppendTo.append(value);,2,0,0,1,2,0,0,0,0,3,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,216,            toAppendTo.append(')');,0,0,0,1,3,0,4,0,0,5,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,218,"            format.format(value, toAppendTo, pos);",0,0,0,1,2,0,10,0,0,10,38,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,220,        return toAppendTo;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,251,    },4,1,0,0,1,0,12,0,0,19,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,2,0,0,0,4,66,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,73,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,76,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,85,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,105,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,118,    private static final double LN_HI_PREC_COEF[][] = {,6,5,0,2,5,0,0,0,0,11,51,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,128,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,131,    private static final double SINE_TABLE_B[] = new double[14];,4,1,1,2,4,3,0,0,0,12,60,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,134,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,137,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,143,    private static final double TANGENT_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,146,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,167,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,0,0,0,0,4,126,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,0,0,0,5,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,208,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,209,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,210,            FACT[i] = FACT[i-1] * i;,8,4,1,2,4,0,0,0,0,20,24,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,218,"            expint(i, tmp);",2,0,0,1,2,0,0,2,0,4,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,55,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,2,0,11,32,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,        Iterator() {,2,0,0,1,3,0,0,0,0,2,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,4,1,1,2,4,2,2,0,0,18,49,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,2,0,0,0,0,1,0,0,0,4,23,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,            counter[last] = -1;,2,0,0,1,2,0,12,0,0,15,19,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,            return counter[dim];,0,0,1,1,2,1,0,0,0,4,20,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,        return new Iterator();,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,        return dimension;,2,0,0,0,0,1,12,0,0,14,17,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,        if (index < 0 ||,8,5,1,0,1,0,6,0,0,23,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,8,1,0,1,2,1,0,0,0,10,23,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,2,0,0,0,1,1,0,4,0,7,67,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,        if (c.length != dimension) {,0,0,0,1,3,0,0,0,0,4,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,263,        int count = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,264,        for (int i = 0; i < dimension; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,265,            final int index = c[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,266,            if (index < 0 ||,0,0,0,0,1,0,0,0,0,1,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,            count += uniCounterOffset[i] * c[i];,20,2,0,2,4,0,0,0,0,24,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,public final class MathUtils {,8,0,0,0,1,7,0,4,0,19,30,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,89,    private static final long[] FACTORIALS = new long[] {,0,0,0,2,5,0,0,0,0,7,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);",2,0,0,1,2,1,0,0,0,2,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,    public MultidimensionalCounter(int ... size) {,16,5,0,1,3,1,0,0,0,24,46,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,        dimension = size.length;,6,0,0,0,0,0,0,0,0,7,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,167,        this.size = MathUtils.copyOf(size);,4,1,0,1,2,0,14,0,0,19,35,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,169,        uniCounterOffset = new int[dimension];,2,0,1,1,2,0,0,0,0,5,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,171,        last = dimension - 1;,0,0,0,0,0,0,0,0,0,0,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,172,        int tS = size[last];,14,0,1,1,2,0,0,2,0,21,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,173,        for (int i = 0; i < last; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,174,            int count = 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,175,            for (int j = i + 1; j < dimension; j++) {,4,3,0,1,3,0,10,0,0,17,41,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,176,                count *= size[j];,4,0,0,1,2,0,0,2,0,7,17,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,178,            uniCounterOffset[i] = count;,4,0,0,1,2,0,0,0,0,4,28,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,179,            tS *= size[i];,8,0,1,1,2,0,0,0,0,15,14,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,181,        uniCounterOffset[last] = 0;,2,0,1,1,2,0,0,0,0,8,27,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,183,        if (tS <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,187,        totalSize = tS;,4,0,1,0,0,0,0,0,0,12,15,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,188,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,10,1,0,2,4,0,0,0,0,12,66,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,73,    private static final double FACT[] = new double[20];,6,0,0,2,4,0,0,2,0,8,52,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,76,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,85,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,105,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,0,0,0,3,49,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,118,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,128,    private static final double SINE_TABLE_A[] = new double[14];,8,2,0,2,4,0,0,0,0,10,60,10,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,131,    private static final double SINE_TABLE_B[] = new double[14];,2,1,0,2,4,0,0,0,0,3,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,134,    private static final double COSINE_TABLE_A[] = new double[14];,6,1,0,2,4,1,0,0,0,8,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,137,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,140,    private static final double TANGENT_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,143,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,146,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,167,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,1,0,2,4,0,0,0,0,6,126,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,208,        FACT[0] = 1.0;,4,0,0,1,2,0,6,0,0,12,14,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,209,        for (i = 1; i < FACT.length; i++) {,2,0,1,1,3,0,0,0,0,6,35,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,210,            FACT[i] = FACT[i-1] * i;,2,0,0,2,4,3,0,4,0,9,24,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,213,        double tmp[] = new double[2];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,218,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,1,0,2,4,0,0,0,0,3,32,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,222,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,224,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,225,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,226,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,232,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,1,2,4,0,0,0,0,16,29,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,1,0,2,4,0,0,0,0,7,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,238,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,240,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,244,        buildSinCosTables();,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,245,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,987,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,988,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,989,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,990,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,991,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,992,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,994,        for (int i = 19; i >= 0; i--) {,10,1,0,1,3,0,0,0,0,13,31,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,995,"            splitMult(xs, ys, as);",2,0,0,1,2,0,0,0,0,3,22,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,996,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,997,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,999,"            split(FACT[i], as);",4,0,0,2,4,0,8,0,0,12,19,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1000,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1002,"            splitAdd(ys, facts, as);",2,1,0,1,2,0,8,0,0,11,24,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1003,            ys[0] = as[0];,8,1,0,2,4,1,0,0,0,10,14,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1004,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1008,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1009,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1012,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1021,        if (d < 8e298 && d > -8e298) {,6,9,1,1,3,0,0,0,0,24,30,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1022,            final double a = d * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1023,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1024,            split[1] = d - split[0];,2,0,0,2,4,0,0,0,0,3,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1025,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1030,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1037,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1038,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1040,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1041,            double z = c * HEX_40000000;,8,1,0,0,0,0,0,0,0,9,28,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1042,            a[0] = (c + z) - z;,2,0,0,2,4,3,0,4,0,9,19,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1043,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1044,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1045,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1047,            a[1] = c - a[0] + d;,6,2,1,2,4,0,10,0,0,24,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1049,    },4,1,1,0,1,3,0,0,0,17,1,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1057,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,24,49,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1061,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1062,    },4,0,0,0,1,0,2,0,0,6,1,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1070,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1071,        ans[1] = a[1] + b[1];,2,1,1,3,6,0,2,0,0,8,21,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1073,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1074,    },2,1,0,0,1,0,0,0,0,3,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1095,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1096,        final double a = 1.0 - b;,8,2,0,0,0,0,0,0,0,10,25,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1098,        if (in[0] == 0.0) {,2,1,1,2,5,0,0,0,0,6,19,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1103,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,0,0,4,9,0,0,0,0,13,63,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1107,            result[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1111,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1113,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0,0,0,4,8,0,0,0,0,12,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1118,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1120,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1130,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1131,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1132,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1135,"        split(a[0], xs);",12,1,1,2,4,0,4,0,0,29,16,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1136,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1137,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1139,        result[0] = zs[0];,0,0,1,2,4,0,0,0,0,5,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1140,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1143,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1144,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1146,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1149,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1151,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1154,"        split(a[1], xs);",0,0,1,2,4,0,10,0,0,13,16,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1155,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1156,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1158,        tmp = result[0] + zs[0];,4,1,1,2,4,1,0,0,0,11,24,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1160,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1161,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,20,50,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1163,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1166,"        split(a[1], xs);",2,0,0,2,4,3,0,0,0,5,16,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1167,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1168,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1170,        tmp = result[0] + zs[0];,2,1,1,2,4,0,4,0,0,12,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1172,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1173,        tmp = result[0] + zs[1];,2,0,0,2,4,0,0,0,0,3,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1175,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1185,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1186,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1187,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1196,        xs[0] = 2.718281828459045;,2,1,1,1,2,0,0,0,0,6,26,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1197,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1199,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1201,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1202,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1203,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1207,"            quadMult(xs, xs, as);",2,0,0,1,2,0,8,0,0,11,21,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1208,            xs[0] = as[0]; xs[1] = as[1];,2,1,0,4,8,0,0,0,0,3,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1213,        if (result != null) {,4,1,1,1,3,0,0,0,0,8,21,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1214,            result[0] = ys[0];,2,1,1,2,4,0,0,0,0,13,18,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1215,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1217,            resplit(result);,0,0,0,1,2,0,4,0,0,4,16,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1220,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1716,        double x[] = new double[2];,4,1,0,2,4,0,6,0,0,11,27,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1717,        double x2[] = new double[2];,2,0,0,2,4,0,6,0,0,8,28,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1718,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1719,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1721,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1724,        x[0] += 1.0;,0,0,1,1,2,0,0,0,0,4,12,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1725,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1726,"        splitReciprocal(x, a);",8,2,0,1,2,1,4,0,0,15,22,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1727,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1728,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1729,"        splitMult(x, a, y);",2,0,0,1,2,1,8,0,0,11,19,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1730,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1731,        x[1] = y[1];,2,0,1,2,4,3,0,0,0,10,12,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1734,"        splitMult(x, x, x2);",4,0,0,1,2,0,8,2,0,14,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,2,0,3,6,0,0,0,0,11,48,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,51,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1744,"            splitMult(y, x2, a);",4,0,0,1,2,0,8,0,0,13,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1745,            y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1746,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1748,            y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1749,            y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1752,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1753,        y[0] = a[0];,8,3,0,2,4,0,0,0,0,11,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1754,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1756,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1766,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1767,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1768,        final double facts[] = new double[2];,6,1,0,2,4,2,2,0,0,11,37,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1769,        final double as[] = new double[2];,8,2,0,2,4,1,0,0,0,13,34,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1770,"        split(x, xs);",2,0,0,1,2,0,6,0,0,9,13,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1771,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1773,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1774,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,2,0,13,29,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1777,            if ( (i & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1778,                continue;,0,0,0,0,0,0,0,2,0,2,9,10,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1781,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1782,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1784,            if ( (i & 2) != 0 ) {,10,3,0,2,5,0,0,0,0,14,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1785,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1786,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1789,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1790,            ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,0,0,0,0,7,29,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1793,        if (result != null) {,10,3,0,1,3,0,0,0,0,13,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1794,            result[0] = ys[0];,6,1,1,2,4,0,0,0,0,13,18,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1795,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1798,        return ys[0] + ys[1];,2,0,0,2,4,1,0,0,0,2,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1809,        final double xs[] = new double[2];,4,0,0,2,4,1,0,0,0,6,34,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1810,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1811,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1812,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1813,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1814,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,6,0,0,12,20,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1816,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1817,"            splitMult(xs, ys, as);",0,0,1,1,2,0,8,0,0,14,22,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1820,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1821,                continue;,2,0,0,0,0,0,0,0,0,3,9,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1824,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,56,1825,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",6,0,0,1,2,0,0,0,0,6,52,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,2,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,            int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,            for (int i = 0; i < pointSet.size(); i++) {,0,0,0,2,5,0,0,0,0,7,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,                final T p = pointSet.get(i);,0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",6,1,0,1,2,0,0,0,0,8,59,12,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,2,0,0,2,4,1,12,0,0,15,53,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,2,0,1,0,0,0,6,0,0,19,13,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,2,0,1,1,2,0,0,0,0,7,13,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,6,1,0,1,2,0,0,0,0,7,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,20,1,0,1,3,0,0,2,0,25,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,4,0,0,2,5,0,0,0,0,5,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,2,1,0,1,2,0,0,0,0,3,31,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,                    resultSet.add(new Cluster<T>(p));,0,0,0,2,4,0,0,0,0,6,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,191,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,194,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,44,public final class MathUtils {,0,0,0,0,1,0,0,0,0,1,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,89,    private static final long[] FACTORIALS = new long[] {,0,0,0,2,5,0,0,0,0,7,53,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1873,      double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,2,0,0,1,3,0,0,0,0,3,37,15,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,21,32,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,57,1878,      return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,73,    private static final double FACT[] = new double[20];,4,1,0,2,4,3,0,0,0,8,52,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,76,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,0,0,0,0,3,61,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,85,    private static final double LN_SPLIT_COEF[][] = {,2,0,1,2,5,0,0,0,0,7,49,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,105,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,118,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,128,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,134,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,2,0,7,62,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,137,    private static final double COSINE_TABLE_B[] = new double[14];,8,1,0,2,4,0,0,0,0,9,62,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,1,0,2,4,0,0,0,0,3,63,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,143,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,146,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,167,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",6,0,0,2,4,0,0,0,0,7,126,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,0,0,0,0,3,61,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,208,        FACT[0] = 1.0;,0,0,0,1,2,0,0,0,0,3,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,209,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,210,            FACT[i] = FACT[i-1] * i;,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,218,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,14,1,1,2,4,0,4,0,0,27,32,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,222,            if (i != 0) {,12,2,0,1,3,0,8,0,0,24,13,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,224,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,225,                EXP_INT_TABLE_A[750-i] = recip[0];,4,0,0,2,4,0,0,0,0,5,34,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,226,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,1,1,3,0,2,0,0,7,47,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,232,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,2,0,0,2,4,3,0,0,0,5,29,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,238,        for (i = 0; i < LN_MANT.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,0,0,4,8,0,0,0,0,3,79,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,240,            LN_MANT[i] = slowLog(d);,2,0,0,2,4,1,4,2,0,9,24,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,244,        buildSinCosTables();,4,0,0,1,2,2,0,2,0,8,20,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,245,    },8,1,0,0,1,0,0,0,0,11,1,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,277,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,987,        final double xs[] = new double[2];,20,2,0,2,4,1,16,0,0,40,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,988,        final double ys[] = new double[2];,8,0,0,2,4,0,6,0,0,16,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,989,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,990,        final double as[] = new double[2];,6,1,0,2,4,0,0,0,0,8,34,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,991,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,992,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,994,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,995,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,996,            ys[0] = as[0];,2,0,0,2,4,1,2,0,0,5,14,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,997,            ys[1] = as[1];,18,6,1,2,4,3,0,0,0,30,14,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,999,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1000,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1002,"            splitAdd(ys, facts, as);",6,0,0,1,2,1,0,0,0,7,24,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1003,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1004,            ys[1] = as[1];,2,0,0,2,4,0,0,0,0,3,14,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1008,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1009,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1012,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1021,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1022,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1023,            split[0] = (d + a) - a;,6,2,0,2,4,0,4,0,0,12,23,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1024,            split[1] = d - split[0];,4,1,1,2,4,0,0,0,0,11,24,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1025,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1030,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1037,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1038,        final double d = -(c - a[0] - a[1]);,10,3,1,3,6,1,0,0,0,20,36,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1040,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1041,            double z = c * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,28,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1042,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1043,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1044,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1045,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1046,            a[0] = (c + z - c) * HEX_40000000;,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1047,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1049,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1057,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,0,0,7,14,0,0,0,0,21,49,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1061,        resplit(ans);,2,0,0,1,2,3,0,0,0,5,13,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1062,    },6,1,0,0,1,0,0,0,0,8,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1070,        ans[0] = a[0] + b[0];,0,0,0,3,6,0,0,0,0,9,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1071,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1073,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1074,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1095,        final double b = 1.0/4194304.0;,2,0,0,0,0,0,0,0,0,2,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1096,        final double a = 1.0 - b;,0,0,0,0,0,0,0,0,0,0,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1098,        if (in[0] == 0.0) {,0,0,0,2,5,0,0,0,0,7,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1103,        result[0] = a / in[0];,10,3,1,2,4,1,12,0,0,31,22,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0,0,0,9,18,0,0,0,0,27,60,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,2,0,0,4,9,0,4,0,0,7,63,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1107,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1111,        resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1113,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,6,6,1,4,8,0,0,0,0,21,58,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1118,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1120,            result[1] += err;,0,0,0,1,2,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1130,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1131,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1132,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1135,"        split(a[0], xs);",0,1,0,2,4,0,16,0,0,17,16,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1136,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1137,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1139,        result[0] = zs[0];,6,4,1,2,4,0,0,0,0,15,18,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1140,        result[1] = zs[1];,8,1,1,2,4,1,4,0,0,20,18,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1143,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1144,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,12,0,0,12,22,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1146,        double tmp = result[0] + zs[0];,0,0,0,2,4,0,4,0,0,4,31,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1149,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1151,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1154,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1155,"        split(b[0], ys);",2,2,1,2,4,0,4,0,0,19,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1156,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1158,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1160,        result[0] = tmp;,4,1,1,1,2,0,0,0,0,8,16,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1161,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1163,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1166,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1167,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1168,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1170,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,1,0,5,10,0,0,0,0,8,50,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1172,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1173,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,0,0,5,10,2,0,0,0,7,50,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1175,        result[0] = tmp;,8,0,1,1,2,0,0,0,0,11,16,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1185,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1186,        final double as[] = new double[2];,10,1,0,2,4,0,0,0,0,12,34,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1187,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1196,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1197,        xs[1] = 1.4456468917292502E-16;,2,0,1,1,2,3,0,0,0,8,31,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1199,"        split(1.0, ys);",0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1201,        while (p > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1202,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1203,"                quadMult(ys, xs, as);",0,0,0,1,2,0,8,0,0,8,21,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1207,"            quadMult(xs, xs, as);",2,0,0,1,2,0,8,0,0,11,21,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1213,        if (result != null) {,8,1,0,1,3,1,0,4,0,14,21,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1214,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1215,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1217,            resplit(result);,6,1,0,1,2,1,4,0,0,12,16,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1220,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1716,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1717,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1718,        double y[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1719,        double a[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1721,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1724,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1725,        resplit(x);,0,0,1,1,2,0,0,0,0,5,11,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1726,"        splitReciprocal(x, a);",0,0,0,1,2,0,6,0,0,6,22,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1727,        x[0] -= 2.0;,0,0,0,1,2,0,8,0,0,9,12,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1728,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1729,"        splitMult(x, a, y);",6,1,0,1,2,0,8,0,0,16,19,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1730,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1731,        x[1] = y[1];,4,0,1,2,4,0,0,0,0,10,12,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1734,"        splitMult(x, x, x2);",0,0,0,1,2,0,8,0,0,8,20,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,1,1,3,6,0,0,0,0,18,48,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1744,"            splitMult(y, x2, a);",0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1745,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1746,            y[1] = a[1];,0,0,1,2,4,0,8,0,0,13,12,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,0,2,4,0,0,0,0,6,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1748,            y[0] = a[0];,6,3,1,2,4,1,0,0,0,19,12,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1749,            y[1] = a[1];,0,0,1,2,4,0,4,0,0,9,12,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1752,"        splitMult(y, x, a);",0,0,0,1,2,0,8,0,0,8,19,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1753,        y[0] = a[0];,10,2,0,2,4,0,0,0,0,13,12,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1754,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1756,        return y;,0,0,0,0,0,1,4,0,0,5,9,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1766,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1767,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1768,        final double facts[] = new double[2];,8,1,0,2,4,1,0,0,0,11,37,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1769,        final double as[] = new double[2];,2,0,0,2,4,0,0,0,0,4,34,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1770,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1771,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1773,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1774,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1777,            if ( (i & 1) == 0) {,2,2,1,2,5,0,0,0,0,15,20,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1778,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1781,"            split(FACT[i], as);",4,0,1,2,4,0,4,0,0,13,19,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1782,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1784,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1785,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1786,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1789,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1793,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1794,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1795,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1798,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1809,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1810,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1811,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1812,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1813,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1814,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1816,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,7,31,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1817,"            splitMult(xs, ys, as);",14,2,0,1,2,2,0,0,0,18,22,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1820,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1821,                continue;,0,0,0,0,0,0,6,0,0,6,9,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1824,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1825,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1827,            if ( (i & 2) != 0 ) {,0,0,0,2,5,0,0,0,0,7,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1828,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1829,                facts[1] = -facts[1];,2,1,1,2,4,0,0,0,0,7,21,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1832,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1836,        if (result != null) {,2,1,1,1,3,0,0,0,0,8,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1837,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1838,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1841,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1847,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1850,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1851,            double x = i / 8.0;,0,0,0,0,0,0,0,0,0,0,19,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1853,"            slowSin(x, result);",6,1,0,1,2,0,0,0,0,8,19,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1854,            SINE_TABLE_A[i] = result[0];,4,1,0,2,4,0,0,0,0,5,28,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1855,            SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1857,"            slowCos(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1858,            COSINE_TABLE_A[i] = result[0];,2,0,0,2,4,0,0,0,0,2,30,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1863,        for (int i = 7; i < 14; i++) {,22,11,1,1,3,0,0,0,0,42,30,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1865,            double ys[] = new double[2];,12,1,1,2,4,1,0,0,0,18,28,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1866,            double as[] = new double[2];,4,1,1,2,4,0,0,0,0,8,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,57,1867,            double bs[] = new double[2];,0,0,0,2,4,0,8,0,0,8,28,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,2,0,0,1,4,0,0,2,0,4,33,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,0,0,0,4,8,0,8,0,0,9,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,16,3,0,0,0,0,0,0,0,20,39,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,            for (final WeightedObservedPoint point : points) {,0,0,0,1,3,0,0,0,0,4,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());",0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());",0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);",0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);",0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,",0,0,0,0,1,0,0,0,0,1,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,14,1,0,0,0,0,0,0,0,17,15,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,20,4,0,0,0,0,6,2,0,33,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,46,"        this(null, wrong, lo, hi);",0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,    },8,0,0,0,1,0,4,2,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",6,0,0,0,1,0,0,0,0,6,53,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,12,1,1,0,0,0,8,0,0,28,13,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,    },0,0,0,0,1,0,8,0,0,8,1,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);",6,0,0,1,2,0,0,0,0,7,37,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,67,        this.general = general;,0,0,0,0,0,0,0,0,0,0,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,68,        this.arguments = ArgUtils.flatten(arguments);,0,0,0,1,2,0,0,0,0,3,45,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,    },18,2,0,0,1,6,2,0,0,30,1,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);",0,1,0,1,2,0,22,0,0,23,43,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,52,    },2,0,0,0,1,0,0,0,0,3,1,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,340,    private LocalizedFormats(final String sourceFormat) {,2,2,0,1,3,0,10,0,0,14,53,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,341,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,342,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",8,1,0,5,10,0,0,0,0,10,67,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,1,4,8,0,0,0,0,5,94,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0,0,1,1,2,0,0,0,0,5,41,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",6,0,0,1,2,0,0,0,0,8,60,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",10,1,0,1,2,0,0,0,0,12,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",6,0,0,3,6,0,6,0,0,13,93,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",4,0,0,2,4,0,6,0,0,11,108,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",8,5,0,1,2,0,0,0,0,13,100,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0,0,0,2,4,0,0,0,0,6,94,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",14,1,0,2,4,1,0,2,0,19,91,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,0,0,3,6,1,0,0,0,7,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,0,0,0,3,55,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",4,0,1,2,4,1,0,0,0,10,115,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,1,0,0,0,7,86,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",4,0,0,5,10,1,4,4,0,14,290,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",8,1,0,3,6,1,0,0,0,11,263,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",18,4,0,1,2,1,0,0,0,24,52,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,80,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,81,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,1,3,6,0,6,0,0,14,81,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,82,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,83,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",10,1,0,5,10,0,0,0,0,12,71,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,84,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,1,0,3,6,0,2,0,0,3,52,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,85,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,86,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0,0,0,2,4,0,0,0,0,6,119,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,87,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,88,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,6,0,0,12,78,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,89,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,90,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0,0,0,1,2,0,10,0,0,10,88,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,91,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0,0,0,1,2,0,0,0,0,3,71,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,92,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,93,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,94,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,1,0,4,8,3,0,0,0,8,78,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,95,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",8,0,0,3,6,0,0,4,0,13,81,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,96,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",6,0,0,1,2,0,0,0,0,6,53,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,97,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,1,2,4,0,2,0,0,11,58,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,98,"    EVALUATION(""evaluation""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,8,69,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,8,0,0,10,85,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",4,1,0,2,4,0,2,0,0,8,54,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,113,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",4,1,0,3,6,0,14,0,0,21,95,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,114,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,115,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,116,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,117,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,118,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",4,0,0,3,6,0,0,0,0,5,51,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,119,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,120,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0,0,0,1,2,0,0,0,0,3,59,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,121,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,122,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,123,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,124,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0,0,0,4,8,0,0,0,0,12,121,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,125,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,126,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,127,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,128,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,129,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",8,2,0,3,6,0,0,0,0,11,105,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,130,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",4,1,0,3,6,0,0,0,0,6,83,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,131,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",8,2,0,2,4,1,0,0,0,11,101,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,132,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,133,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0,0,0,4,8,0,0,0,0,12,112,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,134,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,135,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,136,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,137,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",10,2,1,4,8,0,0,0,0,18,141,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,138,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,139,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",4,0,0,1,2,0,0,0,0,5,41,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,140,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,3,0,0,0,5,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,141,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,142,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,143,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,144,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,145,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,146,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,147,"    EVALUATIONS(""evaluations""), /* keep */",4,0,0,1,2,0,0,0,0,6,38,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,148,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,149,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",0,0,0,3,6,0,0,0,0,9,73,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,150,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,151,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",0,0,0,4,8,0,0,0,0,12,132,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,152,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,153,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,154,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,155,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,156,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,157,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,158,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",4,0,0,3,6,0,0,0,0,6,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,159,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,160,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,161,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,162,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",0,0,0,3,6,0,0,0,0,9,43,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,163,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,164,"    START_POSITION(""start position ({0})""), /* keep */",6,0,0,3,6,1,0,0,0,8,50,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,165,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0,0,0,4,8,0,0,0,0,12,131,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,166,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,167,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,168,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,169,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,170,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,171,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,1,3,6,0,0,0,0,9,78,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,172,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,4,60,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,173,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,174,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,175,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,176,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,177,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,178,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",4,0,1,3,6,0,0,0,0,8,97,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,179,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,180,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",10,1,0,6,12,0,0,0,0,12,88,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,181,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,182,"    ALPHA(""alpha""), /* keep */",6,0,0,1,2,0,0,0,0,7,26,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,183,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,184,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,0,0,3,6,3,0,0,0,8,81,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,185,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,186,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",0,0,0,5,10,0,0,0,0,15,122,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,187,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,188,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,189,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",8,1,0,3,6,1,6,0,0,18,66,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,190,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,191,"    EXPONENT(""exponent ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,192,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,193,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,194,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,49,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,195,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,196,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,197,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,198,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,199,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,200,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,201,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,202,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,203,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0,0,0,3,6,0,0,0,0,9,76,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,204,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,205,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,206,"    SCALE(""scale ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,207,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,208,"    SHAPE(""shape ({0})""), /* keep */",4,0,0,3,6,1,8,0,0,14,32,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,209,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,210,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,211,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",4,1,1,3,6,0,0,0,0,10,63,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,212,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,213,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,214,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,215,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,216,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",10,3,0,6,12,0,0,0,0,15,104,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,217,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,218,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,219,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,220,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,221,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,222,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,223,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,224,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,225,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,226,"    NO_DATA(""no data""), /* keep */",0,0,0,1,2,0,0,0,0,3,30,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,227,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",10,3,0,4,8,0,6,0,0,20,82,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,228,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,1,1,2,0,8,0,0,15,99,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,229,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,230,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,231,"    NO_RESULT_AVAILABLE(""no result available""),",0,0,0,1,2,0,0,0,0,3,43,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,232,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,1,0,6,12,0,4,0,0,12,75,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,233,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,234,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,235,"    DENOMINATOR(""denominator""), /* keep */",2,0,1,1,2,0,0,0,0,9,38,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,236,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,237,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,238,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,239,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,240,"    INPUT_ARRAY(""input array""), /* keep */",8,2,0,1,2,0,0,0,0,12,38,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,241,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,0,0,0,0,6,34,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,242,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",16,0,0,1,2,3,0,0,0,20,48,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,243,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,244,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,245,"    WHOLE_FORMAT(""whole format""), /* keep */",6,0,0,1,2,0,8,0,0,15,40,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,246,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,247,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,248,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",4,0,0,4,8,0,0,0,0,6,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,249,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",10,3,1,4,8,0,0,0,0,18,98,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,250,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,251,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0,0,0,2,4,0,0,0,0,6,87,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,252,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,253,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,254,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,255,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",6,2,1,3,6,0,0,0,0,20,87,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,256,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,1,4,8,0,0,0,0,8,101,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,257,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,258,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,259,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",6,0,0,6,12,0,0,0,0,8,96,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,260,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,261,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",4,2,0,5,10,0,0,0,0,7,62,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,262,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,263,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0,0,0,3,6,0,0,0,0,9,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,264,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,265,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",4,1,1,3,6,0,0,0,0,17,108,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,266,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,267,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,268,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,269,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,270,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,271,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,272,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",8,2,0,4,8,0,0,0,0,11,90,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,273,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,274,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,275,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,276,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,277,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,278,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,279,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,280,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",12,1,0,5,10,0,0,0,0,15,98,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,281,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,282,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,283,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,284,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",6,1,0,1,2,0,0,0,0,7,49,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,285,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",4,1,0,1,2,0,10,0,0,17,63,0,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,286,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,287,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,288,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,289,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,290,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,291,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0,0,0,3,6,0,0,0,0,9,156,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,292,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,293,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,294,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,295,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);",0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,4,1,0,2,4,0,0,0,0,5,70,9,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,8,0,0,0,0,1,4,0,0,14,48,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,6,1,0,0,0,0,0,0,0,8,21,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);",0,0,0,1,2,0,0,0,0,3,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,0,0,2,36,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,        if (computeConstants) {,0,0,0,1,3,0,0,0,0,4,23,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,0,0,4,31,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,12,3,0,3,6,1,12,0,0,30,73,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,0,0,5,43,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,2,1,0,1,2,0,0,0,0,3,35,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",0,0,0,1,2,0,0,0,0,3,53,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",10,3,0,1,2,0,0,0,0,14,53,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,6,0,0,10,41,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,4,0,0,1,2,0,4,2,0,11,33,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);",0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",6,0,0,1,2,1,2,0,0,11,42,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,2,1,0,1,2,0,0,0,0,3,34,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);",6,0,0,1,2,0,6,2,0,15,42,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);",0,0,0,1,2,0,0,0,0,3,43,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,223,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,            sqr2Reciprocal = null;,2,0,0,0,0,3,6,0,0,11,22,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,            sqr3           = null;,2,0,0,0,0,1,0,0,0,3,22,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,            sqr3Reciprocal = null;,16,4,0,0,0,4,10,4,0,40,22,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,231,            pi             = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,            piSplit        = null;,4,0,0,0,0,0,0,0,0,5,22,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,            e              = null;,10,1,0,0,0,1,0,0,0,13,22,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,            eSplit         = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,            ln2            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,236,            ln2Split       = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,            ln5            = null;,2,0,0,0,0,0,0,0,0,3,22,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,            ln5Split       = null;,4,0,0,0,0,3,0,0,0,8,22,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,239,            ln10           = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,    },6,2,0,0,1,1,0,0,0,9,1,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,248,        return radixDigits;,0,0,0,0,0,1,0,0,0,1,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,        return rMode;,4,0,0,0,0,1,0,0,0,5,13,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,2,0,0,1,2,3,0,2,0,7,99,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,329,    },4,1,0,0,1,0,0,0,0,5,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,        return zero;,14,3,0,0,0,1,0,0,0,18,12,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,522,      Dfp result[] = new Dfp[2];,0,0,0,2,4,0,0,0,0,6,26,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,      boolean leading = true;,2,0,0,0,0,0,0,0,0,3,23,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,524,      int sp = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,525,      int sig = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,527,      char[] buf = new char[a.length()];,2,0,0,3,6,0,4,0,0,6,34,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,        buf[i] = a.charAt(i);,2,0,0,2,4,0,14,0,0,17,21,13,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,532,        if (buf[i] >= '1' && buf[i] <= '9') {,8,3,1,3,7,0,0,2,0,29,37,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,533,            leading = false;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,536,        if (buf[i] == '.') {,0,0,0,2,5,0,0,0,0,7,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,537,          sig += (400 - sig) % 4;,0,0,0,1,2,0,0,0,0,3,23,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,538,          leading = false;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,541,        if (sig == (radixDigits / 2) * 4) {,0,0,0,2,5,0,0,0,0,7,35,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,542,          sp = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,543,          break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,546,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,0,0,0,3,7,0,0,0,0,10,49,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,            sig ++;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,553,      for (int i = 0; i < buf.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,554,        buf[i] = a.charAt(i);,2,0,1,2,4,0,6,0,0,20,21,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,555,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,0,0,0,3,7,0,0,0,0,10,47,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,556,            buf[i] = '0';,0,0,1,1,2,0,0,0,0,6,13,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));",10,0,1,3,6,0,0,4,0,18,43,0,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,      return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,570,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,8,1,0,2,5,0,0,0,0,11,81,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,573,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",0,0,0,1,2,0,0,0,0,3,84,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",6,0,0,1,2,1,0,4,0,12,67,0,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,4,6,0,18,67,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,579,            sqr2String           = highPrecisionSqr2.toString();,0,0,0,1,2,0,0,0,0,3,52,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,580,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,0,0,0,2,4,0,0,0,0,6,77,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,            sqr3String           = highPrecisionSqr3.toString();,6,1,1,1,2,0,10,0,0,21,52,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,584,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,0,0,0,2,4,0,0,0,0,6,77,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",4,1,0,2,4,0,10,0,0,16,90,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,587,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",0,0,0,2,4,0,0,0,0,6,71,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,588,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",0,0,0,2,4,0,6,0,0,6,88,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",16,3,1,3,6,0,16,2,0,47,103,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,593,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,603,        Dfp sqrt2   = two.sqrt();,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,604,        Dfp yk      = sqrt2.subtract(one);,0,0,0,1,2,0,0,0,0,3,34,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,605,        Dfp four    = two.add(two);,0,0,0,1,2,0,0,0,0,3,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,606,        Dfp two2kp3 = two;,0,0,0,0,0,0,0,0,0,0,18,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,607,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,0,0,0,3,6,0,0,0,0,9,64,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,615,        for (int i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,616,            final Dfp ykM1 = yk;,2,0,0,0,0,0,0,0,0,3,20,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,618,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,619,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,2,0,0,2,4,1,10,2,0,15,53,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,620,            final Dfp s          = oneMinusY4.sqrt().sqrt();,2,0,0,2,4,1,6,2,0,11,48,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,621,            yk = one.subtract(s).divide(one.add(s));,2,0,0,3,6,0,14,0,0,17,40,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,623,            two2kp3 = two2kp3.multiply(four);,2,0,0,1,2,0,6,0,0,9,33,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,625,            final Dfp p = one.add(yk);,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,626,            final Dfp p2 = p.multiply(p);,0,0,0,1,2,0,0,0,0,3,29,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,627,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,629,            if (yk.equals(ykM1)) {,2,1,0,2,5,0,6,0,0,9,22,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,630,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,634,        return one.divide(ak);,0,0,0,1,2,1,6,0,0,6,22,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,645,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,646,        Dfp py = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,647,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,648,        Dfp fi = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,649,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,651,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,652,            x = x.multiply(a);,2,0,0,1,2,0,6,0,0,9,18,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,653,            y = y.add(x.divide(f));,2,0,0,2,4,0,10,0,0,13,23,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,654,            fi = fi.add(one);,8,1,0,1,2,0,8,0,0,19,17,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,655,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,656,            if (y.equals(py)) {,6,0,0,2,5,2,8,0,0,16,19,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,657,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,659,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,662,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,728,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,731,        Dfp y = new Dfp(x);,20,3,0,1,2,0,0,4,0,29,19,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,732,        Dfp num = new Dfp(x);,0,0,0,1,2,0,0,0,0,3,21,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,733,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,734,        for (int i = 0; i < 10000; i++) {,8,1,0,1,3,0,0,0,0,10,33,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,735,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,736,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,737,            den = den + 2;,18,2,0,0,0,1,0,0,0,25,14,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,738,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,739,            y = y.add(t);,4,1,0,1,2,0,10,0,0,16,13,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,740,            if (y.equals(py)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,741,                break;,0,0,0,0,0,0,6,0,0,6,6,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,743,            py = new Dfp(y);,8,1,1,1,2,0,6,2,0,21,16,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,746,        return y.multiply(two);,0,0,0,1,2,1,6,0,0,6,23,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,29,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,32,"        ROUND_DOWN,",4,0,0,0,0,0,0,2,0,6,11,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,35,"        ROUND_UP,",2,0,0,0,0,0,0,0,0,2,9,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,38,"        ROUND_HALF_UP,",2,0,0,0,0,0,0,0,0,2,14,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,41,"        ROUND_HALF_DOWN,",0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,46,"        ROUND_HALF_EVEN,",2,0,0,0,0,0,0,2,0,5,16,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,49,"        ROUND_HALF_ODD,",0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,52,"        ROUND_CEIL,",4,0,0,0,0,3,0,0,0,7,11,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,55,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,202,"        this(field, (long) x);",0,0,0,2,4,0,0,0,0,6,22,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,203,    },4,0,0,0,1,0,0,2,0,7,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,209,"    protected Dfp(final DfpField field, long x) {",6,0,0,1,3,2,0,2,0,10,45,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,225,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,226,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,229,            sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,232,        exp = 0;,0,0,0,0,0,0,6,0,0,6,8,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,233,        while (x != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",12,2,0,1,2,0,10,0,0,24,76,7,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,235,            mant[mant.length - 1] = (int) (x % RADIX);,18,3,1,3,6,0,0,0,0,26,42,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,236,            x /= RADIX;,4,0,0,0,0,0,0,0,0,5,11,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,240,        if (isLongMin) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,318,    public Dfp(final Dfp d) {,4,0,0,1,3,2,0,2,0,8,25,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,319,        mant  = d.mant.clone();,8,1,0,1,2,0,12,0,0,23,23,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,320,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,321,        exp   = d.exp;,6,0,0,0,0,0,0,0,0,7,14,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,322,        nans  = d.nans;,4,0,0,0,0,1,0,2,0,7,15,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,323,        field = d.field;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,324,    },4,0,0,0,1,1,4,0,0,9,1,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,330,"    protected Dfp(final DfpField field, final String s) {",6,0,0,1,3,3,0,4,0,13,53,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,333,        mant = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,39,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,334,        sign = 1;,2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,335,        exp = 0;,6,1,0,0,0,1,0,2,0,11,8,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,336,        nans = FINITE;,10,2,1,0,0,0,0,0,0,16,14,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,337,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,339,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,        final int rsize = 4;   // size of radix in decimal digits,0,0,0,0,0,0,0,0,0,0,57,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,        final int offset = 4;  // Starting offset into Striped,4,0,0,0,0,1,6,0,0,12,54,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,6,3,0,3,6,1,2,0,0,12,71,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,        if (s.equals(POS_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,351,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,0,0,0,7,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,357,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");",2,0,0,1,2,0,4,0,0,7,23,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,        if (p == -1) { // try upper case?,2,1,0,1,3,0,0,0,0,4,33,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");",2,0,0,1,2,0,4,0,0,8,19,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,        int sciexp = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,            fpdecimal = s;,4,0,0,0,0,0,0,0,0,5,14,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,        p = 0;,6,3,0,0,0,0,0,0,0,10,6,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,405,        int decimalPos = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,3,7,0,12,0,0,17,63,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,408,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,411,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,6,0,0,13,33,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,416,                decimalFound = true;,4,0,1,0,0,0,0,0,0,9,20,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,419,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,421,            if (p == fpdecimal.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,427,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,428,        striped[0] = '0';,2,0,1,1,2,0,0,2,0,8,17,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,        striped[1] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,431,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,        int significantDigits=0;,4,0,0,0,0,0,0,0,0,4,24,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,434,            if (p == (fpdecimal.length())) {,4,1,0,3,7,0,4,0,0,9,32,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,435,                break;,2,1,1,0,0,0,0,0,0,10,6,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,            if (q == mant.length*rsize+offset+1) {,10,4,0,1,3,0,0,0,0,14,38,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,440,                break;,0,0,0,0,0,0,4,0,0,4,6,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,443,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,0,0,0,0,3,33,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,444,                decimalFound = true;,6,1,0,0,0,0,4,0,0,12,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,445,                decimalPos = significantDigits;,0,0,0,0,0,0,0,2,0,2,31,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,447,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,3,0,3,7,0,12,0,0,17,61,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,455,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,456,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,457,            p++;,4,0,0,0,0,0,0,0,0,5,4,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,463,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,465,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,                if (q == offset) {,14,2,0,1,3,0,0,0,0,18,18,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,469,                if (striped[q] == '0') {,0,1,1,2,5,0,0,0,0,6,24,8,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,470,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,478,        if (decimalFound && significantDigits == 0) {,4,2,0,1,3,0,0,0,0,6,45,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,489,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,        int trailingZeros = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,492,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,                break;,0,0,0,0,0,0,4,0,0,4,6,7,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,501,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,18,6,1,2,4,0,0,0,0,27,62,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,506,        while ((p - q) < (mant.length * rsize)) {,22,5,0,3,7,0,0,0,0,29,41,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,507,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,                striped[++p] = '0';,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,        for (i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,14,40,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,515,            mant[i] = (striped[q]   - '0') * 1000 +,0,5,1,3,6,0,0,0,0,15,39,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,            q += 4;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,527,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,594,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,6,2,1,3,7,0,10,0,0,32,57,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,        return new Dfp(d);,12,2,0,1,2,2,0,2,0,17,18,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,632,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,639,        return field.getRadixDigits();,0,0,0,1,2,1,4,0,0,4,30,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,646,        return field.getZero();,0,0,0,1,2,1,4,0,0,4,23,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,667,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,        exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,671,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,        for (int i = 0; i < mant.length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,682,        exp++;,2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,683,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,        int diff = exp - e;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,        if (adiff < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,        if (diff == 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,        if (adiff > (mant.length + 1)) {,6,2,0,2,5,0,0,0,0,8,32,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,710,"            Arrays.fill(mant, 0);",10,0,0,1,2,3,6,0,0,20,21,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,711,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,713,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,10,0,0,1,2,0,4,0,0,14,46,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,719,        for (int i = 0; i < adiff; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,            if (diff < 0) {,4,1,0,1,3,0,0,0,0,6,15,0,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,                if (lostdigit != 0) {,8,2,0,1,3,0,0,0,0,11,21,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,                lostdigit = mant[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,731,                shiftRight();,0,0,0,1,2,0,0,0,0,3,13,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,737,        if (inexact) {,8,0,0,1,3,0,0,0,0,9,14,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,738,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,3,0,0,0,5,46,2,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,762,        if (isNaN() || x.isNaN()) {,0,1,1,3,7,0,6,0,0,13,27,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,                double scaleFactor = 1d;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,2,0,0,0,0,0,8,0,0,11,28,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,                if (scale <= 0) {  // Can't scale,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,                infinite = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,12,1,0,1,3,0,0,0,0,14,36,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,10,1,0,0,0,0,0,0,0,12,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,                    scaleFactor *= scale;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,8,0,0,1,3,1,10,0,0,20,24,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);,0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,10,0,0,1,3,0,0,0,0,12,16,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,644,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,648,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,169,            ret = 0.0;,2,0,0,0,0,0,0,0,0,2,10,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,0,0,0,3,6,1,0,0,0,10,61,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,173,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0,0,0,1,2,0,0,0,0,3,60,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,53,            ret = -ret;,4,0,0,0,0,0,0,0,0,6,11,6,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,125,        final double dev = x - mean;,0,0,0,0,0,0,0,0,0,0,28,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,127,        return 0.5 * (1.0 + Erf.erf((dev) /,4,0,0,1,4,1,0,0,0,5,35,10,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,65,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,52,        if (x < 0) {,8,1,0,1,3,0,0,0,0,11,12,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,60,55,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,129,        double p0 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,130,"        double p1 = getA(0, x);",0,0,0,1,2,0,0,0,0,3,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,131,        double q0 = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,132,        double q1 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,133,        double c = p1 / q1;,0,0,0,0,0,0,0,0,0,0,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,134,        int n = 0;,4,0,0,0,0,1,0,4,0,9,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,135,        double relativeError = Double.MAX_VALUE;,4,0,0,0,0,0,0,0,0,5,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,136,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,137,            ++n;,6,0,0,0,0,0,10,2,0,18,4,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,138,"            double a = getA(n, x);",6,0,0,1,2,0,6,0,0,13,22,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,139,"            double b = getB(n, x);",0,0,0,1,2,0,0,0,0,3,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,140,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,141,            double q2 = a * q1 + b * q0;,0,0,0,0,0,0,0,0,0,0,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,142,            boolean infinite = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,143,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,1,3,7,0,0,0,0,14,53,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,176,            if (infinite) {,8,4,0,1,3,0,0,0,0,12,15,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,183,            double r = p2 / q2;,0,0,0,0,0,0,0,0,0,0,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,185,            if (Double.isNaN(r)) {,0,0,0,2,5,0,12,0,0,12,22,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,190,            relativeError = FastMath.abs(r / c - 1.0);,0,0,0,1,2,0,0,0,0,3,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,193,            c = p2 / q2;,0,0,0,0,0,0,0,0,0,0,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,194,            p0 = p1;,4,1,0,0,0,0,0,0,0,5,8,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,195,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,196,            q0 = q1;,14,1,0,0,0,0,0,0,0,18,8,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,197,            q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,198,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,200,        if (n >= maxIterations) {,10,2,0,1,3,0,0,0,0,13,25,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,206,        return c;,4,2,1,0,0,1,10,0,0,25,9,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,253,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,257,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,262,                    return n * (a - n);,8,2,0,1,2,1,0,0,0,11,19,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,243,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,245,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,247,        } else if (x < a + 1.0) {,0,0,0,1,4,0,0,0,0,5,25,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,253,            ContinuedFraction cf = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,266,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,267,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,12,4,0,4,8,1,20,0,0,40,67,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,270,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,166,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,10,2,0,5,11,0,0,0,0,13,68,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,168,        } else if (x == 0.0) {,0,0,0,1,4,0,4,0,0,5,22,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,170,        } else if (x >= a + 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,176,            double n = 0.0; // current element index,0,0,0,0,0,0,0,0,0,0,40,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,177,            double an = 1.0 / a; // n-th element in the series,16,1,0,0,0,3,14,4,0,41,50,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,178,            double sum = an; // partial sum,0,0,0,0,0,0,0,0,0,0,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,179,            while (FastMath.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {,0,0,0,2,5,0,0,0,0,7,95,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,181,                n = n + 1.0;,8,1,0,0,0,0,8,2,0,20,12,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,182,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,185,                sum = sum + an;,0,0,0,0,0,0,0,0,0,0,15,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,187,            if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,189,            } else if (Double.isInfinite(sum)) {,0,0,0,2,6,0,6,0,0,6,36,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,192,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,0,0,0,4,8,0,0,0,0,12,67,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,196,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1211,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,42,    private static final double[] LANCZOS =,0,0,0,1,2,0,0,0,0,3,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,62,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,82,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,98,        if (Double.isNaN(x) || (x <= 0.0)) {,0,0,0,3,7,0,6,0,0,6,36,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,101,            double g = 607.0 / 128.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,103,            double sum = 0.0;,0,0,0,0,0,0,0,0,0,0,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,104,            for (int i = LANCZOS.length - 1; i > 0; --i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,105,                sum = sum + (LANCZOS[i] / (x + i));,4,0,0,3,6,0,0,4,0,9,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,107,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,109,            double tmp = x + g + .5;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,110,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,44,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,60,114,        return ret;,4,0,0,0,0,1,0,2,0,6,11,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1155,"        return log(x, null);",2,0,0,1,2,1,4,0,0,8,20,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1165,        long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1168,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1179,        if (x == Double.POSITIVE_INFINITY) {,0,1,0,1,3,0,10,0,0,11,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1188,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1190,        if ((bits & 0x7ff0000000000000L) == 0) {,2,0,0,2,5,0,0,0,0,2,40,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1210,        if (exp == -1 || exp == 0) {,10,4,1,1,3,2,6,0,0,32,28,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1258,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,66,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1269,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,0,0,0,4,8,0,0,0,0,12,103,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1271,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1272,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1274,        if (hiPrec != null) {,2,1,0,1,3,0,4,0,0,7,21,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1325,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1326,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1327,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,0,0,0,10,44,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1328,            lnza = lnza * epsilon + 0.3333333333332802;,4,0,0,0,0,0,0,0,0,4,43,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1329,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1330,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1331,            lnza = lnza * epsilon;,6,1,0,0,0,0,0,0,0,8,22,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1348,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,2,0,2,22,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1349,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1350,        double c = a+lnm[0];,6,1,1,1,2,0,4,0,0,14,20,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1351,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1352,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1353,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1355,        c = a + lnza;,8,0,1,0,0,1,0,0,0,11,13,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1356,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1357,        a = c;,0,1,0,0,0,0,20,0,0,21,6,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1358,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1360,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1361,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1362,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1363,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1365,        c = a + lnm[1];,8,4,1,1,2,0,6,0,0,21,15,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1366,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1367,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1368,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1370,        c = a + lnzb;,10,1,0,0,0,0,0,0,0,13,13,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1371,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1372,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1373,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1375,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,1380,        return a + b;,6,2,1,0,0,1,0,0,0,13,13,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,3265,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,26,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,641,            intVal = (int) -x;,6,0,0,1,2,0,0,0,0,8,18,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,643,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,651,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,661,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,671,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,673,            intPartA = EXP_INT_TABLE_A[750-intVal];,10,2,1,1,2,1,0,0,0,17,39,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,674,            intPartB = EXP_INT_TABLE_B[750-intVal];,6,3,1,1,2,0,0,0,0,21,39,3,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,676,            intVal = -intVal;,4,0,0,0,0,0,0,0,0,6,17,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,621,"        return exp(x, 0.0, null);",0,0,0,1,2,1,4,0,0,5,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,640,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,696,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,697,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,698,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,704,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,713,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,714,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,715,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,716,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,717,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,724,        double tempA = intPartA * fracPartA;,10,2,0,0,0,0,6,0,0,18,36,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,725,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,731,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,733,        if (extra != 0.0) {,6,2,0,1,3,0,6,0,0,15,19,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,736,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,739,        if (hiPrec != null) {,6,4,0,1,3,0,0,0,0,10,21,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,745,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,60,58,    protected AbstractContinuousDistribution() {},0,0,0,2,4,0,0,0,0,6,45,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,60,49,    protected final RandomDataImpl randomData = new RandomDataImpl();,2,0,0,1,2,2,0,4,0,8,65,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,60,54,    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;,6,0,0,0,0,1,0,0,0,7,78,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,60,40,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,60,41,    },0,0,0,0,1,0,8,0,0,8,1,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,60,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,61,    },0,0,1,0,1,0,0,0,0,10,1,10,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,73,"    public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {",8,1,1,1,3,1,0,0,0,23,82,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,74,        if (sd <= 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,78,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,79,        standardDeviation = sd;,0,0,0,0,0,0,0,0,0,0,23,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,80,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,81,    },4,1,0,0,1,0,0,0,0,5,1,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,45,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,0,0,0,0,2,65,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,1,0,2,4,3,0,0,0,8,66,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,53,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,56,    private static final double LN_MANT[][] = new double[1024][];,4,0,0,4,8,4,4,2,0,14,61,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,65,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,85,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,98,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,108,    private static final double SINE_TABLE_A[] = new double[14];,2,0,1,2,4,0,0,0,0,5,60,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,111,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,114,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,117,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,120,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,0,0,0,0,3,63,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,123,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,126,    private static long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,46,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,147,    private static long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,48,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,127,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,169,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,170,        for (i = 1; i < 20; i++) {,0,0,0,1,3,0,0,0,0,4,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,174,        double tmp[] = new double[2];,4,0,0,2,4,0,0,0,0,4,29,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,175,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,178,        for (i = 0; i < 750; i++) {,6,1,0,1,3,0,0,0,0,9,27,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,179,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,4,2,1,2,4,0,0,0,0,20,32,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,183,            if (i != 0) {,0,0,0,1,3,0,4,0,0,4,13,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,185,"                splitReciprocal(tmp, recip);",2,0,0,1,2,0,12,0,0,14,28,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,186,                EXP_INT_TABLE_A[750-i] = recip[0];,6,1,0,2,4,1,0,0,0,8,34,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,187,                EXP_INT_TABLE_B[750-i] = recip[1];,8,1,0,2,4,0,0,0,0,10,34,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,192,        for (i = 0; i < 1025; i++) {,10,1,0,1,3,0,0,0,0,14,28,0,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,193,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,2,4,0,0,0,0,7,29,6,0.04,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,60,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,        this.sourceFormat = sourceFormat;,2,0,1,0,0,0,4,0,0,10,33,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,0,0,5,10,3,0,0,0,8,67,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,0,0,4,8,0,8,0,0,13,94,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",0,0,0,3,6,0,0,0,0,9,82,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,1,0,4,8,0,6,0,0,9,107,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",12,1,0,1,2,0,0,0,0,16,89,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",12,3,0,1,2,1,6,0,0,24,100,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",0,0,0,2,4,0,0,0,0,6,91,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0,0,0,3,6,0,0,0,0,9,97,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,7,83,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,6,0,0,9,131,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,1,0,0,0,3,75,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,1,2,4,1,0,0,0,7,78,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",10,1,1,1,2,1,0,0,0,16,95,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",8,1,0,2,4,0,2,0,0,13,112,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,1,0,2,4,0,0,0,0,3,86,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0,0,0,3,6,0,8,0,0,8,263,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",8,4,0,1,2,0,12,0,0,28,52,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",4,0,1,3,6,1,0,0,0,7,109,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,6,0,0,6,49,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,82,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,83,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,84,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,85,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,1,10,0,0,16,119,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,86,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,87,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",0,0,0,4,8,0,0,0,0,12,78,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,88,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",4,0,0,1,2,0,0,0,0,6,88,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,89,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,90,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,91,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,92,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,0,1,4,8,0,0,0,0,7,78,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,93,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,1,2,0,0,5,81,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,94,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,95,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,2,58,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,96,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,2,0,4,77,13,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,97,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,9,69,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,98,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",0,0,0,12,24,0,0,0,0,36,175,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,99,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",18,7,1,3,6,0,16,0,0,50,85,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,100,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,101,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,102,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,73,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,103,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,104,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",8,1,0,1,2,1,2,2,0,15,62,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,105,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,10,0,0,13,54,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,106,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,107,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",10,1,0,4,8,0,8,0,0,20,56,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,108,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,109,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",0,0,0,6,12,0,0,0,0,18,107,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,110,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",4,0,0,3,6,1,0,2,0,7,95,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,111,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,112,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,113,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,114,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,0,0,1,2,3,0,0,0,8,59,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,115,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,116,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,117,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",0,0,0,3,6,0,8,0,0,8,67,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,118,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0,0,0,4,8,0,0,0,0,12,121,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,119,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",4,0,1,2,4,1,4,0,0,14,103,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,120,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,121,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,122,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,123,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,124,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",0,0,0,2,4,0,0,0,0,6,101,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,125,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0,0,0,2,4,0,0,0,0,6,66,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,126,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0,0,0,4,8,0,0,0,0,12,112,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,127,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,128,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,6,4,0,12,72,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,129,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,130,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,131,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,132,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0,0,0,1,2,0,0,0,0,3,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,133,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,2,56,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,134,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",18,6,1,4,8,1,0,0,0,30,56,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,135,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,136,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,137,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,138,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,1,0,5,10,0,4,0,0,8,111,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,139,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,140,"    EVALUATIONS(""evaluations""), /* keep */",8,1,0,1,2,0,0,0,0,11,38,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,141,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0,0,0,3,6,0,0,0,0,9,62,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,142,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",4,0,0,3,6,0,6,2,0,13,73,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,143,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,144,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,145,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,8,0,0,11,156,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,146,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,147,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,2,0,5,49,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,148,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,149,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,150,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",4,0,0,5,10,1,6,2,0,14,68,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,151,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,152,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,153,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,154,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",2,0,0,2,4,0,0,0,0,3,104,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,155,"    START_POSITION(""start position ({0})""), /* keep */",10,0,0,3,6,0,0,0,0,11,50,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,156,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,157,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,158,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,0,2,0,0,13,81,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,159,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,160,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,161,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,85,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,162,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,0,3,6,0,0,0,0,3,78,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,163,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,164,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",10,2,0,1,2,0,0,0,0,13,41,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,165,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",8,0,0,5,10,0,0,2,0,11,93,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,166,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,167,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,168,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",4,0,0,5,10,0,0,0,0,6,113,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,169,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,170,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,171,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,172,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,173,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,174,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,175,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,3,0,0,0,5,81,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,176,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",0,0,0,1,2,0,0,0,0,3,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,177,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,178,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,179,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",6,1,0,3,6,0,0,0,0,8,65,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,180,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,181,"    LENGTH(""length ({0})""), /* keep */",2,1,0,3,6,0,14,0,0,18,34,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,182,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,183,"    MEAN(""mean ({0})""), /* keep */",4,1,0,3,6,0,0,0,0,6,30,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,184,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,185,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,56,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,186,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,187,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,188,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,189,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,190,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,191,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,192,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,193,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,194,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,195,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,196,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,197,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,1,1,3,6,0,0,0,0,8,63,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,198,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,199,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0,0,0,2,4,0,0,0,0,6,87,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,200,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,201,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,202,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,203,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,204,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,205,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,8,107,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,206,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,207,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,208,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,209,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,210,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,211,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,212,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0,0,0,1,2,0,0,0,0,3,99,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,213,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,214,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,215,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,216,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,217,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,218,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,219,"    DENOMINATOR(""denominator""), /* keep */",4,0,0,1,2,0,0,0,0,5,38,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,220,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,221,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,222,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,223,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,224,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,225,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,4,34,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,226,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,227,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0,0,0,1,2,0,0,0,0,3,75,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,228,"    REAL_FORMAT(""real format""), /* keep */",8,0,0,1,2,1,6,2,0,18,38,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,229,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,230,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,231,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,232,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,233,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,234,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,127,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,235,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",4,1,1,2,4,0,0,0,0,10,87,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,236,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,237,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",12,2,0,2,4,0,0,0,0,16,76,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,238,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0,0,0,2,4,0,0,0,0,6,84,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,239,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,240,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,241,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,242,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0,0,0,6,12,0,0,0,0,18,96,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,243,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,244,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,8,0,0,12,68,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,245,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0,0,0,3,6,0,0,0,0,9,56,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,246,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,247,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,1,3,6,0,0,0,0,8,108,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,248,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",10,2,0,3,6,0,0,0,0,14,99,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,249,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,250,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,251,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",10,1,0,1,2,0,0,0,0,13,69,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,252,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",6,2,0,4,8,0,0,0,0,9,109,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,253,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",6,0,0,4,8,0,0,2,0,9,90,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,254,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,255,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,256,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,257,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,258,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,259,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,260,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,261,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",4,0,0,5,10,0,0,0,0,6,113,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,262,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,263,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,264,"    SINGULAR_MATRIX(""matrix is singular""),",0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,265,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,266,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0,0,0,3,6,0,0,0,0,9,87,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,267,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,268,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",0,0,0,4,8,0,0,0,0,12,174,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,269,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",4,0,0,3,6,0,0,0,0,5,136,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,270,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,271,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,272,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,6,3,0,2,4,0,4,0,0,14,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0,0,0,2,4,0,0,0,0,6,66,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,53,    private static final double FACT[] = new double[20];,2,1,0,2,4,3,12,0,0,18,52,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,56,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,65,    private static final double LN_SPLIT_COEF[][] = {,6,0,0,2,5,0,0,0,0,6,49,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,85,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,108,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,111,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,114,    private static final double COSINE_TABLE_A[] = new double[14];,6,5,0,2,4,0,0,0,0,11,62,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,117,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,120,    private static final double TANGENT_TABLE_A[] = new double[14];,4,0,0,2,4,3,6,0,0,14,63,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,123,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,126,    private static long RECIP_2PI[] = new long[] {,4,1,1,2,5,0,0,0,0,15,46,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,147,    private static long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,48,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,127,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,1,0,1,3,0,0,0,0,4,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,169,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,170,        for (i = 1; i < 20; i++) {,12,2,0,1,3,0,4,0,0,20,26,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,175,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,178,        for (i = 0; i < 750; i++) {,4,0,0,1,3,1,0,0,0,5,27,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,179,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,183,            if (i != 0) {,2,1,0,1,3,0,6,0,0,9,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,185,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,186,                EXP_INT_TABLE_A[750-i] = recip[0];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,187,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,192,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,193,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,0,2,4,0,0,0,0,6,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,0,2,4,0,0,0,0,6,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,199,        for (i = 0; i < 1024; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,201,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,205,        buildSinCosTables();,2,0,0,1,2,1,8,0,0,11,20,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,206,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,219,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,680,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,681,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,682,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,683,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,684,"        split(x, xs);",2,0,0,1,2,0,0,0,0,3,13,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,685,        ys[0] = ys[1] = 0.0;,4,0,1,2,4,0,0,0,0,8,20,14,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,687,        for (int i = 19; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,10,31,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,688,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,689,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,690,            ys[1] = as[1];,8,1,0,2,4,1,8,0,0,19,14,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,692,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,693,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,695,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,0,0,0,2,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,696,            ys[0] = as[0];,4,1,0,2,4,1,0,0,0,6,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,697,            ys[1] = as[1];,4,0,0,2,4,0,0,2,0,7,14,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,700,        if (result != null) {,10,2,1,1,3,0,0,0,0,15,21,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,701,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,702,            result[1] = ys[1];,6,2,0,2,4,0,0,0,0,10,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,705,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,714,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,715,            final double a = d * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,34,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,716,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,717,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,718,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,723,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,730,        final double c = a[0] + a[1];,4,1,1,2,4,2,0,0,0,11,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,731,        final double d = -(c - a[0] - a[1]);,0,0,0,3,6,0,0,0,0,9,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,733,        if (c < 8e298 && c > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,734,            double z = c * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,735,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,736,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,737,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,738,            double z = c * 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,2,42,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,739,            a[0] = (c + z - c) * 1073741824.0;,8,4,1,2,4,0,0,0,0,15,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,740,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,742,    },4,0,0,0,1,0,0,0,0,5,1,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,750,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,0,0,7,14,0,0,0,0,21,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,754,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,755,    },2,0,0,0,1,0,0,0,0,2,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,763,        ans[0] = a[0] + b[0];,2,0,0,3,6,0,4,2,0,8,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,764,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,766,        resplit(ans);,0,0,0,1,2,0,2,0,0,2,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,767,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,788,        final double b = 1.0/4194304.0;,4,1,0,0,0,1,0,0,0,7,31,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,789,        final double a = 1.0 - b;,6,1,0,0,0,1,10,0,0,19,25,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,791,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,8,19,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,796,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,6,7,1,9,18,0,0,0,0,29,60,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,2,0,0,4,9,3,0,0,0,5,63,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,800,            result[1] = 0.0;,6,1,0,1,2,1,0,0,0,8,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,804,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,806,        for (int i = 0; i < 2; i++) {,6,1,1,1,3,0,6,0,0,16,29,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0,0,0,4,8,0,0,0,0,12,58,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,811,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,813,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,815,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,823,        final double xs[] = new double[2];,4,0,0,2,4,2,0,4,0,10,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,824,        final double ys[] = new double[2];,6,1,0,2,4,2,0,0,0,9,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,825,        final double zs[] = new double[2];,4,1,1,2,4,2,0,0,0,11,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,828,"        split(a[0], xs);",0,0,1,2,4,0,4,0,0,6,16,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,829,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,830,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,832,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,833,        result[1] = zs[1];,4,3,1,2,4,0,0,0,0,12,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,836,"        split(b[1], ys);",6,3,1,2,4,0,16,0,0,27,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,837,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,839,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,841,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,842,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,843,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,844,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,847,"        split(a[1], xs);",6,1,0,2,4,0,0,0,0,7,16,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,848,"        split(b[0], ys);",2,0,1,2,4,0,4,0,0,9,16,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,849,"        splitMult(xs, ys, zs);",8,2,0,1,2,1,0,0,0,11,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,851,        tmp = result[0] + zs[0];,8,0,0,2,4,0,4,0,0,12,24,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,853,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,854,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,855,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,856,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,859,"        split(a[1], xs);",6,2,1,2,4,0,4,0,0,17,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,860,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,861,"        splitMult(xs, ys, zs);",2,0,0,1,2,0,8,2,0,12,22,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,863,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,865,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,866,        tmp = result[0] + zs[1];,4,2,1,2,4,0,0,0,0,11,24,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,0,0,5,10,3,0,0,0,5,50,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,868,        result[0] = tmp;,0,0,0,1,2,0,2,0,0,2,16,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,869,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,878,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,879,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,880,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,889,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,890,        xs[1] = 1.4456468917292502E-16;,2,1,1,1,2,0,0,0,0,6,31,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,892,"        split(1.0, ys);",2,1,0,1,2,0,0,0,0,3,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,894,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,895,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,896,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,897,                ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,900,"            quadMult(xs, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,901,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,903,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,906,        if (result != null) {,10,4,0,1,3,1,0,0,0,15,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,907,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,908,            result[1] = ys[1];,6,0,1,2,4,1,0,0,0,12,18,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,910,            resplit(result);,6,0,0,1,2,0,4,0,0,11,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,913,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1396,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1397,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1398,        double y[] = new double[2];,6,0,0,2,4,0,0,0,0,7,27,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1399,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1401,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1404,        x[0] += 1.0;,0,0,0,1,2,0,0,0,0,3,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1405,        resplit(x);,0,0,0,1,2,0,10,0,0,10,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1406,"        splitReciprocal(x, a);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1407,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1408,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1409,"        splitMult(x, a, y);",0,0,0,1,2,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1410,        x[0] = y[0];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1411,        x[1] = y[1];,2,0,0,2,4,1,0,0,0,3,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1414,"        splitMult(x, x, x2);",2,0,0,1,2,1,10,0,0,13,20,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,0,0,3,6,3,0,0,0,5,48,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,1,0,3,6,0,0,0,0,10,48,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1424,"            splitMult(y, x2, a);",0,0,0,1,2,0,8,0,0,8,20,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1425,            y[0] = a[0];,2,0,1,2,4,3,0,0,0,10,12,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1426,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,6,0,0,10,33,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1428,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1429,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1432,"        splitMult(y, x, a);",0,0,0,1,2,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1433,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1434,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1436,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1446,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1447,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1448,        final double facts[] = new double[2];,4,0,0,2,4,1,4,0,0,9,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1449,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1450,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1451,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1453,        for (int i = 19; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,11,31,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1454,"            splitMult(xs, ys, as);",0,0,0,1,2,0,10,0,0,10,22,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1455,            ys[0] = as[0]; ys[1] = as[1];,6,0,1,4,8,0,0,0,0,16,29,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1457,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1458,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1461,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1462,"            splitReciprocal(as, facts);",0,0,0,1,2,0,6,0,0,6,27,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1464,            if ( (i & 2) != 0 ) {,4,2,0,2,5,1,6,0,0,13,21,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1465,                facts[0] = -facts[0];,2,0,1,2,4,0,4,0,0,13,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1466,                facts[1] = -facts[1];,2,0,0,2,4,0,4,2,0,9,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1469,"            splitAdd(ys, facts, as);",2,0,0,1,2,0,8,0,0,11,24,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1473,        if (result != null) {,6,1,0,1,3,0,0,2,0,9,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1474,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1475,            result[1] = ys[1];,6,0,1,2,4,0,6,2,0,20,18,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1478,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1489,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1490,        final double ys[] = new double[2];,20,6,0,2,4,1,0,0,0,28,34,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1491,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1492,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1493,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1494,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1496,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1497,"            splitMult(xs, ys, as);",4,0,0,1,2,1,8,2,0,15,22,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1500,            if ( (i & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1501,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1504,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1505,"            splitReciprocal(as, facts);",4,2,1,1,2,0,6,0,0,16,27,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1507,            if ( (i & 2) != 0 ) {,0,0,0,2,5,0,0,0,0,7,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1508,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1509,                facts[1] = -facts[1];,2,0,1,2,4,1,4,0,0,13,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1512,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1516,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1517,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1518,            result[1] = ys[1];,4,0,1,2,4,0,0,0,0,10,18,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1521,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,15,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1527,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,62,1530,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,    private static final long[] FACTORIALS = new long[] {,0,0,0,2,5,0,0,0,0,7,53,4,0.00228,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",24,3,0,1,2,0,0,0,0,28,72,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,2,0,0,0,1,1,6,4,0,13,56,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,91,        this.direction = direction;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,        this.strict = strict;,10,0,0,0,0,1,2,2,0,15,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,        this.index = index;,8,1,0,0,0,0,30,2,0,43,19,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,        return strict;,2,0,0,0,0,1,8,0,0,10,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,115,        return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,121,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,50,"        super(specific, general, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,        argument = wrong;,8,1,0,0,0,0,0,0,0,10,17,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,64,"        super(general, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,66,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,61,                                           Object ... args) {,0,0,0,0,2,0,14,0,0,15,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,62,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,63,        this.general = general;,6,0,0,0,0,0,0,2,0,8,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,64,        arguments = ArgUtils.flatten(args);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,65,    },2,2,0,0,1,0,0,0,0,4,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,72,"        this(null, general, args);",2,1,1,1,2,0,0,0,0,7,26,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,73,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",2,0,0,1,2,1,0,0,0,3,73,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,1806,    public static enum OrderDirection {,8,2,0,0,1,2,8,0,0,21,35,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,1808,"        INCREASING,",16,1,0,0,0,0,0,0,0,19,11,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,1810,        DECREASING,6,1,0,0,0,0,0,0,0,8,10,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,1827,            switch (dir) {,8,4,0,1,3,0,10,0,0,23,14,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,88,        super();,6,1,0,1,2,0,4,2,0,15,8,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,102,        long s = (long)x + (long)y;,12,2,0,2,4,1,4,0,0,19,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,103,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,104,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0,0,0,1,2,0,0,0,0,3,98,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,106,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,1,6,0,0,15,64,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,136,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,138,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,142,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,143,                if (b < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,145,                    if (Long.MIN_VALUE - b <= a) {,2,1,1,1,3,0,0,0,0,14,30,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,146,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,148,"                        throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,152,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,159,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,160,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,162,"                    throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,166,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,195,"        checkBinomial(n, k);",0,1,0,1,2,0,12,0,0,13,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,196,        if ((n == k) || (k == 0)) {,8,3,0,3,7,0,0,2,0,13,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,197,            return 1;,4,1,0,0,0,1,2,0,0,7,9,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,199,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,200,            return n;,14,7,0,0,0,1,0,0,0,24,9,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,203,        if (k > n / 2),0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,204,"            return binomialCoefficient(n, n - k);",4,0,0,1,2,3,0,4,0,10,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,211,        long result = 1;,2,0,0,0,0,0,0,2,0,4,16,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,212,        if (n <= 61) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,214,            int i = n - k + 1;,20,6,0,0,0,0,0,0,0,27,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,215,            for (int j = 1; j <= k; j++) {,6,1,0,1,3,0,10,0,0,17,30,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,216,                result = result * i / j;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,217,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,219,        } else if (n <= 66) {,4,2,0,1,4,0,0,0,0,6,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,222,            int i = n - k + 1;,8,0,0,0,0,0,4,0,0,14,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,223,            for (int j = 1; j <= k; j++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,230,"                final long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,231,                result = (result / (j / d)) * (i / d);,14,5,0,3,6,0,0,0,0,20,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,232,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,234,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,238,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,239,            for (int j = 1; j <= k; j++) {,4,0,0,1,3,0,0,2,0,7,30,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,240,"                final long d = gcd(i, j);",4,0,0,1,2,0,0,0,0,5,25,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,241,"                result = mulAndCheck(result / (j / d), i / d);",0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,242,                i++;,12,4,0,0,0,0,4,0,0,20,4,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,245,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,271,"        checkBinomial(n, k);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,272,        if ((n == k) || (k == 0)) {,2,0,0,3,7,0,4,0,0,7,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,273,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,275,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,276,            return n;,2,0,1,0,0,2,0,0,0,7,9,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,278,        if (k > n/2) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,279,"            return binomialCoefficientDouble(n, n - k);",0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,281,        if (n < 67) {,14,4,1,1,3,0,4,0,0,26,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,282,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,285,        double result = 1d;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,286,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,287,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,290,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,312,"        checkBinomial(n, k);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,313,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,314,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,316,        if ((k == 1) || (k == n - 1)) {,4,0,0,3,7,0,0,0,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,317,            return FastMath.log(n);,2,0,0,1,2,1,10,0,0,14,23,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,324,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,325,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,10,0,0,10,46,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,332,        if (n < 1030) {,4,1,0,1,3,0,8,0,0,13,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,333,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,336,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,337,"            return binomialCoefficientLog(n, n - k);",8,1,0,1,2,1,4,0,0,13,40,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,343,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,346,        for (int i = n - k + 1; i <= n; i++) {,2,0,0,1,3,0,0,0,0,3,38,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,347,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,351,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,352,            logSum -= FastMath.log(i);,6,1,0,1,2,0,6,0,0,14,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,355,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,366,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,367,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,371,        if (n < 0) {,4,1,0,1,3,0,0,0,0,6,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,372,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,376,    },8,1,0,0,1,0,0,0,0,11,1,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,389,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,390,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,391,        } else if (x < y) {,0,0,0,1,4,0,0,0,0,5,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,392,          return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,394,        return 1;,0,0,1,0,0,1,0,0,0,5,9,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,405,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,6,2,0,3,6,1,10,4,0,23,50,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,4,3,0,3,6,1,12,0,0,19,54,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",2,0,0,4,8,2,0,0,0,3,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,442,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,456,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",14,4,0,3,6,1,10,0,0,29,64,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,481,        long xInt = Double.doubleToLongBits(x);,4,1,0,1,2,3,0,0,0,8,39,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,482,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,485,        if (xInt < 0) {,2,1,1,1,3,0,4,0,0,11,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,486,            xInt = SGN_MASK - xInt;,2,1,0,0,0,0,0,0,0,3,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,488,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,489,            yInt = SGN_MASK - yInt;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,509,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,523,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,524,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,4,0,0,12,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,526,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,527,            return false;,4,1,0,0,0,1,6,2,0,15,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,529,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,530,"            if (!equals(x[i], y[i])) {",8,4,1,4,9,1,2,0,0,33,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,531,                return false;,0,0,0,0,0,1,8,0,0,9,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,534,        return true;,6,1,0,0,0,1,0,0,0,9,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,548,        if ((x == null) || (y == null)) {,2,0,0,3,7,0,0,0,0,3,33,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,549,            return !((x == null) ^ (y == null));,0,0,0,3,6,1,0,0,0,10,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,551,        if (x.length != y.length) {,12,1,1,1,3,0,0,0,0,17,27,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,552,            return false;,0,0,0,0,0,1,8,0,0,8,13,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,554,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,555,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,2,0,0,11,38,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,556,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,559,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,585,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,586,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,590,        if (n > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,591,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,594,        return FACTORIALS[n];,2,0,1,1,2,1,0,2,0,8,21,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,618,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,619,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,623,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,624,            return factorial(n);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,626,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,2,1,0,3,6,1,0,0,0,3,59,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,643,        if (n < 0) {,2,1,0,1,3,0,4,0,0,7,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,644,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,648,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,649,            return FastMath.log(factorial(n));,2,0,0,2,4,1,8,2,0,12,34,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,651,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,652,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,6,0,0,16,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,653,            logSum += FastMath.log(i);,4,0,1,1,2,0,6,0,0,16,26,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,655,        return logSum;,4,0,0,0,0,4,0,0,0,8,14,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,688,        int u = p;,4,0,0,0,0,0,6,0,0,10,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,689,        int v = q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,690,        if ((u == 0) || (v == 0)) {,8,6,0,3,7,0,0,0,0,15,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,18,4,1,3,7,0,0,0,0,24,59,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,692,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,696,            return FastMath.abs(u) + FastMath.abs(v);,2,0,0,2,4,1,0,0,0,3,41,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,703,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,704,            u = -u;,4,2,1,0,0,0,0,0,0,11,7,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,706,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,0,0,1,1,4,0,2,0,0,7,20,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);",0,0,0,1,2,0,0,0,0,3,29,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,606,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,607,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,0,0,0,3,6,0,0,0,0,9,42,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,609,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,4,2,1,1,2,0,0,0,0,10,24,3,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,611,                work1[pj] /= work2[j];,0,0,0,2,4,0,0,0,0,6,22,4,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,612,                double tmp = work1[pj];,0,0,0,1,2,0,0,0,0,3,23,4,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,613,                for (int i = j + 1; i < solvedCols; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,614,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,0,0,0,4,8,0,0,0,0,12,47,4,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,617,            sum2 = 0;,0,0,0,0,0,0,0,0,0,0,9,4,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,618,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,0,6,0,0,13,38,5,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,619,                double s = work1[permutation[j]];,0,0,0,2,4,0,0,0,0,6,33,4,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,620,                sum2 += s * s;,0,0,0,0,0,0,4,0,0,4,14,5,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,622,            double correction = fp / (delta * sum2);,6,1,0,1,2,3,12,2,0,25,40,1,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,625,            if (fp > 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,632,"            lmPar = Math.max(parl, lmPar + correction);",6,1,0,1,2,0,6,0,0,14,43,6,0.21053,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,530,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,531,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,532,                work1[pj] *= diag[pj] / dxNorm;,0,0,0,2,4,0,0,0,0,6,31,4,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,534,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,535,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,536,                int pj = permutation[j];,6,0,1,1,2,0,0,0,0,10,24,3,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,537,                double sum = 0;,4,0,0,0,0,0,0,0,0,5,15,10,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,538,                for (int i = 0; i < j; ++i) {,2,0,1,1,3,0,0,0,0,6,29,5,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,539,                    sum += jacobian[i][pj] * work1[permutation[i]];,6,1,0,4,8,1,0,0,0,8,47,8,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,541,                double s = (work1[pj] - sum) / diagR[pj];,0,0,0,3,6,0,0,0,0,9,41,4,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,542,                work1[pj] = s;,4,0,1,1,2,0,6,0,0,15,14,3,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,543,                sum2 += s * s;,8,1,0,0,0,0,0,0,0,10,14,3,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,545,            parl = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,11,27,6,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,698,                        final double cotan = rkk / lmDiag[k];,0,0,0,1,2,0,0,0,0,3,37,4,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,699,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,6,3,0,1,2,0,12,0,0,22,45,3,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,700,                        cos   = sin * cotan;,2,0,0,0,0,0,0,0,0,3,20,8,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,701,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.19048,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,426,                    cost = previousCost;,10,3,0,0,0,0,0,0,0,13,20,7,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,427,                    for (int j = 0; j < solvedCols; ++j) {,6,0,0,1,3,0,0,0,0,7,38,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,428,                        int pj = permutation[j];,6,1,0,1,2,0,0,0,0,8,24,6,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,429,                        point[pj] = oldX[pj];,0,0,1,2,4,0,0,0,0,9,21,12,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,431,                    tmpVec    = residuals;,6,1,0,0,0,0,0,0,0,7,22,7,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,432,                    residuals = oldRes;,2,0,0,0,0,1,4,0,0,7,19,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,433,                    oldRes    = tmpVec;,2,0,1,0,0,1,0,0,0,7,19,8,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,528,        double parl = 0;,4,1,0,0,0,0,0,0,0,5,16,6,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,529,        if (rank == solvedCols) {,8,3,0,1,3,0,0,0,0,12,25,8,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,549,        sum2 = 0;,0,0,0,0,0,0,0,0,0,0,9,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,550,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,551,            int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,552,            double sum = 0;,10,2,0,0,0,0,0,0,0,13,15,6,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,553,            for (int i = 0; i <= j; ++i) {,2,0,0,1,3,0,0,0,0,2,30,5,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,554,                sum += jacobian[i][pj] * qy[i];,4,1,1,3,6,0,0,2,0,18,31,3,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,556,            sum /= diag[pj];,2,0,1,1,2,0,0,0,0,7,16,6,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,557,            sum2 += sum * sum;,0,0,0,0,0,0,10,0,0,10,18,11,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,559,        double gNorm = Math.sqrt(sum2);,0,0,0,1,2,0,0,0,0,3,31,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,560,        double paru = gNorm / delta;,2,0,0,0,0,0,2,2,0,6,28,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,561,        if (paru == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,568,"        lmPar = Math.min(paru, Math.max(lmPar, parl));",6,1,0,2,4,0,0,0,0,8,46,12,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,569,        if (lmPar == 0) {,14,3,0,1,3,0,0,0,0,18,17,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,573,        for (int countdown = 10; countdown >= 0; --countdown) {,0,0,0,1,3,0,2,0,0,2,55,5,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,576,            if (lmPar == 0) {,4,1,0,1,3,1,6,2,0,14,17,3,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,579,            double sPar = Math.sqrt(lmPar);,2,0,0,1,2,0,6,0,0,8,31,7,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,580,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,581,                int pj = permutation[j];,10,1,0,1,2,2,0,8,0,22,24,1,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,582,                work1[pj] = sPar * diag[pj];,0,0,0,2,4,0,0,0,0,6,28,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,584,"            determineLMDirection(qy, work1, work2, work3);",4,0,0,1,2,0,10,0,0,15,46,5,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,586,            dxNorm = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,1,2,0,0,5,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,10,1,0,1,3,0,0,0,0,13,32,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,2,0,0,0,0,0,4,0,0,6,15,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,                for (int k = 0; k < rows; ++k) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,4,1,1,4,8,0,10,0,0,29,39,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,                jTj[i][j] = sum;,0,0,0,2,4,0,0,2,0,2,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,                jTj[j][i] = sum;,2,2,1,2,4,0,0,0,0,17,16,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,2,0,0,0,0,0,0,2,0,4,20,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,8,0,1,0,0,1,0,0,0,14,10,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);",6,0,0,1,2,3,0,0,0,9,37,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,    },12,3,1,0,1,0,0,0,0,29,1,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {",0,0,0,0,1,0,0,0,0,1,55,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,96,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },4,0,0,0,1,0,0,0,0,5,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,0,0,1,1,2,1,10,0,0,14,17,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,317,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,325,            final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,10,0,1,1,2,4,0,0,0,16,38,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,332,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,336,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,12,1,0,1,3,0,6,2,0,22,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,342,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,344,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,348,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,367,            data[row][column] = value;,0,0,0,2,4,0,0,0,0,6,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,371,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,372,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,401,        return (data == null) ? 0 : data.length;,0,0,0,1,2,1,0,0,0,4,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,597,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,598,        final double[][] out = new double[nRows][this.getColumnDimension()];,0,0,0,5,10,0,0,0,0,15,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,600,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",12,1,1,4,8,1,20,2,0,48,56,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,617,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,0,0,0,3,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,618,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,            final int m = pivot.length;,6,0,0,0,0,1,0,0,0,7,27,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,            if (b.getRowDimension() != m) {,2,1,0,2,5,0,4,0,0,7,31,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,367,            if (singular) {,12,3,1,1,3,1,0,2,0,23,15,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));,26,6,0,2,4,1,6,4,0,45,65,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,        return (rows * columns <= 4096) ?,4,2,0,1,2,1,0,0,0,6,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,107,        return (data.length * data[0].length <= 4096) ?,0,0,0,2,4,1,0,0,0,7,47,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);",6,5,0,1,2,0,6,0,0,18,60,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,144,        for (int i = 0; i < dimension; ++i) {,0,0,0,1,3,0,0,0,0,4,37,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,145,"            m.setEntry(i, i, 1.0);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,147,        return m;,10,1,1,0,0,1,0,0,0,19,9,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,149,        return objectiveEvaluations;,4,1,0,0,0,1,0,0,0,5,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,154,        return jacobianEvaluations;,2,0,0,0,0,1,0,0,0,2,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,161,    },10,4,0,0,1,0,0,0,0,16,1,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,106,                final double[] luRow = lu[row];,0,0,0,2,4,0,0,0,0,6,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,107,                sum = luRow[col];,2,0,0,1,2,0,0,0,0,3,17,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,108,                for (int i = 0; i < row; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,111,                luRow[col] = sum;,2,0,1,1,2,0,0,0,0,7,17,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,121,                    sum -= luRow[i] * lu[i][col];,4,2,1,3,6,0,0,0,0,17,29,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,157,                lu[row][col] /= luDiag;,2,0,0,2,4,0,0,0,0,3,23,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,638,        return getColumnDimension() == getRowDimension();,2,1,0,2,4,4,4,0,0,10,49,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,68,"        this(matrix, DEFAULT_TOO_SMALL);",0,0,0,1,2,0,0,0,0,3,32,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,79,        throws NonSquareMatrixException {,10,0,0,0,1,0,0,0,0,10,33,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,81,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,85,        final int m = matrix.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,86,        lu = matrix.getData();,0,0,0,1,2,0,0,0,0,3,22,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,87,        pivot = new int[m];,2,1,0,1,2,1,2,0,0,6,19,6,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,88,        cachedL = null;,2,0,0,0,0,0,0,0,0,3,15,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,89,        cachedU = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,90,        cachedP = null;,10,1,0,0,0,0,0,0,0,12,15,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,93,        for (int row = 0; row < m; row++) {,14,2,1,1,3,0,0,0,0,22,35,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,94,            pivot[row] = row;,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,96,        even     = true;,2,0,0,0,0,0,0,0,0,4,16,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,97,        singular = false;,4,0,0,0,0,0,0,0,0,5,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,100,        for (int col = 0; col < m; col++) {,8,1,0,1,3,0,0,0,0,10,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,102,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,105,            for (int row = 0; row < col; row++) {,0,0,1,1,3,0,12,0,0,17,37,1,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,115,            int max = col; // permutation row,10,1,0,0,0,0,4,4,0,23,33,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,116,            double largest = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,42,7,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,117,            for (int row = col; row < m; row++) {,14,1,0,1,3,0,8,4,0,29,37,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,118,                final double[] luRow = lu[row];,2,0,1,2,4,1,0,0,0,7,31,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,119,                sum = luRow[col];,2,0,1,1,2,0,0,0,0,7,17,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,120,                for (int i = 0; i < col; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,123,                luRow[col] = sum;,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,126,                if (Math.abs(sum) > largest) {,0,0,0,2,5,0,0,0,0,7,30,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,127,                    largest = Math.abs(sum);,0,0,0,1,2,0,0,0,0,3,24,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,128,                    max = row;,4,0,1,0,0,0,0,0,0,10,10,3,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,133,            if (Math.abs(lu[max][col]) < singularityThreshold) {,2,0,0,4,9,0,0,0,0,4,52,8,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,139,            if (max != col) {,0,0,0,1,3,0,0,0,0,4,17,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,155,            final double luDiag = lu[col][col];,6,0,0,2,4,0,6,2,0,14,35,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,156,            for (int row = col + 1; row < m; row++) {,0,0,0,1,3,0,0,0,0,4,41,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,227,"        return new Solver(lu, pivot, singular);",6,0,0,1,2,1,0,2,0,8,39,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,248,"        private Solver(final double[][] lu, final int[] pivot, final boolean singular) {",0,0,0,4,9,0,0,0,0,13,80,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,249,            this.lu       = lu;,6,0,0,0,0,0,0,0,0,8,19,0,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,250,            this.pivot    = pivot;,4,0,0,0,0,0,0,0,0,5,22,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,251,            this.singular = singular;,4,0,0,0,0,0,0,0,0,5,25,5,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,252,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,231,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.05556,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,56,        throws IllegalArgumentException {,2,0,0,0,1,0,0,0,0,2,33,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,57,        if (rowDimension < 1 ) {,6,3,0,1,3,0,0,0,0,9,24,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,65,        lu = null;,2,0,0,0,0,1,2,0,0,5,10,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,448,                        return current;,2,0,0,0,0,1,0,0,0,2,15,12,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,241,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,242,            final double residual = residuals[i];,2,0,1,1,2,1,0,0,0,7,37,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,243,            criterion += residual * residual * residualsWeights[i];,6,1,1,1,2,0,0,0,0,12,55,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,245,        return Math.sqrt(criterion / rows);,2,0,0,1,2,1,8,0,0,11,35,8,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,65,81,        return point;,0,0,0,0,0,1,0,0,0,1,13,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,854,        rank = solvedCols;,14,4,0,0,0,0,0,0,0,19,18,3,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,856,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,508,                lmDir[permutation[i]] -= ypk * jacobian[i][pk];,2,1,1,4,8,0,0,0,0,16,47,8,0.02174,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,444,                    if (((Math.abs(actRed) <= costRelativeTolerance) &&,4,2,0,2,6,1,12,2,0,21,51,3,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,525,            lmPar = 0;,2,0,0,0,0,0,0,0,0,3,10,6,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,526,            return;,16,1,1,0,0,2,4,0,0,28,7,1,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,842,                double gamma = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,843,                for (int j = k; j < jacobian.length; ++j) {,12,1,0,1,3,0,0,0,0,14,43,8,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,844,                    gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]];,14,3,1,5,10,1,0,0,0,32,60,3,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,846,                gamma *= betak;,0,0,0,0,0,0,0,0,0,0,15,4,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,847,                for (int j = k; j < jacobian.length; ++j) {,2,0,0,1,3,0,0,0,0,3,43,2,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,848,                    jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk];,0,0,0,5,10,0,0,0,0,15,60,4,0.02083,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,279,            qTy(residuals);,0,0,0,1,2,0,4,0,0,4,15,7,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,283,            for (int k = 0; k < solvedCols; ++k) {,2,0,0,1,3,0,4,0,0,7,38,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,284,                int pk = permutation[k];,2,0,1,1,2,0,0,0,0,6,24,9,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,285,                jacobian[k][pk] = diagR[pk];,0,0,0,3,6,0,0,0,0,9,28,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,288,            if (firstIteration) {,2,0,0,1,3,0,0,0,0,2,21,6,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,292,                xNorm = 0;,2,0,0,0,0,0,0,0,0,3,10,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,293,                for (int k = 0; k < cols; ++k) {,0,0,0,1,3,0,0,0,0,4,32,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,294,                    double dk = jacNorm[k];,2,0,1,1,2,0,0,0,0,6,23,11,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,295,                    if (dk == 0) {,2,1,0,1,3,0,0,0,0,3,14,10,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,298,                    double xk = dk * point[k];,4,1,1,1,2,0,0,0,0,9,26,11,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,299,                    xNorm  += xk * xk;,6,1,0,0,0,0,0,0,0,8,18,10,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,300,                    diag[k] = dk;,2,1,1,1,2,0,0,0,0,15,13,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,302,                xNorm = Math.sqrt(xNorm);,4,0,0,1,2,0,6,0,0,11,25,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,305,                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);,0,0,0,2,4,0,0,0,0,6,81,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,310,            double maxCosine = 0;,2,0,0,0,0,0,0,0,0,2,21,7,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,311,            if (cost != 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,312,                for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,313,                    int    pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,27,11,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,314,                    double s  = jacNorm[pj];,2,0,1,1,2,0,0,0,0,6,24,11,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,315,                    if (s != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,316,                        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,317,                        for (int i = 0; i <= j; ++i) {,10,1,1,1,3,1,0,0,0,17,30,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,318,                            sum += jacobian[i][pj] * residuals[i];,4,1,1,3,6,0,0,0,0,17,38,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,320,"                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));",0,0,0,3,6,0,0,0,0,9,60,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,324,            if (maxCosine <= orthoTolerance) {,0,0,0,1,3,0,0,0,0,4,34,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,330,            for (int j = 0; j < cols; ++j) {,8,1,0,1,3,0,0,0,0,10,32,6,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,331,"                diag[j] = Math.max(diag[j], jacNorm[j]);",4,1,1,4,8,0,4,0,0,25,40,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,335,            for (double ratio = 0; ratio < 1.0e-4;) {,6,1,0,1,3,3,0,0,0,10,41,1,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,338,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,339,                    int pj = permutation[j];,4,0,1,1,2,1,0,4,0,17,24,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,340,                    oldX[pj] = point[pj];,0,0,0,2,4,0,0,0,0,6,21,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,342,                double previousCost = cost;,0,0,0,0,0,0,0,0,0,0,27,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,343,                double[] tmpVec = residuals;,4,0,0,1,2,0,0,0,0,4,28,9,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,344,                residuals = oldRes;,6,1,0,0,0,0,0,0,0,8,19,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,345,                oldRes    = tmpVec;,4,0,0,0,0,0,0,0,0,5,19,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,348,"                determineLMParameter(oldRes, delta, diag, work1, work2, work3);",0,0,0,1,2,0,0,0,0,3,63,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,351,                double lmNorm = 0;,2,0,0,0,0,0,0,0,0,2,18,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,352,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,353,                    int pj = permutation[j];,18,5,1,1,2,0,0,0,0,32,24,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,354,                    lmDir[pj] = -lmDir[pj];,0,0,0,2,4,0,0,0,0,6,23,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,355,                    point[pj] = oldX[pj] + lmDir[pj];,0,0,0,3,6,0,0,0,0,9,33,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,356,                    double s = diag[pj] * lmDir[pj];,0,0,0,2,4,0,0,0,0,6,32,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,357,                    lmNorm  += s * s;,10,2,0,0,0,0,10,0,0,23,17,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,359,                lmNorm = Math.sqrt(lmNorm);,0,0,0,1,2,0,0,0,0,3,27,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,362,                if (firstIteration) {,2,0,0,1,3,0,6,0,0,8,21,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,363,"                    delta = Math.min(delta, lmNorm);",2,0,0,1,2,0,8,0,0,11,32,10,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,367,                updateResidualsAndCost();,2,0,1,1,2,0,2,0,0,7,25,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,368,"                current = new VectorialPointValuePair(point, objective);",0,0,0,1,2,0,0,0,0,3,56,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,371,                double actRed = -1.0;,2,0,0,0,0,0,0,0,0,3,21,9,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,372,                if (0.1 * cost < previousCost) {,0,0,0,1,3,0,0,0,0,4,32,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,373,                    double r = cost / previousCost;,6,1,0,0,0,0,0,0,0,7,31,11,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,374,                    actRed = 1.0 - r * r;,0,0,0,0,0,0,0,0,0,0,21,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,379,                for (int j = 0; j < solvedCols; ++j) {,16,2,0,1,3,0,0,0,0,20,38,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,380,                    int pj = permutation[j];,4,0,1,1,2,3,4,0,0,15,24,1,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,381,                    double dirJ = lmDir[pj];,4,1,1,1,2,0,0,0,0,9,24,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,382,                    work1[j] = 0;,0,0,1,1,2,0,0,0,0,5,13,10,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,383,                    for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,0,0,0,10,30,10,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,384,                        work1[i] += jacobian[i][pj] * dirJ;,18,3,1,3,6,0,0,0,0,34,35,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,387,                double coeff1 = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,388,                for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,389,                    coeff1 += work1[j] * work1[j];,0,0,0,2,4,0,0,0,0,6,30,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,391,                double pc2 = previousCost * previousCost;,6,1,0,0,0,0,0,0,0,7,41,9,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,392,                coeff1 = coeff1 / pc2;,6,1,0,0,0,0,0,0,0,8,22,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,393,                double coeff2 = lmPar * lmNorm * lmNorm / pc2;,10,2,0,0,0,0,0,0,0,12,46,9,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,394,                double preRed = coeff1 + 2 * coeff2;,6,2,0,0,0,0,0,0,0,8,36,9,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,395,                double dirDer = -(coeff1 + coeff2);,6,1,1,1,2,0,0,0,0,10,35,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,398,                ratio = (preRed == 0) ? 0 : (actRed / preRed);,0,0,0,2,4,0,0,0,0,6,46,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,401,                if (ratio <= 0.25) {,8,2,0,1,3,0,4,0,0,15,20,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,410,                    delta = 2 * lmNorm;,6,1,0,0,0,0,4,0,0,13,19,1,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,411,                    lmPar *= 0.5;,0,0,0,0,0,0,0,0,0,0,13,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,415,                if (ratio >= 1.0e-4) {,2,1,0,1,3,0,0,0,0,3,22,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,417,                    firstIteration = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,418,                    xNorm = 0;,2,0,0,0,0,0,0,0,0,3,10,10,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,419,                    for (int k = 0; k < cols; ++k) {,0,0,0,1,3,0,0,0,0,4,32,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,420,                        double xK = diag[k] * point[k];,6,2,1,2,4,0,0,0,0,16,31,1,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,421,                        xNorm    += xK * xK;,8,2,0,0,0,0,0,0,0,11,20,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,423,                    xNorm = Math.sqrt(xNorm);,4,0,0,1,2,0,12,0,0,18,25,1,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,437,                if (checker != null) {,2,1,0,1,3,0,0,0,0,3,22,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,454,                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {,0,0,0,5,11,0,0,0,0,16,83,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,457,                } else if (delta <= 2.2204e-16 * xNorm) {,0,0,0,1,4,0,0,0,0,5,41,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,460,                } else if (maxCosine <= 2.2204e-16)  {,2,1,0,1,4,0,0,0,0,3,38,10,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,465,            },0,0,0,0,1,0,0,0,0,1,1,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,467,        },0,0,0,0,1,0,0,0,0,1,1,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,498,        for (int j = 0; j < rank; ++j) {,8,1,0,1,3,0,0,0,0,10,32,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,499,            lmDir[permutation[j]] = qy[j];,0,0,1,3,6,0,0,0,0,11,30,6,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,501,        for (int j = rank; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,35,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,504,        for (int k = rank - 1; k >= 0; --k) {,8,2,0,1,3,0,0,0,0,11,37,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,505,            int pk = permutation[k];,0,0,0,1,2,0,0,0,0,3,24,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,506,            double ypk = lmDir[pk] / diagR[pk];,2,1,1,2,4,0,0,0,0,11,35,7,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,507,            for (int i = 0; i < k; ++i) {,0,0,0,1,3,0,8,0,0,8,29,5,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,510,            lmDir[pk] = ypk;,2,0,1,1,2,0,0,0,0,7,16,6,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,515,        double dxNorm = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,516,        for (int j = 0; j < solvedCols; ++j) {,10,1,0,1,3,0,0,0,0,12,38,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,517,            int pj = permutation[j];,6,0,1,1,2,0,0,4,0,14,24,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,518,            double s = diag[pj] * lmDir[pj];,0,0,0,2,4,0,0,0,0,6,32,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,519,            work1[pj] = s;,2,0,1,1,2,0,0,0,0,7,14,6,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,520,            dxNorm += s * s;,0,0,0,0,0,0,0,0,0,0,16,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,522,        dxNorm = Math.sqrt(dxNorm);,2,0,0,1,2,0,6,0,0,9,27,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,523,        double fp = dxNorm - delta;,0,0,0,0,0,0,0,0,0,0,27,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,524,        if (fp <= 0.1 * delta) {,10,2,0,1,3,0,6,0,0,20,24,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,864,        for (int k = 0; k < cols; ++k) {,14,2,1,1,3,0,0,0,0,25,32,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,865,            int pk = permutation[k];,0,0,0,1,2,0,0,0,0,3,24,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,866,            double gamma = 0;,2,0,0,0,0,0,6,0,0,8,17,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,867,            for (int i = k; i < rows; ++i) {,6,1,0,1,3,0,0,0,0,7,32,5,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,868,                gamma += jacobian[i][pk] * y[i];,2,1,1,3,6,0,0,0,0,14,32,8,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,870,            gamma *= beta[pk];,4,0,1,1,2,0,4,0,0,13,18,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,871,            for (int i = k; i < rows; ++i) {,14,1,1,1,3,0,0,0,0,23,32,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,872,                y[i] -= gamma * jacobian[i][pk];,10,4,1,3,6,0,8,0,0,37,32,3,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,875,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02041,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,245,"        solvedCols  = Math.min(rows, cols);",0,0,0,1,2,0,0,0,0,3,35,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,246,        diagR       = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,247,        jacNorm     = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,248,        beta        = new double[cols];,2,0,1,1,2,0,16,0,0,21,31,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,249,        permutation = new int[cols];,2,0,1,1,2,0,0,0,0,5,28,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,250,        lmDir       = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,253,        double   delta   = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,254,        double   xNorm   = 0;,8,3,0,0,0,0,0,0,0,11,21,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,255,        double[] diag    = new double[cols];,2,0,1,2,4,0,0,0,0,4,36,5,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,256,        double[] oldX    = new double[cols];,6,0,0,2,4,1,0,2,0,9,36,2,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,257,        double[] oldRes  = new double[rows];,4,0,1,2,4,0,0,0,0,6,36,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,258,        double[] work1   = new double[cols];,4,1,1,2,4,0,0,0,0,7,36,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,259,        double[] work2   = new double[cols];,2,1,1,2,4,0,0,0,0,7,36,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,260,        double[] work3   = new double[cols];,0,0,0,2,4,0,0,0,0,6,36,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,263,        updateResidualsAndCost();,0,0,0,1,2,0,2,0,0,2,25,5,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,266,        lmPar = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,267,        boolean firstIteration = true;,2,0,0,0,0,0,0,0,0,3,30,5,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,268,"        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);",0,0,0,1,2,0,0,0,0,3,80,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,271,            incrementIterationsCounter();,0,0,0,1,2,0,0,0,0,3,29,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,274,            VectorialPointValuePair previous = current;,4,0,0,0,0,0,0,2,0,6,43,6,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,275,            updateJacobian();,0,0,0,1,2,0,2,0,0,2,17,7,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,276,            qrDecomposition();,2,1,1,1,2,0,0,0,0,8,18,8,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,791,        for (int k = 0; k < cols; ++k) {,8,1,0,1,3,0,0,0,0,10,32,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,792,            permutation[k] = k;,0,0,0,1,2,0,0,0,0,3,19,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,793,            double norm2 = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,794,            for (int i = 0; i < jacobian.length; ++i) {,10,1,0,1,3,0,0,0,0,12,43,6,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,795,                double akk = jacobian[i][k];,2,0,1,2,4,0,0,0,0,8,28,9,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,796,                norm2 += akk * akk;,8,1,0,0,0,2,0,8,0,20,19,1,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,798,            jacNorm[k] = Math.sqrt(norm2);,0,0,1,2,4,0,6,0,0,11,30,6,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,802,        for (int k = 0; k < cols; ++k) {,0,0,0,1,3,0,0,0,0,4,32,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,805,            int nextColumn = -1;,2,0,0,0,0,0,0,0,0,3,20,7,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,806,            double ak2 = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,7,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,807,            for (int i = k; i < cols; ++i) {,10,1,0,1,3,0,0,0,0,11,32,5,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,808,                double norm2 = 0;,2,0,0,0,0,0,0,0,0,2,17,9,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,809,                for (int j = k; j < jacobian.length; ++j) {,12,1,0,1,3,0,0,0,0,14,43,8,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,810,                    double aki = jacobian[j][permutation[i]];,0,0,0,3,6,0,0,0,0,9,41,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,811,                    norm2 += aki * aki;,6,1,0,0,0,0,0,0,0,8,19,10,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,813,                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {,0,1,0,3,7,0,12,0,0,13,54,8,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,817,                if (norm2 > ak2) {,12,2,0,1,3,3,0,0,0,17,18,1,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,818,                    nextColumn = i;,24,9,0,0,0,0,0,0,0,35,15,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,819,                    ak2        = norm2;,4,0,0,0,0,0,0,0,0,5,19,10,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,822,            if (ak2 <= qrRankingThreshold) {,0,0,0,1,3,0,0,0,0,4,32,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,826,            int pk                  = permutation[nextColumn];,8,1,0,1,2,0,0,0,0,10,50,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,827,            permutation[nextColumn] = permutation[k];,0,0,1,2,4,0,0,0,0,9,41,6,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,828,            permutation[k]          = pk;,12,3,1,1,2,0,0,0,0,26,29,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,831,            double akk   = jacobian[k][pk];,4,0,1,2,4,0,0,2,0,13,31,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,832,            double alpha = (akk > 0) ? -Math.sqrt(ak2) : Math.sqrt(ak2);,0,0,0,3,6,0,0,0,0,9,60,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,833,            double betak = 1.0 / (ak2 - akk * alpha);,0,0,0,1,2,0,0,0,0,3,41,4,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,834,            beta[pk]     = betak;,2,0,1,1,2,0,0,0,0,7,21,6,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,837,            diagR[pk]        = alpha;,6,2,1,1,2,0,0,0,0,20,25,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,838,            jacobian[k][pk] -= alpha;,2,0,1,2,4,0,0,0,0,9,25,6,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,841,            for (int dk = cols - 1 - k; dk > 0; --dk) {,10,2,0,1,3,0,0,0,0,13,43,6,0.02,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,166,    public LevenbergMarquardtOptimizer() {,0,0,0,1,3,0,0,0,0,4,38,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,169,        setMaxIterations(1000);,0,0,0,1,2,0,2,0,0,2,23,5,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,172,        setConvergenceChecker(null);,0,0,0,1,2,0,2,0,0,3,28,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,173,        setInitialStepBoundFactor(100.0);,0,0,0,1,2,0,2,0,0,2,33,5,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,174,        setCostRelativeTolerance(1.0e-10);,0,0,0,1,2,0,2,0,0,2,34,5,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,175,        setParRelativeTolerance(1.0e-10);,10,1,0,1,2,0,2,0,0,14,33,3,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,176,        setOrthoTolerance(1.0e-10);,0,0,0,1,2,0,6,0,0,6,27,3,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,177,        setQRRankingThreshold(MathUtils.SAFE_MIN);,0,0,0,1,2,0,0,0,0,3,42,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,191,        this.initialStepBoundFactor = initialStepBoundFactor;,2,0,0,0,0,0,0,0,0,3,53,2,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,192,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,201,        this.costRelativeTolerance = costRelativeTolerance;,4,0,0,0,0,0,0,0,0,5,51,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,202,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,212,        this.parRelativeTolerance = parRelativeTolerance;,4,0,0,0,0,0,0,0,0,5,49,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,213,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,223,        this.orthoTolerance = orthoTolerance;,12,1,0,0,0,0,0,0,0,16,37,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,224,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,236,        this.qrRankingThreshold = threshold;,4,0,0,0,0,0,0,0,0,5,36,4,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,237,    },8,1,0,0,1,1,0,0,0,10,1,3,0.01923,0,0,-1
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,65,46,"    public VectorialPointValuePair(final double[] point, final double[] value) {",6,0,0,3,7,3,0,0,0,9,76,2,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,65,47,        this.point = (point == null) ? null : point.clone();,0,0,0,2,4,0,0,0,0,6,52,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,65,48,        this.value = (value == null) ? null : value.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,65,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,184,        ++jacobianEvaluations;,2,0,0,0,0,0,0,0,0,3,22,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,185,        jacobian = jF.value(point);,2,0,0,1,2,0,6,0,0,9,27,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,186,        if (jacobian.length != rows) {,6,1,0,1,3,0,0,0,0,7,30,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,190,        for (int i = 0; i < rows; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,191,            final double[] ji = jacobian[i];,2,0,1,2,4,1,0,0,0,7,32,6,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,192,            final double factor = -Math.sqrt(residualsWeights[i]);,2,0,1,2,4,1,4,0,0,12,54,6,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,193,            for (int j = 0; j < cols; ++j) {,8,1,0,1,3,0,0,0,0,10,32,6,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,194,                ji[j] *= factor;,8,2,0,1,2,0,0,0,0,10,16,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,213,        if (objective.length != rows) {,6,1,0,1,3,0,0,0,0,7,31,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,217,        cost = 0;,0,0,0,0,0,0,0,0,0,0,9,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,218,        int index = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,219,        for (int i = 0; i < rows; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,220,            final double residual = targetValues[i] - objective[i];,10,1,0,2,4,0,8,0,0,19,55,3,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,221,            residuals[i] = residual;,4,0,1,1,2,1,0,0,0,10,24,3,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,222,            cost += residualsWeights[i] * residual * residual;,6,1,1,1,2,0,0,0,0,12,50,6,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,223,            index += cols;,4,0,0,0,0,0,0,0,0,5,14,6,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,225,        cost = Math.sqrt(cost);,2,0,0,1,2,0,6,0,0,9,23,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,227,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01429,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,173,        if (++iterations > maxIterations) {,6,1,0,1,3,1,0,0,0,9,35,1,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,176,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,208,        if (++objectiveEvaluations > maxEvaluations) {,4,1,0,1,3,0,0,0,0,6,46,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,212,        objective = function.value(point);,2,0,0,1,2,0,6,0,0,9,34,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,332,        if (target.length != weights.length) {,8,1,0,1,3,0,0,0,0,9,38,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,338,        iterations           = 0;,2,0,0,0,0,0,4,0,0,7,25,3,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,339,        objectiveEvaluations = 0;,2,0,0,0,0,0,0,0,0,3,25,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,340,        jacobianEvaluations  = 0;,2,0,0,0,0,0,0,0,0,3,25,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,343,        function         = f;,0,0,0,0,0,0,0,0,0,0,21,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,344,        jF               = f.jacobian();,2,0,0,1,2,0,4,0,0,7,32,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,345,        targetValues     = target.clone();,0,0,0,1,2,0,0,0,0,3,34,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,346,        residualsWeights = weights.clone();,2,0,0,1,2,0,4,0,0,7,35,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,347,        this.point       = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,38,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,348,        this.residuals   = new double[target.length];,6,0,0,1,2,0,0,0,0,7,45,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,351,        rows      = target.length;,6,0,0,0,0,0,0,0,0,7,26,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,352,        cols      = point.length;,10,3,0,0,0,0,0,0,0,15,25,3,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,353,        jacobian  = new double[rows][cols];,2,0,1,2,4,0,0,0,0,7,35,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,355,        cost = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,32,4,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,357,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.01408,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,116,    protected AbstractLeastSquaresOptimizer() {,2,0,0,1,3,1,0,0,0,3,43,2,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,117,        setConvergenceChecker(new SimpleVectorialValueChecker());,0,0,0,2,4,0,0,0,0,6,57,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,118,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,12,0,0,12,41,3,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,119,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,124,        this.maxIterations = maxIterations;,12,1,0,0,0,0,0,0,0,15,35,3,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,139,        this.maxEvaluations = maxEvaluations;,6,0,0,0,0,0,0,0,0,7,37,3,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,140,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,159,        this.checker = convergenceChecker;,4,0,0,0,0,0,0,0,0,5,34,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,160,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,50,    public SimpleVectorialValueChecker() {,0,0,0,1,3,0,0,0,0,4,38,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,51,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,52,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,0,0,0,0,0,0,0,0,0,0,52,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0137,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,65,684,        return new RuntimeException() {,0,0,1,1,3,1,4,2,0,8,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,65,692,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",0,0,0,1,2,1,0,0,0,4,74,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,65,698,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",4,0,0,2,4,1,8,0,0,12,84,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,152,        return evaluations;,0,0,0,0,0,1,0,0,0,1,19,4,9.0,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,82,        return iterationCount;,0,0,0,0,0,1,0,0,0,1,22,4,4.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,107,            a = lo;,0,0,0,0,0,0,6,0,0,6,7,9,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,            b = hi;,4,0,0,0,0,0,0,0,0,5,7,6,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,                        d = p / q;,6,0,0,0,0,0,0,0,0,6,10,5,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,                        u = x + d;,2,0,0,0,0,0,0,0,0,3,10,6,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,                        if (u - a < tol2,6,2,0,0,1,0,0,0,0,8,16,13,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,3.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,66,27,public enum GoalType implements Serializable {,0,0,0,0,1,0,0,0,0,1,46,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,66,30,"    MAXIMIZE,",0,0,0,0,0,0,0,0,0,0,9,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,43,    public BrentOptimizer() {,4,0,0,1,3,0,4,8,0,16,25,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,45,        setMaximalIterationCount(100);,0,0,0,1,2,0,0,0,0,3,30,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,46,        setAbsoluteAccuracy(1E-10);,0,0,0,1,2,0,0,0,0,3,27,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,48,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,38,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,0,0,0,2,4,0,0,0,0,6,70,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,60,        clearResult();,0,0,0,1,2,0,2,0,0,2,14,5,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,61,"        return localMin(getGoalType() == GoalType.MINIMIZE,",0,0,0,1,3,1,0,0,0,5,51,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,99,        if (eps <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,102,        if (t <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,106,        if (lo < hi) {,4,1,0,1,3,0,0,0,0,5,14,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,114,        double x = mid;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,115,        double v = x;,0,0,0,0,0,0,0,0,0,0,13,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,116,        double w = x;,6,1,0,0,0,0,0,0,0,7,13,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,117,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,118,        double e = 0;,2,0,0,0,0,0,0,0,0,2,13,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",6,1,0,1,2,0,0,0,0,8,40,11,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,123,        double fv = fx;,0,0,0,0,0,0,0,0,0,0,15,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,124,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,126,        int count = 0;,0,0,0,0,0,0,0,0,0,0,14,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,127,        while (count < maximalIterationCount) {,0,0,0,1,3,0,0,0,0,4,39,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,128,            double m = 0.5 * (a + b);,0,0,0,1,2,0,0,0,0,3,25,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,129,            final double tol1 = eps * Math.abs(x) + t;,0,0,0,1,2,0,0,0,0,3,42,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,130,            final double tol2 = 2 * tol1;,0,0,0,0,0,0,0,0,0,0,29,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,133,            if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {,10,5,0,3,7,0,4,0,0,19,45,6,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,134,                double p = 0;,0,0,0,0,0,0,0,0,0,0,13,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,135,                double q = 0;,2,0,0,0,0,0,0,0,0,2,13,9,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,136,                double r = 0;,6,0,0,0,0,0,0,2,0,8,13,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,137,                double u = 0;,2,0,0,0,0,0,0,0,0,3,13,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,139,                if (Math.abs(e) > tol1) { // Fit parabola.,2,0,0,2,5,0,12,0,0,15,42,8,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,140,                    r = (x - w) * (fx - fv);,0,0,0,2,4,0,0,0,0,6,24,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,141,                    q = (x - v) * (fx - fw);,6,0,0,2,4,0,0,2,0,10,24,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,142,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,0,0,0,20,30,10,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,143,                    q = 2 * (q - r);,0,0,0,1,2,0,0,0,0,3,16,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,145,                    if (q > 0) {,4,0,0,1,3,0,4,0,0,9,12,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,146,                        p = -p;,12,2,0,0,0,0,0,0,0,17,7,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,148,                        q = -q;,10,0,0,0,0,1,0,0,0,11,7,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,151,                    r = e;,0,0,0,0,0,0,0,0,0,0,6,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,152,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,154,                    if (p > q * (a - x),8,3,0,1,3,0,0,0,0,11,19,12,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,172,                        if (x < m) {,0,0,0,1,3,0,0,0,0,4,12,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,173,                            e = b - x;,4,0,0,0,0,0,6,0,0,11,10,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,177,                        d = GOLDEN_SECTION * e;,14,7,0,0,0,0,20,0,0,44,23,0,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,181,                    if (x < m) {,0,0,0,1,3,0,0,0,0,4,12,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,186,                    d = GOLDEN_SECTION * e;,4,0,0,0,0,0,0,0,0,5,23,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,190,                if (Math.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,25,8,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,197,                    u = x + d;,0,0,0,0,0,0,0,0,0,0,10,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,10,1,0,1,3,0,0,0,0,12,36,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,206,                if (fu <= fx) {,0,0,0,1,3,0,0,0,0,4,15,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,207,                    if (u < x) {,12,2,0,1,3,0,0,0,0,14,12,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,208,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,210,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,212,                    v = w;,0,0,0,0,0,0,0,0,0,0,6,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,213,                    fv = fw;,0,0,0,0,0,0,0,0,0,0,8,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,214,                    w = x;,8,0,0,0,0,0,0,0,0,10,6,3,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,215,                    fw = fx;,12,3,0,0,0,1,10,0,0,28,8,1,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,216,                    x = u;,4,0,0,0,0,0,0,0,0,4,6,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,217,                    fx = fu;,0,0,0,0,0,0,0,0,0,0,8,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,237,            } else { // termination,2,0,0,0,2,2,0,0,0,4,23,2,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",16,1,0,2,4,0,6,0,0,25,64,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,239,                return x;,0,0,0,0,0,1,0,0,0,1,9,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,242,        },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,82,    protected AbstractUnivariateRealOptimizer() {},0,0,0,2,4,0,0,0,0,6,46,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,126,        this.result         = x;,4,0,0,0,0,0,0,0,0,5,24,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,127,        this.functionValue  = fx;,0,0,0,0,0,0,0,0,0,0,25,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,128,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,129,        this.resultComputed = true;,2,0,0,0,0,0,0,0,0,4,27,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,130,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,137,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,138,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,142,        this.maxEvaluations = maxEvaluations;,6,1,0,0,0,0,8,0,0,17,37,6,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,143,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,159,        return goal;,0,0,0,0,0,1,0,0,0,1,12,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,193,        if (++evaluations > maxEvaluations) {,4,0,0,1,3,0,6,0,0,11,37,7,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,197,        return f.value(point);,0,0,0,1,2,1,6,0,0,6,22,5,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,78,    protected ConvergingAlgorithmImpl() {},4,0,1,2,4,2,0,0,0,10,38,2,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,87,        absoluteAccuracy = accuracy;,4,0,0,0,0,0,0,0,0,5,28,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,88,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,92,        return absoluteAccuracy;,6,1,0,0,0,2,0,0,0,8,24,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,102,        maximalIterationCount = count;,0,0,0,0,0,0,0,0,0,0,30,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,103,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,117,        relativeAccuracy = accuracy;,0,0,0,0,0,0,0,0,0,0,28,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,118,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,122,        return relativeAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,2.66667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,233,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,2.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,234,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,2.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,105,        if (functionValue == Double.NaN) {,6,1,0,1,3,0,0,0,0,7,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,113,        return functionValue;,2,0,0,0,0,1,0,0,0,2,21,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,80,                                             final RandomGenerator generator) {,0,0,0,0,2,0,0,0,0,2,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,81,        this.optimizer        = optimizer;,4,0,0,0,0,0,0,0,0,5,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,82,        this.totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,26,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,83,        this.starts           = starts;,4,0,0,0,0,0,0,0,0,5,31,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,84,        this.generator        = generator;,0,0,0,0,0,0,0,0,0,0,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,85,        this.optima           = null;,6,1,0,0,0,0,0,0,0,9,29,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,86,        setMaximalIterationCount(Integer.MAX_VALUE);,10,1,0,1,2,0,2,0,0,13,44,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,87,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,88,    },0,0,0,0,1,0,6,0,0,6,1,7,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,152,        this.maxIterations = count;,4,0,0,0,0,0,0,0,0,5,27,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,153,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,157,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,158,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,193,        if (optima == null) {,2,1,0,1,3,0,0,0,0,3,21,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,219,        if (optimaValues == null) {,2,1,0,1,3,0,0,0,0,3,27,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,231,        optima           = new double[starts];,4,0,1,1,2,1,0,0,0,8,38,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,232,        optimaValues     = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,233,        totalIterations  = 0;,0,0,0,0,0,0,0,0,0,0,21,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,234,        totalEvaluations = 0;,0,0,0,0,0,0,0,0,0,0,21,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,237,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,240,                optimizer.setMaximalIterationCount(maxIterations - totalIterations);,6,1,1,1,2,0,0,0,0,14,68,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,241,                optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);,4,1,0,1,2,0,4,0,0,9,63,9,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,242,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,0,0,0,3,6,0,0,0,0,9,82,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,243,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,0,0,0,3,6,0,0,0,0,9,82,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,244,"                optima[i]       = optimizer.optimize(f, goalType,",0,0,1,1,3,0,8,0,0,13,49,8,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,247,                optimaValues[i] = optimizer.getFunctionValue();,0,0,1,2,4,0,4,0,0,9,47,8,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,254,            },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,256,            totalIterations  += optimizer.getIterationCount();,2,0,0,1,2,0,4,0,0,7,50,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,257,            totalEvaluations += optimizer.getEvaluations();,2,0,0,1,2,0,4,0,0,7,47,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,262,        int lastNaN = optima.length;,8,1,0,0,0,0,0,0,0,9,28,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,263,        for (int i = 0; i < lastNaN; ++i) {,10,1,0,1,3,0,0,0,0,12,35,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,264,            if (Double.isNaN(optima[i])) {,2,1,0,3,7,3,8,0,0,14,30,1,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,272,        double currX = optima[0];,2,0,1,1,2,0,0,0,0,4,25,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,273,        double currY = optimaValues[0];,0,0,0,1,2,0,0,0,0,3,31,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,274,        for (int j = 1; j < lastNaN; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,275,            final double prevY = currY;,4,0,0,0,0,1,0,0,0,5,27,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,276,            currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,277,            currY = optimaValues[j];,0,0,1,1,2,0,4,0,0,6,24,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,278,            if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {,10,3,0,3,7,0,0,0,0,13,56,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,301,        if (Double.isNaN(optima[0])) {,0,0,1,3,7,0,4,0,0,6,30,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,66,308,        return optima[0];,0,0,1,1,2,1,0,0,0,2,17,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,66,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,0,0,0,0,1,0,0,0,0,1,75,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,165,                                d = tol1;,4,0,0,0,0,0,0,0,0,5,9,16,1.8,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,164,                            if (x <= m) {,4,1,0,1,3,0,0,0,0,5,13,14,1.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,191,                    if (d >= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,194,                        u = x - tol1;,6,1,0,0,0,0,0,0,0,8,13,12,1.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,220,                        a = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,230,                    } else if (fu <= fv,4,1,0,0,2,0,0,0,0,5,19,13,1.5,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,305,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,306,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,1,0,4,8,0,0,0,0,6,94,0,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",2,0,0,3,6,0,0,0,0,3,82,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,0,0,4,8,0,0,0,0,3,107,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,4,2,0,6,123,5,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",4,1,0,2,4,0,12,0,0,18,108,0,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/LocalizedFormats,66,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,2,0,5,98,0,1.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,43,"        super(100, 1E-10);",0,0,0,1,2,0,0,0,0,3,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,6,1,0,2,4,1,6,0,0,14,70,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,        clearResult();,2,1,0,1,2,0,2,0,0,5,14,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);",8,1,0,1,2,1,0,0,0,10,75,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,        double x = a + GOLDEN_SECTION * (b - a);,16,4,0,1,2,0,0,0,0,20,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,89,        double v = x;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,        double w = x;,12,1,0,0,0,0,0,0,0,14,13,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,        double e = 0;,18,4,0,0,0,3,16,0,0,42,13,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);",24,10,1,1,2,2,6,0,0,47,40,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,93,        if (goalType == GoalType.MAXIMIZE) {,0,0,0,1,3,0,0,0,0,4,36,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,96,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,97,        double fw = fx;,4,1,0,0,0,0,0,0,0,5,15,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,99,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,100,        while (count < maximalIterationCount) {,0,0,0,1,3,0,0,0,0,4,39,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,101,            double m = 0.5 * (a + b);,18,1,0,1,2,0,8,0,0,28,25,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,102,            double tol = eps * Math.abs(x) + t;,6,2,0,1,2,0,8,0,0,16,35,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,103,            double t2 = 2 * tol;,4,1,0,0,0,0,0,0,0,5,20,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,106,            if (Math.abs(x - m) > t2 - 0.5 * (b - a)) {,2,2,0,3,7,0,6,0,0,11,43,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,107,                double p = 0;,10,2,0,0,0,3,0,0,0,15,13,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,108,                double q = 0;,0,0,0,0,0,0,4,0,0,4,13,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,109,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,110,                double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,111,                double u = 0;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,113,                if (Math.abs(e) > tol) { // Fit parabola.,10,1,0,2,5,0,6,0,0,19,41,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,114,                    r = (x - w) * (fx - fv);,4,0,0,2,4,0,4,2,0,11,24,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,115,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,116,                    p = (x - v) * q - (x - w) * r;,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,117,                    q = 2 * (q - r);,6,2,0,1,2,0,0,0,0,9,16,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,119,                    if (q > 0) {,8,2,0,1,3,0,0,0,0,10,12,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,120,                        p = -p;,0,0,0,0,0,0,0,0,0,0,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,122,                        q = -q;,0,0,0,0,0,0,0,0,0,0,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,125,                    r = e;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,126,                    e = d;,6,1,0,0,0,0,0,0,0,8,6,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,129,                if (Math.abs(p) < Math.abs(0.5 * q * r) &&,0,0,0,2,5,0,0,0,0,7,42,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,139,                    e = ((x < m) ? b : a) - x;,16,4,0,2,4,0,16,2,0,40,26,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,140,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,144,                u = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));,0,0,0,5,10,0,0,0,0,15,59,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,145,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,146,                if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,151,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,152,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,153,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,155,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,157,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,158,                    fv = fw;,2,0,1,0,0,0,0,0,0,6,8,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,159,                    w = x;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,160,                    fw = fx;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,161,                    x = u;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,162,                    fx = fu;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,164,                    if (u < x) {,8,1,0,1,3,0,4,0,0,15,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,165,                        a = u;,34,8,1,0,0,5,24,8,0,98,6,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,167,                        b = u;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,169,                    if ((fu <= fw) || (w == x)) {,8,3,0,3,7,0,0,0,0,11,29,10,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,170,                        v = w;,2,0,0,0,0,0,0,0,0,3,6,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,171,                        fv = fw;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,172,                        w = u;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,173,                        fw = fu;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,174,                    } else if ((fu <= fv) || (v == x) || (v == w)) {,0,0,0,4,10,0,0,0,0,14,48,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,175,                        v = u;,8,4,1,0,0,0,0,0,0,25,6,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,176,                        fv = fu;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,179,            } else { // termination,2,0,1,0,2,1,0,0,0,7,23,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,180,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",10,1,0,2,4,0,6,0,0,18,64,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,181,                return x;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,184,            ++count;,6,2,0,0,0,0,0,0,0,9,8,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,185,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,63,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",0,0,0,1,2,0,0,0,0,3,61,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,64,        resultComputed = false;,18,4,0,0,0,0,2,6,0,35,23,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,65,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,0,0,0,1,4,0,0,0,0,5,20,4,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",0,0,0,1,2,0,0,0,0,3,29,4,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,            for (int j = 0; j < solvedCols; ++j) {,2,1,0,1,3,0,0,0,0,3,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,516,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,517,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,518,                for (int i = 0; i < j; ++i) {,8,1,0,1,3,0,0,0,0,10,29,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,519,                    sum += jacobian[i][pj] * work1[permutation[i]];,0,0,0,4,8,0,0,0,0,12,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,521,                double s = (work1[pj] - sum) / diagR[pj];,8,2,1,3,6,1,0,8,0,27,41,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,522,                work1[pj] = s;,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,523,                sum2 += s * s;,0,0,0,0,0,0,0,0,0,0,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,525,            parl = fp / (delta * sum2);,0,0,0,1,2,0,0,0,0,3,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,585,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,586,                int pj = permutation[j];,6,3,0,1,2,0,0,0,0,10,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,587,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,2,2,1,3,6,0,0,0,0,17,42,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,589,            for (int j = 0; j < solvedCols; ++j) {,10,2,0,1,3,0,0,0,0,13,38,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,590,                int pj = permutation[j];,6,0,1,1,2,0,10,0,0,21,24,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,591,                work1[pj] /= work2[j];,2,0,0,2,4,0,0,0,0,2,22,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,592,                double tmp = work1[pj];,2,0,1,1,2,0,0,0,0,6,23,9,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,593,                for (int i = j + 1; i < solvedCols; ++i) {,18,3,0,1,3,0,8,2,0,33,42,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,594,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,0,0,0,4,8,0,0,0,0,12,47,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,597,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,598,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,599,                double s = work1[permutation[j]];,4,0,1,2,4,0,0,2,0,12,33,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,600,                sum2 += s * s;,6,1,0,0,0,0,0,0,0,8,14,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,602,            double correction = fp / (delta * sum2);,8,1,0,1,2,0,0,0,0,10,40,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,605,            if (fp > 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,612,"            lmPar = Math.max(parl, lmPar + correction);",10,2,0,1,2,0,6,2,0,22,43,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,402,                    cost = previousCost;,0,0,0,0,0,0,0,0,0,0,20,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,403,                    for (int j = 0; j < solvedCols; ++j) {,10,1,0,1,3,0,0,0,0,12,38,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,404,                        int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,405,                        point[pj] = oldX[pj];,22,2,0,2,4,1,4,0,0,29,21,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,407,                    tmpVec    = residuals;,0,0,0,0,0,0,0,0,0,0,22,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,408,                    residuals = oldRes;,0,0,0,0,0,0,0,0,0,0,19,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,409,                    oldRes    = tmpVec;,0,0,0,0,0,0,0,0,0,0,19,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,508,        double parl = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,509,        if (rank == solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,529,        sum2 = 0;,8,1,0,0,0,0,0,0,0,10,9,6,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,530,        for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,531,            int pj = permutation[j];,12,2,0,1,2,0,0,0,0,16,24,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,532,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,533,            for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,4,0,0,14,30,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,534,                sum += jacobian[i][pj] * qy[i];,0,0,0,3,6,0,0,0,0,9,31,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,536,            sum /= diag[pj];,0,0,0,1,2,0,0,0,0,3,16,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,537,            sum2 += sum * sum;,0,0,0,0,0,0,0,0,0,0,18,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,539,        double gNorm = Math.sqrt(sum2);,0,0,0,1,2,0,0,0,0,3,31,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,540,        double paru = gNorm / delta;,0,0,0,0,0,0,0,0,0,0,28,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,541,        if (paru == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,548,"        lmPar = Math.min(paru, Math.max(lmPar, parl));",0,0,0,2,4,0,0,0,0,6,46,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,549,        if (lmPar == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,553,        for (int countdown = 10; countdown >= 0; --countdown) {,0,0,0,1,3,0,0,0,0,4,55,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,556,            if (lmPar == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,559,            double sPar = Math.sqrt(lmPar);,0,0,0,1,2,0,0,0,0,3,31,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,560,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,0,0,0,0,2,38,3,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,561,                int pj = permutation[j];,4,0,0,1,2,0,0,0,0,4,24,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,562,                work1[pj] = sPar * diag[pj];,4,1,0,2,4,0,0,0,0,5,28,5,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,564,"            determineLMDirection(qy, work1, work2, work3);",0,0,0,1,2,0,0,0,0,3,46,4,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,566,            dxNorm = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.22222,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,51,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,4,0,0,4,8,0,14,0,0,18,42,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,        for (int i = 0; i < nVars; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,            for (int j = 0; j < nVars; j++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,                    out[i][j] = 0d;,0,0,0,2,4,0,0,0,0,6,15,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));,0,0,0,4,8,0,0,0,0,12,59,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,0,0,4,8,0,0,0,0,12,61,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,        double p0 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);",0,0,0,1,2,0,0,0,0,3,23,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,        double q1 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,        int n = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,1,0,1,3,0,0,0,0,5,54,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,            double p2 = a * p1 + b * p0;,0,0,0,0,0,0,6,0,0,6,28,9,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,6,1,0,0,0,0,0,0,0,9,25,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,            if (infinite) {,0,0,0,1,3,0,0,0,0,4,15,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,14,3,0,0,0,0,0,0,0,18,19,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,            if (Double.isNaN(r)) {,0,0,0,2,5,0,6,0,0,6,22,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,6,1,0,1,2,0,0,0,0,7,38,5,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,            c = p2 / q2;,0,0,0,0,0,0,0,0,0,0,12,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,            q0 = q1;,0,0,0,0,0,0,0,0,0,0,8,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,            q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },2,0,0,0,1,0,0,0,0,3,1,2,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,4,0,0,1,3,0,0,0,0,5,25,10,0.8,0,0,-1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,        return c;,0,0,0,0,0,1,0,0,0,1,9,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,128,        if (x == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,6,0,0,0,0,0,0,0,0,7,10,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,6,2,0,0,0,0,0,0,0,10,20,0,0.8,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,41,    private static final double[] LANCZOS =,0,0,0,1,2,0,0,0,0,3,39,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,10,2,0,1,2,3,4,4,0,23,74,1,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,97,        if (Double.isNaN(x) || (x <= 0.0)) {,0,0,0,3,7,0,0,0,0,10,36,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,102,            double sum = 0.0;,0,0,0,0,0,0,0,0,0,0,17,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,6,1,0,1,3,1,0,0,0,8,46,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,104,                sum = sum + (LANCZOS[i] / (x + i));,0,0,0,3,6,0,0,0,0,9,35,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,8,1,0,0,0,0,0,0,0,10,24,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,8,2,0,3,6,0,0,0,0,11,40,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,69,113,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,0,0,0,8,68,8,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,121,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,0,0,0,4,9,0,0,0,0,13,71,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,2,0,0,3,8,0,2,4,0,8,43,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,54,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,151,            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -,0,0,0,4,9,0,0,0,0,13,60,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,6,0,0,0,0,1,0,0,0,7,11,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,16,5,0,5,11,0,0,0,0,21,69,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,2,2,0,2,4,0,12,0,0,17,45,6,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,10,2,0,0,0,1,0,0,0,12,11,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,54,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,2,0,0,1,3,0,6,2,0,10,25,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,135,                        m = n / 2.0;,0,0,0,0,0,0,0,0,0,0,12,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,136,                        ret = (m * (b - m) * x) /,0,0,0,2,4,0,0,0,0,6,25,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,139,                        m = (n - 1.0) / 2.0;,0,0,0,1,2,0,0,0,0,3,20,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,140,                        ret = -((a + m) * (a + b + m) * x) /,0,0,0,3,6,0,0,0,0,9,36,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,143,                    return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,69,148,                    return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1238,            final int iBlock = row    / BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1239,            final int jBlock = column / BLOCK_SIZE;,4,2,1,0,0,0,0,0,0,10,39,1,0.57143,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0,0,0,2,4,0,0,0,0,6,72,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,6,1,0,2,4,1,0,0,0,8,49,4,0.57143,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,14,2,0,1,2,0,0,0,0,18,32,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,80,        correlationMatrix = computeCorrelationMatrix(matrix);,0,0,0,1,2,0,0,0,0,3,53,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,81,    },2,0,0,0,1,1,6,0,0,10,1,1,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,40,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,188,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",8,1,0,1,2,1,6,2,0,18,57,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,12,2,0,1,3,0,0,0,0,16,29,0,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",2,0,0,3,6,0,8,0,0,11,68,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,192,"              outMatrix.setEntry(i, j, corr);",0,0,0,1,2,0,10,0,0,10,31,9,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,193,"              outMatrix.setEntry(j, i, corr);",0,0,0,1,2,0,10,0,0,10,31,9,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,195,"            outMatrix.setEntry(i, i, 1d);",0,0,0,1,2,0,0,0,0,3,29,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,280,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,4,0,0,0,0,1,0,0,0,5,21,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1255,            final int iBlock = row    / BLOCK_SIZE;,0,0,0,0,0,0,6,0,0,6,39,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,14,5,1,0,0,1,0,0,0,22,39,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0,0,0,2,4,0,0,0,0,6,72,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,8,2,1,2,4,0,0,0,0,15,50,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1264,        },8,1,0,0,1,0,0,0,0,10,1,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },2,1,1,0,1,0,0,0,0,8,1,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,544,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,99,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,5,0,1,2,0,6,0,0,23,55,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,3,0,1,2,0,0,0,0,17,55,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,107,"        blocks = createBlocksLayout(rows, columns);",2,0,0,1,2,0,6,0,0,9,43,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,270,        final double[][] blocks = new double[blockRows * blockColumns][];,0,0,0,4,8,0,0,0,0,12,65,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,271,        int blockIndex = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,273,            final int pStart  = iBlock * BLOCK_SIZE;,8,1,0,0,0,1,4,0,0,15,40,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,56,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,275,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,8,1,0,1,3,0,0,0,0,10,55,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,277,                final int qStart = jBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,58,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,279,                final int jWidth = qEnd - qStart;,0,0,0,0,0,0,0,0,0,0,33,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,280,                blocks[blockIndex] = new double[iHeight * jWidth];,4,1,1,2,4,0,0,0,0,10,50,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,281,                ++blockIndex;,2,0,0,0,0,0,0,0,0,3,13,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,285,        return blocks;,0,0,0,0,0,1,0,0,0,1,14,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1185,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1186,        final double[] out = new double[rows];,2,0,1,2,4,1,0,0,0,5,38,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1189,        final int jBlock  = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,2,0,0,0,0,1,6,2,0,11,49,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1191,        final int jWidth  = blockWidth(jBlock);,2,0,0,1,2,1,4,0,0,7,39,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1192,        int outIndex      = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,2,1,1,3,0,0,0,0,13,52,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1194,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1195,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0,0,0,2,4,0,0,0,0,6,62,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1196,            for (int i = 0; i < iHeight; ++i) {,10,1,0,1,3,1,8,0,0,21,35,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1197,                out[outIndex++] = block[i * jWidth + jColumn];,2,0,0,2,4,3,0,0,0,5,46,2,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1201,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,77,    public PearsonsCorrelation(RealMatrix matrix) {,0,0,0,1,3,0,0,0,0,4,47,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,78,        checkSufficientData(matrix);,0,0,0,1,2,0,4,0,0,4,28,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,227,            for(int i=0; i<xArray.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,228,"                regression.addData(xArray[i], yArray[i]);",0,0,1,3,6,0,4,0,0,12,41,9,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,230,            return regression.getR();,0,0,0,1,2,1,0,0,0,4,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,273,        int nRows = matrix.getRowDimension();,2,0,0,1,2,0,4,0,0,6,37,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,274,        int nCols = matrix.getColumnDimension();,6,0,0,1,2,1,4,0,0,11,40,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,275,        if (nRows < 2 || nCols < 2) {,0,0,0,1,3,0,0,0,0,4,29,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,122,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,123,            xbar = x;,4,0,0,0,0,0,0,0,0,5,9,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,124,            ybar = y;,4,0,0,0,0,0,0,0,0,5,9,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,126,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,127,            double dy = y - ybar;,8,2,0,0,0,0,4,0,0,14,21,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,128,            sumXX += dx * dx * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,129,            sumYY += dy * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,130,            sumXY += dx * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,131,            xbar += dx / (n + 1.0);,6,2,0,1,2,0,0,0,0,9,23,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,132,            ybar += dy / (n + 1.0);,6,1,0,1,2,3,0,2,0,12,23,0,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,134,        sumX += x;,0,0,0,0,0,0,6,0,0,6,10,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,135,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,136,        n++;,2,0,0,0,0,0,0,0,0,3,4,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,138,        if (n > 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,139,            distribution.setDegreesOfFreedom(n - 2);,2,1,0,1,2,0,4,0,0,7,40,7,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,298,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,301,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,8,4,1,2,5,0,6,0,0,25,46,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,337,"        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);",8,3,0,1,2,1,4,0,0,15,51,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,351,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,354,        return sumYY;,2,0,0,0,0,1,0,0,0,2,13,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,432,        double b1 = getSlope();,2,0,0,1,2,0,2,0,0,4,23,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,433,        double result = Math.sqrt(getRSquare());,0,0,0,2,4,0,0,0,0,6,40,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,434,        if (b1 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,437,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,455,        double ssto = getTotalSumSquares();,2,0,0,1,2,0,2,0,0,4,35,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,456,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,55,        throws IllegalArgumentException {,2,0,1,0,1,0,0,0,0,5,33,2,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,56,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,6,0,0,9,27,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,67,    },2,0,1,0,1,0,0,0,0,7,1,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,148,"        super(rows, columns);",4,0,0,1,2,0,0,0,0,4,21,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,149,        this.rows    = rows;,0,0,0,0,0,0,0,0,0,0,20,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,150,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,0,0,0,0,14,55,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,156,        if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,164,        int index = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,2,1,0,1,3,0,6,0,0,9,52,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",10,1,0,1,3,0,0,0,0,13,64,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,4,2,1,3,7,0,4,0,0,14,62,8,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,173,                if (copyArray) {,6,1,1,1,3,0,0,0,0,10,16,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,206,        final int rows         = rawData.length;,8,0,0,0,0,4,0,0,0,12,40,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,207,        final int columns      = rawData[0].length;,4,0,1,1,2,1,0,0,0,7,43,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,212,        for (int i = 0; i < rawData.length; ++i) {,0,0,1,1,3,0,8,0,0,12,42,7,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,213,            final int length = rawData[i].length;,4,0,1,1,2,1,0,0,0,9,37,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,214,            if (length != columns) {,0,0,0,1,3,0,0,0,0,4,24,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,222,        final double[][] blocks = new double[blockRows * blockColumns][];,14,3,0,4,8,1,0,0,0,18,65,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,223,        int blockIndex = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,225,            final int pStart  = iBlock * BLOCK_SIZE;,8,1,0,0,0,4,0,0,0,13,40,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,56,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,227,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0,0,0,1,3,0,0,0,0,4,55,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,229,                final int qStart = jBlock * BLOCK_SIZE;,12,2,0,0,0,1,0,0,0,16,39,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",10,1,0,1,2,1,12,0,0,24,58,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,231,                final int jWidth = qEnd - qStart;,0,0,0,0,0,0,0,0,0,0,33,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,234,                final double[] block = new double[iHeight * jWidth];,6,1,0,2,4,1,0,0,0,8,52,8,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,235,                blocks[blockIndex] = block;,0,0,0,1,2,0,0,0,0,3,27,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,238,                int index = 0;,4,0,0,0,0,0,0,0,0,4,14,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,239,                for (int p = pStart; p < pEnd; ++p) {,0,0,0,1,3,0,0,0,0,4,37,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",2,1,0,2,4,0,0,0,0,3,59,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,241,                    index += jWidth;,4,0,0,0,0,0,0,0,0,5,16,10,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,244,                ++blockIndex;,2,0,0,0,0,0,0,0,0,3,13,8,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,249,        return blocks;,0,0,0,0,0,1,0,0,0,1,14,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1345,        return rows;,0,0,0,0,0,1,0,0,0,1,12,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1351,        return columns;,4,0,0,0,0,4,0,0,0,7,15,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,79,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,14,4,0,1,2,1,0,2,0,20,91,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,81,        setDegreesOfFreedomInternal(degreesOfFreedom);,0,0,0,1,2,0,4,0,0,4,46,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,225,        SimpleRegression regression = new SimpleRegression();,2,0,0,1,2,0,0,4,0,6,53,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,226,        if(xArray.length == yArray.length && xArray.length > 1) {,12,3,0,1,3,0,0,0,0,15,57,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,94,        this(new TDistributionImpl(1.0));,0,0,0,2,4,0,0,0,0,6,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,104,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,65,    private double sumX = 0d;,4,0,0,0,0,1,0,0,0,6,25,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,68,    private double sumXX = 0d;,2,2,0,0,0,0,0,0,0,4,26,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,71,    private double sumY = 0d;,4,0,0,0,0,1,0,0,0,5,25,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,74,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,77,    private double sumXY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,80,    private long n = 0;,4,0,0,0,0,2,2,0,0,8,19,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,83,    private double xbar = 0;,2,0,0,0,0,1,0,0,0,3,24,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,86,    private double ybar = 0;,2,0,0,0,0,1,0,0,0,3,24,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,105,        setDistribution(t);,0,0,0,1,2,0,4,0,0,4,19,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,614,        distribution = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,617,        if (n > 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,620,    },4,0,0,0,1,0,0,0,0,6,1,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,69,39,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,69,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,53,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,47,    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;,6,0,0,0,0,1,0,0,0,7,78,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,69,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,61,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,62,        setDegreesOfFreedomInternal(degreesOfFreedom);,0,0,0,1,2,0,0,0,0,3,46,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,63,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,64,    },6,2,1,0,1,0,0,0,0,11,1,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,71,"        this(degreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,58,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,88,        if (newDegreesOfFreedom <= 0.0) {,6,1,0,1,3,0,0,0,0,8,33,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,93,        this.degreesOfFreedom = newDegreesOfFreedom;,4,0,0,0,0,0,0,0,0,5,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,54,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,55,        correlationMatrix = null;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,56,        nObs = 0;,2,0,0,0,0,0,6,0,0,9,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,68,        this(new BlockRealMatrix(data));,2,0,0,2,4,0,0,2,0,4,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,91,    public PearsonsCorrelation(Covariance covariance) {,4,0,0,1,3,1,0,2,0,7,51,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,92,        RealMatrix covarianceMatrix = covariance.getCovarianceMatrix();,2,0,0,1,2,0,4,2,0,8,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,93,        if (covarianceMatrix == null) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,94,"            throw MathRuntimeException.createIllegalArgumentException(""covariance matrix is null"");",0,0,0,1,2,0,4,0,0,5,87,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,96,        nObs = covariance.getN();,2,0,0,1,2,0,10,0,0,13,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,97,        correlationMatrix = covarianceToCorrelation(covarianceMatrix);,4,0,0,1,2,1,4,0,0,10,62,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,98,    },7,2,1,0,1,0,0,0,0,19,1,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,108,"    public PearsonsCorrelation(RealMatrix covarianceMatrix, int numberOfObservations) {",6,0,0,1,3,1,0,2,0,9,83,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,109,        nObs = numberOfObservations;,10,1,0,0,0,0,12,0,0,25,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,110,        correlationMatrix = covarianceToCorrelation(covarianceMatrix);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,112,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,120,        return correlationMatrix;,0,0,0,0,0,1,0,0,0,1,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,136,        int nVars = correlationMatrix.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,137,        double[][] out = new double[nVars][nVars];,0,0,0,4,8,0,0,0,0,12,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,138,        for (int i = 0; i < nVars; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,139,            for (int j = 0; j < nVars; j++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,140,"                double r = correlationMatrix.getEntry(i, j);",4,0,0,1,2,0,8,0,0,12,44,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,141,                out[i][j] = Math.sqrt((1 - r * r) /(nObs - 2));,12,5,1,5,10,0,4,0,0,28,47,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,144,        return new BlockRealMatrix(out);,0,0,0,1,2,1,0,0,0,4,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,209,       return computeCorrelationMatrix(new BlockRealMatrix(data));,2,0,0,2,4,1,2,2,0,6,59,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,233,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,251,        int nVars = covarianceMatrix.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,252,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",6,0,0,1,2,0,0,4,0,10,57,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,253,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,254,"            double sigma = Math.sqrt(covarianceMatrix.getEntry(i, i));",2,0,0,2,4,0,12,0,0,14,58,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,255,"            outMatrix.setEntry(i, i, 1d);",0,0,0,1,2,0,8,0,0,8,29,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,256,            for (int j = 0; j < i; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,257,"                double entry = covarianceMatrix.getEntry(i, j) /",2,1,0,1,2,0,8,0,0,11,48,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,259,"                outMatrix.setEntry(i, j, entry);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,260,"                outMatrix.setEntry(j, i, entry);",2,0,0,1,2,0,10,0,0,12,32,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,263,        return outMatrix;,2,0,0,0,0,1,8,0,0,10,17,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,276,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,55,    public MathException() {,2,0,0,1,3,1,0,0,0,3,24,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,56,        this.pattern   = null;,2,0,0,0,0,1,0,0,0,3,22,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,57,        this.arguments = new Object[0];,4,1,0,1,2,0,0,2,0,8,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,67,"    public MathException(String pattern, Object ... arguments) {",6,0,0,1,3,1,0,4,0,11,60,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,68,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,69,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,80,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,81,        this.pattern   = getMessage();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,82,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,96,      super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,97,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,98,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,0,0,0,9,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,110,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,112,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,114,                return bundle.getString(s);,0,0,0,1,2,1,6,0,0,6,27,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,119,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,117,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,123,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,133,        return pattern;,4,0,0,0,0,2,2,0,0,7,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,142,        return arguments.clone();,0,0,0,1,2,1,12,0,0,12,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,153,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",0,0,0,4,8,1,0,0,0,13,104,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,159,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,165,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,173,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,174,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,183,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,184,"            PrintWriter pw = new PrintWriter(out, false);",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,185,            printStackTrace(pw);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,187,            pw.flush();,0,0,0,1,2,0,4,0,0,4,11,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,188,        },2,0,0,0,1,0,0,2,0,4,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,69,189,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,158,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,159,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,160,            double dy = y - ybar;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,161,            sumXX -= dx * dx * (double) n / (n - 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,162,            sumYY -= dy * dy * (double) n / (n - 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,163,            sumXY -= dx * dy * (double) n / (n - 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,164,            xbar -= dx / (n - 1.0);,6,2,0,1,2,0,0,0,0,9,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,165,            ybar -= dy / (n - 1.0);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,166,            sumX -= x;,6,0,1,0,0,0,6,0,0,18,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,167,            sumY -= y;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,168,            n--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,1,2,1,8,0,0,8,26,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,4,2,0,1,2,1,0,0,0,6,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,166,        this.resultComputed = false;,0,0,0,0,0,0,0,0,0,0,28,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,167,    },2,0,0,0,1,0,0,0,0,3,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,208,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,79,        clearResult();,6,0,0,1,2,0,12,0,0,19,14,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,80,"        verifyInterval(min,max);",0,0,0,1,2,0,6,0,0,6,24,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,85,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,86,        while (i < maximalIterationCount) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,87,"            m = UnivariateRealSolverUtils.midpoint(min, max);",2,0,0,1,2,0,8,0,0,11,49,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,88,           fmin = f.value(min);,0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,52,"        super(100, 1E-6);",0,1,1,1,2,0,0,0,0,5,17,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,53,    },2,0,0,0,1,0,0,0,0,2,1,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,93,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",12,4,0,1,2,1,0,0,0,17,61,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,94,        this.defaultFunctionValueAccuracy = 1.0e-15;,8,0,0,0,0,0,0,2,0,13,44,0,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,95,        this.functionValueAccuracy = defaultFunctionValueAccuracy;,0,0,0,0,0,0,0,0,0,0,58,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,0,0,0,3,7,0,0,0,0,10,65,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,      initialStep = initialStepSize;,0,0,0,0,0,0,0,0,0,0,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,1,0,0,1,0,4,0,0,5,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,          filteredH = maxStep;,0,0,0,0,0,0,0,0,0,0,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,                x1 = x1 + 0.5 * tolerance;,8,2,1,0,0,0,0,0,0,18,26,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,108,"      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);",0,0,0,1,2,0,0,0,0,3,93,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,109,  },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {",6,0,0,2,5,3,0,0,0,9,77,2,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,109,    previousTime      = Double.NaN;,2,1,0,0,0,0,0,0,0,3,31,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,110,    currentTime       = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,111,    h                 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,112,    interpolatedTime  = Double.NaN;,4,0,0,0,0,2,4,0,0,10,31,1,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,114,    currentState            = y;,4,0,0,0,0,0,0,0,0,5,28,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,115,    interpolatedState       = new double[y.length];,2,0,0,1,2,3,0,4,0,9,47,2,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,116,    interpolatedDerivatives = new double[y.length];,2,0,0,1,2,0,0,0,0,3,47,2,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,118,    finalized         = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,119,    this.forward      = forward;,0,0,0,0,0,0,0,0,0,1,28,7,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,120,    this.dirtyState   = true;,8,0,0,0,0,0,0,0,0,11,25,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,122,  },4,0,0,0,1,0,0,0,0,5,1,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,72,"    super(y, forward);",0,0,0,1,2,0,0,0,0,3,18,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,73,    currentDerivative = yDot;,4,0,0,0,0,3,0,0,0,7,25,1,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,74,  },0,0,0,0,1,0,0,0,0,1,1,4,0.17391,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,71,128,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.16,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,71,109,        return states.isEmpty();,0,0,0,1,2,1,0,0,0,4,24,4,0.16,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,123,"      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);",0,0,0,2,4,0,0,0,0,6,75,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,217,"      interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);",8,1,1,2,4,0,0,2,0,14,75,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator,71,71,"    super(""classical Runge-Kutta"", STATIC_C, STATIC_A, STATIC_B,",0,0,0,0,1,0,0,0,0,1,60,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator,71,73,  },10,0,0,0,1,0,8,0,0,19,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator,71,49,  private static final double[] STATIC_C = {,4,0,0,1,3,0,0,0,0,5,42,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator,71,54,  private static final double[][] STATIC_A = {,18,3,0,2,5,1,2,0,0,26,44,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegrator,71,61,  private static final double[] STATIC_B = {,0,0,0,1,3,0,0,0,0,4,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator,71,64,    public ClassicalRungeKuttaStepInterpolator() {,2,0,0,1,3,2,0,0,0,4,46,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator,71,65,    },0,0,0,0,1,0,10,0,0,10,1,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,336,            } else if (dx <= 0.0) {,0,0,0,1,4,0,0,0,0,5,23,4,0.06897,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,337,                x1 = x1 - 0.5 * tolerance;,0,0,0,0,0,0,0,0,0,0,26,4,0.06897,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,285,"                setResult(x1, i);",0,0,0,1,2,0,0,0,0,3,17,4,0.06349,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,286,                return result;,0,0,1,0,0,1,0,0,0,5,14,8,0.06349,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,314,                    p = -p;,22,2,1,0,0,0,8,4,0,46,7,3,0.06349,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,334,            } else if (dx > 0.0) {,2,1,0,1,4,0,0,0,0,3,22,7,0.06349,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,312,                    p1 = -p1;,4,0,0,0,0,0,4,0,0,9,9,3,0.0597,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,341,                x2 = x0;,6,1,0,0,0,0,6,0,0,15,8,3,0.05479,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,342,                y2 = y0;,0,0,0,0,0,0,0,0,0,0,8,4,0.05479,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,343,                delta = x1 - x0;,8,3,0,0,0,0,10,2,0,26,16,3,0.05479,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,344,                oldDelta = delta;,0,0,0,0,0,0,0,0,0,0,17,4,0.05479,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,334,        if (nextAction == EventHandler.RESET_STATE) {,2,0,1,1,3,0,0,0,0,4,45,7,0.05063,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,337,        pendingEvent      = false;,6,1,0,0,0,0,6,0,0,15,26,0,0.05063,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,338,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.05063,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,340,        return (nextAction == EventHandler.RESET_STATE) ||,10,2,0,1,2,2,0,0,0,14,50,1,0.05063,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,71,262,            return STOP;,4,1,0,0,0,1,0,0,0,5,12,12,0.04819,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,267,                x0 = x1;,10,0,0,0,0,0,0,0,0,12,8,0,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,268,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,269,                x2 = x0;,2,1,1,0,0,1,0,0,0,8,8,6,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,270,                y0 = y1;,0,0,0,0,0,0,0,0,0,0,8,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,271,                y1 = y2;,0,0,0,0,0,0,0,0,0,0,8,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,272,                y2 = y0;,0,0,0,0,0,0,0,0,0,0,8,4,0.04706,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,281,            double dx = x2 - x1;,4,0,0,0,0,0,0,0,0,6,20,8,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,282,            double tolerance =,0,0,0,0,0,0,4,0,0,4,18,5,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,284,            if (Math.abs(dx) <= tolerance) {,2,1,0,2,5,0,6,0,0,9,32,6,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,288,            if ((Math.abs(oldDelta) < tolerance) ||,2,0,0,2,5,0,0,0,0,2,39,4,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,294,                double r3 = y1 / y0;,10,1,0,0,0,0,0,0,0,11,20,3,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,300,                if (x0 == x2) {,4,1,0,1,3,0,4,0,0,10,15,7,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,302,                    p = dx * r3;,6,1,0,0,0,0,0,0,0,8,12,10,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,303,                    p1 = 1.0 - r3;,4,1,0,0,0,0,0,0,0,6,14,10,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,311,                if (p > 0.0) {,2,2,0,1,3,0,10,0,0,14,14,3,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,316,                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||,10,6,0,1,3,0,4,0,0,20,58,8,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,324,                    oldDelta = delta;,6,1,0,0,0,0,0,0,0,8,17,3,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,325,                    delta = p / p1;,0,0,0,0,0,0,0,0,0,0,15,4,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,329,            x0 = x1;,10,0,0,0,0,0,0,2,0,13,8,3,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,330,            y0 = y1;,6,0,0,0,0,0,0,0,0,8,8,3,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,332,            if (Math.abs(delta) > tolerance) {,0,0,0,2,5,0,0,0,0,7,34,4,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,339,            y1 = f.value(x1);,4,1,1,1,2,0,6,0,0,21,17,3,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,340,            if ((y1 > 0) == (y2 > 0)) {,4,3,0,3,7,0,0,0,0,7,27,6,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,346,            i++;,6,2,0,0,0,0,0,0,0,9,4,3,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,347,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04651,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,230,                    if ((Math.abs(root - ta) <= convergence) &&,10,3,0,2,5,0,4,2,0,19,43,3,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,235,                    } else if (Double.isNaN(previousEventTime) ||,0,1,0,1,4,0,6,0,0,7,45,11,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,237,                        pendingEventTime = root;,10,1,0,0,0,1,6,0,0,19,24,3,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,238,                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {,0,0,0,3,7,0,0,0,0,10,71,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,247,                        pendingEvent = true;,2,0,0,0,0,0,0,0,0,4,20,13,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,248,                        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,282,        return pendingEventTime;,2,0,0,0,0,1,0,0,0,2,24,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,301,            previousEventTime = t;,0,0,0,0,0,0,0,0,0,0,22,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,302,            g0Positive        = increasing;,4,0,0,0,0,0,0,0,0,5,31,6,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,303,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));",0,0,0,2,4,0,6,0,0,6,73,5,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,71,153,                    if (first == null) {,2,0,0,1,3,2,0,2,0,6,20,2,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,71,154,                        first = state;,0,0,0,0,0,0,0,0,0,0,14,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,71,187,        return (first == null) ? Double.NaN : first.getEventTime();,6,1,0,2,4,1,4,0,0,11,59,5,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/CombinedEventsManager,71,217,                return true;,2,0,1,0,0,1,0,0,0,6,12,13,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,234,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,71,141,        this.result         = newResult;,4,0,0,0,0,0,0,0,0,5,32,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,71,142,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,71,143,        this.resultComputed = true;,2,0,0,0,0,0,0,0,0,4,27,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,71,144,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04598,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,214,                    final UnivariateRealFunction f = new UnivariateRealFunction() {,2,0,0,1,3,1,0,4,0,7,63,10,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,217,                                interpolator.setInterpolatedTime(t);,0,0,0,1,2,0,0,0,0,3,36,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,218,"                                return handler.g(t, interpolator.getInterpolatedState());",2,0,0,2,4,1,10,2,0,15,57,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,191,                    if (ga * gb > 0) {,4,2,0,1,3,0,0,0,0,6,18,10,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,212,                    increasing = gb >= ga;,6,1,0,0,0,0,0,0,0,8,22,10,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,214,                    final UnivariateRealFunction f = new UnivariateRealFunction() {,2,0,0,1,3,1,0,4,0,7,63,10,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,226,                    final BrentSolver solver = new BrentSolver();,0,0,0,1,2,0,0,0,0,3,45,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,227,                    solver.setAbsoluteAccuracy(convergence);,0,0,0,1,2,0,6,0,0,6,40,11,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,228,                    solver.setMaximalIterationCount(maxIterationCount);,0,0,0,1,2,0,6,0,0,6,51,11,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,229,"                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);",6,1,0,3,6,1,20,0,0,28,83,10,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,71,42,public class EventState {,0,0,0,0,1,0,0,0,0,1,25,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,72,"        super(DEFAULT_MAXIMUM_ITERATIONS, DEFAULT_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,6,0,0,13,61,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,73,    },6,2,0,0,1,0,0,0,0,8,1,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,199,        clearResult();,4,0,0,1,2,0,2,4,0,10,14,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,0,0,0,2,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,230,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,102,        clearResult();,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",6,0,0,1,2,0,0,2,0,8,34,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,106,        double yInitial = f.value(initial);,0,0,0,1,2,0,0,0,0,3,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,113,        double yMin = f.value(min);,6,0,0,1,2,3,0,0,0,9,27,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,180,            if (Math.abs(yMin) <= functionValueAccuracy) {,18,2,0,2,5,0,22,0,0,45,46,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,183,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,72,83,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,247,"                setResult(x1, i);",0,0,0,1,2,0,6,0,0,6,17,9,0.01124,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,248,                return result;,10,1,0,0,0,1,0,4,0,15,14,4,0.01124,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,236,                x0 = x1;,20,5,0,0,0,0,0,0,0,27,8,3,0.0087,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,237,                x1 = x2;,6,5,1,0,0,1,0,0,0,16,8,6,0.0087,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,238,                x2 = x0;,2,0,0,0,0,0,0,0,0,2,8,4,0.0087,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,239,                y0 = y1;,2,1,0,0,0,0,0,0,0,3,8,4,0.0087,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,240,                y1 = y2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0087,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,241,                y2 = y0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0087,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,141,        this.result         = newResult;,4,0,0,0,0,0,0,0,0,5,32,4,0.00847,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,142,        this.iterationCount = iterationCount;,0,0,0,0,0,0,0,0,0,0,37,4,0.00847,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,143,        this.resultComputed = true;,0,0,0,0,0,0,0,0,0,0,27,4,0.00847,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,12,3,0,2,4,1,0,0,0,16,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,3,6,0,0,11,41,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,230,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,        clearResult();,2,0,0,1,2,0,0,0,0,2,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,103,"        verifySequence(min, initial, max);",0,0,0,1,2,0,8,0,0,8,34,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,106,        double yInitial = f.value(initial);,0,0,0,1,2,0,10,0,0,10,35,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,113,        double yMin = f.value(min);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,0,0,0,3,46,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,4,2,0,1,3,0,0,0,0,6,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,125,        double yMax = f.value(max);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,10,2,0,2,5,0,0,0,0,13,46,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,132,        if (yInitial * yMax < 0) {,8,1,0,1,3,0,0,2,0,11,26,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,184,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,176,            if (Math.abs(yMin) <= functionValueAccuracy) {,0,0,0,2,5,0,0,0,0,7,46,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,179,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,286,                    delta = 0.5 * dx;,12,1,0,0,0,1,12,2,0,30,17,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,287,                    oldDelta = delta;,4,0,0,0,0,0,0,0,0,5,17,10,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,73,305,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,73,305,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,0,0,5,39,4,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,300,                x1 = x1 + 0.5 * tolerance;,4,1,1,0,0,0,0,0,0,10,26,10,0.02632,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,250,"                setResult(x1, i);",0,0,0,1,2,0,6,0,0,6,17,9,0.01111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,251,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.01111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,299,            } else if (dx > 0.0) {,6,1,0,1,4,0,0,0,0,7,22,3,0.01111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,277,                    p1 = -p1;,4,0,0,0,0,0,0,0,0,6,9,10,0.01053,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,298,                x1 = x1 + delta;,6,1,0,0,0,0,0,0,0,8,16,8,0.01,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,306,                x2 = x0;,6,0,0,0,0,0,0,0,0,7,8,3,0.0098,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,307,                y2 = y0;,4,2,0,0,0,0,0,0,0,6,8,4,0.0098,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,308,                delta = x1 - x0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0098,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,309,                oldDelta = delta;,4,0,0,0,0,0,0,0,0,5,17,8,0.0098,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,232,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.00862,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,          filteredH = maxStep;,0,0,0,0,0,0,0,0,0,0,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,                    final double factor = computeStepGrowShrinkFactor(error);,0,0,0,1,2,0,0,0,0,3,57,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",12,4,0,1,2,0,4,0,0,23,53,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,                        final double dt = manager.getEventTime() - stepStart;,0,0,0,1,2,0,0,0,0,3,53,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,                        if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,0,0,3,7,0,0,0,0,10,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,                            hNew = dt;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,6,0,0,0,2,2,6,12,0,26,8,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,8,2,0,0,0,0,6,0,0,17,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,        return stopTime;,0,0,0,0,0,1,0,0,0,1,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,14,0,0,14,31,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,12,0,0,15,41,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,2,0,1,2,2,20,0,0,37,58,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,16,7,0,1,3,0,0,0,0,23,32,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,6,0,1,2,4,1,0,0,0,12,30,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,12,1,0,1,3,0,0,0,0,15,35,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,10,1,0,1,2,1,0,0,0,12,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,6,1,0,1,2,1,6,0,0,14,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,        interpolator.rescale(hNew);,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,        boolean lastStep = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,1,1,1,3,0,6,0,0,22,19,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,2,0,0,1,2,2,4,4,0,12,21,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,6,2,0,1,3,0,16,0,0,24,34,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,                stepSize = hNew;,0,0,0,0,0,0,0,0,0,0,16,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,6,4,0,1,2,0,14,0,0,24,42,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",6,0,0,2,4,0,14,0,0,21,77,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",2,0,0,1,2,0,6,0,0,8,40,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,                final double[] predictedScaled = new double[y0.length];,0,0,0,2,4,0,0,0,0,6,55,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,                for (int j = 0; j < y0.length; ++j) {,0,0,0,1,3,0,0,0,0,4,37,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,2,1,1,2,4,0,0,0,0,12,40,10,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);",0,0,0,1,2,0,8,0,0,8,72,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,270,"                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));",0,0,0,2,4,0,0,0,0,6,83,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,                if (error <= 1.0) {,2,1,0,1,3,0,0,0,0,3,19,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",4,0,0,1,2,0,8,0,0,13,40,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,                    final double[] correctedScaled = new double[y0.length];,0,0,0,2,4,0,0,0,0,6,55,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,                    for (int j = 0; j < y0.length; ++j) {,14,1,0,1,3,0,2,0,0,18,37,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,6,1,1,2,4,1,4,0,0,26,40,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);",2,1,0,1,2,0,14,0,0,17,81,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);",4,0,0,1,2,0,0,0,0,4,79,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,286,                    interpolatorTmp.storeTime(stepStart);,0,0,0,1,2,0,6,0,0,6,37,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,                    interpolatorTmp.shift();,0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,288,                    interpolatorTmp.storeTime(stepEnd);,0,0,0,1,2,0,6,0,0,6,35,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,                    if (manager.evaluateStep(interpolatorTmp)) {,0,0,0,2,5,0,0,0,0,7,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,14,1,1,0,0,0,0,0,0,24,28,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,                        nordsieck = nordsieckTmp;,0,0,0,0,0,0,0,0,0,0,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);",0,0,0,1,2,0,0,0,0,3,64,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,                        loop = false;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,307,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,314,            },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,317,            final double nextStep = stepStart + stepSize;,0,0,0,0,0,0,0,0,0,0,45,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,318,"            System.arraycopy(yTmp, 0, y, 0, n);",0,0,0,1,2,0,10,0,0,10,35,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,319,            interpolator.storeTime(nextStep);,0,0,0,1,2,0,0,0,0,3,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,320,"            manager.stepAccepted(nextStep, y);",0,0,0,1,2,0,8,0,0,8,34,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,            for (StepHandler handler : stepHandlers) {,0,0,0,1,3,0,0,0,0,4,42,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,325,                interpolator.setInterpolatedTime(nextStep);,0,0,0,1,2,0,6,0,0,6,43,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);",4,0,0,1,2,0,8,0,0,13,43,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,            },4,0,0,0,1,3,0,2,0,9,1,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,            stepStart = nextStep;,0,0,0,0,0,0,0,0,0,0,21,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {",6,1,0,2,5,1,8,0,0,17,47,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,14,2,1,1,3,0,10,0,0,32,17,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,343,"                stepSize = filterStep(stepSize, forward, true);",0,0,0,1,2,0,0,0,0,3,47,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,2,0,0,1,2,1,4,0,0,7,62,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,14,2,0,0,0,1,10,2,0,31,45,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,12,2,0,0,0,1,0,0,0,16,47,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,2,0,0,2,4,0,0,0,0,2,65,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,350,"                hNew = filterStep(scaledH, forward, nextIsLast);",0,0,0,1,2,0,0,0,0,3,48,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,                interpolator.rescale(hNew);,10,1,0,1,2,0,8,0,0,21,27,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,        },4,1,0,0,1,0,0,0,0,5,1,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,390,"        public Corrector(final double[] previous, final double[] scaled, final double[] state) {",4,0,0,4,9,0,0,0,0,4,88,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,2,0,1,0,0,0,0,0,0,5,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,2,0,0,0,0,0,6,4,0,12,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,20,3,1,1,2,3,4,0,0,41,30,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,395,        },6,1,0,0,1,0,4,0,0,11,1,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,400,"            Arrays.fill(after, 0.0);",0,0,0,1,2,0,6,0,0,6,24,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,401,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,406,            if ((row & 0x1) == 0) {,2,2,0,2,5,0,4,0,0,8,23,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,407,                after[column] -= value;,2,0,1,1,2,0,10,0,0,17,23,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,409,                after[column] += value;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,411,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,424,            double error = 0;,4,0,0,0,0,0,0,0,0,5,17,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,425,            for (int i = 0; i < after.length; ++i) {,10,1,0,1,3,0,0,0,0,12,40,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,426,                after[i] += previous[i] + scaled[i];,2,0,0,3,6,1,0,2,0,5,36,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",4,0,1,5,10,1,12,0,0,27,74,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,428,                final double tol = (vecAbsoluteTolerance == null) ?,0,0,0,1,2,0,0,0,0,3,51,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,431,                final double ratio  = (after[i] - before[i]) / tol;,0,0,0,3,6,0,0,0,0,9,51,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,23,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,435,            return Math.sqrt(error / after.length);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,176,"        super(""Adams-Moulton"", nSteps, nSteps + 1, minStep, maxStep,",8,1,0,0,1,0,0,0,0,10,60,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,210,        setEquations(equations);,0,0,0,1,2,0,4,0,0,4,24,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,211,        resetEvaluations();,0,0,0,1,2,0,2,0,0,2,19,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,212,        final boolean forward = t > t0;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,215,        if (y != y0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,216,"            System.arraycopy(y0, 0, y, 0, n);",6,1,0,1,2,1,10,0,0,18,33,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,218,        final double[] yDot = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,219,        final double[] yTmp = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,222,        final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,79,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,223,"        interpolator.reinitialize(y, forward);",0,0,0,1,2,0,0,0,0,3,38,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,224,        final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,82,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,225,"        interpolatorTmp.reinitialize(yTmp, forward);",2,0,0,1,2,0,8,0,0,10,44,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,228,        for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,229,            handler.reset();,0,0,0,1,2,0,4,0,0,4,16,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,230,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,231,"        CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",2,0,0,1,2,0,8,2,0,12,80,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,235,"        start(t0, y, t);",0,0,0,1,2,0,8,0,0,8,16,5,0.25,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,208,        final int n = y0.length;,0,0,0,0,0,0,0,0,0,0,24,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,209,"        sanityChecks(equations, t0, y0, t, y);",0,0,0,1,2,0,12,0,0,12,38,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,292,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,294,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,295,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,296,        final int nSum = this.getColumnDimension();,2,0,0,1,2,1,2,0,0,5,43,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,297,        final double[][] outData = new double[nRows][nCols];,4,0,1,4,8,2,0,2,0,16,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,298,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,299,            final double[] dataRow    = data[row];,0,0,0,2,4,0,0,0,0,6,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,300,            final double[] outDataRow = outData[row];,2,0,1,2,4,1,0,0,0,7,41,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,301,            for (int col = 0; col < nCols; col++) {,0,0,0,1,3,0,8,0,0,8,39,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,302,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,303,                for (int i = 0; i < nSum; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,304,                    sum += dataRow[i] * m.data[i][col];,12,3,1,3,6,0,0,0,0,26,35,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,306,                outDataRow[col] = sum;,6,0,1,1,2,0,0,0,0,12,22,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,310,"        return new Array2DRowRealMatrix(outData, false);",8,0,0,1,2,1,0,2,0,13,48,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,328,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,420,        return (data == null) ? 0 : data.length;,0,0,0,1,2,1,0,0,0,4,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,426,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,6,0,0,6,66,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,103,                    sum = sum.subtract(luRow[i].multiply(lu[i][col]));,2,0,1,5,10,0,6,0,0,19,50,10,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,650,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,656,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,153,        return evaluations;,2,0,0,0,0,1,0,0,0,2,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,127,        this.referenceTime = time;,12,2,0,0,0,0,0,0,0,16,26,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,128,        this.scalingH      = stepSize;,2,0,0,0,0,1,0,4,0,7,30,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,129,        this.scaled        = scaledDerivative;,4,0,0,0,0,0,0,0,0,5,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,130,        this.nordsieck     = nordsieckVector;,2,0,0,0,0,0,0,0,0,2,37,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,133,        setInterpolatedTime(getInterpolatedTime());,0,0,0,2,4,0,4,0,0,4,43,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,135,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,144,        final double ratio = stepSize / scalingH;,6,1,0,0,0,1,0,0,0,8,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,145,        for (int i = 0; i < scaled.length; ++i) {,10,1,0,1,3,0,0,0,0,12,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,146,            scaled[i] *= ratio;,2,0,1,1,2,0,0,0,0,7,19,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,149,        final double[][] nData = nordsieck.getDataRef();,2,0,0,3,6,1,4,0,0,7,48,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,150,        double power = ratio;,4,0,0,0,0,0,0,0,0,4,21,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,151,        for (int i = 0; i < nData.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,152,            power *= ratio;,6,1,1,0,0,0,0,0,0,12,15,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,153,            final double[] nDataI = nData[i];,2,0,1,2,4,1,10,0,0,17,33,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,154,            for (int j = 0; j < nDataI.length; ++j) {,0,0,0,1,3,0,0,0,0,4,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,155,                nDataI[j] *= power;,0,0,0,1,2,0,0,0,0,3,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,159,        scalingH = stepSize;,4,0,0,0,0,0,0,0,0,5,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,188,        final double x = interpolatedTime - referenceTime;,0,0,0,0,0,0,0,0,0,0,50,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,189,        final double normalizedAbscissa = x / scalingH;,0,0,0,0,0,0,0,0,0,0,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,191,"        Arrays.fill(stateVariation, 0.0);",2,0,0,1,2,3,6,2,0,13,33,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,192,"        Arrays.fill(interpolatedDerivatives, 0.0);",0,0,0,1,2,0,0,0,0,3,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,196,        final double[][] nData = nordsieck.getDataRef();,0,0,0,3,6,0,0,0,0,9,48,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,197,        for (int i = nData.length - 1; i >= 0; --i) {,10,2,0,1,3,0,0,0,0,13,45,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,198,            final int order = i + 2;,12,3,0,0,0,1,0,0,0,16,24,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,199,            final double[] nDataI = nData[i];,2,0,1,2,4,1,0,0,0,7,33,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,200,"            final double power = Math.pow(normalizedAbscissa, order);",0,0,0,1,2,0,0,0,0,3,57,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,201,            for (int j = 0; j < nDataI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,41,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,202,                final double d = nDataI[j] * power;,0,0,0,1,2,0,0,0,0,3,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,203,                stateVariation[j]          += d;,6,0,1,1,2,0,8,0,0,25,32,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,204,                interpolatedDerivatives[j] += order * d;,4,1,1,1,2,0,0,0,0,10,40,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,208,        for (int j = 0; j < currentState.length; ++j) {,10,1,0,1,3,0,0,0,0,12,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,209,            stateVariation[j] += scaled[j] * normalizedAbscissa;,2,1,1,2,4,0,0,0,0,12,52,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,210,            interpolatedState[j] = currentState[j] + stateVariation[j];,0,1,1,3,6,0,0,0,0,14,59,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,211,            interpolatedDerivatives[j] =,0,0,1,1,2,0,0,0,0,5,28,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,215,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,225,        } catch (DerivativeException de) {,2,0,0,1,4,0,0,2,0,4,34,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,226,            if (!(de instanceof InitializationCompletedMarkerException)) {,0,0,0,2,5,0,0,0,0,7,62,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,233,        starter.clearStepHandlers();,0,0,0,1,2,0,4,0,0,4,28,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,235,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,293,"        return Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp)));",2,1,0,3,6,1,20,0,0,23,82,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,59,public abstract class MultistepIntegrator extends AdaptiveStepsizeIntegrator {,2,0,0,0,1,2,0,2,0,6,78,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,324,            final double prev = interpolator.getPreviousTime();,2,0,0,1,2,1,4,0,0,7,51,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,325,            final double curr = interpolator.getCurrentTime();,2,0,0,1,2,1,4,0,0,7,50,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,326,            stepStart = prev;,4,0,0,0,0,0,0,0,0,5,17,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,327,            stepSize  = (curr - prev) / (nSteps + 1);,0,0,0,2,4,0,0,0,0,6,41,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,330,            interpolator.setInterpolatedTime(prev);,0,0,0,1,2,0,6,0,0,6,39,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,331,            scaled = interpolator.getInterpolatedDerivatives().clone();,4,0,0,2,4,0,6,0,0,12,59,0,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,332,            for (int j = 0; j < n; ++j) {,8,1,0,1,3,0,0,0,0,10,29,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,333,                scaled[j] *= stepSize;,2,0,1,1,2,0,2,0,0,9,22,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,337,            final double[][] multistep = new double[nSteps][];,2,0,1,4,8,1,0,0,0,5,50,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,338,            for (int i = 1; i <= nSteps; ++i) {,8,1,0,1,3,0,0,0,0,10,35,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,339,                interpolator.setInterpolatedTime(prev + stepSize * i);,6,0,0,1,2,0,0,0,0,6,54,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,340,                final double[] msI = interpolator.getInterpolatedDerivatives().clone();,2,0,0,3,6,1,6,0,0,9,71,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,341,                for (int j = 0; j < n; ++j) {,8,1,0,1,3,0,0,0,0,10,29,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,342,                    msI[j] *= stepSize;,0,0,0,1,2,0,0,0,0,3,19,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,344,                multistep[i - 1] = msI;,4,1,1,1,2,0,0,0,0,8,23,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,346,"            nordsieck = initializeHighOrderDerivatives(scaled, multistep);",2,0,0,1,2,0,6,0,0,9,62,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,349,            throw new InitializationCompletedMarkerException();,0,0,0,1,2,0,0,2,0,2,51,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,374,            super((Throwable) null);,0,0,0,2,4,0,0,2,0,3,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,375,        },2,0,0,0,1,3,0,0,0,5,1,2,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,262,        for (int i = 0; i < multistep.length; ++i) {,12,1,0,1,3,1,8,0,0,23,44,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,263,            final double[] msI = multistep[i];,2,0,1,2,4,1,0,0,0,7,34,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,264,            for (int j = 0; j < first.length; ++j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,265,                msI[j] -= first[j];,0,0,1,2,4,0,0,0,0,9,19,8,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,268,"        return initialization.multiply(new Array2DRowRealMatrix(multistep, false));",10,1,0,2,4,1,4,2,0,19,75,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,283,        return update.multiply(highOrder);,0,0,0,1,2,1,10,0,0,10,34,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,302,        final double[][] data = highOrder.getDataRef();,2,0,0,3,6,1,4,0,0,7,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,303,        for (int i = 0; i < data.length; ++i) {,30,10,0,1,3,0,0,0,0,42,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,304,            final double[] dataI = data[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,305,            final double c1I = c1[i];,2,0,1,1,2,1,0,0,0,7,25,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,306,            for (int j = 0; j < dataI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,40,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,307,                dataI[j] += c1I * (start[j] - end[j]);,0,0,0,4,8,0,0,0,0,12,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsNordsieckTransformer,74,310,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,94,"        return transformer.initializeHighOrderDerivatives(first, multistep);",0,0,0,1,2,1,8,0,0,8,68,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,109,        return transformer.updateHighOrderDerivativesPhase1(highOrder);,0,0,0,1,2,1,0,0,0,4,63,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,128,"        transformer.updateHighOrderDerivativesPhase2(start, end, highOrder);",0,0,0,1,2,0,10,0,0,10,68,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,129,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/ode/DerivativeException,74,48,    super(cause);,14,4,0,1,2,0,0,0,0,19,13,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/ode/DerivativeException,74,49,  },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,97,        stepHandlers.clear();,0,0,0,1,2,0,4,0,0,4,21,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,74,98,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,72,    public NordsieckStepInterpolator() {,2,0,0,1,3,1,0,0,0,3,36,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,73,    },0,0,0,0,1,0,4,0,0,4,1,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,110,"        super.reinitialize(y, forward);",6,0,0,1,2,0,0,0,0,6,31,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,111,        stateVariation = new double[y.length];,6,0,0,1,2,0,0,0,0,7,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/NordsieckStepInterpolator,74,112,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,112,"        super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",10,0,0,1,2,0,0,0,0,10,76,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,114,        if (nSteps <= 0) {,6,1,1,1,3,3,0,2,0,16,18,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,120,"        starter = new DormandPrince853Integrator(minStep, maxStep,",6,0,0,0,1,0,0,2,0,9,58,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,123,        this.nSteps = nSteps;,4,0,0,0,0,0,0,0,0,5,21,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,125,        exp = -1.0 / order;,4,1,0,0,0,0,0,0,0,7,19,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,128,        setSafety(0.9);,0,0,0,1,2,0,2,0,0,2,15,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,129,        setMinReduction(0.2);,0,0,0,1,2,0,2,0,0,2,21,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,130,"        setMaxGrowth(Math.pow(2.0, -exp));",2,0,0,2,4,0,6,0,0,9,34,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,132,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,215,        starter.clearEventHandlers();,0,0,0,1,2,0,0,0,0,3,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,216,        starter.clearStepHandlers();,0,0,0,1,2,0,4,0,0,4,28,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,219,        starter.addStepHandler(new NordsieckInitializer(y0.length));,4,0,0,2,4,0,4,2,0,10,60,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,223,"            starter.integrate(new CountingDifferentialEquations(y0.length),",4,0,0,1,3,0,4,2,0,10,63,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,316,        public NordsieckInitializer(final int n) {,4,0,0,1,3,2,0,0,0,6,42,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,317,            this.n = n;,4,0,0,0,0,0,0,0,0,5,11,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,318,        },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,355,            return true;,0,0,0,0,0,1,0,0,0,1,12,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,361,        },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,388,        public CountingDifferentialEquations(final int dimension) {,6,0,1,1,3,3,0,0,0,13,59,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,389,            this.dimension = dimension;,0,0,0,0,0,0,0,0,0,0,27,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,390,        },4,1,1,0,1,1,0,0,0,10,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,395,"            MultistepIntegrator.this.computeDerivatives(t, y, dot);",2,0,0,1,2,0,8,0,0,10,55,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,396,        },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/MultistepIntegrator,74,400,            return dimension;,2,0,0,0,0,1,0,0,0,2,17,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,55,"        super(name, nSteps, order, minStep, maxStep,",20,1,0,0,1,0,0,0,0,22,44,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,57,        transformer = AdamsNordsieckTransformer.getInstance(nSteps);,6,1,0,1,2,0,4,0,0,12,60,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsIntegrator,74,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/MathException,74,80,        super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/MathException,74,81,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/MathException,74,82,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/MathException,74,83,    },4,0,0,0,1,0,0,0,0,4,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/MathException,74,153,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",4,1,0,4,8,1,10,2,0,20,104,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/MathException,74,159,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,288,          final double oneMinusThetaH = currentTime - interpolatedTime;,6,2,1,0,0,1,0,0,0,16,61,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,289,          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;,10,3,0,2,4,1,0,0,0,14,61,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,290,"          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);",0,0,0,1,2,0,0,0,0,3,62,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,74,291,          dirtyState = false;,2,0,0,0,0,0,0,0,0,4,19,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,42,    public DefaultFieldMatrixChangingVisitor(final T zero) {,0,0,0,1,3,0,0,0,0,4,56,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,43,        this.zero = zero;,4,0,0,0,0,0,0,0,0,5,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor,74,59,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,721,            super(BigFraction.ZERO);,4,0,0,1,2,0,0,0,0,4,24,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,722,        },0,0,0,0,1,0,2,0,0,2,1,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,728,            data = new double[rows][columns];,10,2,1,2,4,0,0,0,0,17,33,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,729,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,734,            data[row][column] = value.doubleValue();,0,0,1,3,6,0,4,0,0,11,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,735,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,741,"            return new Array2DRowRealMatrix(data, false);",2,0,0,1,2,1,0,2,0,5,45,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,74,714,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,2,0,0,0,1,2,0,4,0,8,106,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,42,    public DefaultFieldMatrixPreservingVisitor(final T zero) {,4,0,0,1,3,2,0,2,0,8,58,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,43,        this.zero = zero;,4,0,0,0,0,0,0,0,0,5,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor,74,58,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,124,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,125,        if (num == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,128,        if (den == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,131,        if (BigInteger.ZERO.equals(den)) {,14,2,0,2,5,0,4,0,0,21,34,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,134,        if (BigInteger.ZERO.equals(num)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,135,            numerator   = BigInteger.ZERO;,0,0,0,0,0,0,0,0,0,0,30,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,136,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,140,            final BigInteger gcd = num.gcd(den);,2,0,0,1,2,1,6,2,0,11,36,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,141,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,142,                num = num.divide(gcd);,2,0,0,1,2,0,6,0,0,9,22,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,143,                den = den.divide(gcd);,6,1,0,1,2,0,0,0,0,8,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,147,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,148,                num = num.negate();,6,1,0,1,2,0,4,0,0,12,19,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,149,                den = den.negate();,0,0,0,1,2,0,0,0,0,3,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,153,            numerator   = num;,6,0,0,0,0,0,0,0,0,8,18,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,154,            denominator = den;,0,0,0,0,0,0,0,0,0,0,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,157,    },4,0,0,0,1,0,6,0,0,11,1,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,375,"        this(BigInteger.valueOf(num), BigInteger.ONE);",6,0,0,2,4,0,6,0,0,12,46,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,376,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,390,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,12,0,0,12,55,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,391,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,39,    public static final BigFraction TWO = new BigFraction(2);,2,0,0,1,2,3,0,4,0,9,57,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,42,    public static final BigFraction ONE = new BigFraction(1);,2,0,0,1,2,3,0,4,0,9,57,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,45,    public static final BigFraction ZERO = new BigFraction(0);,2,0,0,1,2,3,0,4,0,9,58,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,48,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,2,0,0,1,2,3,0,4,0,10,64,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,51,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,54,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,0,0,1,2,3,0,4,0,9,66,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,57,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",0,0,0,1,2,0,0,0,0,3,65,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,60,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",4,0,1,1,2,3,0,4,0,18,68,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,63,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",2,0,0,1,2,3,0,4,0,9,66,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,66,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,3,0,4,0,9,69,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,69,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",2,0,0,1,2,3,0,4,0,9,71,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,72,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",2,0,0,1,2,3,0,4,0,9,67,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,75,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",2,0,0,1,2,3,0,4,0,9,69,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,78,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",0,0,0,1,2,0,0,0,0,3,67,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,88,    private static final BigInteger ONE_HUNDRED_DOUBLE = BigInteger.valueOf(100);,2,0,0,1,2,3,4,2,0,11,77,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,674,        if (BigInteger.ZERO.equals(fraction.numerator)) {,8,0,0,2,5,0,2,0,0,10,49,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,678,        return multiply(fraction.reciprocal());,0,0,0,2,4,1,6,0,0,6,39,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,692,        return numerator.doubleValue() / denominator.doubleValue();,2,1,0,2,4,1,10,4,0,17,59,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,712,        boolean ret = false;,2,0,0,0,0,0,4,0,0,7,20,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,714,        if (this == other) {,4,1,0,1,3,0,0,0,0,6,20,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,715,            ret = true;,6,9,1,0,0,1,0,0,0,24,11,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,716,        } else if (other instanceof BigFraction) {,0,0,0,1,4,0,0,0,0,5,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,717,            BigFraction rhs = ((BigFraction) other).reduce();,4,0,0,3,6,0,2,4,0,10,49,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,718,            BigFraction thisOne = this.reduce();,2,0,0,1,2,0,2,2,0,6,36,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,719,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,0,0,0,2,4,0,0,0,0,6,93,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,722,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,791,        return numerator.intValue();,2,0,0,1,2,1,4,0,0,6,28,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,903,        BigFraction ret = ZERO;,4,0,0,0,0,0,0,2,0,6,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,905,        if (getNumeratorAsInt() != 0 && fraction.getNumeratorAsInt() != 0) {,0,3,0,3,7,0,6,0,0,9,68,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,906,"            ret = new BigFraction(numerator.multiply(fraction.numerator), denominator.multiply(fraction.denominator));",10,0,0,3,6,0,8,2,0,21,106,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,909,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,921,"        return new BigFraction(numerator.negate(), denominator);",10,1,0,2,4,1,4,2,0,19,56,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1016,"        return new BigFraction(denominator, numerator);",4,0,0,1,2,1,8,2,0,14,47,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1028,        final BigInteger gcd = numerator.gcd(denominator);,2,0,0,1,2,1,6,2,0,11,50,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1029,"        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));",2,0,1,3,6,1,0,0,0,4,71,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1092,        if (ZERO.equals(fraction)) {,0,0,0,2,5,0,6,0,0,6,28,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1093,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1096,        BigInteger num = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1097,        BigInteger den = null;,8,0,0,0,0,1,0,2,0,11,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1098,        if (denominator.equals(fraction.denominator)) {,4,0,0,2,5,0,4,0,0,8,47,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1099,            num = numerator.subtract(fraction.numerator);,0,0,0,1,2,0,0,0,0,3,45,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1100,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1102,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,12,0,0,5,10,0,10,0,0,23,102,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1103,            den = denominator.multiply(fraction.denominator);,0,0,0,1,2,0,0,0,0,3,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1105,"        return new BigFraction(num, den);",4,0,0,1,2,1,0,2,0,6,33,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,1133,        return BigFractionField.getInstance();,0,0,0,1,2,1,4,0,0,4,38,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,74,34,public class BigFraction,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,52,    protected AbstractFieldMatrix(final Field<T> field) {,0,0,0,1,3,0,0,0,0,4,53,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,53,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,66,        throws IllegalArgumentException {,2,0,0,0,1,0,0,0,0,2,33,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,67,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,72,        if (columnDimension <= 0) {,2,0,0,1,3,0,4,0,0,6,27,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,77,        this.field = field;,4,2,1,0,0,0,4,0,0,14,19,10,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,89,        if (d.length == 0) {,4,1,0,1,3,0,0,0,0,5,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,92,        if (d[0].length == 0) {,2,1,1,2,5,0,0,0,0,5,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,95,        return d[0][0].getField();,0,0,1,3,6,1,2,0,0,4,26,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,128,        if (columns < 0) {,4,0,0,1,3,0,0,0,0,5,18,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,132,        T[][] array =,0,0,0,2,4,0,0,0,0,6,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,134,        for (int i = 0; i < array.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,135,"            Arrays.fill(array[i], field.getZero());",0,0,1,3,6,0,8,0,0,12,39,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,137,        return array;,4,0,0,0,0,1,0,0,0,4,13,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,159,        return field;,0,0,0,0,0,1,0,0,0,1,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,647,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,908,        return walkInRowOrder(visitor);,0,0,0,1,2,1,0,0,0,4,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractFieldMatrix,74,914,        return walkInRowOrder(visitor);,0,0,0,1,2,1,0,0,0,4,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,43,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,44,        lu = null;,4,1,0,0,0,0,10,0,0,17,10,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,134,"        throws IllegalArgumentException, NullPointerException {",4,0,0,0,1,0,0,0,0,4,55,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,135,        if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,138,            if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,141,            final int nRows = d.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,142,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,146,            final int nCols = d[0].length;,0,0,0,1,2,0,0,0,0,3,30,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,147,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,151,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,152,                if (d[r].length != nCols) {,0,0,1,2,5,0,0,0,0,10,27,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,157,            data = d;,10,1,0,0,0,0,0,0,0,12,9,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,159,    },4,3,0,0,1,0,0,0,0,8,1,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,72,        throws NonSquareMatrixException {,2,0,0,0,1,0,0,0,0,2,33,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,74,        if (!matrix.isSquare()) {,2,0,0,2,5,0,4,0,0,8,25,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,78,        final int m = matrix.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,42,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,79,        field = matrix.getField();,0,0,0,1,2,0,0,0,0,3,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,80,        lu = matrix.getData();,6,1,0,1,2,0,0,0,0,7,22,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,81,        pivot = new int[m];,2,0,1,1,2,0,0,0,0,5,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,82,        cachedL = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,83,        cachedU = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,84,        cachedP = null;,6,1,0,0,0,0,0,0,0,7,15,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,87,        for (int row = 0; row < m; row++) {,8,1,0,1,3,0,0,0,0,10,35,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,88,            pivot[row] = row;,0,0,0,1,2,0,0,0,0,3,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,90,        even     = true;,2,0,0,0,0,0,0,0,0,4,16,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,91,        singular = false;,4,0,0,0,0,0,0,0,0,7,17,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,94,        for (int col = 0; col < m; col++) {,8,1,0,1,3,0,0,0,0,10,35,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,96,            T sum = field.getZero();,2,1,1,1,2,0,0,0,0,8,24,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,99,            for (int row = 0; row < col; row++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,100,                final T[] luRow = lu[row];,2,0,1,2,4,1,0,2,0,9,26,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,101,                sum = luRow[col];,2,0,1,1,2,0,0,0,0,7,17,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,102,                for (int i = 0; i < row; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,105,                luRow[col] = sum;,2,0,1,1,2,0,0,0,0,7,17,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,109,            int nonZero = col; // permutation row,10,2,0,0,0,0,0,0,0,14,37,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,110,            for (int row = col; row < m; row++) {,10,1,0,1,3,0,0,0,0,12,37,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,111,                final T[] luRow = lu[row];,4,1,1,2,4,1,0,2,0,12,26,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,112,                sum = luRow[col];,16,5,1,1,2,0,0,0,0,26,17,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,113,                for (int i = 0; i < col; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,114,                    sum = sum.subtract(luRow[i].multiply(lu[i][col]));,0,0,0,5,10,0,0,0,0,15,50,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,116,                luRow[col] = sum;,0,0,0,1,2,0,0,0,0,3,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,118,                if (lu[nonZero][col].equals(field.getZero())) {,2,0,1,5,11,0,6,0,0,14,47,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,125,            if (nonZero >= m) {,4,1,0,1,3,0,0,0,0,5,19,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,131,            if (nonZero != col) {,4,1,0,1,3,0,0,0,0,5,21,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,145,            final T luDiag = lu[col][col];,2,0,1,2,4,1,0,2,0,11,30,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,146,            for (int row = col + 1; row < m; row++) {,0,0,0,1,3,0,0,0,0,4,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,147,                final T[] luRow = lu[row];,2,0,1,2,4,1,0,2,0,9,26,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,148,                luRow[col] = luRow[col].divide(luDiag);,0,0,0,3,6,0,0,0,0,9,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,152,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,218,"        return new Solver<T>(field, lu, pivot, singular);",0,0,0,1,2,1,0,0,0,4,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,247,"                       final int[] pivot, final boolean singular) {",0,0,0,1,4,0,0,0,0,5,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,248,            this.field    = field;,4,0,0,0,0,0,0,0,0,5,22,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,249,            this.lu       = lu;,4,0,0,0,0,0,0,0,0,5,19,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,250,            this.pivot    = pivot;,4,0,0,0,0,0,0,0,0,5,22,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,251,            this.singular = singular;,4,0,0,0,0,0,0,0,0,5,25,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,252,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,222,    private static class Solver<T extends FieldElement<T>> implements FieldDecompositionSolver<T> {,6,0,0,0,1,2,2,8,0,19,95,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,263,            final int m = pivot.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,264,            if (b.length != m) {,0,0,0,1,3,0,0,0,0,4,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,269,            if (singular) {,2,0,0,1,3,0,0,0,0,2,15,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,274,"            final T[] bp = (T[]) Array.newInstance(field.getZero().getClass(), m);",2,0,0,6,12,1,4,0,0,7,70,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,277,            for (int row = 0; row < m; row++) {,8,1,1,1,3,0,0,0,0,13,35,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,278,                bp[row] = b[pivot[row]];,0,0,1,3,6,0,0,0,0,11,24,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,282,            for (int col = 0; col < m; col++) {,10,1,0,1,3,0,0,0,0,12,35,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,283,                final T bpCol = bp[col];,6,0,1,1,2,1,4,2,0,19,24,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,284,                for (int i = col + 1; i < m; i++) {,10,2,0,1,3,0,0,2,0,16,35,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,285,                    bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));,4,1,0,6,12,0,0,0,0,6,51,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,290,            for (int col = m - 1; col >= 0; col--) {,8,2,0,1,3,0,0,0,0,11,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,291,                bp[col] = bp[col].divide(lu[col][col]);,0,0,0,5,10,0,0,0,0,15,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,292,                final T bpCol = bp[col];,2,0,1,1,2,1,0,2,0,9,24,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,293,                for (int i = 0; i < col; i++) {,16,2,0,1,3,0,0,0,0,21,31,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,294,                    bp[i] = bp[i].subtract(bpCol.multiply(lu[i][col]));,0,0,1,6,12,0,6,0,0,21,51,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,298,            return bp;,0,0,0,0,0,1,0,0,0,1,10,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,365,            final int m = pivot.length;,6,0,0,0,0,1,0,0,0,7,27,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,366,            if (b.getRowDimension() != m) {,2,1,0,2,5,0,4,0,0,7,31,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,371,            if (singular) {,0,0,0,1,3,0,0,0,0,4,15,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,375,            final int nColB = b.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,379,"            final T[][] bp = (T[][]) Array.newInstance(field.getZero().getClass(), new int[] { m, nColB });",6,0,0,10,20,1,10,4,0,21,95,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,380,            for (int row = 0; row < m; row++) {,8,1,0,1,3,0,0,0,0,10,35,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,381,                final T[] bpRow = bp[row];,14,2,1,2,4,1,0,2,0,23,26,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,382,                final int pRow = pivot[row];,2,0,1,1,2,1,0,0,0,7,28,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,383,                for (int col = 0; col < nColB; col++) {,8,1,0,1,3,0,0,0,0,10,39,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,384,"                    bpRow[col] = b.getEntry(pRow, col);",0,0,1,2,4,0,8,0,0,13,35,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,389,            for (int col = 0; col < m; col++) {,14,2,1,1,3,0,0,0,0,20,35,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,390,                final T[] bpCol = bp[col];,8,1,1,2,4,1,0,2,0,17,26,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,391,                for (int i = col + 1; i < m; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,392,                    final T[] bpI = bp[i];,4,0,0,2,4,0,0,0,0,5,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,393,                    final T luICol = lu[i][col];,0,0,0,2,4,0,0,0,0,6,28,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,394,                    for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,395,                        bpI[j] = bpI[j].subtract(bpCol[j].multiply(luICol));,0,0,0,5,10,0,0,0,0,15,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,401,            for (int col = m - 1; col >= 0; col--) {,8,2,0,1,3,0,0,0,0,11,40,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,402,                final T[] bpCol = bp[col];,2,0,1,2,4,1,0,2,0,9,26,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,403,                final T luDiag = lu[col][col];,0,0,0,2,4,0,0,0,0,6,30,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,404,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,405,                    bpCol[j] = bpCol[j].divide(luDiag);,0,0,1,3,6,0,10,0,0,19,35,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,407,                for (int i = 0; i < col; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,408,                    final T[] bpI = bp[i];,2,0,1,2,4,1,0,2,0,9,22,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/FieldLUDecompositionImpl,74,409,                    final T luICol = lu[i][col];,2,0,1,2,4,1,0,2,0,11,28,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,31,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,8,1,1,4,8,2,0,0,0,16,45,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,444,        return getCumFreq(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,35,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,177,        addValue(Long.valueOf(v));,4,1,0,2,4,0,14,0,0,19,26,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,178,    },16,1,0,0,1,1,0,0,0,19,1,2,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,320,        return (double) getCount(v) / (double) sumFreq;,2,1,0,3,6,1,4,0,0,7,47,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,408,"            return getSumFreq();    // v is comparable, but greater than the last value",0,0,0,1,2,1,2,0,0,2,75,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,541,"    private static class NaturalComparator<T extends Comparable<T>> implements Comparator<Comparable<T>>, Serializable {",2,0,0,0,1,3,0,0,0,5,116,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,561,            return o1.compareTo((T) o2);,2,1,1,2,4,1,0,0,0,7,28,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,142,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,0,0,3,6,0,0,0,0,9,56,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,218,            result += iterator.next().longValue();,2,0,0,2,4,0,6,0,0,9,38,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,251,                result = count.longValue();,0,0,0,1,2,0,0,0,0,3,27,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,316,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,317,        if (sumFreq == 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,2,0,0,0,0,0,0,0,0,3,4,6,4.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,0,0,0,1,3,0,0,0,0,4,23,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,0,0,0,0,0,1,2,0,0,2,16,5,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,8,1,1,2,4,0,0,0,0,17,25,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);,0,0,0,1,2,0,0,0,0,3,63,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,8,3,0,0,0,1,0,0,0,12,15,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,12,2,0,1,3,0,0,0,0,15,43,3,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,10,1,0,0,1,0,0,0,0,12,88,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,    },2,0,0,0,1,0,6,0,0,8,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,        return 0;,8,1,0,0,0,1,0,0,0,12,9,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,60,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,        return walkInRowOrder(visitor);,2,0,0,1,2,1,2,0,0,4,31,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,                this.endRow = endRow;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,211,                columnSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,14,4,0,0,0,1,0,0,0,20,16,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,            },2,1,0,0,1,0,0,0,0,3,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,217,                columnSum += Math.abs(value);,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,0,0,0,1,3,0,6,0,0,6,20,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",4,1,0,1,2,0,0,0,0,5,43,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,6,0,0,0,0,3,0,0,0,12,14,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,222,            },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,226,                return maxColSum;,0,0,0,0,0,1,0,0,0,1,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,            return subtract((Array2DRowRealMatrix) m);,2,0,0,2,4,1,0,0,0,2,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,252,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,48,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,254,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,255,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,        final double[][] outData = new double[rowCount][columnCount];,2,0,1,4,8,1,0,0,0,7,61,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,        for (int row = 0; row < rowCount; row++) {,10,1,0,1,3,0,0,0,0,13,42,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,            final double[] dataRow    = data[row];,8,1,1,2,4,1,4,2,0,30,38,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,259,            final double[] mRow       = m.data[row];,0,0,0,2,4,0,0,0,0,6,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,260,            final double[] outDataRow = outData[row];,0,0,0,2,4,0,0,0,0,6,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,            for (int col = 0; col < columnCount; col++) {,18,3,1,1,3,0,4,0,0,32,45,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,3,6,0,0,0,0,14,43,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);",16,7,0,1,2,1,4,0,0,27,48,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,            final double[] rowI = data[i];,6,0,1,2,4,3,0,2,0,15,30,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,501,            for (int j = 0; j < columns; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,502,"                visitor.visit(i, j, rowI[j]);",8,5,0,2,4,0,6,0,0,20,29,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,505,        return visitor.end();,4,3,1,1,2,1,8,0,0,19,21,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,564,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,565,        final int columns = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,            for (int i = 0; i < rows; ++i) {,2,2,0,1,3,0,16,0,0,20,32,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,569,"                visitor.visit(i, j, data[i][j]);",0,0,0,3,6,0,0,0,0,9,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,        return visitor.end();,4,2,0,1,2,1,0,0,0,7,21,15,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,3,1,1,4,1,0,0,0,10,63,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);",8,0,0,1,2,0,0,0,0,8,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,612,            },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,        if (cachedU == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,158,            final int p = singularValues.length;,0,0,0,0,0,0,0,0,0,0,36,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,            if (m >= n) {,14,2,0,1,3,0,2,0,0,21,13,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,                final RealMatrix e =,10,3,0,0,0,2,0,2,0,17,20,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,163,                final double[][] eData = e.getData();,0,0,0,3,6,0,0,0,0,9,37,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,                final double[][] wData = new double[m][p];,18,6,1,4,8,1,0,0,0,34,42,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,                double[] ei1 = eData[0];,2,0,0,2,4,1,4,0,0,7,24,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,6,1,0,1,3,0,0,0,0,8,33,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,                        for (int j = 0; j < p; ++j) {,4,0,0,1,3,0,4,0,0,9,29,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,4,4,1,5,10,0,0,0,0,23,69,10,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,                for (int i = p; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,184,                cachedU =,0,0,0,0,0,0,0,0,0,0,9,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,186,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,196,        return cachedU;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,88,        if (cachedU == null) {,10,3,0,1,3,1,0,0,0,14,22,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,90,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,91,            final int n = householderVectors[0].length;,14,1,1,1,2,4,0,0,0,23,43,0,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,92,            final int p = main.length;,2,0,0,0,0,1,0,0,0,3,26,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,93,            final int diagOffset    = (m >= n) ? 0 : 1;,6,1,0,1,2,1,0,0,0,8,43,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,94,            final double[] diagonal = (m >= n) ? main : secondary;,10,1,0,2,4,1,0,0,0,12,54,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,95,"            cachedU = MatrixUtils.createRealMatrix(m, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,98,            for (int k = m - 1; k >= p; --k) {,10,2,0,1,3,0,0,0,0,13,34,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,103,            for (int k = p - 1; k >= diagOffset; --k) {,10,2,0,1,3,0,0,0,0,13,43,6,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,104,                final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,105,"                cachedU.setEntry(k, k, 1);",0,0,0,1,2,0,0,0,0,3,26,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,106,                if (hK[k - diagOffset] != 0.0) {,0,0,0,2,5,0,0,0,0,7,32,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,107,                    for (int j = k; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,108,                        double alpha = 0;,2,0,0,0,0,0,0,0,0,2,17,13,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,109,                        for (int i = k; i < m; ++i) {,2,0,0,1,3,0,0,0,0,2,29,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,110,"                            alpha -= cachedU.getEntry(i, j) * householderVectors[i][k - diagOffset];",0,0,0,3,6,0,2,0,0,2,72,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,112,                        alpha /= diagonal[k - diagOffset] * hK[k - diagOffset];,10,3,1,2,4,0,0,0,0,18,55,12,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,114,                        for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,115,"                            cachedU.addToEntry(i, j, -alpha * householderVectors[i][k - diagOffset]);",0,0,0,3,6,0,0,0,0,9,73,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,120,            if (diagOffset > 0) {,2,1,0,1,3,0,4,0,0,7,21,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,127,        return cachedU;,6,0,0,0,0,1,4,0,0,10,15,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,188,                    for (int j = k; j < n; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,189,                        double beta = 0;,2,0,0,0,0,0,6,0,0,8,16,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,190,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,191,"                            beta -= cachedV.getEntry(i, j) * hK[i];",2,1,1,2,4,0,8,0,0,16,39,14,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,193,                        beta /= diagonal[k - diagOffset] * hK[k];,0,0,0,2,4,0,0,0,0,6,41,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,195,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,196,"                            cachedV.addToEntry(i, j, -beta * hK[i]);",4,2,1,2,4,0,8,2,0,22,40,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,236,        if (cachedV == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,238,            final int p = singularValues.length;,8,0,0,0,0,2,0,4,0,14,36,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,239,            if (m >= n) {,4,1,0,1,3,0,0,0,0,5,13,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,241,                final RealMatrix e =,4,1,0,0,0,1,4,2,0,13,20,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,243,                cachedV = transformer.getV().multiply(e);,2,0,0,2,4,0,8,0,0,11,41,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,244,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,6,1,1,0,0,2,0,0,0,13,15,3,0.4,1,1,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,169,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,171,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,172,            final int n = householderVectors[0].length;,0,0,0,1,2,0,0,0,0,3,43,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,173,            final int p = main.length;,6,0,0,0,0,1,0,0,0,7,26,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,174,            final int diagOffset    = (m >= n) ? 1 : 0;,8,1,0,1,2,1,6,0,0,17,43,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,175,            final double[] diagonal = (m >= n) ? secondary : main;,14,1,0,2,4,1,0,2,0,18,54,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,176,"            cachedV = MatrixUtils.createRealMatrix(n, n);",2,0,0,1,2,0,8,0,0,11,45,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,179,            for (int k = n - 1; k >= p; --k) {,12,3,0,1,3,0,0,0,0,16,34,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,184,            for (int k = p - 1; k >= diagOffset; --k) {,0,0,0,1,3,0,0,0,0,4,43,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,185,                final double[] hK = householderVectors[k - diagOffset];,6,1,1,2,4,1,0,0,0,10,55,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,186,"                cachedV.setEntry(k, k, 1);",0,0,0,1,2,0,8,0,0,8,26,9,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,187,                if (hK[k] != 0.0) {,0,1,1,2,5,0,0,0,0,5,19,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,201,            if (diagOffset > 0) {,4,1,0,1,3,0,0,0,0,5,21,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,202,"                cachedV.setEntry(0, 0, 1);",0,0,0,1,2,0,4,0,0,4,26,9,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,208,        return cachedV;,2,0,0,0,0,1,0,0,0,2,15,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,55,        throws IllegalArgumentException {,8,1,1,0,1,0,0,0,0,13,33,2,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,56,        if (rowDimension <= 0 ) {,0,0,0,1,3,0,0,0,0,4,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,61,        if (columnDimension <= 0) {,4,0,0,1,3,0,0,0,0,4,27,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,67,    },6,0,0,0,1,3,0,0,0,10,1,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,264,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,266,        final RealMatrix subMatrix =,0,0,0,0,0,0,0,0,0,0,28,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,268,        for (int i = startRow; i <= endRow; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,269,            for (int j = startColumn; j <= endColumn; ++j) {,10,1,0,1,3,0,0,0,0,12,48,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",6,2,1,2,4,0,0,0,0,13,66,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,274,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,507,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,508,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,509,        if (vector.getDimension() != nRows) {,0,0,0,2,5,0,0,0,0,7,37,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,514,        for (int i = 0; i < nRows; ++i) {,10,1,0,1,3,1,4,0,0,17,33,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,515,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,12,0,0,12,40,7,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,518,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,95,    },0,0,0,0,1,0,6,0,0,6,1,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,117,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,118,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,119,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,120,        this.separator   = separator;,16,1,0,0,0,0,0,0,0,20,29,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,121,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,123,        trimmedSeparator = separator.trim();,8,1,1,1,2,0,4,0,0,17,36,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,124,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,125,    },10,1,0,0,1,0,0,0,0,13,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,173,        return getInstance(Locale.getDefault());,2,0,0,2,4,2,12,2,0,17,40,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,76,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,4,2,0,6,60,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,76,30,public abstract class CompositeFormat extends Format {,2,0,0,0,1,2,0,2,0,6,54,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,76,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,5,1,1,2,0,0,0,0,15,57,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,76,54,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,76,55,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,76,101,"        throws NullPointerException, IllegalArgumentException {",14,1,0,0,1,0,0,0,0,15,55,2,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,76,102,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,76,105,        if (d.length == 0) {,4,1,0,1,3,0,0,0,0,5,20,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,76,108,        data = copyArray ? d.clone() :  d;,0,0,0,1,2,0,0,0,0,3,34,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,76,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,76,41,    private static final RealVectorFormat DEFAULT_FORMAT =,4,0,0,0,0,4,0,2,0,10,54,1,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,76,946,        return data[index];,0,0,1,1,2,1,0,0,0,4,19,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,76,951,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,76,34,public abstract class AbstractRealVector implements RealVector {,0,0,0,0,1,0,0,0,0,1,64,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,76,819,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,61,        return (rows * columns <= 4096) ?,16,2,0,1,2,1,0,0,0,20,33,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,530,        if (row < 0 || row >= m.getRowDimension()) {,4,3,0,2,5,0,4,0,0,11,44,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,534,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,544,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,548,    },2,0,0,0,1,0,0,0,0,3,1,2,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,564,"        checkRowIndex(m, startRow);",0,0,0,1,2,0,6,0,0,6,27,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,565,"        checkRowIndex(m, endRow);",0,0,0,1,2,0,0,0,0,3,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,566,        if (startRow > endRow) {,0,0,0,1,3,0,0,0,0,4,24,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,571,"        checkColumnIndex(m, startColumn);",0,0,0,1,2,0,6,0,0,6,33,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,572,"        checkColumnIndex(m, endColumn);",0,0,0,1,2,0,6,0,0,6,31,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,573,        if (startColumn > endColumn) {,8,1,0,1,3,0,4,0,0,13,30,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,579,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,96,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,4,0,0,8,37,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,97,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,98,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,181,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,374,            return data[row][column];,0,0,0,2,4,1,0,0,0,7,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,386,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,390,        },2,2,1,0,1,0,0,0,0,13,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,391,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,398,            data[row][column] += increment;,2,0,1,2,4,0,0,0,0,9,31,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,402,        },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,403,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,257,        if (cachedV == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,259,            if (eigenvectors == null) {,2,1,0,1,3,0,0,0,0,3,27,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,260,                findEigenVectors();,6,0,0,1,2,0,0,0,0,7,19,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,263,            final int m = eigenvectors.length;,6,0,0,0,0,1,0,0,0,7,34,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,264,"            cachedV = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,265,            for (int k = 0; k < m; ++k) {,0,0,0,1,3,0,0,0,0,4,29,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,266,"                cachedV.setColumnVector(k, eigenvectors[k]);",0,0,1,2,4,0,6,0,0,10,44,9,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,272,        return cachedV;,0,0,0,0,0,1,0,0,0,1,15,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1732,        final int m = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1733,        eigenvectors = new ArrayRealVector[m];,0,0,0,1,2,0,0,0,0,3,38,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1736,        final double[] d = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1737,        final double[] l = new double[m - 1];,4,0,0,2,4,0,6,2,0,12,37,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1739,        final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;,6,6,1,3,6,1,0,0,0,19,101,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1740,        double di = main[0]+mu;,6,1,1,1,2,0,6,0,0,15,23,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1741,        d[0] = di;,0,0,0,1,2,0,0,0,0,3,10,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1742,        for (int i = 1; i < m; ++i) {,14,1,0,1,3,0,0,0,0,17,29,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1743,            final double eiM1  = secondary[i - 1];,4,1,1,1,2,1,0,0,0,8,38,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1744,            final double ratio = eiM1 / di;,2,0,0,0,0,0,0,0,0,3,31,2,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1745,            di       = main[i] - eiM1 * ratio + mu;,8,3,1,1,2,0,0,0,0,16,39,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1746,            l[i - 1] = ratio;,0,0,0,1,2,0,0,0,0,3,17,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1747,            d[i]     = di;,2,0,1,1,2,0,0,0,0,7,14,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1751,        for (int i = 0; i < m; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1752,"            eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);",6,0,0,3,6,0,0,0,0,6,63,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1755,    },2,0,0,0,1,0,0,0,0,2,1,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1771,        final int m = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1772,"        stationaryQuotientDifferenceWithShift(d, l, eigenvalue);",0,0,0,1,2,0,0,0,0,3,56,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1773,"        progressiveQuotientDifferenceWithShift(d, l, eigenvalue);",0,0,0,1,2,0,8,0,0,8,57,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1777,        int r = m - 1;,4,1,0,0,0,0,0,0,0,5,14,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1778,        double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);,8,4,1,3,6,0,4,0,0,20,67,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1779,        int sixI = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1780,        for (int i = 0; i < m - 1; ++i) {,8,2,0,1,3,0,0,0,0,11,33,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1781,            final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);,16,6,1,5,10,1,8,0,0,46,83,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1782,            if (absG < minG) {,4,1,0,1,3,0,0,0,0,5,18,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1783,                r = i;,8,2,1,0,0,0,0,0,0,18,6,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1784,                minG = absG;,4,0,0,0,0,0,0,0,0,5,12,8,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1786,            sixI += 6;,0,0,0,0,0,0,0,0,0,0,10,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1791,        double[] eigenvector = new double[m];,2,0,1,2,4,0,0,0,0,4,37,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1792,        double n2 = 1;,2,0,0,0,0,0,0,0,0,2,14,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1793,        eigenvector[r] = 1;,0,0,1,1,2,0,0,0,0,5,19,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1794,        double z = 1;,2,0,0,0,0,0,0,0,0,2,13,5,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1795,        for (int i = r - 1; i >= 0; --i) {,2,0,0,1,3,0,0,2,0,4,34,13,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1796,            z *= -work[6 * i + 2];,0,0,0,1,2,0,0,0,0,3,22,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1797,            eigenvector[i] = z;,0,0,0,1,2,0,0,0,0,3,19,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1798,            n2 += z * z;,0,0,0,0,0,0,0,0,0,0,12,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1800,        z = 1;,0,0,0,0,0,0,0,0,0,0,6,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1801,        for (int i = r + 1; i < m; ++i) {,10,2,1,1,3,0,0,0,0,18,33,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1802,            z *= -work[6 * i - 1];,0,0,0,1,2,0,0,0,0,3,22,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1803,            eigenvector[i] = z;,2,0,1,1,2,0,0,0,0,7,19,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1804,            n2 += z * z;,8,1,0,0,0,0,4,0,0,14,12,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1808,        final double inv = 1.0 / Math.sqrt(n2);,0,0,0,1,2,0,0,0,0,3,39,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1809,        for (int i = 0; i < m; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1810,            eigenvector[i] *= inv;,2,0,1,1,2,0,0,0,0,7,22,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1813,        return (transformer == null) ?,2,1,0,1,2,1,0,0,0,3,30,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1829,        final int nM1 = d.length - 1;,6,1,0,0,0,1,0,0,0,8,29,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1830,        double si = -lambda;,0,0,0,0,0,0,0,0,0,0,20,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1831,        int sixI = 0;,2,0,1,0,0,0,0,0,0,7,13,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1832,        for (int i = 0; i < nM1; ++i) {,16,4,0,1,3,0,0,0,0,22,31,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1833,            final double di   = d[i];,0,0,0,1,2,0,0,0,0,3,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1834,            final double li   = l[i];,0,0,0,1,2,0,0,0,0,3,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1835,            final double ldi  = li * di;,0,0,0,0,0,0,0,0,0,0,28,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1836,            final double diP1 = di + si;,0,0,0,0,0,0,0,0,0,0,28,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1837,            final double liP1 = ldi / diP1;,6,1,0,0,0,1,0,0,0,8,31,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1838,            work[sixI]        = si;,2,0,1,1,2,0,0,0,0,7,23,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1839,            work[sixI + 1]    = diP1;,4,0,0,1,2,0,0,0,0,5,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1840,            work[sixI + 2]    = liP1;,6,0,0,1,2,0,0,2,0,8,25,13,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1841,            si = li * liP1 * si - lambda;,0,0,0,0,0,0,0,0,0,0,29,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1842,            sixI += 6;,18,1,1,0,0,3,0,4,0,34,10,0,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1844,        if (Double.isNaN(si)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1864,        work[6 * nM1 + 1] = d[nM1] + si;,4,3,1,2,4,0,0,0,0,14,32,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1865,        work[6 * nM1]     = si;,0,0,0,1,2,0,0,0,0,3,23,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1866,    },4,1,1,0,1,0,0,0,0,10,1,8,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1878,        final int nM1 = d.length - 1;,6,1,0,0,0,1,0,0,0,8,29,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1879,        double pi = d[nM1] - lambda;,16,6,1,1,2,0,0,0,0,26,28,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1880,        int sixI = 6 * (nM1 - 1);,6,4,0,1,2,0,0,0,0,10,25,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1881,        for (int i = nM1 - 1; i >= 0; --i) {,8,2,1,1,3,0,0,0,0,16,36,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1882,            final double di   = d[i];,2,0,1,1,2,1,0,0,0,7,25,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1883,            final double li   = l[i];,2,0,1,1,2,1,0,0,0,7,25,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1884,            final double diP1 = di * li * li + pi;,10,2,0,0,0,1,0,0,0,13,38,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1885,            final double t    = di / diP1;,6,1,0,0,0,1,0,0,0,8,30,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1886,            work[sixI +  9]   = pi;,4,1,1,1,2,0,0,0,0,8,23,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1887,            work[sixI + 10]   = diP1;,0,0,0,1,2,0,0,0,0,3,25,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1888,            work[sixI +  5]   = li * t;,6,2,1,1,2,0,0,0,0,11,27,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1889,            pi = pi * t - lambda;,14,4,0,0,0,0,0,0,0,20,21,3,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1890,            sixI -= 6;,2,0,0,0,0,0,0,0,0,3,10,6,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1892,        if (Double.isNaN(pi)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1911,        work[3] = pi;,0,0,0,1,2,0,0,0,0,3,13,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1912,        work[4] = pi;,0,0,0,1,2,0,0,0,0,3,13,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,1913,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,650,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,656,    },2,0,0,0,1,0,4,0,0,7,1,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,134,"        throws IllegalArgumentException, NullPointerException {",4,0,0,0,1,0,0,0,0,4,55,2,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,135,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,138,            if (d == null) {,8,1,0,1,3,0,6,0,0,16,16,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,141,            final int nRows = d.length;,6,0,0,0,0,1,0,0,0,7,27,6,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,142,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,146,            final int nCols = d[0].length;,4,0,1,1,2,1,0,0,0,7,30,6,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,147,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,151,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,152,                if (d[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,27,8,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,157,            data = d;,6,0,0,0,0,0,4,0,0,11,9,3,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,159,    },0,0,0,0,1,0,0,0,0,1,1,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,275,            return multiply((Array2DRowRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,42,7,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,292,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,6,0,0,8,51,3,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,294,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,295,        final int nCols = m.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,296,        final int nSum = this.getColumnDimension();,2,0,0,1,2,1,2,0,0,5,43,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,297,        final double[][] outData = new double[nRows][nCols];,0,0,0,4,8,0,0,0,0,12,52,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,298,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,299,            final double[] dataRow    = data[row];,2,0,1,2,4,1,0,0,0,7,38,6,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,300,            final double[] outDataRow = outData[row];,2,0,1,2,4,1,0,0,0,7,41,6,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,301,            for (int col = 0; col < nCols; col++) {,10,1,0,1,3,0,6,4,0,22,39,3,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,302,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,303,                for (int i = 0; i < nSum; i++) {,14,2,0,1,3,0,0,0,0,18,32,3,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,304,                    sum += dataRow[i] * m.data[i][col];,6,1,1,3,6,0,0,0,0,16,35,10,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,306,                outDataRow[col] = sum;,2,0,1,1,2,0,0,0,0,7,22,8,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,310,"        return new Array2DRowRealMatrix(outData, false);",0,0,0,1,2,1,0,0,0,4,48,4,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,296,                    hK[k + 1] -= b;,4,1,1,1,2,0,0,0,0,8,15,10,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,297,                    for (int i = k + 1; i < m; ++i) {,22,5,0,1,3,0,0,0,0,28,33,3,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,298,                        final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,12,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,299,                        double beta = 0;,6,0,0,0,0,0,0,0,0,8,16,3,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,300,                        for (int j = k + 1; j < n; ++j) {,10,2,0,1,3,0,0,0,0,13,33,12,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,301,                            beta -= hI[j] * hK[j];,4,0,0,2,4,0,0,0,0,5,22,6,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,303,                        beta /= b * hK[k + 1];,6,2,1,1,2,0,0,0,0,11,22,12,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,304,                        for (int j = k + 1; j < n; ++j) {,10,2,0,1,3,0,0,0,0,13,33,12,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,305,                            hI[j] -= beta * hK[j];,2,1,1,2,4,0,0,0,0,12,22,14,0.30769,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,98,"        this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));",0,0,0,4,8,0,0,0,0,12,78,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,106,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,114,"        throws IllegalArgumentException, NullPointerException {",8,2,1,0,1,0,0,0,0,17,55,2,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,115,        copyIn(d);,0,0,0,1,2,0,14,0,0,14,10,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,335,        if (data == null) {,4,1,0,1,3,1,0,0,0,6,19,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,336,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,340,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,344,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,345,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,350,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,351,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,355,            data = new double[subMatrix.length][nCols];,6,0,1,2,4,0,0,0,0,9,43,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,356,            for (int i = 0; i < data.length; ++i) {,16,1,0,1,3,1,6,0,0,25,39,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,357,                if (subMatrix[i].length != nCols) {,0,0,0,2,5,0,0,0,0,7,35,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,361,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,363,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,636,"        setSubMatrix(in, 0, 0);",6,3,1,1,2,0,12,0,0,25,23,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,637,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,74,            transformToUpperBiDiagonal();,0,0,0,1,2,0,2,0,0,2,29,7,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,257,        final int m = householderVectors.length;,0,0,0,0,0,0,0,0,0,0,40,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,258,        final int n = householderVectors[0].length;,4,0,1,1,2,1,0,0,0,7,43,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,259,        for (int k = 0; k < n; k++) {,12,2,0,1,3,0,0,0,0,15,29,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,262,            double xNormSqr = 0;,2,0,0,0,0,0,0,0,0,2,20,7,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,263,            for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,264,                final double c = householderVectors[i][k];,0,0,0,2,4,0,0,0,0,6,42,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,265,                xNormSqr += c * c;,8,1,0,0,0,0,0,0,0,10,18,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,267,            final double[] hK = householderVectors[k];,0,0,0,2,4,0,0,0,0,6,42,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,268,            final double a = (hK[k] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);,2,1,1,4,8,1,12,0,0,21,74,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,269,            main[k] = a;,0,0,0,1,2,0,0,0,0,3,12,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,270,            if (a != 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,271,                hK[k] -= a;,2,0,1,1,2,0,0,0,0,7,11,8,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,272,                for (int j = k + 1; j < n; ++j) {,12,2,0,1,3,0,0,0,0,17,33,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,273,                    double alpha = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,274,                    for (int i = k; i < m; ++i) {,12,2,0,1,3,0,0,0,0,15,29,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,275,                        final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,12,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,276,                        alpha -= hI[j] * hI[k];,4,1,1,2,4,0,6,2,0,22,23,5,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,278,                    alpha /= a * householderVectors[k][k];,14,2,1,2,4,0,0,0,0,24,38,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,279,                    for (int i = k; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,280,                        final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,12,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,281,                        hI[j] -= alpha * hI[k];,0,0,0,2,4,0,0,0,0,6,23,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,286,            if (k < n - 1) {,4,2,0,1,3,0,0,0,0,6,16,6,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,288,                xNormSqr = 0;,2,0,0,0,0,0,0,0,0,3,13,8,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,289,                for (int j = k + 1; j < n; ++j) {,10,2,0,1,3,0,0,0,0,13,33,8,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,290,                    final double c = hK[j];,2,0,1,1,2,1,0,0,0,7,23,10,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,291,                    xNormSqr += c * c;,12,1,0,0,0,1,0,0,0,15,18,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,293,                final double b = (hK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);,4,2,1,4,8,1,12,0,0,22,78,8,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,294,                secondary[k] = b;,2,0,1,1,2,0,0,0,0,7,17,8,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,295,                if (b != 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,312,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,43,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,44,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,45,    },0,1,0,0,1,0,4,0,0,5,1,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,109,        throws InvalidMatrixException {,2,0,0,0,1,0,0,0,0,2,31,2,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,111,        m = matrix.getRowDimension();,2,0,0,1,2,0,4,0,0,7,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,112,        n = matrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,7,32,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,114,        cachedU  = null;,8,1,0,0,0,0,0,0,0,11,16,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,115,        cachedS  = null;,8,0,0,0,0,1,0,0,0,10,16,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,116,        cachedV  = null;,2,0,0,0,0,0,0,0,0,3,16,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,117,        cachedVt = null;,2,0,0,0,0,0,0,0,0,3,16,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,120,        transformer         = new BiDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,56,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,121,        mainBidiagonal      = transformer.getMainDiagonalRef();,2,0,0,1,2,0,4,0,0,7,55,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,122,        secondaryBidiagonal = transformer.getSecondaryDiagonalRef();,0,0,0,1,2,0,0,0,0,3,60,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,125,        mainTridiagonal      = new double[mainBidiagonal.length];,2,0,0,1,2,3,0,0,0,5,57,2,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,126,        secondaryTridiagonal = new double[mainBidiagonal.length - 1];,8,1,1,1,2,1,0,0,0,15,61,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,127,        double a = mainBidiagonal[0];,2,0,1,1,2,0,0,0,0,4,29,5,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,128,        mainTridiagonal[0] = a * a;,6,0,0,1,2,0,0,0,0,6,27,5,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,129,        for (int i = 1; i < mainBidiagonal.length; ++i) {,0,0,0,1,3,0,0,0,0,4,49,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,130,            final double b  = secondaryBidiagonal[i - 1];,4,1,1,1,2,1,0,0,0,8,45,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,131,            secondaryTridiagonal[i - 1] = a * b;,6,2,1,1,2,0,0,0,0,11,36,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,132,            a = mainBidiagonal[i];,2,0,1,1,2,0,8,0,0,15,22,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,133,            mainTridiagonal[i] = a * a + b * b;,8,3,1,1,2,0,0,0,0,16,35,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,137,        eigenDecomposition =,2,0,0,0,0,0,0,0,0,3,20,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,140,        final double[] eigenValues = eigenDecomposition.getRealEigenvalues();,0,0,0,2,4,0,0,0,0,6,69,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,141,"        int p = Math.min(max, eigenValues.length);",0,0,0,1,2,0,0,0,0,3,42,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,142,        while ((p > 0) && (eigenValues[p - 1] <= 0)) {,4,4,1,4,9,0,0,0,0,10,46,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,145,        singularValues = new double[p];,2,0,1,1,2,0,0,0,0,5,31,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,146,        for (int i = 0; i < p; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,147,            singularValues[i] = Math.sqrt(eigenValues[i]);,2,1,1,3,6,0,4,0,0,16,46,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,317,        return copyOut();,0,0,0,1,2,1,0,0,0,4,17,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,420,        return (data == null) ? 0 : data.length;,10,1,0,1,2,2,0,0,0,12,40,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,426,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,6,4,1,5,10,1,0,0,0,19,66,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,616,        final int nRows = this.getRowDimension();,4,0,0,1,2,1,2,0,0,7,41,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,617,        final double[][] out = new double[nRows][this.getColumnDimension()];,4,1,1,5,10,1,2,0,0,14,68,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,619,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,620,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,622,        return out;,4,0,0,0,0,1,0,0,0,4,11,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,60,    public BiDiagonalTransformer(RealMatrix matrix) {,0,0,0,1,3,0,0,0,0,4,49,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,62,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,63,        final int n = matrix.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,42,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,64,"        final int p = Math.min(m, n);",0,0,0,1,2,0,0,0,0,3,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,65,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,66,        main      = new double[p];,0,0,0,1,2,0,0,0,0,3,26,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,67,        secondary = new double[p - 1];,4,1,0,1,2,0,6,0,0,12,30,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,68,        cachedU   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,69,        cachedB   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,70,        cachedV   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,73,        if (m >= n) {,6,1,1,1,3,1,0,0,0,12,13,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,229,        return main;,0,0,0,0,0,1,0,0,0,1,12,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,239,        return secondary;,4,1,0,0,0,1,0,0,0,6,17,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,191,        throws InvalidMatrixException {,2,0,0,0,1,0,0,0,0,2,31,2,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,193,        this.main      = main.clone();,2,0,1,1,2,0,4,0,0,14,30,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,194,        this.secondary = secondary.clone();,4,0,0,1,2,0,4,0,0,9,35,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,195,        transformer    = null;,6,0,0,0,0,0,0,0,0,9,22,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,198,        squaredSecondary = new double[secondary.length];,6,1,1,1,2,1,4,4,0,21,48,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,0,0,0,1,3,0,0,0,0,4,51,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,200,            final double s = secondary[i];,0,0,0,1,2,0,0,0,0,3,30,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,201,            squaredSecondary[i] = s * s;,4,1,1,1,2,0,0,0,0,10,28,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,204,        this.splitTolerance = splitTolerance;,12,2,0,0,0,0,0,0,0,15,37,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,205,        decompose();,4,0,0,1,2,0,10,2,0,17,12,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,207,    },4,1,0,0,1,0,0,0,0,5,1,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,237,        cachedV  = null;,8,0,0,0,0,1,0,0,0,10,16,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,238,        cachedD  = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,239,        cachedVt = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,240,        work     = new double[6 * main.length];,6,1,0,1,2,0,0,0,0,8,39,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,243,        computeGershgorinCircles();,0,0,0,1,2,0,2,0,0,2,27,5,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,246,        findEigenvalues();,4,1,0,1,2,0,2,0,0,7,18,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,249,        eigenvectors = null;,2,0,0,0,0,0,0,0,0,3,20,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,251,    },4,0,0,0,1,0,0,0,0,5,1,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,312,        return realEigenvalues.clone();,0,0,0,1,2,1,0,0,0,4,31,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,571,        final int m     = main.length;,6,0,0,0,0,1,6,0,0,13,30,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,572,        final int lowerStart = 4 * m;,4,1,0,0,0,1,0,0,0,6,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,573,        final int upperStart = 5 * m;,8,2,1,0,0,1,0,0,0,16,29,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,574,        lowerSpectra = Double.POSITIVE_INFINITY;,8,2,0,0,0,0,0,0,0,10,40,8,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,575,        upperSpectra = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,7,40,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,576,        double eMax = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,578,        double eCurrent = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,579,        for (int i = 0; i < m - 1; ++i) {,10,2,1,1,3,0,0,0,0,15,33,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,581,            final double dCurrent = main[i];,4,0,1,1,2,1,0,0,0,9,32,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,582,            final double ePrevious = eCurrent;,10,1,0,0,0,1,0,0,0,13,34,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,583,            eCurrent = Math.abs(secondary[i]);,6,3,1,2,4,0,4,0,0,19,34,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,584,"            eMax = Math.max(eMax, eCurrent);",0,0,0,1,2,0,0,0,0,3,32,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,585,            final double radius = ePrevious + eCurrent;,6,1,0,0,0,1,0,0,0,8,43,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,587,            final double lower = dCurrent - radius;,0,0,0,0,0,0,0,0,0,0,39,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,588,            work[lowerStart + i] = lower;,6,1,1,1,2,0,0,0,0,10,29,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,589,"            lowerSpectra = Math.min(lowerSpectra, lower);",2,0,0,1,2,0,8,0,0,11,45,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,591,            final double upper = dCurrent + radius;,6,1,0,0,0,1,0,0,0,8,39,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,592,            work[upperStart + i] = upper;,2,0,0,1,2,0,6,0,0,9,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,593,"            upperSpectra = Math.max(upperSpectra, upper);",2,0,0,1,2,0,8,0,0,11,45,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,597,        final double dCurrent = main[m - 1];,8,1,1,1,2,2,12,2,0,32,36,1,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,598,        final double lower = dCurrent - eCurrent;,2,1,1,0,0,0,0,0,0,7,41,7,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,599,        work[lowerStart + m - 1] = lower;,0,0,0,1,2,0,0,0,0,3,33,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,600,"        lowerSpectra = Math.min(lowerSpectra, lower);",2,0,0,1,2,0,8,0,0,11,45,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,601,        final double upper = dCurrent + eCurrent;,0,0,0,0,0,0,0,0,0,0,41,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,602,        work[upperStart + m - 1] = upper;,6,2,1,1,2,0,0,0,0,11,33,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,603,"        upperSpectra = Math.max(upperSpectra, upper);",2,0,0,1,2,0,8,0,0,11,45,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,604,"        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);",10,2,0,1,2,0,4,0,0,17,59,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,606,    },0,0,0,0,1,0,0,0,0,1,1,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,616,        List<Integer> splitIndices = computeSplits();,0,0,0,1,2,0,0,0,0,3,45,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,619,        realEigenvalues = new double[main.length];,2,0,0,1,2,1,0,0,0,3,42,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,620,        imagEigenvalues = new double[main.length];,0,0,0,1,2,0,0,0,0,3,42,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,621,        int begin = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,622,        for (final int end : splitIndices) {,0,0,0,1,3,0,0,0,0,4,36,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,623,            final int n = end - begin;,0,0,0,0,0,0,0,0,0,0,26,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,624,            switch (n) {,2,0,0,1,3,0,6,0,0,8,12,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,672,            begin = end;,4,0,0,0,0,0,0,0,0,5,12,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,673,        },0,0,0,0,1,0,0,0,0,1,1,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,676,        Arrays.sort(realEigenvalues);,8,2,0,1,2,0,6,0,0,17,29,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,677,        int j = realEigenvalues.length - 1;,0,0,0,0,0,0,0,0,0,0,35,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,678,        for (int i = 0; i < j; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,679,            final double tmp = realEigenvalues[i];,4,0,1,1,2,2,0,4,0,14,38,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,680,            realEigenvalues[i] = realEigenvalues[j];,4,0,1,2,4,0,0,0,0,15,40,5,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,681,            realEigenvalues[j] = tmp;,0,0,0,1,2,0,0,0,0,3,25,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,682,            --j;,0,0,0,0,0,0,0,0,0,0,4,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,685,    },0,0,0,0,1,0,0,0,0,1,1,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,693,        final List<Integer> list = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,52,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,696,        double absDCurrent = Math.abs(main[0]);,2,0,1,2,4,0,4,0,0,8,39,5,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,697,        for (int i = 0; i < secondary.length; ++i) {,2,0,0,1,3,1,4,2,0,9,44,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,698,            final double absDPrevious = absDCurrent;,0,0,0,0,0,0,0,0,0,0,40,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,699,            absDCurrent = Math.abs(main[i + 1]);,0,0,0,2,4,0,0,0,0,6,36,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,700,            final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);,16,4,0,1,2,1,4,0,0,25,74,3,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,701,            if (Math.abs(secondary[i]) <= max) {,2,1,1,3,7,0,4,0,0,11,36,6,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,708,        list.add(secondary.length + 1);,6,0,0,1,2,0,0,2,0,8,31,13,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,709,        return list;,0,0,0,0,0,1,0,0,0,1,12,4,0.26667,0,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,229,        return singularValues.clone();,0,0,0,1,2,1,4,0,0,4,30,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,638,                process3RowsBlock(begin);,0,0,0,1,2,0,4,0,0,4,25,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,639,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,761,        final double q0       = main[index];,4,0,1,1,2,1,0,0,0,9,36,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,762,        final double q1       = main[index + 1];,0,0,0,1,2,0,0,0,0,3,40,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,763,        final double q2       = main[index + 2];,0,0,0,1,2,0,0,0,0,3,40,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,764,        final double e12      = squaredSecondary[index];,2,0,1,1,2,1,0,0,0,7,48,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,765,        final double q1q2Me22 = q1 * q2 - squaredSecondary[index + 1];,8,3,1,1,2,1,0,0,0,14,62,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,768,        final double b        = -(q0 + q1 + q2);,8,1,0,1,2,1,0,0,0,11,40,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,769,        final double c        = q0 * q1 + q0 * q2 + q1q2Me22 - e12;,0,0,0,0,0,0,0,0,0,0,59,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,770,        final double d        = q2 * e12 - q0 * q1q2Me22;,10,3,0,0,0,1,0,0,0,14,49,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,773,        final double b2       = b * b;,8,1,0,0,0,1,0,2,0,13,30,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,76,774,        final double q        = (3 * c - b2) / 9;,6,3,0,1,2,1,6,0,0,16,41,3,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,8,3,0,4,9,0,8,0,0,21,49,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,0,0,0,0,4,34,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,0,0,0,0,0,0,0,0,0,0,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,        return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,10,0,0,0,0,0,12,0,0,23,16,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,1,1,2,4,0,0,0,0,12,31,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,4,1,1,0,0,1,0,0,0,9,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,2,0,0,1,2,0,6,0,0,9,19,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,0,0,0,0,0,1,2,0,0,2,11,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,6,1,0,1,3,1,0,0,0,8,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,        protected OpenMapSparseIterator() {,0,0,0,1,3,0,0,0,0,4,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,20,3,0,1,2,1,4,4,0,34,26,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,2,0,0,1,2,0,0,0,0,3,33,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },14,2,0,0,1,0,0,0,0,16,1,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,0,0,0,1,2,1,4,0,0,4,22,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,2,0,0,1,2,0,2,2,0,6,15,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,854,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,76,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,        return new OpenMapSparseIterator();,0,0,0,1,2,1,0,2,0,2,35,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",2,0,0,0,1,0,0,0,0,3,101,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,825,        protected OpenMapEntry(Iterator iter) {,0,0,0,1,3,0,0,0,0,4,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,826,            this.iter = iter;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,        },0,0,0,0,1,0,0,2,0,2,1,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,832,            return iter.value();,0,0,0,1,2,1,0,0,0,4,20,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVector,77,72,    public abstract class Entry {,0,0,0,0,1,0,0,0,0,1,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,117,"        this(values, DEFAULT_ZERO_TOLERANCE);",0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,118,    },0,0,0,0,1,0,6,0,0,6,1,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,127,        virtualSize = values.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,128,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,1,1,2,1,0,2,0,12,42,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,129,        this.epsilon = epsilon;,4,1,0,0,0,0,14,0,0,20,23,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,130,        for (int key = 0; key < values.length; key++) {,4,0,0,1,3,0,0,0,0,4,47,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,131,            double value = values[key];,38,8,1,1,2,5,24,8,0,106,27,0,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,132,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,133,"                entries.put(key, value);",8,1,0,1,2,0,8,0,0,18,24,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,136,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,205,        return Math.abs(value) < epsilon;,0,0,0,1,2,1,0,0,0,4,33,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,699,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,700,        for (double a : data) {,18,3,1,1,3,1,2,0,0,29,23,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,701,            sum += a * a;,8,1,0,0,0,0,0,0,0,11,13,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,703,        return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,248,        return new Iterator();,0,0,0,1,2,1,0,0,0,4,22,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,39,public class OpenIntToDoubleHashMap implements Serializable {,2,0,0,0,1,1,0,2,0,5,61,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,505,        private Iterator() {,0,0,0,1,3,0,0,0,0,4,20,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,508,            referenceCount = count;,36,6,0,0,0,3,0,0,0,49,23,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,511,            next = -1;,8,0,0,0,0,1,0,0,0,11,10,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,513,                advance();,0,0,0,1,2,0,2,0,0,2,10,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,516,            },10,1,0,0,1,0,0,0,0,12,1,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,518,        },0,0,0,0,1,0,6,0,0,6,1,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,491,    public class Iterator {,6,0,0,0,1,1,0,2,0,9,23,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,525,            return next >= 0;,10,3,0,0,0,1,0,0,0,14,17,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,554,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,558,            if (current < 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,561,            return values[current];,0,0,0,1,2,1,0,0,0,4,23,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,572,            if (referenceCount != count) {,6,1,0,1,3,0,6,2,0,15,30,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,578,            current = next;,10,1,0,0,0,0,0,0,0,12,15,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,582,                while (states[++next] != FULL) {,22,2,1,2,5,0,8,2,0,43,32,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,590,            },2,0,0,0,1,0,0,0,0,2,1,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,585,            } catch (ArrayIndexOutOfBoundsException e) {,0,0,0,1,4,0,0,0,0,5,44,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,586,                next = -2;,2,0,0,0,0,0,0,0,0,4,10,8,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,587,                if (current < 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,592,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,110,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",4,1,0,1,2,0,4,0,0,10,44,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,127,                                  final double missingEntries) {,0,0,0,0,2,0,0,0,0,2,30,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,128,        final int capacity = computeCapacity(expectedSize);,8,0,0,1,2,1,4,0,0,13,51,1,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,129,        keys   = new int[capacity];,2,0,1,1,2,0,0,0,0,5,27,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,130,        values = new double[capacity];,0,0,0,1,2,0,0,0,0,3,30,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,131,        states = new byte[capacity];,2,0,1,1,2,0,0,0,0,5,28,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,132,        this.missingEntries = missingEntries;,8,2,0,0,0,0,0,0,0,11,37,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,133,        mask   = capacity - 1;,4,1,0,0,0,0,0,0,0,6,22,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,134,    },2,2,0,0,1,0,6,0,0,10,1,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,160,        if (expectedSize == 0) {,2,1,0,1,3,0,0,0,0,3,24,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,163,        final int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);,0,0,0,2,4,0,0,0,0,6,67,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,164,        final int powerOfTwo = Integer.highestOneBit(capacity);,0,0,0,1,2,0,0,0,0,3,55,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,165,        if (powerOfTwo == capacity) {,0,0,0,1,3,0,0,0,0,4,29,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,166,            return capacity;,2,0,0,0,0,1,0,0,0,2,16,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,266,"        return findInsertionIndex(keys, states, key, mask);",0,0,0,1,2,1,10,0,0,10,51,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,279,        final int hash = hashOf(key);,2,0,0,1,2,0,0,0,0,3,29,2,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,280,        int index = hash & mask;,6,1,0,0,0,0,4,0,0,11,24,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,281,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,282,            return index;,2,0,0,0,0,1,0,0,0,2,13,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,417,        int index = findInsertionIndex(key);,2,0,0,1,2,0,4,0,0,6,36,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,418,        double previous = missingEntries;,4,0,0,0,0,0,4,0,0,8,33,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,419,        boolean newMapping = true;,2,0,0,0,0,0,0,0,0,3,26,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,420,        if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,425,        keys[index]   = key;,0,0,0,1,2,0,0,0,0,3,20,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,426,        states[index] = FULL;,0,0,0,1,2,0,0,0,0,3,21,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,427,        values[index] = value;,2,0,1,1,2,0,0,0,0,7,22,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,428,        if (newMapping) {,2,0,0,1,3,0,0,0,0,2,17,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,429,            ++size;,0,0,0,0,0,0,0,0,0,0,7,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,430,            if (shouldGrowTable()) {,0,0,0,2,5,0,2,0,0,2,24,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,433,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,435,        return previous;,4,0,0,0,0,1,2,2,0,8,16,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,476,        return size > (mask + 1) * LOAD_FACTOR;,0,0,0,1,2,1,0,0,0,4,39,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,485,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,8,4,0,3,6,1,0,0,0,13,50,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,486,        return h ^ (h >>> 7) ^ (h >>> 4);,6,3,0,2,4,1,0,0,0,9,33,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,34,public abstract class AbstractRealVector implements RealVector {,2,0,0,0,1,2,0,2,0,6,64,1,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,819,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.02273,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,82,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.00813,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,83,        data = d.clone();,6,2,1,1,2,0,4,0,0,24,17,3,0.00813,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,84,    },6,3,1,0,1,0,4,0,0,19,1,11,0.00813,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,41,    private static final RealVectorFormat DEFAULT_FORMAT =,14,1,0,0,0,3,0,4,0,23,54,1,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.00585,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,30,public abstract class CompositeFormat extends Format {,4,0,0,0,1,5,0,4,0,13,54,1,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,8,4,0,15,57,3,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,54,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,55,        return nf;,6,2,0,0,0,1,6,0,0,15,10,10,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,1,1,2,0,0,0,0,5,64,6,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,117,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,118,        this.prefix      = prefix;,0,0,0,0,0,0,0,0,0,0,26,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,119,        this.suffix      = suffix;,6,1,1,0,0,0,0,0,0,13,26,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,120,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,121,        trimmedPrefix    = prefix.trim();,10,2,0,1,2,0,4,0,0,18,33,3,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,123,        trimmedSeparator = separator.trim();,0,0,0,1,2,0,0,0,0,3,36,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,124,        this.format      = format;,10,0,0,0,0,0,0,0,0,12,26,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,77,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,60,4,0.00546,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,405,        return new NoSuchElementException() {,2,0,1,1,3,1,0,2,0,7,37,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,413,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,419,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,59,"    public MathRuntimeException(final String pattern, final Object ... arguments) {",6,0,0,1,3,3,0,4,0,13,79,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,60,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,61,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,72,        super(rootCause);,8,7,0,1,2,0,0,0,0,15,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,73,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,74,        this.arguments = new Object[0];,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,88,        super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,89,        this.pattern   = pattern;,10,2,0,0,0,0,12,0,0,26,25,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,90,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,91,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,102,            ResourceBundle bundle =,6,0,0,0,0,0,0,2,0,8,23,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,104,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,0,0,0,16,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,106,                return bundle.getString(s);,0,0,0,1,2,1,6,0,0,6,27,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,111,        },6,2,0,0,1,0,0,0,0,9,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,109,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,115,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,128,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",4,1,0,4,8,1,10,2,0,20,104,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,136,        return pattern;,8,0,1,0,0,1,4,0,0,17,15,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,144,        return arguments.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,154,"        return buildMessage(locale, pattern, arguments);",0,0,0,1,2,1,14,0,0,14,48,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,160,        return getMessage(Locale.US);,4,0,0,1,2,1,10,0,0,14,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,166,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,174,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,175,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,184,        synchronized (out) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,185,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,186,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,188,            pw.flush();,2,0,0,1,2,0,4,0,0,7,11,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,189,        },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,190,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,201,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,230,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,0,0,5,45,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,259,        return new EOFException() {,0,0,0,1,3,1,0,2,0,2,27,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,291,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,67,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,292,        ioe.initCause(rootCause);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,293,        return ioe;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,305,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,333,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,93,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,334,        iae.initCause(rootCause);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,335,        return iae;,6,1,0,0,0,2,0,0,0,8,11,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,347,        return new IllegalStateException() {,0,0,0,1,3,1,0,2,0,2,36,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,376,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,2,0,2,46,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,405,        return new NoSuchElementException() {,0,0,0,1,3,1,0,2,0,2,37,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,434,        return new NullPointerException() {,0,0,0,1,3,1,0,2,0,2,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,466,"        return new ParseException(null, offset) {",8,0,0,1,3,1,0,2,0,12,41,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,492,"        final String pattern  = ""internal error, please fill a bug report at {0}"";",2,0,0,1,2,1,0,2,0,6,74,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,493,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",2,0,0,0,0,1,0,2,0,6,69,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,495,        return new RuntimeException() {,0,0,0,1,3,1,0,2,0,2,31,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,37,public class MathRuntimeException extends RuntimeException {,0,0,0,0,1,0,0,0,0,1,60,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,434,        return new NullPointerException() {,0,0,0,1,3,1,0,2,0,2,35,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,442,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,448,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,1,1,2,4,1,10,0,0,15,61,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,347,        return new IllegalStateException() {,18,5,0,1,3,1,4,2,0,32,36,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,355,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,361,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,48,"        super(FAILED_EVALUATION_MESSAGE, argument);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,49,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,60,"        super(FAILED_EVALUATION_MESSAGE, new ArrayRealVector(argument));",4,0,0,2,4,0,0,2,0,6,64,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,61,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,62,    },2,0,0,0,1,0,4,0,0,7,1,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,74,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,75,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,88,"        super(pattern, arguments);",4,0,0,1,2,0,10,0,0,14,26,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,89,        this.argument = argument.clone();,8,0,0,1,2,0,4,0,0,15,33,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,90,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,100,        super(cause);,4,0,0,1,2,0,0,0,0,4,13,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,101,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,102,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,112,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,113,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,128,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,129,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,144,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,145,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,146,    },6,1,0,0,1,0,4,0,0,12,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/FunctionEvaluationException,77,154,        return argument.clone();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,55,    public MathException() {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,56,        this.pattern   = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,57,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,67,"    public MathException(String pattern, Object ... arguments) {",6,0,0,1,3,1,0,4,0,11,60,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,68,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,69,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,80,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,81,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,82,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,96,      super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,97,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,98,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,99,    },0,0,0,0,1,0,6,0,0,6,1,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,110,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,112,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,114,                return bundle.getString(s);,10,1,0,1,2,1,6,0,0,18,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,119,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,117,        } catch (MissingResourceException mre) {,0,0,0,1,4,0,0,0,0,5,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,123,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,133,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,142,        return arguments.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,153,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",4,1,0,4,8,1,10,2,0,20,104,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,159,        return getMessage(Locale.US);,10,1,0,1,2,1,2,0,0,13,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,165,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,173,        printStackTrace(System.err);,14,2,0,1,2,0,2,0,0,19,28,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,174,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,183,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,184,"            PrintWriter pw = new PrintWriter(out, false);",6,0,0,1,2,0,0,4,0,12,45,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,185,            printStackTrace(pw);,0,0,1,1,2,0,4,0,0,10,20,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,187,            pw.flush();,0,0,0,1,2,0,4,0,0,4,11,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,188,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,77,189,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,466,"        return new ParseException(null, offset) {",4,1,0,1,3,1,0,2,0,8,41,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,474,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,480,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,119,    public static final ComposableFunction ASIN = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,122,            return Math.asin(d);,0,0,1,1,2,1,6,0,0,12,20,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,28,public abstract class ComposableFunction implements UnivariateRealFunction {,2,0,0,0,1,2,0,2,0,6,76,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,31,    public static final ComposableFunction ZERO = new ComposableFunction() {,8,0,0,1,3,4,4,4,0,21,72,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,39,    public static final ComposableFunction ONE = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,47,    public static final ComposableFunction IDENTITY = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,76,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,55,    public static final ComposableFunction ABS = new ComposableFunction() {,4,0,0,1,3,3,0,4,0,12,71,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,63,    public static final ComposableFunction NEGATE = new ComposableFunction() {,6,0,0,1,3,3,14,4,0,27,74,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,71,    public static final ComposableFunction INVERT = new ComposableFunction () {,0,0,0,1,3,0,0,0,0,4,75,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,79,    public static final ComposableFunction SIN = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,87,    public static final ComposableFunction SQRT = new ComposableFunction() {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,95,    public static final ComposableFunction SINH = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,103,    public static final ComposableFunction EXP = new ComposableFunction() {,2,1,1,1,3,0,0,0,0,7,71,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,111,    public static final ComposableFunction EXPM1 = new ComposableFunction() {,0,0,0,1,3,0,0,0,0,4,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,119,    public static final ComposableFunction ASIN = new ComposableFunction() {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,127,    public static final ComposableFunction ATAN = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,135,    public static final ComposableFunction TAN = new ComposableFunction() {,6,0,0,1,3,3,0,4,0,13,71,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,143,    public static final ComposableFunction TANH = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,151,    public static final ComposableFunction CBRT = new ComposableFunction() {,12,1,0,1,3,3,0,4,0,21,72,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,159,    public static final ComposableFunction CEIL = new ComposableFunction() {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,167,    public static final ComposableFunction FLOOR = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,73,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,175,    public static final ComposableFunction LOG = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,183,    public static final ComposableFunction LOG10 = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,73,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,191,    public static final ComposableFunction LOG1P = new ComposableFunction () {,2,0,0,1,3,3,0,4,0,9,74,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,198,    public static final ComposableFunction COS = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,206,    public static final ComposableFunction ACOS = new ComposableFunction() {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,214,    public static final ComposableFunction COSH = new ComposableFunction() {,2,0,1,1,3,0,4,0,0,11,72,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,222,    public static final ComposableFunction RINT = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,230,    public static final ComposableFunction SIGNUM = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,74,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,238,    public static final ComposableFunction ULP = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,255,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,274,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,295,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,310,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,325,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,340,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,355,        return new ComposableFunction() {,0,0,0,1,3,1,0,0,0,5,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,370,        return new ComposableFunction() {,2,0,0,1,3,2,6,0,0,9,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,384,        return new ComposableFunction() {,10,3,0,1,3,1,0,2,0,15,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,412,        return new MultivariateRealFunction() {,0,0,0,1,3,1,0,0,0,5,39,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,438,"        return asCollector(combiner, 0.0);",0,0,0,1,2,1,4,0,0,4,34,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,455,"        return asCollector(BinaryFunction.ADD, initialValue);",4,0,0,1,2,1,4,0,0,8,53,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,471,"        return asCollector(BinaryFunction.ADD, 0.0);",6,0,0,1,2,2,6,2,0,15,44,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,255,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,259,                return ComposableFunction.this.value(f.value(x));,0,0,0,2,4,1,0,0,0,7,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,295,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,299,"                return combiner.value(ComposableFunction.this.value(x), f.value(x));",2,0,0,3,6,1,14,0,0,16,68,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,310,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,314,                return ComposableFunction.this.value(x) + f.value(x);,2,1,0,2,4,1,10,0,0,13,53,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,325,        return new ComposableFunction() {,6,1,0,1,3,2,0,0,0,8,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,329,                return ComposableFunction.this.value(x) + a;,6,2,0,1,2,1,4,0,0,12,44,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,31,    public static final ComposableFunction ZERO = new ComposableFunction() {,14,3,0,1,3,4,0,4,0,26,72,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,34,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,39,    public static final ComposableFunction ONE = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,42,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,47,    public static final ComposableFunction IDENTITY = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,76,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,50,            return d;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,55,    public static final ComposableFunction ABS = new ComposableFunction() {,2,0,1,1,3,3,0,4,0,18,71,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,58,            return Math.abs(d);,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,63,    public static final ComposableFunction NEGATE = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,74,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,66,            return -d;,2,0,0,0,0,1,0,0,0,3,10,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,71,    public static final ComposableFunction INVERT = new ComposableFunction () {,2,0,0,1,3,3,0,4,0,9,75,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,74,            return 1/d;,2,1,0,0,0,1,0,0,0,3,11,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,79,    public static final ComposableFunction SIN = new ComposableFunction() {,2,0,0,1,3,3,6,4,0,15,71,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,82,            return Math.sin(d);,0,0,0,1,2,1,6,0,0,6,19,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,87,    public static final ComposableFunction SQRT = new ComposableFunction() {,4,0,0,1,3,5,0,4,0,13,72,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,90,            return Math.sqrt(d);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,95,    public static final ComposableFunction SINH = new ComposableFunction() {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,98,            return Math.sinh(d);,4,0,0,1,2,1,6,0,0,10,20,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,103,    public static final ComposableFunction EXP = new ComposableFunction() {,0,0,0,1,3,0,0,0,0,4,71,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,106,            return Math.exp(d);,4,1,0,1,2,1,6,0,0,12,19,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,111,    public static final ComposableFunction EXPM1 = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,73,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,114,            return Math.expm1(d);,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,127,    public static final ComposableFunction ATAN = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,130,            return Math.atan(d);,0,0,0,1,2,1,6,0,0,6,20,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,135,    public static final ComposableFunction TAN = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,138,            return Math.tan(d);,0,0,0,1,2,1,6,0,0,6,19,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,143,    public static final ComposableFunction TANH = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,146,            return Math.tanh(d);,0,0,0,1,2,1,6,0,0,6,20,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,151,    public static final ComposableFunction CBRT = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,154,            return Math.cbrt(d);,0,0,0,1,2,1,6,0,0,6,20,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,159,    public static final ComposableFunction CEIL = new ComposableFunction() {,12,2,1,1,3,0,0,0,0,19,72,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,162,            return Math.ceil(d);,0,0,0,1,2,1,6,0,0,6,20,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,167,    public static final ComposableFunction FLOOR = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,73,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,170,            return Math.floor(d);,0,0,0,1,2,1,6,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,175,    public static final ComposableFunction LOG = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,178,            return Math.log(d);,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,183,    public static final ComposableFunction LOG10 = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,73,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,186,            return Math.log10(d);,2,0,0,1,2,2,8,0,0,11,21,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,191,    public static final ComposableFunction LOG1P = new ComposableFunction () {,2,0,0,1,3,3,0,4,0,9,74,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,193,            return Math.log1p(d);,0,0,0,1,2,1,6,0,0,6,21,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,198,    public static final ComposableFunction COS = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,201,            return Math.cos(d);,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,206,    public static final ComposableFunction ACOS = new ComposableFunction() {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,209,            return Math.acos(d);,2,0,0,1,2,1,6,0,0,9,20,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,214,    public static final ComposableFunction COSH = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,217,            return Math.cosh(d);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,222,    public static final ComposableFunction RINT = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,72,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,225,            return Math.rint(d);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,230,    public static final ComposableFunction SIGNUM = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,74,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,233,            return Math.signum(d);,0,0,0,1,2,1,6,0,0,6,22,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,238,    public static final ComposableFunction ULP = new ComposableFunction() {,2,0,0,1,3,3,0,4,0,9,71,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,241,            return Math.ulp(d);,2,1,1,1,2,1,6,0,0,13,19,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,274,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,278,                return f.value(ComposableFunction.this.value(x));,0,0,0,2,4,1,0,0,0,7,49,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,355,        return new ComposableFunction() {,2,0,0,1,3,4,0,0,0,5,33,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,359,                return ComposableFunction.this.value(x) * f.value(x);,2,1,0,2,4,1,10,0,0,13,53,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,370,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,374,                return ComposableFunction.this.value(x) * scaleFactor;,4,1,0,1,2,1,4,0,0,9,54,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,384,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,388,                return ComposableFunction.this.value(x) / f.value(x);,2,1,0,2,4,1,10,0,0,13,53,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,340,        return new ComposableFunction() {,2,1,1,1,3,1,0,2,0,10,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,344,                return ComposableFunction.this.value(x) - f.value(x);,2,1,0,2,4,1,10,0,0,13,53,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,32,    public static final BinaryFunction ADD = new BinaryFunction() {,0,0,0,1,3,0,0,0,0,4,63,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,35,            return x + y;,6,2,0,0,0,1,0,0,0,8,13,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,29,public abstract class BinaryFunction implements BivariateRealFunction {,0,0,0,0,1,0,0,0,0,1,71,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,32,    public static final BinaryFunction ADD = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,40,    public static final BinaryFunction SUBTRACT = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,68,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,48,    public static final BinaryFunction MULTIPLY = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,68,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,56,    public static final BinaryFunction DIVIDE = new BinaryFunction() {,0,0,0,1,3,0,0,0,0,4,66,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,64,    public static final BinaryFunction POW = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,72,    public static final BinaryFunction ATAN2 = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,65,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,87,        return new ComposableFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,101,        return new ComposableFunction() {,10,1,0,1,3,2,4,4,0,21,33,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,40,    public static final BinaryFunction SUBTRACT = new BinaryFunction() {,0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,43,            return x - y;,6,1,0,0,0,2,2,0,0,10,13,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,48,    public static final BinaryFunction MULTIPLY = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,68,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,51,            return x * y;,6,1,0,0,0,1,0,0,0,8,13,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,56,    public static final BinaryFunction DIVIDE = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,66,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,59,            return x / y;,4,1,0,0,0,1,0,0,0,5,13,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,64,    public static final BinaryFunction POW = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,63,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,67,"            return Math.pow(x, y);",0,0,0,1,2,1,8,0,0,8,22,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,72,    public static final BinaryFunction ATAN2 = new BinaryFunction() {,2,0,0,1,3,3,0,4,0,9,65,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,75,"            return Math.atan2(x, y);",0,0,0,1,2,1,8,0,0,8,24,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,101,        return new ComposableFunction() {,28,8,0,1,3,2,0,2,0,40,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,105,"                return BinaryFunction.this.value(x, fixedY);",6,1,0,1,2,1,6,0,0,14,44,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,87,        return new ComposableFunction() {,0,0,0,1,3,1,0,0,0,5,33,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BinaryFunction,77,91,"                return BinaryFunction.this.value(fixedX, x);",2,0,0,1,2,1,6,0,0,8,44,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,412,        return new MultivariateRealFunction() {,0,0,0,1,3,1,0,2,0,2,39,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,416,                double result = initialValue;,4,0,0,0,0,0,0,0,0,4,29,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,417,                for (final double entry : point) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,418,"                    result = combiner.value(result, ComposableFunction.this.value(entry));",4,0,0,2,4,0,10,0,0,15,70,11,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/ComposableFunction,77,420,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,201,        return new ArithmeticException() {,2,0,0,1,3,1,0,0,0,2,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,209,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,215,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,14,0,0,14,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,230,        return new ArrayIndexOutOfBoundsException() {,8,1,0,1,3,1,0,0,0,11,45,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,238,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,77,244,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,42,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,51,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,67,"        parseNextCharacter(source, pos);",0,0,0,1,2,0,6,0,0,6,32,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,68,        pos.setIndex(pos.getIndex() - 1);,0,0,0,2,4,0,0,2,0,2,33,13,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,80,         int index = pos.getIndex();,6,3,0,1,2,0,4,0,0,13,27,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,81,         final int n = source.length();,0,0,1,1,2,0,0,0,0,7,30,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,82,         char ret = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,84,         if (index < n) {,6,2,0,1,3,0,4,0,0,12,16,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,87,                 c = source.charAt(index++);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,88,             } while (Character.isWhitespace(c) && index < n);,4,2,0,2,5,0,6,0,0,12,49,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,89,             pos.setIndex(index);,2,1,1,1,2,0,0,0,0,7,20,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,91,             if (index < n) {,6,1,0,1,3,0,0,0,0,8,16,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,92,                 ret = c;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,96,         return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,110,        Number ret = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,112,        StringBuffer sb = new StringBuffer();,4,0,0,1,2,3,0,8,0,16,37,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,113,        sb.append('(');,2,0,0,1,3,0,4,0,0,8,15,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,114,        sb.append(value);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,115,        sb.append(')');,0,0,0,1,3,0,4,0,0,5,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,117,        final int n = sb.length();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,118,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,119,        final int endIndex = startIndex + n;,6,1,0,0,0,1,0,0,0,8,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,120,        if (endIndex < source.length()) {,2,0,0,2,5,1,0,2,0,5,33,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,121,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",6,2,0,4,9,0,14,0,0,23,75,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,122,                ret = Double.valueOf(value);,2,0,0,1,2,0,6,0,0,9,28,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,123,                pos.setIndex(endIndex);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,127,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,142,        final int startIndex = pos.getIndex();,12,1,0,1,2,1,4,0,0,19,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,143,"        Number number = format.parse(source, pos);",2,0,0,1,2,0,8,2,0,12,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,144,        final int endIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,147,        if (startIndex == endIndex) {,4,1,0,1,3,0,0,0,0,5,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,149,            final double[] special = {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,152,            for (int i = 0; i < special.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,153,"                number = parseNumber(source, special[i], pos);",2,0,1,2,4,0,6,0,0,13,46,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,154,                if (number != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,155,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,160,        return number;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,173,        final int startIndex = pos.getIndex();,4,0,0,1,2,4,4,0,0,12,38,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,174,        final int endIndex = startIndex + expected.length();,4,1,0,1,2,1,20,0,0,26,52,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,175,        if ((startIndex >= source.length()) ||,2,2,0,2,5,0,4,0,0,8,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,179,            pos.setIndex(startIndex);,0,0,0,1,2,0,6,0,0,6,25,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,180,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,6,0,0,6,30,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,181,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,185,        pos.setIndex(endIndex);,0,0,0,1,2,0,6,0,0,6,23,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,186,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,210,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,2,1,0,3,7,3,12,0,0,18,55,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,211,            toAppendTo.append('(');,0,0,0,1,3,0,4,0,0,5,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,212,            toAppendTo.append(value);,0,0,0,1,2,0,6,0,0,6,25,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,213,            toAppendTo.append(')');,0,0,0,1,3,0,4,0,0,5,23,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,215,"            format.format(value, toAppendTo, pos);",0,0,1,1,2,0,14,0,0,23,38,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,77,217,        return toAppendTo;,4,0,0,0,0,1,10,0,0,15,18,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,102,"        this(DEFAULT_EXPECTED_SIZE, Double.NaN);",0,0,0,1,2,0,0,0,0,1,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,103,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,118,"        this(expectedSize, Double.NaN);",16,3,0,1,2,0,0,0,0,21,31,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,119,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,140,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,4,0,0,1,3,2,0,2,0,8,68,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,141,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,0,0,0,4,8,0,0,0,0,12,56,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,8,1,0,3,6,0,2,0,0,12,42,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,16,3,0,0,0,0,0,0,0,20,26,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,100,  },2,0,0,0,1,0,0,0,0,2,1,8,0.05882,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,66,"    super(y, forward);",4,1,0,1,2,0,14,0,0,19,18,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,67,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {",6,0,0,2,5,3,0,0,0,9,77,2,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,109,    previousTime      = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,110,    currentTime       = Double.NaN;,2,0,0,0,0,0,0,0,0,2,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,111,    h                 = Double.NaN;,22,2,0,0,0,1,0,0,0,28,31,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,112,    interpolatedTime  = Double.NaN;,2,0,1,0,0,0,0,0,0,5,31,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,114,    currentState            = y;,0,0,0,0,0,0,0,0,0,0,28,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,115,    interpolatedState       = new double[y.length];,10,1,0,1,2,0,4,0,0,16,47,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,116,    interpolatedDerivatives = new double[y.length];,0,0,0,1,2,0,0,0,0,3,47,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,118,    finalized         = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,119,    this.forward      = forward;,2,1,0,0,0,0,0,0,0,3,28,7,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,120,    this.dirtyState   = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,122,  },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,275,                    p = -p;,4,0,0,0,0,0,0,0,0,6,7,10,0.01786,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,246,"                setResult(x1, i);",2,0,0,1,2,0,6,0,0,8,17,7,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,247,                return result;,0,0,0,0,0,1,2,2,0,4,14,5,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,295,            } else if (dx > 0.0) {,2,1,0,1,4,0,0,0,0,3,22,7,0.01724,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,294,                x1 = x1 + delta;,6,1,0,0,0,0,0,0,0,8,16,8,0.01538,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,273,                    p1 = -p1;,0,0,0,0,0,0,0,0,0,0,9,4,0.01515,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,302,                x2 = x0;,0,0,0,0,0,0,0,0,0,0,8,4,0.01389,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,303,                y2 = y0;,4,0,0,0,0,0,0,0,0,5,8,8,0.01389,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,304,                delta = x1 - x0;,8,1,0,0,0,0,6,0,0,16,16,3,0.01389,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,305,                oldDelta = delta;,8,0,1,0,0,1,6,4,0,22,17,1,0.01389,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,228,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,229,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,230,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,231,                y0 = y1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,232,                y1 = y2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,233,                y2 = y0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0125,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,242,            double dx = x2 - x1;,0,0,0,0,0,0,0,0,0,0,20,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,243,            double tolerance =,2,0,0,0,0,0,0,0,0,2,18,7,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,245,            if (Math.abs(dx) <= tolerance) {,0,0,0,2,5,0,0,0,0,7,32,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,249,            if ((Math.abs(oldDelta) < tolerance) ||,4,0,1,2,5,1,0,2,0,11,39,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,255,                double r3 = y1 / y0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,261,                if (x0 == x2) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,263,                    p = dx * r3;,8,1,0,0,0,0,6,0,0,16,12,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,264,                    p1 = 1.0 - r3;,4,1,0,0,0,0,0,0,0,6,14,10,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,272,                if (p > 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,277,                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||,0,0,0,1,3,0,0,0,0,4,58,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,285,                    oldDelta = delta;,2,0,0,0,0,0,4,2,0,9,17,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,    public Cluster(final T center) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,        this.center = center;,0,0,0,0,0,0,0,0,0,0,21,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,        return center;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,2,1,1,0,0,1,4,0,0,14,21,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,42,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",4,1,0,1,2,3,0,4,0,12,68,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,57,"        assignPointsToClusters(clusters, points);",0,0,0,1,2,0,0,0,0,3,41,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,90,"            Cluster<T> cluster = getNearestCluster(clusters, p);",0,0,0,1,2,0,0,0,0,3,52,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,91,            cluster.addPoint(p);,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,107,        final List<T> pointSet = new ArrayList<T>(points);,0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,108,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,34,7,0,1,2,2,6,12,0,63,63,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,111,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,0,0,0,3,6,0,0,0,0,9,70,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,114,        final double[] dx2 = new double[pointSet.size()];,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,4,1,0,2,5,0,8,0,0,14,30,0,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,38,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,4,1,0,0,0,0,0,4,0,9,29,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,10,4,1,1,3,0,2,0,0,21,37,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,6,3,0,1,3,0,12,0,0,21,29,12,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,161,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,57,"        return MathUtils.distance(point, p.getPoint());",0,0,0,2,4,1,10,0,0,10,47,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1624,      int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1625,      for (int i = 0; i < p1.length; i++) {,20,4,1,1,3,1,16,2,0,50,37,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1627,          sum += dp * dp;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1629,      return Math.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,22,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,43,    public EuclideanIntegerPoint(final int[] point) {,0,0,0,2,5,0,0,0,0,7,49,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,44,        this.point = point;,16,5,1,0,0,1,8,0,0,33,19,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,45,    },10,5,1,0,1,0,8,0,0,27,1,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,52,        return point;,4,1,1,0,0,1,28,2,0,46,13,3,0.2,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,30,public final class MathUtils {,8,2,0,0,1,1,4,2,0,18,30,2,0.00247,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,69,    private static final long[] FACTORIALS = new long[] {,12,0,0,2,5,7,0,0,0,20,53,1,0.00247,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,82,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,96,        long s = (long)x + (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,97,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,1,0,1,3,3,4,0,0,21,53,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,98,"            throw new ArithmeticException(""overflow: add"");",18,1,0,1,2,0,0,0,0,21,47,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,100,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,114,"        return addAndCheck(a, b, ""overflow: add"");",16,4,1,1,2,1,0,0,0,24,42,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,130,        if (a > b) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,132,"            ret = addAndCheck(b, a, msg);",8,2,0,1,2,0,6,2,0,19,29,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,136,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,4,3,1,1,2,0,0,0,0,10,43,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,                    updateSigma(tau);,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,                    return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,10,2,0,2,4,1,0,0,0,13,39,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,4,0,0,0,0,0,0,2,0,6,15,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,0,0,0,0,0,1,6,0,0,6,11,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,1,0,1,2,1,0,0,0,5,26,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,        if (eigenvectors == null) {,0,0,0,1,3,0,0,0,0,4,27,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,            findEigenVectors();,0,0,0,1,2,0,0,0,0,3,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,        return eigenvectors[i].copy();,0,0,0,2,4,1,0,0,0,7,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,2,0,0,1,2,3,0,4,0,9,38,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },10,1,0,0,1,0,0,0,0,12,1,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,0,0,0,2,39,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,                        tau *= 0.25;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,6,1,0,0,0,0,0,0,0,8,11,12,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,8,1,1,1,2,0,0,0,0,13,25,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,                double b2 = work[np - 6];,0,0,0,1,2,0,0,0,0,3,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,                final double gam = dN2;,0,0,0,0,0,0,0,0,0,0,23,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,2,0,0,4,8,0,0,0,0,2,58,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,                if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,0,0,0,3,6,0,0,0,0,9,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,6,0,0,0,2,0,4,0,0,11,8,1,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,        data = d.clone();,2,0,0,1,2,1,0,0,0,3,17,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,269,            return subtract((ArrayRealVector) v);,0,0,0,2,4,1,0,0,0,7,37,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,        checkVectorDimensions(v.length);,18,6,0,1,2,0,6,0,0,30,32,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,        double[] out = new double[data.length];,6,0,0,2,4,1,0,0,0,7,39,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,285,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,286,            out[i] = data[i] - v[i];,0,0,0,3,6,0,0,0,0,9,24,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,        return new ArrayRealVector(out);,2,0,1,1,2,2,0,0,0,7,32,8,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,299,        return (ArrayRealVector) subtract(v.data);,0,0,0,2,4,1,0,0,0,7,42,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,        double sum = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,906,        for (double a : data) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,907,            sum += a * a;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,909,        return Math.sqrt(sum);,2,0,0,1,2,1,8,0,0,11,22,6,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1292,    },14,2,0,0,1,0,0,0,0,17,1,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1488,                        np = nn - 2 * pingPong;,0,0,0,0,0,0,0,0,0,0,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,                        b2 = work[np - 2];,4,1,1,1,2,0,0,0,0,8,18,11,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,                        gam = dN1;,6,0,0,0,0,0,0,0,0,7,10,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,                        if (work[np - 4]  >  work[np - 2]) {,2,0,0,3,7,3,0,0,0,5,36,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1494,                        a2 = work[np - 4] / work[np - 2];,0,0,0,2,4,0,0,0,0,6,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1495,                        if (work[nn - 9]  >  work[nn - 11]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,                        b2 = work[nn - 9] / work[nn - 11];,10,2,0,2,4,0,0,0,0,13,34,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,                        np = nn - 13;,4,1,0,0,0,0,0,0,0,6,13,11,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1085,                } else if ((dMin < 0.0) &&,0,0,0,1,4,0,0,0,0,5,26,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1094,                } else if (dMin < 0.0) {,0,0,0,1,4,0,0,0,0,5,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1096,                    if (tType < -22) {,0,0,0,1,3,0,0,0,0,4,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1099,                    } else if (dMin1 > 0.0) {,14,4,0,1,4,0,12,0,0,31,25,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1101,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,4,1,0,2,4,0,0,0,0,5,53,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1102,                        tType -= 11;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,666,                    for (int i = 0; i < n; ++i) {,18,4,0,1,3,1,4,0,0,28,29,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,667,                        realEigenvalues[begin + i] = lambda - work[4 * i];,18,4,1,2,4,0,0,0,0,29,50,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1475,                    tType = -4;,16,3,0,0,0,0,0,0,0,22,11,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1476,                    double s = 0.25 * dMin;,0,0,0,0,0,0,6,0,0,6,23,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1479,                    if (dMin == dN) {,0,0,0,1,3,0,0,0,0,4,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1503,                    a2 = a2 + b2;,0,0,0,0,0,0,0,0,0,0,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1504,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,2,0,1,1,3,0,6,0,0,12,60,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1518,                    a2 = cnst3 * a2;,0,0,0,0,0,0,0,0,0,0,16,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1521,                    if (a2 < cnst1) {,6,0,0,1,3,0,2,0,0,9,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1522,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,8,3,0,3,6,0,0,0,0,11,41,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1524,                    tau = s;,0,0,0,0,0,0,0,0,0,0,8,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1027,                    double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);,0,0,0,5,10,0,0,0,0,15,61,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1028,                    double s = work[k - 3] * (work[k - 5] / t);,0,0,0,3,6,0,0,0,0,9,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1029,                    if (s <= t) {,0,0,0,1,3,0,0,0,0,4,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1030,                        s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));,4,0,0,5,10,0,0,0,0,5,65,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1034,                    t = work[k - 7] + (s + work[k - 5]);,2,0,0,3,6,0,0,0,0,2,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1035,                    work[k - 3] *= work[k - 7] / t;,0,0,0,2,4,0,0,2,0,2,31,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1036,                    work[k - 7]  = t;,0,0,0,1,2,0,8,0,0,8,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1356,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,191,        throws InvalidMatrixException {,0,0,0,0,1,0,0,0,0,1,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,193,        this.main      = main.clone();,2,0,0,1,2,0,4,0,0,7,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,194,        this.secondary = secondary.clone();,2,0,0,1,2,0,4,0,0,7,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,195,        transformer    = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,198,        squaredSecondary = new double[secondary.length];,0,0,0,1,2,0,0,0,0,3,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,3,1,1,3,0,0,0,0,20,51,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,201,            squaredSecondary[i] = s * s;,0,0,0,1,2,0,0,0,0,3,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,204,        this.splitTolerance = splitTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,205,        decompose();,4,0,0,1,2,1,6,4,0,17,12,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,644,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,0,2,4,0,0,0,0,6,56,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,645,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,0,0,0,3,6,0,0,0,0,9,62,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,646,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,67,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,647,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,0,0,0,3,6,0,0,0,0,9,62,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,648,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,69,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,649,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,8,3,0,2,4,1,0,0,0,12,76,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,650,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,652,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,12,4,1,3,6,1,0,0,0,22,67,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,655,"                ldlTDecomposition(lambda, begin, n);",0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,658,                processGeneralBlock(n);,8,2,0,1,2,0,4,0,0,15,23,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,661,                if (chooseLeft) {,2,0,0,1,3,0,0,0,0,2,17,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,827,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,828,        for (int i = 0; i < n - 1; ++i) {,8,2,0,1,3,0,0,0,0,11,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,829,            final int fourI = 4 * i;,0,0,0,0,0,0,0,0,0,0,24,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,830,            final double ei = work[fourI + 2];,4,6,1,1,2,1,0,0,0,28,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,831,            sumOffDiag += ei;,4,0,0,0,0,0,0,0,0,5,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,834,        if (sumOffDiag == 0) {,6,2,0,1,3,0,0,0,0,8,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,840,"        flipIfWarranted(n, 2);",0,0,0,1,2,0,4,0,0,4,22,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,843,        initialSplits(n);,0,0,0,1,2,0,4,0,0,4,17,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,846,        tType = 0;,0,0,1,0,0,0,4,0,0,8,10,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,847,        dMin1 = 0;,12,1,0,0,0,0,0,0,0,15,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,848,        dMin2 = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,849,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,850,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,851,        dN2   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,852,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,855,        int i0 = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,856,        int n0 = n;,0,0,0,0,0,0,12,0,0,12,11,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,857,        while (n0 > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,860,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,0,0,0,2,4,0,0,0,0,6,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,861,            sigmaLow = 0;,2,1,1,0,0,0,0,0,0,8,13,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,864,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,0,0,0,2,4,0,0,0,0,6,54,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,865,            double offDiagMax = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,866,            double diagMax    = work[4 * n0 - 4];,16,4,1,1,2,0,0,0,0,24,37,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,867,            double diagMin    = diagMax;,0,0,0,0,0,0,0,0,0,0,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,868,            i0 = 0;,2,0,0,0,0,0,0,0,0,3,7,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,869,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,8,3,0,2,5,0,0,0,0,12,44,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,870,                if (work[i + 2] <= 0) {,4,4,1,2,5,0,0,0,0,10,23,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,874,                if (diagMin >= 4 * offDiagMax) {,4,2,0,1,3,0,10,0,0,16,32,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,875,"                    diagMin    = Math.min(diagMin, work[i + 4]);",0,0,0,2,4,0,0,0,0,6,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,876,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,878,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",4,2,1,3,6,0,6,0,0,19,54,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,879,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,881,            work[4 * n0 - 2] = offDiagMin;,12,1,0,1,2,0,0,0,0,16,30,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,884,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",8,3,0,2,4,0,8,0,0,21,67,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,886,            pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,887,            int maxIter = 30 * (n0 - i0);,8,6,0,1,2,0,4,0,0,19,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,888,            for (int k = 0; i0 < n0; ++k) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,889,                if (k >= maxIter) {,4,1,0,1,3,0,0,0,0,5,19,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,894,"                n0 = goodStep(i0, n0);",2,0,0,1,2,0,6,0,0,9,22,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,895,                pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,899,                if ((pingPong == 0) && (n0 - i0 > 3) &&,0,0,0,2,5,0,0,0,0,7,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,927,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,929,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,937,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,938,        for (int k = 0; k < 2; ++k) {,6,1,0,1,3,0,0,0,0,8,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,941,            double d = work[4 * (n - 1) + pingPong];,16,4,1,2,4,0,0,0,0,27,40,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,942,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,10,4,0,2,5,0,0,0,0,15,54,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,943,                if (work[i + 2] <= TOLERANCE_2 * d) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,947,                    d *= work[i] / (d + work[i + 2]);,0,0,0,3,6,0,4,0,0,4,33,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,952,            d = work[pingPong];,2,0,1,1,2,0,0,0,0,7,19,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,953,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,0,0,0,1,3,0,0,0,0,4,51,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,954,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,955,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,956,                if (work[i] <= TOLERANCE_2 * d) {,4,2,1,2,5,0,0,0,0,10,33,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,961,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,6,4,1,3,8,0,0,0,0,16,58,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,963,                    final double tmp = work[i + 2] / work[j];,4,2,1,2,4,1,0,0,0,13,41,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,964,                    work[j + 2] = work[i] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,965,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,966,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,971,            work[4 * n - 3 - pingPong] = d;,6,3,1,1,2,0,0,0,0,12,31,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,974,            pingPong = 1 - pingPong;,4,1,0,0,0,0,0,0,0,6,24,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,978,    },2,0,0,0,1,1,0,0,0,3,1,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,993,        g = 0.0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,996,        int deflatedEnd = end;,8,1,1,0,0,1,0,0,0,14,22,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,997,        for (boolean deflating = true; deflating;) {,6,0,0,1,3,0,6,0,0,14,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,999,            if (start >= deflatedEnd) {,4,1,0,1,3,0,8,0,0,13,27,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1001,                return deflatedEnd;,4,3,0,0,0,1,0,0,0,8,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1004,            final int k = 4 * deflatedEnd + pingPong - 1;,14,6,0,0,0,2,0,0,0,22,45,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1006,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1012,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,8,6,1,2,4,0,0,0,0,19,73,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1013,                deflatedEnd -= 1;,8,0,0,0,0,0,0,0,0,11,17,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1015,            } else if ((start == deflatedEnd - 2) ||,0,0,0,1,4,0,0,0,0,5,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1020,                if (work[k - 3] > work[k - 7]) {,0,1,0,3,7,0,12,0,0,13,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1026,                if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {,6,4,1,3,7,0,0,0,0,14,46,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1038,                work[4 * deflatedEnd - 8] = sigma + work[k - 7];,6,4,1,2,4,0,0,0,0,15,48,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1039,                work[4 * deflatedEnd - 4] = sigma + work[k - 3];,0,0,0,2,4,0,0,0,0,6,48,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1040,                deflatedEnd -= 2;,2,0,0,0,0,0,0,0,0,3,17,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1044,                deflating = false;,2,0,0,0,0,0,0,0,0,4,18,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1048,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1050,        final int l = 4 * deflatedEnd + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,45,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1053,        if ((dMin <= 0) || (deflatedEnd < end)) {,0,0,0,3,7,0,0,0,0,10,41,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1054,"            if (flipIfWarranted(deflatedEnd, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1067,        if ((dMin < 0) ||,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1072,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",4,1,0,1,2,0,6,0,0,11,61,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1075,            for (boolean loop = true; loop;) {,6,0,0,1,3,1,8,0,0,16,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1078,"                dqds(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,25,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1081,                if ((dMin >= 0) && (dMin1 > 0)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1083,                    updateSigma(tau);,0,0,0,1,2,0,4,0,0,4,17,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1084,                    return deflatedEnd;,2,0,0,0,0,1,0,0,0,2,19,10,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1119,"        dqd(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,24,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1121,        return deflatedEnd;,4,0,0,0,0,4,0,0,0,7,19,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1133,        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {,8,3,0,4,9,0,0,0,0,11,58,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1146,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1158,        final int lowerStart = 4 * main.length;,6,0,0,0,0,0,0,0,0,7,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1159,        final int upperStart = 5 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1160,        double lower = Double.POSITIVE_INFINITY;,6,0,1,0,0,0,4,0,0,12,40,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1161,        double upper = Double.NEGATIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,40,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1162,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1163,"            lower = Math.min(lower, work[lowerStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1164,"            upper = Math.max(upper, work[upperStart + index +i]);",0,0,0,2,4,0,0,0,0,6,53,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1168,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",6,0,0,3,6,1,16,0,0,24,64,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1169,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,2,0,0,1,2,0,0,0,0,3,62,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1170,        final double absoluteTolerance = 4 * minPivot;,4,1,0,0,0,1,0,0,0,6,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1171,        final int maxIter =,2,0,0,0,0,1,0,0,0,3,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1173,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,14,4,0,1,2,1,0,0,0,20,73,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1176,        double left  = lower - margin;,0,0,0,0,0,0,0,0,0,0,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1177,        double right = upper + margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1178,        for (int i = 0; i < maxIter; ++i) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1180,            final double range = right - left;,4,1,0,0,0,0,0,0,0,5,34,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1181,            if ((range < absoluteTolerance) ||,10,3,1,1,3,0,0,2,0,20,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1184,                break;,6,3,1,0,0,1,0,0,0,14,6,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1187,            final double middle = 0.5 * (left + right);,8,2,0,1,2,1,0,0,0,13,43,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1188,"            if (countEigenValues(middle, index, n) >= 1) {",6,1,0,2,5,0,0,0,0,8,46,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1189,                right = middle;,0,0,0,0,0,0,0,0,0,0,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1191,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1195,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",8,2,0,2,4,0,12,0,0,23,73,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1198,        left  = lower - margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1199,        right = upper + margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1200,        for (int i = 0; i < maxIter; ++i) {,14,1,0,1,3,0,6,0,0,24,35,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1202,            final double range = right - left;,10,1,0,0,0,1,0,0,0,14,34,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1203,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,0,0,0,6,34,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1206,                break;,6,1,0,0,0,0,0,0,0,8,6,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1209,            final double middle = 0.5 * (left + right);,6,2,0,1,2,1,0,0,0,9,43,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1210,"            if (countEigenValues(middle, index, n) >= n) {",2,1,0,2,5,0,8,0,0,11,46,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1211,                right = middle;,4,0,0,0,0,0,0,0,0,5,15,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1213,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1217,"        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",0,0,0,2,4,0,0,0,0,6,75,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1219,"        return new double[] { lower, upper };",0,0,0,2,4,1,0,0,0,7,37,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1231,        double ratio = main[index] - t;,0,0,0,1,2,0,0,0,0,3,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1232,        int count = (ratio > 0) ? 0 : 1;,4,1,0,1,2,0,0,0,0,5,32,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1233,        for (int i = 1; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1234,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,0,0,0,2,4,0,0,0,0,6,70,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1235,            if (ratio <= 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1236,                ++count;,4,1,1,0,0,0,0,0,0,8,8,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1239,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1254,        double di = main[index] - lambda;,4,1,1,1,2,0,0,0,0,9,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1255,        work[0] = Math.abs(di);,2,0,1,2,4,0,12,0,0,18,23,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1256,        for (int i = 1; i < n; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1257,            final int    fourI = 4 * i;,4,1,0,0,0,1,0,0,0,6,27,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1258,            final double eiM1  = secondary[index + i - 1];,0,0,0,1,2,0,0,0,0,3,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1259,            final double ratio = eiM1 / di;,0,0,0,0,0,0,0,0,0,0,31,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1260,            work[fourI - 2] = ratio * ratio * Math.abs(di);,0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1261,            di = (main[index + i] - lambda) - eiM1 * ratio;,0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1262,            work[fourI] = Math.abs(di);,0,0,1,2,4,0,6,0,0,11,27,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1264,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1274,        eMin = work[4 * start + pingPong + 4];,0,0,0,1,2,0,0,0,0,3,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1275,        double d = work[4 * start + pingPong] - tau;,10,3,1,1,2,1,2,0,0,18,44,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1276,        dMin = d;,0,0,0,0,0,0,0,0,0,0,9,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1277,        dMin1 = -work[4 * start + pingPong];,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1279,        if (pingPong == 0) {,10,5,0,1,3,1,0,0,0,16,20,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1280,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,22,8,0,2,5,0,0,0,0,31,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1289,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,0,0,0,2,5,0,0,0,0,7,60,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1300,        dN2 = d;,4,0,0,0,0,0,0,0,0,5,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1301,        dMin2 = dMin;,12,1,0,0,0,0,0,0,0,16,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1302,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1303,        int j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,9,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1304,        work[j4 - 2] = dN2 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1305,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,2,1,0,5,10,0,0,0,0,3,56,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1306,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,10,5,1,3,6,0,0,0,0,20,50,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1307,"        dMin = Math.min(dMin, dN1);",8,1,0,1,2,0,8,0,0,19,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1309,        dMin1 = dMin;,8,0,0,0,0,0,0,0,0,10,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1310,        j4 = j4 + 4;,4,1,0,0,0,0,0,0,0,6,12,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1311,        j4p2 = j4 + 2 * pingPong - 1;,2,1,1,0,0,0,0,0,0,12,29,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1312,        work[j4 - 2] = dN1 + work[j4p2];,8,3,1,2,4,0,4,2,0,25,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1313,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,8,4,1,5,10,0,8,0,0,33,56,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1314,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,2,0,0,3,6,3,0,0,0,5,49,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1315,"        dMin = Math.min(dMin, dN);",2,0,0,1,2,0,8,0,0,11,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1317,        work[j4 + 2] = dN;,4,1,1,1,2,0,0,0,0,8,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1318,        work[4 * end - pingPong - 1] = eMin;,6,3,1,1,2,0,0,0,0,12,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1320,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1331,        eMin = work[4 * start + pingPong + 4];,4,0,0,1,2,0,4,0,0,8,38,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1332,        double d = work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,10,38,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1333,        dMin = d;,8,0,0,0,0,0,0,0,0,10,9,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1335,        if (pingPong == 0) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1336,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,0,0,0,2,5,0,0,0,0,7,59,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1337,                work[j4 - 2] = d + work[j4 - 1];,6,3,1,2,4,0,0,0,0,14,32,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1338,                if (work[j4 - 2] == 0.0) {,38,11,1,2,5,8,0,0,0,60,26,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1343,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,8,5,1,3,8,0,0,0,0,17,64,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1345,                    final double tmp = work[j4 + 1] / work[j4 - 2];,0,0,0,2,4,0,0,0,0,6,47,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1346,                    work[j4] = work[j4 - 1] * tmp;,0,0,0,2,4,0,0,0,0,6,30,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1347,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1348,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1352,"                dMin = Math.min(dMin, d);",2,0,0,1,2,0,8,0,0,11,25,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1353,"                eMin = Math.min(eMin, work[j4]);",6,1,1,2,4,0,6,0,0,18,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1378,        dN2   = d;,4,0,0,0,0,0,0,0,0,5,10,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1379,        dMin2 = dMin;,2,0,0,0,0,0,0,0,0,3,13,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1380,        int j4 = 4 * (end - 2) - pingPong - 1;,8,4,0,1,2,0,0,0,0,13,38,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1381,        int j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,9,33,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1382,        work[j4 - 2] = dN2 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1383,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1388,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1390,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,6,3,1,2,4,1,0,0,0,14,49,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1391,            work[j4] = work[j4p2] * tmp;,2,1,1,2,4,0,0,0,0,12,28,7,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1392,            dN1 = dN2 * tmp;,12,3,0,0,0,0,0,0,0,16,16,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1393,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1397,"        dMin = Math.min(dMin, dN1);",2,0,0,1,2,0,8,0,0,11,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1399,        dMin1 = dMin;,8,1,0,0,0,0,4,2,0,17,13,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1400,        j4 = j4 + 4;,12,3,0,0,0,0,0,0,0,16,12,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1401,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1402,        work[j4 - 2] = dN1 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1403,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1408,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,8,5,1,3,8,0,0,0,0,17,66,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1410,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,6,3,1,2,4,1,0,0,0,20,49,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1411,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1412,            dN = dN1 * tmp;,0,0,1,0,0,0,0,0,0,3,15,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1413,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1417,"        dMin = Math.min(dMin, dN);",0,0,0,1,2,0,0,0,0,3,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1419,        work[j4 + 2] = dN;,4,1,1,1,2,0,0,0,0,8,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1420,        work[4 * end - pingPong - 1] = eMin;,0,0,0,1,2,0,0,0,0,3,36,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1422,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1433,        final double cnst1 = 0.563;,0,0,0,0,0,0,0,0,0,0,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1434,        final double cnst2 = 1.010;,0,0,0,0,0,0,0,0,0,0,27,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1435,        final double cnst3 = 1.05;,2,0,0,0,0,1,0,0,0,3,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1439,        if (dMin <= 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1445,        int nn = 4 * end + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1446,        switch (deflated) {,6,0,0,1,3,0,4,0,0,11,19,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1449,            if (dMin == dN || dMin == dN1) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1451,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,0,0,0,4,8,0,0,0,0,12,62,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1452,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,10,4,1,4,8,0,8,0,0,31,62,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1453,                double a2 = work[nn - 7] + work[nn - 5];,6,3,1,2,4,0,0,0,0,13,40,8,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1455,                if (dMin == dN && dMin1 == dN1) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1457,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,0,0,0,0,0,0,0,0,0,0,46,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1458,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,0,0,0,4,8,0,0,0,0,12,89,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1459,                    if (gap1 > 0.0 && gap1 > b1) {,6,3,0,1,3,0,0,0,0,9,30,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1460,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",14,4,0,2,4,0,4,0,0,24,52,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1461,                        tType = -2;,2,0,0,0,0,0,0,0,0,4,11,11,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1473,                } else {,2,1,0,0,2,0,0,0,0,3,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1527,            } else if (dMin == dN2) {,4,1,0,1,4,0,0,0,0,5,25,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1673,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1683,        if (shift < sigma) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1684,            sigmaLow += shift;,0,0,0,0,0,0,0,0,0,0,18,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1685,            final double t = sigma + sigmaLow;,6,1,0,0,0,1,0,0,0,8,34,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1686,            sigmaLow -= t - sigma;,8,1,1,0,0,1,0,0,0,15,22,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1687,            sigma = t;,4,0,0,0,0,0,0,0,0,5,10,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1688,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1689,            final double t = sigma + shift;,6,1,1,0,0,1,0,0,0,13,31,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1690,            sigmaLow += sigma - (t - shift);,8,2,0,1,2,0,0,0,0,11,32,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1691,            sigma = t;,8,1,0,0,0,0,0,0,0,10,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1693,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,312,        return realEigenvalues.clone();,2,1,0,1,2,1,0,0,0,3,31,8,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1751,                r = i;,10,1,0,0,0,0,0,0,0,13,6,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1752,                minG = absG;,0,0,0,0,0,0,0,0,0,0,12,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1770,            z *= -work[6 * i - 1];,4,2,1,1,2,0,0,0,0,10,22,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1771,            eigenvector[i] = z;,0,0,0,1,2,0,0,0,0,3,19,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1772,            n2 += z * z;,8,1,0,0,0,0,0,0,0,11,12,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,80,30,public abstract class CompositeFormat extends Format {,2,0,0,0,1,2,0,2,0,6,54,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,80,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,80,54,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,80,55,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1700,        final int m = main.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1701,        eigenvectors = new ArrayRealVector[m];,2,0,1,1,2,0,0,2,0,7,38,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1704,        final double[] d = new double[m];,8,1,1,2,4,1,0,0,0,12,33,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1705,        final double[] l = new double[m - 1];,4,1,0,2,4,1,0,0,0,6,37,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1707,        final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;,8,6,1,3,6,2,0,0,0,22,101,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1708,        double di = main[0]+mu;,6,1,1,1,2,0,0,0,0,10,23,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1709,        d[0] = di;,2,0,1,1,2,0,0,0,0,5,10,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1710,        for (int i = 1; i < m; ++i) {,8,1,1,1,3,0,0,0,0,16,29,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1711,            final double eiM1  = secondary[i - 1];,0,0,0,1,2,0,0,0,0,3,38,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1712,            final double ratio = eiM1 / di;,8,1,0,0,0,1,0,0,0,11,31,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1713,            di       = main[i] - eiM1 * ratio + mu;,8,3,1,1,2,0,0,0,0,16,39,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1714,            l[i - 1] = ratio;,8,2,1,1,2,0,0,0,0,14,17,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1715,            d[i]     = di;,2,0,1,1,2,0,0,0,0,7,14,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1719,        for (int i = 0; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1720,"            eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);",2,1,1,3,6,0,6,0,0,18,63,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1723,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1739,        final int m = main.length;,0,0,0,0,0,0,0,0,0,0,26,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1740,"        stationaryQuotientDifferenceWithShift(d, l, eigenvalue);",2,1,1,1,2,0,8,0,0,15,56,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1741,"        progressiveQuotientDifferenceWithShift(d, l, eigenvalue);",2,0,1,1,2,0,8,2,0,15,57,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1745,        int r = m - 1;,4,1,0,0,0,0,0,0,0,5,14,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1746,        double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);,0,0,0,3,6,0,0,0,0,9,67,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1747,        int sixI = 0;,6,3,0,0,0,0,10,0,0,19,13,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1748,        for (int i = 0; i < m - 1; ++i) {,10,3,0,1,3,0,0,0,0,14,33,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1749,            final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);,6,5,1,5,10,1,4,0,0,33,83,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1750,            if (absG < minG) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1754,            sixI += 6;,2,0,0,0,0,0,0,0,0,3,10,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1759,        double[] eigenvector = new double[m];,0,0,0,2,4,0,0,0,0,6,37,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1760,        double n2 = 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1761,        eigenvector[r] = 1;,4,0,1,1,2,0,4,0,0,16,19,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1762,        double z = 1;,2,0,0,0,0,0,0,0,0,2,13,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1763,        for (int i = r - 1; i >= 0; --i) {,10,2,0,1,3,0,4,0,0,18,34,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1764,            z *= -work[6 * i + 2];,4,2,1,1,2,0,0,0,0,10,22,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1765,            eigenvector[i] = z;,2,0,1,1,2,0,0,0,0,7,19,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1766,            n2 += z * z;,0,0,0,0,0,0,0,0,0,0,12,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1768,        z = 1;,2,0,0,0,0,0,6,0,0,9,6,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1769,        for (int i = r + 1; i < m; ++i) {,12,3,0,1,3,0,0,0,0,16,33,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1776,        final double inv = 1.0 / Math.sqrt(n2);,4,1,0,1,2,1,6,0,0,13,39,0,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1777,        for (int i = 0; i < m; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1778,            eigenvector[i] *= inv;,2,0,1,1,2,0,0,0,0,7,22,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1781,        return (transformer == null) ?,2,1,0,1,2,1,0,0,0,3,30,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1797,        final int nM1 = d.length - 1;,6,1,0,0,0,1,0,0,0,8,29,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1798,        double si = -lambda;,6,0,0,0,0,0,0,0,0,7,20,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1799,        int sixI = 0;,6,1,1,0,0,0,4,2,0,17,13,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1800,        for (int i = 0; i < nM1; ++i) {,0,0,0,1,3,0,0,0,0,4,31,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1801,            final double di   = d[i];,2,0,1,1,2,1,0,0,0,7,25,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1802,            final double li   = l[i];,0,0,0,1,2,0,0,0,0,3,25,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1803,            final double diP1 = di + si;,12,4,0,0,0,1,0,2,0,19,28,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1804,            final double liP1 = li * di / diP1;,8,2,0,0,0,1,0,0,0,11,35,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1805,            work[sixI]        = si;,0,0,0,1,2,0,0,0,0,3,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1806,            work[sixI + 1]    = diP1;,8,2,0,1,2,1,0,0,0,11,25,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1807,            work[sixI + 2]    = liP1;,4,1,1,1,2,0,0,0,0,8,25,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1808,            si = li * liP1 * si - lambda;,12,2,0,0,0,1,0,0,0,16,29,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1809,            sixI += 6;,0,0,0,0,0,0,0,0,0,0,10,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1811,        work[6 * nM1 + 1] = d[nM1] + si;,0,0,0,2,4,0,0,0,0,6,32,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1812,        work[6 * nM1]     = si;,4,1,1,1,2,0,0,0,0,8,23,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1813,    },2,1,0,0,1,0,2,0,0,6,1,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1825,        final int nM1 = d.length - 1;,14,2,0,0,0,1,0,0,0,18,29,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1826,        double pi = d[nM1] - lambda;,0,0,0,1,2,0,0,0,0,3,28,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1827,        int sixI = 6 * (nM1 - 1);,4,2,0,1,2,0,0,0,0,6,25,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1828,        for (int i = nM1 - 1; i >= 0; --i) {,8,2,0,1,3,0,0,0,0,11,36,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1829,            final double di   = d[i];,2,0,1,1,2,1,0,0,0,7,25,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1830,            final double li   = l[i];,10,1,1,1,2,1,0,0,0,17,25,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1831,            final double diP1 = di * li * li + pi;,10,2,0,0,0,1,0,0,0,13,38,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1832,            final double t    = di / diP1;,6,1,0,0,0,1,0,0,0,8,30,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1833,            work[sixI +  9]   = pi;,4,1,1,1,2,0,0,0,0,8,23,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1834,            work[sixI + 10]   = diP1;,4,1,1,1,2,0,0,0,0,8,25,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1835,            work[sixI +  5]   = li * t;,0,0,0,1,2,0,0,0,0,3,27,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1836,            pi = pi * t - lambda;,8,2,0,0,0,0,0,0,0,11,21,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1837,            sixI -= 6;,2,0,0,0,0,0,0,0,0,3,10,6,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1839,        work[3] = pi;,2,0,1,1,2,0,0,0,0,5,13,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1840,        work[4] = pi;,0,0,0,1,2,0,0,0,0,3,13,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1841,    },2,1,0,0,1,0,0,0,0,3,1,7,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,96,"        throws NullPointerException, IllegalArgumentException {",0,0,0,0,1,0,0,0,0,1,55,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,97,        if (d == null) {,4,1,0,1,3,0,0,0,0,5,16,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,100,        if (d.length == 0) {,4,1,0,1,3,0,0,0,0,5,20,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,103,        data = copyArray ? d.clone() :  d;,0,0,0,1,2,0,0,0,0,3,34,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,104,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,36,    private static final RealVectorFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,4,0,9,54,1,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,117,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,118,        this.prefix      = prefix;,0,0,0,0,0,0,0,0,0,0,26,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,119,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,120,        this.separator   = separator;,0,0,0,0,0,0,0,0,0,0,29,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,121,        trimmedPrefix    = prefix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,123,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,124,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,173,        return getInstance(Locale.getDefault());,8,1,0,2,4,1,6,0,0,16,40,3,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,80,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,4,2,0,6,60,5,0.04545,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,80,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,80,35,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,0,0,0,4,8,0,0,0,0,12,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,6,0,0,0,0,0,0,0,0,7,9,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,4,0,0,3,7,0,4,0,0,9,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,2,0,0,1,3,0,0,0,0,2,15,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,4,0,0,0,0,0,0,2,0,6,8,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,4,2,1,3,7,1,0,2,0,17,32,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,2,0,0,3,6,1,6,2,0,11,36,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",6,0,0,2,5,0,0,0,0,7,48,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,2,0,0,1,3,1,2,0,0,5,35,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,0,0,0,1,4,0,0,0,0,5,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,0,0,0,1,4,0,0,0,0,5,24,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,4,2,0,1,3,0,4,0,0,10,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,10,4,0,2,4,0,0,0,0,15,53,15,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,                        tType -= 11;,0,0,0,0,0,0,0,0,0,0,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,2,0,0,0,0,0,6,0,0,8,11,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,                    double s = 0.25 * dMin;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,                    if (dMin == dN) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,7,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0,0,0,1,3,0,0,0,0,4,60,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,                    a2 = cnst3 * a2;,0,0,0,0,0,0,8,0,0,8,16,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,                    if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,0,0,3,6,1,0,0,0,7,41,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1523,                    tau = s;,0,0,0,0,0,0,0,0,0,0,8,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,191,        throws InvalidMatrixException {,0,0,0,0,1,0,0,0,0,1,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,        this.main      = main.clone();,2,0,0,1,2,0,0,0,0,2,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,194,        this.secondary = secondary.clone();,0,0,0,1,2,0,0,0,0,3,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,198,        squaredSecondary = new double[secondary.length];,0,0,0,1,2,0,0,0,0,3,48,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,1,0,1,3,0,4,0,0,22,51,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,201,            squaredSecondary[i] = s * s;,0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,204,        this.splitTolerance = splitTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,        decompose();,2,0,0,1,2,0,0,8,0,10,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,1,2,4,0,0,0,0,3,56,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,16,3,0,3,6,1,10,0,0,30,62,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,645,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,67,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,2,0,0,3,6,0,0,0,0,2,62,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,647,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,69,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,648,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,2,0,0,2,4,3,0,0,0,5,76,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,651,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,0,0,0,3,6,0,0,0,0,9,67,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",2,0,0,1,2,3,8,0,0,13,36,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,657,                processGeneralBlock(n);,0,0,0,1,2,0,0,0,0,3,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,3,22,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,4,1,0,1,3,0,0,0,0,5,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,4,0,0,0,0,0,0,0,0,5,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,10,2,1,1,2,2,0,0,0,16,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,830,            sumOffDiag += ei;,2,0,0,0,0,3,0,0,0,5,17,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,8,2,0,1,3,0,0,0,0,11,22,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,839,"        flipIfWarranted(n, 2);",0,0,0,1,2,0,0,0,0,3,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,842,        initialSplits(n);,0,0,0,1,2,0,4,0,0,4,17,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,845,        tType = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,846,        dMin1 = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,847,        dMin2 = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,850,        dN2   = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,854,        int i0 = 0;,18,3,1,0,0,0,0,0,0,30,11,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,4,0,0,0,0,0,0,0,0,4,11,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,856,        while (n0 > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,10,3,1,2,4,0,0,2,0,19,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,860,            sigmaLow = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,863,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,0,0,0,2,4,0,0,0,0,6,54,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,864,            double offDiagMax = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,865,            double diagMax    = work[4 * n0 - 4];,4,2,1,1,2,0,0,0,0,8,37,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,866,            double diagMin    = diagMax;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,867,            i0 = 0;,4,0,0,0,0,1,0,2,0,7,7,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,868,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,8,3,0,2,5,0,0,0,0,12,44,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,869,                if (work[i + 2] <= 0) {,0,0,0,2,5,0,0,0,0,7,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,873,                if (diagMin >= 4 * offDiagMax) {,4,2,0,1,3,0,0,0,0,6,32,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,874,"                    diagMin    = Math.min(diagMin, work[i + 4]);",0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,875,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",10,3,1,2,4,0,6,0,0,23,47,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,877,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",4,2,1,3,6,0,6,0,0,19,54,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,878,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,880,            work[4 * n0 - 2] = offDiagMin;,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,883,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",8,3,0,2,4,0,8,0,0,21,67,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,885,            pingPong = 0;,4,0,0,0,0,0,0,0,0,5,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,886,            int maxIter = 30 * (n0 - i0);,6,2,0,1,2,0,0,0,0,8,29,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,887,            for (int k = 0; i0 < n0; ++k) {,0,0,0,1,3,0,0,0,0,4,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,888,                if (k >= maxIter) {,0,0,0,1,3,0,4,0,0,4,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,893,"                n0 = goodStep(i0, n0);",2,0,0,1,2,0,6,0,0,9,22,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,894,                pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,898,                if ((pingPong == 0) && (n0 - i0 > 3) &&,0,0,0,2,5,0,0,0,0,7,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,936,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,937,        for (int k = 0; k < 2; ++k) {,6,1,0,1,3,0,0,0,0,8,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,940,            double d = work[4 * (n - 1) + pingPong];,6,3,1,2,4,0,0,0,0,11,40,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,941,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,10,4,0,2,5,0,0,0,0,15,54,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,942,                if (work[i + 2] <= TOLERANCE_2 * d) {,6,3,1,2,5,0,0,0,0,11,37,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,946,                    d *= work[i] / (d + work[i + 2]);,6,3,1,3,6,0,0,0,0,16,33,10,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,951,            d = work[pingPong];,2,0,1,1,2,0,6,0,0,13,19,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,952,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,12,8,1,1,3,0,12,0,0,43,51,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,953,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,954,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,955,                if (work[i] <= TOLERANCE_2 * d) {,0,0,0,2,5,0,0,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,960,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,0,0,0,3,8,0,0,0,0,11,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,962,                    final double tmp = work[i + 2] / work[j];,8,2,1,2,4,1,0,0,0,19,41,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,963,                    work[j + 2] = work[i] * tmp;,4,2,1,2,4,0,0,0,0,13,28,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,964,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,965,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,970,            work[4 * n - 3 - pingPong] = d;,2,1,1,1,2,0,0,0,0,8,31,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,973,            pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,977,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,992,        g = 0.0;,0,0,0,0,0,0,0,0,0,0,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,995,        int deflatedEnd = end;,6,0,0,0,0,0,0,0,0,7,22,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,996,        for (boolean deflating = true; deflating;) {,2,1,0,1,3,0,0,0,0,3,44,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,998,            if (start >= deflatedEnd) {,4,1,0,1,3,0,0,0,0,5,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1003,            final int k = 4 * deflatedEnd + pingPong - 1;,10,6,0,0,0,1,0,0,0,18,45,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1005,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1011,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,2,0,1,2,4,1,0,0,0,5,73,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1012,                deflatedEnd -= 1;,2,0,0,0,0,0,0,0,0,3,17,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1014,            } else if ((start == deflatedEnd - 2) ||,4,3,0,1,4,0,0,0,0,7,40,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1043,                deflating = false;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1047,        },8,5,0,0,1,0,0,0,0,14,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1049,        final int l = 4 * deflatedEnd + pingPong - 1;,6,3,1,0,0,3,0,0,0,21,45,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1052,        if ((dMin <= 0) || (deflatedEnd < end)) {,10,3,0,3,7,0,0,0,0,14,41,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1053,"            if (flipIfWarranted(deflatedEnd, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1066,        if ((dMin < 0) ||,2,2,0,1,3,0,0,0,0,4,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1071,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",4,1,0,1,2,0,6,0,0,11,61,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1074,            for (boolean loop = true; loop;) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1077,"                dqds(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,25,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1080,                if ((dMin >= 0) && (dMin1 > 0)) {,4,3,0,3,7,0,0,0,0,7,33,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1082,                    updateSigma(tau);,0,0,0,1,2,0,4,0,0,4,17,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1083,                    return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1118,"        dqd(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,24,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1120,        return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1132,        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {,4,5,1,4,9,0,0,0,0,15,58,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1145,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1157,        final int lowerStart = 4 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1158,        final int upperStart = 5 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1159,        double lower = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1160,        double upper = Double.NEGATIVE_INFINITY;,10,1,0,0,0,0,0,0,0,12,40,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1161,        for (int i = 0; i < n; ++i) {,16,2,0,1,3,0,0,0,0,19,29,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1162,"            lower = Math.min(lower, work[lowerStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1163,"            upper = Math.max(upper, work[upperStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1167,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",2,0,0,3,6,1,16,0,0,19,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1168,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,6,0,0,1,2,1,4,0,0,11,62,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1169,        final double absoluteTolerance = 4 * minPivot;,8,1,0,0,0,1,0,0,0,12,46,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1170,        final int maxIter =,2,0,0,0,0,1,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1172,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,14,4,0,1,2,1,0,0,0,19,73,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1175,        double left  = lower - margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1176,        double right = upper + margin;,14,1,0,0,0,2,0,4,0,23,30,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1177,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,1,0,0,0,13,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1179,            final double range = right - left;,6,1,0,0,0,1,0,0,0,8,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1180,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,6,0,0,12,34,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1183,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1186,            final double middle = 0.5 * (left + right);,0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1187,"            if (countEigenValues(middle, index, n) >= 1) {",4,2,0,2,5,0,17,0,0,23,46,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1188,                right = middle;,4,0,0,0,0,0,0,0,0,5,15,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1190,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1194,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",8,2,0,2,4,0,12,0,0,23,73,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1197,        left  = lower - margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1198,        right = upper + margin;,0,0,0,0,0,0,0,0,0,0,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1199,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,1,0,0,0,13,35,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1201,            final double range = right - left;,6,0,0,0,0,0,0,0,0,7,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1202,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,0,0,0,6,34,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1205,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1208,            final double middle = 0.5 * (left + right);,10,2,0,1,2,2,0,4,0,18,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1209,"            if (countEigenValues(middle, index, n) >= n) {",0,0,0,2,5,0,0,0,0,7,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1210,                right = middle;,0,0,0,0,0,0,0,0,0,0,15,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1212,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1216,"        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",0,0,0,2,4,0,0,0,0,6,75,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1218,"        return new double[] { lower, upper };",4,0,0,2,4,1,0,0,0,4,37,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1230,        double ratio = main[index] - t;,0,0,0,1,2,0,0,0,0,3,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1231,        int count = (ratio > 0) ? 0 : 1;,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1232,        for (int i = 1; i < n; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1233,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,14,6,1,2,4,0,0,0,0,25,70,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1234,            if (ratio <= 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1235,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1238,        return count;,4,0,0,0,0,4,0,0,0,7,13,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1253,        double di = main[index] - lambda;,4,1,1,1,2,0,0,0,0,9,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1254,        work[0] = Math.abs(di);,0,0,1,2,4,0,6,0,0,9,23,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1255,        for (int i = 1; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1256,            final int    fourI = 4 * i;,4,1,0,0,0,1,0,0,0,6,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1257,            final double eiM1  = secondary[index + i - 1];,6,2,1,1,2,1,0,0,0,11,46,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1258,            final double ratio = eiM1 / di;,12,1,0,0,0,2,4,0,0,19,31,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1259,            work[fourI - 2] = ratio * ratio * Math.abs(di);,6,2,1,2,4,0,6,0,0,17,47,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1260,            di = (main[index + i] - lambda) - eiM1 * ratio;,12,2,0,2,4,0,0,0,0,15,47,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1261,            work[fourI] = Math.abs(di);,0,0,1,2,4,0,6,0,0,11,27,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1263,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1273,        eMin = work[4 * start + pingPong + 4];,12,4,1,1,2,0,0,0,0,20,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1274,        double d = work[4 * start + pingPong] - tau;,8,3,1,1,2,0,0,0,0,13,44,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1275,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1276,        dMin1 = -work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,12,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1278,        if (pingPong == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1279,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,60,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1280,                work[j4 - 2] = d + work[j4 - 1];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1281,                final double tmp = work[j4 + 1] / work[j4 - 2];,0,0,0,2,4,0,0,0,0,6,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1282,                d = d * tmp - tau;,2,1,0,0,0,0,0,0,0,3,18,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1283,"                dMin = Math.min(dMin, d);",6,0,0,1,2,0,8,0,0,16,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1284,                work[j4] = work[j4 - 1] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1285,"                eMin = Math.min(work[j4], eMin);",4,0,1,2,4,1,6,0,0,16,32,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1288,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,14,5,0,2,5,0,0,4,0,24,60,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1289,                work[j4 - 3] = d + work[j4];,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1290,                final double tmp = work[j4 + 2] / work[j4 - 3];,0,0,0,2,4,0,0,0,0,6,47,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1291,                d = d * tmp - tau;,12,2,0,0,0,0,0,0,0,16,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1292,"                dMin = Math.min(dMin, d);",0,0,0,1,2,0,0,0,0,3,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1293,                work[j4 - 1] = work[j4] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1294,"                eMin = Math.min(work[j4 - 1], eMin);",12,2,1,2,4,0,6,0,0,24,36,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1299,        dN2 = d;,4,0,0,0,0,0,0,0,0,5,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1300,        dMin2 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1301,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1302,        int j4p2 = j4 + 2 * pingPong - 1;,8,3,0,0,0,0,0,0,0,11,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1303,        work[j4 - 2] = dN2 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1304,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,12,5,1,5,10,0,0,0,0,30,56,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1305,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,10,5,1,3,6,0,0,0,0,20,50,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1306,"        dMin = Math.min(dMin, dN1);",2,0,0,1,2,0,8,0,0,11,27,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1308,        dMin1 = dMin;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1309,        j4 = j4 + 4;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1310,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1311,        work[j4 - 2] = dN1 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1312,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,4,4,1,5,10,0,0,0,0,21,56,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1313,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,0,0,0,3,6,0,0,0,0,9,49,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1314,"        dMin = Math.min(dMin, dN);",4,0,1,1,2,0,8,0,0,18,26,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1316,        work[j4 + 2] = dN;,6,1,1,1,2,0,0,0,0,10,18,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1317,        work[4 * end - pingPong - 1] = eMin;,8,3,1,1,2,0,0,0,0,15,36,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1319,    },8,3,0,0,1,0,10,0,0,22,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1330,        eMin = work[4 * start + pingPong + 4];,0,0,0,1,2,0,0,0,0,3,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1331,        double d = work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,10,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1332,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1334,        if (pingPong == 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1335,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,59,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1336,                work[j4 - 2] = d + work[j4 - 1];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1337,                if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1342,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,8,5,1,3,8,0,0,0,0,17,64,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1344,                    final double tmp = work[j4 + 1] / work[j4 - 2];,10,4,1,2,4,1,0,0,0,19,47,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1345,                    work[j4] = work[j4 - 1] * tmp;,0,0,0,2,4,0,0,0,0,6,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1346,                    d *= tmp;,4,0,0,0,0,0,0,0,0,6,9,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1347,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1351,"                dMin = Math.min(dMin, d);",0,0,0,1,2,0,0,0,0,3,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1352,"                eMin = Math.min(eMin, work[j4]);",4,0,1,2,4,0,6,0,0,16,32,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1377,        dN2   = d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1378,        dMin2 = dMin;,4,0,0,0,0,0,8,0,0,13,13,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1379,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1380,        int j4p2 = j4 + 2 * pingPong - 1;,10,3,0,0,0,0,0,0,0,14,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1381,        work[j4 - 2] = dN2 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1382,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1387,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1389,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,8,3,1,2,4,1,6,0,0,23,49,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1390,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1391,            dN1 = dN2 * tmp;,6,1,0,0,0,0,0,0,0,8,16,7,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1392,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1396,"        dMin = Math.min(dMin, dN1);",6,1,0,1,2,0,8,0,0,16,27,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1398,        dMin1 = dMin;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1399,        j4 = j4 + 4;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1400,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1401,        work[j4 - 2] = dN1 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1402,        if (work[j4 - 2] == 0.0) {,10,4,1,2,5,0,0,0,0,16,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1407,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1409,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,8,3,1,2,4,4,0,0,0,19,49,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1410,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1411,            dN = dN1 * tmp;,8,1,0,0,0,0,0,0,0,10,15,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1412,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1416,"        dMin = Math.min(dMin, dN);",2,0,0,1,2,0,8,0,0,11,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1418,        work[j4 + 2] = dN;,2,0,0,1,2,1,0,0,0,3,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1419,        work[4 * end - pingPong - 1] = eMin;,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1421,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1432,        final double cnst1 = 0.563;,4,0,0,0,0,1,0,0,0,6,27,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1433,        final double cnst2 = 1.010;,4,1,1,0,0,1,0,0,0,11,27,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1434,        final double cnst3 = 1.05;,2,0,0,0,0,1,0,0,0,3,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1438,        if (dMin <= 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1444,        int nn = 4 * end + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1445,        switch (deflated) {,2,0,0,1,3,0,0,0,0,2,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1448,            if (dMin == dN || dMin == dN1) {,0,0,0,1,3,0,0,0,0,4,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1450,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,6,3,1,4,8,0,8,0,0,21,62,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1451,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,6,3,1,4,8,0,14,0,0,27,62,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1452,                double a2 = work[nn - 7] + work[nn - 5];,0,0,0,2,4,0,0,2,0,2,40,11,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1454,                if (dMin == dN && dMin1 == dN1) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1456,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,0,0,0,0,0,0,0,0,0,0,46,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1457,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,22,7,0,4,8,1,0,0,0,30,89,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1458,                    if (gap1 > 0.0 && gap1 > b1) {,6,3,0,1,3,0,0,0,0,9,30,9,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1459,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",0,0,0,2,4,0,0,0,0,6,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1460,                        tType = -2;,0,0,0,0,0,0,0,0,0,0,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1472,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1526,            } else if (dMin == dN2) {,6,1,0,1,4,0,0,0,0,7,25,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1672,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1682,        if (shift < sigma) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1683,            sigmaLow += shift;,4,0,0,0,0,0,0,0,0,5,18,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1684,            final double t = sigma + sigmaLow;,0,0,0,0,0,0,0,0,0,0,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1685,            sigmaLow -= t - sigma;,0,0,0,0,0,0,0,0,0,0,22,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1686,            sigma = t;,4,0,0,0,0,0,0,0,0,5,10,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1687,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1688,            final double t = sigma + shift;,6,1,0,0,0,1,0,0,0,8,31,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1689,            sigmaLow += sigma - (t - shift);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1690,            sigma = t;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1692,    },2,0,0,0,1,0,0,0,0,2,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,81,30,public abstract class CompositeFormat extends Format {,0,0,0,0,1,0,0,0,0,1,54,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,81,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,81,54,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,0,0,0,3,31,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,81,55,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,117,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,118,        this.prefix      = prefix;,4,0,1,0,0,0,0,0,0,12,26,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,119,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,120,        this.separator   = separator;,4,0,0,0,0,0,2,0,0,7,29,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,121,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,123,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,124,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,81,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,2,0,0,2,4,4,4,6,0,15,60,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,36,    private static final RealVectorFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,2,0,7,54,2,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,35,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,44,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,603,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,604,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,605,"        final RealMatrix out = createMatrix(nCols, nRows);",0,0,0,1,2,0,0,0,0,3,50,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,1,0,1,4,0,2,2,0,12,63,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,616,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,160,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",6,1,0,1,2,1,0,0,0,8,63,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,482,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,483,        final int columns = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,484,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,6,0,1,2,0,8,0,0,27,58,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,485,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,486,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,487,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,488,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,491,        return visitor.end();,2,2,1,1,2,1,4,0,0,13,21,3,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,611,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,612,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,55,        throws IllegalArgumentException {,0,0,0,0,1,0,0,0,0,1,33,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,56,        if (rowDimension <= 0 ) {,0,0,0,1,3,0,0,0,0,4,25,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,61,        if (columnDimension <= 0) {,2,0,0,1,3,0,0,0,0,4,27,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,66,        lu = null;,4,0,0,0,0,0,0,0,0,6,10,0,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,76,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,77,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,372,        },6,1,0,0,1,1,6,0,0,14,1,3,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,373,    },10,2,0,0,1,0,0,0,0,13,1,8,0.03333,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,114,"        throws IllegalArgumentException, NullPointerException {",6,2,0,0,1,0,0,0,0,8,55,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,115,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,118,            if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,121,            final int nRows = d.length;,6,0,0,0,0,1,0,0,0,7,27,6,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,122,            if (nRows == 0) {,8,2,0,1,3,0,0,0,0,11,17,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,125,            final int nCols = d[0].length;,0,0,0,1,2,0,0,0,0,3,30,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,126,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,129,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,130,                if (d[r].length != nCols) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,136,            data = d;,14,4,1,0,0,0,0,0,0,24,9,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,138,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,254,            return multiply((Array2DRowRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,42,7,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,271,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,273,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,274,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,275,        final int nSum = this.getColumnDimension();,2,0,0,1,2,1,2,0,0,5,43,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,276,        final double[][] outData = new double[nRows][nCols];,2,0,1,4,8,1,0,0,0,7,52,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,277,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,278,            final double[] dataRow    = data[row];,0,0,0,2,4,0,0,0,0,6,38,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,279,            final double[] outDataRow = outData[row];,2,0,1,2,4,1,0,0,0,7,41,6,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,280,            for (int col = 0; col < nCols; col++) {,10,1,0,1,3,0,0,0,0,12,39,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,281,                double sum = 0;,4,0,0,0,0,1,4,0,0,9,15,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,282,                for (int i = 0; i < nSum; i++) {,8,1,0,1,3,0,0,0,0,10,32,8,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,283,                    sum += dataRow[i] * m.data[i][col];,16,3,1,3,6,1,0,0,0,29,35,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,285,                outDataRow[col] = sum;,4,0,1,1,2,3,0,6,0,18,22,1,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,289,"        return new Array2DRowRealMatrix(outData, false);",0,0,0,1,2,1,0,0,0,4,48,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,81,650,        if (left.getColumnDimension() != right.getRowDimension()) {,4,0,1,3,7,1,10,0,0,23,59,3,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,81,656,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,94,"        throws IllegalArgumentException, NullPointerException {",4,0,0,0,1,0,0,0,0,4,55,2,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,95,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,96,    },4,0,0,0,1,0,0,0,0,5,1,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,314,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,315,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,320,            if (column > 0) {,2,1,0,1,3,0,8,0,0,11,17,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,325,            final int nRows = subMatrix.length;,14,1,0,0,0,1,0,0,0,17,35,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,326,            if (nRows == 0) {,8,1,0,1,3,0,0,0,0,10,17,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,330,            final int nCols = subMatrix[0].length;,0,0,0,1,2,0,0,0,0,3,38,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,331,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,334,            data = new double[subMatrix.length][nCols];,6,0,1,2,4,0,0,0,0,9,43,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,335,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,336,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,343,        } else {,0,1,1,0,2,0,0,0,0,5,8,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,347,    },10,2,0,0,1,0,0,0,0,13,1,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,622,"        setSubMatrix(in, 0, 0);",6,3,0,1,2,0,0,0,0,10,23,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,623,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,581,            final double dCurrent = main[i];,4,0,1,1,2,4,0,4,0,16,32,1,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,582,            final double ePrevious = eCurrent;,8,0,0,0,0,3,0,2,0,13,34,0,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,583,            eCurrent = Math.abs(secondary[i]);,0,0,0,2,4,0,0,0,0,6,34,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,584,"            eMax = Math.max(eMax, eCurrent);",2,0,0,1,2,0,8,0,0,11,32,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,585,            final double radius = ePrevious + eCurrent;,10,2,0,0,0,3,0,0,0,15,43,1,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,587,            final double lower = dCurrent - radius;,2,0,0,0,0,0,0,0,0,4,39,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,588,            work[lowerStart + i] = lower;,14,2,1,1,2,0,0,0,0,20,29,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,589,"            lowerSpectra = Math.min(lowerSpectra, lower);",2,0,0,1,2,0,8,0,0,11,45,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,591,            final double upper = dCurrent + radius;,8,2,0,0,0,1,0,0,0,11,39,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,592,            work[upperStart + i] = upper;,12,2,1,1,2,0,0,0,0,18,29,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,593,"            upperSpectra = Math.max(upperSpectra, upper);",2,0,0,1,2,0,6,0,0,9,45,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,697,            final double absDPrevious = absDCurrent;,0,0,0,0,0,0,0,0,0,0,40,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,698,            absDCurrent = Math.abs(main[i + 1]);,4,1,1,2,4,0,4,0,0,12,36,6,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,699,            final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);,6,3,1,1,2,0,0,0,0,14,74,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,700,            if (Math.abs(secondary[i]) <= max) {,4,1,1,3,7,0,4,0,0,13,36,3,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,81,106,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,4,0,0,14,47,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,43,    protected AbstractRealMatrix() {,0,0,0,1,3,0,0,0,0,4,32,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,44,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,81,45,    },6,1,0,0,1,0,0,0,0,8,1,6,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,404,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,81,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,237,        cachedV  = null;,2,0,0,0,0,0,0,0,0,3,16,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,238,        cachedD  = null;,4,0,0,0,0,0,0,0,0,4,16,7,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,239,        cachedVt = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,240,        work     = new double[6 * main.length];,8,2,0,1,2,0,4,0,0,15,39,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,243,        computeGershgorinCircles();,0,0,0,1,2,0,2,0,0,2,27,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,246,        findEigenvalues();,0,0,0,1,2,0,2,0,0,2,18,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,571,        final int m     = main.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,572,        final int lowerStart = 4 * m;,6,1,1,0,0,1,0,2,0,19,29,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,573,        final int upperStart = 5 * m;,0,0,1,0,0,0,0,0,0,3,29,10,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,574,        lowerSpectra = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,40,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,575,        upperSpectra = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,7,40,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,576,        double eMax = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,578,        double eCurrent = 0;,2,0,1,0,0,0,0,0,0,7,20,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,579,        for (int i = 0; i < m - 1; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,597,        final double dCurrent = main[m - 1];,4,1,1,1,2,1,0,0,0,8,36,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,598,        final double lower = dCurrent - eCurrent;,2,0,0,0,0,1,2,0,0,5,41,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,599,        work[lowerStart + m - 1] = lower;,6,2,1,1,2,0,0,0,0,11,33,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,600,"        lowerSpectra = Math.min(lowerSpectra, lower);",6,0,0,1,2,0,8,0,0,16,45,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,601,        final double upper = dCurrent + eCurrent;,0,0,0,0,0,0,0,0,0,0,41,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,602,        work[upperStart + m - 1] = upper;,6,2,1,1,2,0,0,2,0,14,33,3,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,8,1,1,3,6,0,2,0,0,17,65,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,4,0,0,0,0,2,0,2,0,7,13,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,4,1,0,2,4,0,0,0,0,6,22,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",8,0,0,1,2,1,4,0,0,14,31,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,10,1,1,2,4,3,4,6,0,32,74,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,          if (basicRows.contains(basicRow)) {,8,1,0,2,5,0,6,0,0,16,35,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,351,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,352,              coefficients[i] =,0,0,0,1,2,0,0,0,0,3,17,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",4,1,0,2,4,1,2,0,0,7,70,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,433,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,49,        this.point = point.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,2,0,0,0,0,0,6,0,0,8,20,7,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,14,2,0,0,0,2,4,0,0,22,13,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,92,        return coefficients.dotProduct(point) + constantTerm;,0,0,0,1,2,1,0,0,0,4,53,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,155,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,193,        return tableau.getSolution();,4,1,0,1,2,1,4,0,0,9,29,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,82,    },2,0,0,0,1,0,4,0,0,7,1,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",4,1,0,3,8,0,0,0,0,6,63,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,307,        if (numArtificialVariables == 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,147,        if (tableau.getNumArtificialVariables() > 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,150,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,151,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,189,        tableau.discardArtificialVariables();,6,0,0,1,2,0,14,0,0,22,37,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,190,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,0,0,0,7,29,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,77,    public ArrayRealVector(double[] d) {,14,0,0,2,5,3,0,6,0,24,36,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,78,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,79,    },0,0,0,0,1,0,4,0,0,4,1,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,36,    private static final RealVectorFormat DEFAULT_FORMAT =,0,0,0,0,0,0,0,0,0,0,54,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,854,        return data.clone();,0,0,0,1,2,1,0,0,0,4,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1157,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,43,    protected AbstractRealMatrix() {,6,0,0,1,3,3,0,4,0,14,32,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,44,        lu = null;,0,0,0,0,0,0,0,2,0,2,10,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,82,45,    },0,0,1,0,1,0,0,0,0,4,1,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,117,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,118,        this.prefix      = prefix;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,119,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,120,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,121,        trimmedPrefix    = prefix.trim();,6,0,0,1,2,0,4,0,0,12,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,122,        trimmedSuffix    = suffix.trim();,8,0,0,1,2,3,10,2,0,24,33,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,123,        trimmedSeparator = separator.trim();,0,0,0,1,2,0,0,0,0,3,36,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,124,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,125,    },6,0,0,0,1,0,0,0,0,8,1,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,82,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,4,2,0,6,60,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,31,public abstract class CompositeFormat extends Format {,10,3,0,0,1,0,0,0,0,15,54,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,4,1,0,1,2,0,0,0,0,5,57,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,55,        nf.setMaximumFractionDigits(2);,4,0,1,1,2,1,4,0,0,14,31,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,82,56,        return nf;,4,0,0,0,0,2,0,2,0,7,10,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,94,"        throws IllegalArgumentException, NullPointerException {",0,0,0,0,1,0,0,0,0,1,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,95,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,314,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,315,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,320,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,325,            final int nRows = subMatrix.length;,10,1,0,0,0,0,10,0,0,23,35,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,330,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,331,            if (nCols == 0) {,4,0,1,1,3,1,2,0,0,12,17,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,334,            data = new double[subMatrix.length][nCols];,6,0,1,2,4,0,0,0,0,9,43,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,335,            for (int i = 0; i < data.length; ++i) {,22,2,0,1,3,1,6,0,0,34,39,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,336,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,0,3,6,0,0,0,0,5,64,9,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,343,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,347,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,354,            return data[row][column];,0,0,0,2,4,1,0,0,0,7,25,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,372,        },12,1,0,0,1,0,0,0,0,15,1,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,404,        return (data == null) ? 0 : data.length;,0,0,0,1,2,1,0,0,0,4,40,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,622,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,0,0,0,3,23,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,82,623,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,30,public final class MathUtils {,2,0,0,0,1,2,6,0,0,10,30,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,473,    private static final long[] factorials = new long[] ,10,3,0,2,4,1,8,2,0,25,51,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,367,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,368,            return 0;,0,0,0,0,0,1,2,0,0,2,9,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,369,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,370,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,4,3,0,4,8,1,12,0,0,19,56,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,82,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",0,0,0,3,6,1,0,0,0,10,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,99,                            final double value) {,2,0,0,0,2,1,0,0,0,3,21,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,100,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,101,        this.relationship = relationship;,4,0,0,0,0,0,0,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,102,        this.value        = value;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,168,        return coefficients;,0,0,0,0,0,1,0,0,0,1,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,176,        return relationship;,0,0,0,0,0,1,0,0,0,1,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,184,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,31,"    LEQ(""<=""),",2,0,0,1,2,0,0,0,0,3,10,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,34,"    GEQ("">="");",2,0,0,1,2,0,0,0,0,3,10,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,82,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,104,                   final double epsilon) {,2,0,0,0,2,1,0,0,0,3,23,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,105,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,106,        this.constraints            = constraints;,8,1,0,0,0,3,14,0,0,27,42,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,107,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,108,        this.epsilon                = epsilon;,0,0,0,0,0,0,0,0,0,0,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,109,        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);,0,0,0,2,4,0,0,0,0,6,82,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,110,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0,0,0,1,2,0,0,0,0,3,73,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,112,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,6,1,0,1,2,0,2,0,0,10,72,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,114,        this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));,8,1,0,2,4,0,2,2,0,14,86,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,115,        initialize();,0,0,0,1,2,0,2,0,0,2,13,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,126,        List<LinearConstraint> constraints = getNormalizedConstraints();,4,0,0,1,2,0,2,8,0,14,64,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,127,        int width = numDecisionVariables + numSlackVariables +,8,1,0,0,0,0,0,0,0,10,54,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,129,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,130,        double[][] matrix = new double[height][width];,2,0,1,4,8,0,0,0,0,6,46,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,133,        if (getNumObjectiveFunctions() == 2) {,0,1,0,2,5,0,2,0,0,3,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,136,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,6,2,1,2,4,0,8,0,0,19,55,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,137,        matrix[zIndex][zIndex] = maximize ? 1 : -1;,2,0,0,2,4,0,0,0,0,2,43,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,138,        RealVector objectiveCoefficients =,6,0,0,0,0,0,0,2,0,9,34,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,140,"            copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",0,0,0,4,8,0,0,0,0,12,87,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,141,            matrix[zIndex][width - 1] =,0,0,0,2,4,0,0,0,0,6,27,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,144,                if (!restrictToNonNegative) {,6,1,0,1,3,0,0,0,0,8,29,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,150,                int slackVar = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,151,                int artificialVar = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,152,                for (int i = 0; i < constraints.size(); i++) {,0,0,0,2,5,0,0,0,0,7,46,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,153,                    LinearConstraint constraint = constraints.get(i);,4,0,0,1,2,0,6,2,0,14,49,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,154,                    int row = getNumObjectiveFunctions() + i;,0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,157,"                    copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",2,0,1,4,8,0,8,0,0,14,66,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,160,                    if (!restrictToNonNegative) {,2,0,0,1,3,0,0,0,0,3,29,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,166,                    matrix[row][width - 1] = constraint.getValue();,2,1,1,3,6,0,4,0,0,12,47,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,169,                    if (constraint.getRelationship() == Relationship.LEQ) {,0,0,0,2,5,0,0,0,0,7,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,176,                    if ((constraint.getRelationship() == Relationship.EQ) ||,0,0,0,2,5,0,0,0,0,7,56,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,183,                return matrix;,16,2,0,0,0,4,0,0,0,23,14,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,190,        return f.getCoefficients().getDimension();,0,0,0,2,4,1,6,0,0,6,42,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,198,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,4,2,1,1,2,0,0,8,0,23,70,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,199,        for (LinearConstraint constraint : constraints) {,4,0,0,1,3,0,0,2,0,6,49,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,200,            normalized.add(normalize(constraint));,0,0,0,2,4,0,0,0,0,6,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,201,        },2,1,0,0,1,0,0,0,0,3,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,202,        return normalized;,0,0,0,0,0,1,0,0,0,1,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,211,        if (constraint.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,216,"        return new LinearConstraint(constraint.getCoefficients(), ",0,0,0,1,3,1,4,2,0,6,57,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,225,        return this.numArtificialVariables > 0 ? 2 : 1;,2,1,0,0,0,1,0,0,0,3,47,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,234,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,235,        for (final LinearConstraint constraint : constraints) {,4,0,0,1,3,1,0,2,0,7,55,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,236,            if (constraint.getRelationship() == relationship) {,2,1,0,2,5,0,4,0,0,7,51,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,237,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,239,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,240,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,248,        for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {,8,1,0,1,3,0,0,0,0,10,86,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,252,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,291,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,292,        int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;,6,0,0,1,2,0,8,0,0,15,65,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,293,        for (int i = start; i < getHeight(); i++) {,0,0,0,2,5,0,0,0,0,7,43,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,294,"            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {",2,2,0,4,9,0,12,0,0,17,72,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,295,                row = i;,4,1,0,0,0,0,18,0,0,24,8,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,300,        return row;,2,0,0,0,0,1,0,0,0,2,11,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,331,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); ",12,0,1,2,4,1,14,0,0,30,71,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,332,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,370,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,371,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",8,1,0,2,4,0,16,2,0,29,77,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,373,    },8,1,0,0,1,0,0,0,0,10,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,387,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,388,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",6,3,1,1,3,0,22,0,0,37,65,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,391,    },2,0,0,0,1,0,6,0,0,9,1,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,398,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,406,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,415,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,449,        return getWidth() - 1;,2,1,0,1,2,2,2,2,0,8,22,1,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,497,        return numArtificialVariables;,2,0,0,0,0,1,0,0,0,2,30,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,58,"        this(new ArrayRealVector(coefficients), constantTerm);",0,0,0,2,4,0,0,0,0,6,54,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",2,0,0,1,3,0,0,0,0,3,78,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,66,        this.coefficients = coefficients;,4,0,0,0,0,0,0,0,0,5,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,67,        this.constantTerm = constantTerm;,0,0,0,0,0,0,0,0,0,0,33,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,75,        return coefficients;,2,0,0,0,0,1,0,0,0,2,20,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,83,        return constantTerm;,8,1,1,0,0,1,6,0,0,18,20,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,42,        this(DEFAULT_EPSILON);,2,0,0,1,2,0,0,0,0,2,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,49,    public SimplexSolver(final double epsilon) {,0,0,0,1,3,0,0,0,0,4,44,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,6,2,0,9,1,7,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,6,2,1,0,0,1,0,6,0,27,12,1,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,8,0,1,0,0,0,4,0,0,15,15,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,12,3,1,2,4,0,0,0,0,25,22,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,0,1,2,5,0,2,0,0,6,47,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",10,2,0,3,7,0,12,0,0,25,66,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,134,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,        return true;,10,2,1,0,0,1,0,0,0,19,12,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,154,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,0,4,0,0,5,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,172,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",2,0,0,4,9,0,0,0,0,2,81,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,192,        return tableau.getSolution();,0,0,0,1,2,1,4,0,0,4,29,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,        int width = getWidth() - numArtificialVariables - 1;,10,2,1,1,2,0,2,0,0,20,52,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,        int height = getHeight() - 1;,8,1,0,1,2,1,12,0,0,23,29,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,312,        double[][] matrix = new double[height][width];,0,0,0,4,8,0,0,0,0,12,46,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,0,0,0,10,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,            for (int j = 0; j < width - 1; j++) {,20,5,0,1,3,0,0,0,0,26,37,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",8,2,1,3,6,0,2,0,0,20,38,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",2,0,0,4,8,0,0,0,0,2,55,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,        this.tableau = new Array2DRowRealMatrix(matrix);,12,2,0,1,2,0,0,2,0,17,48,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,320,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,321,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,0,0,0,3,6,0,0,0,0,9,70,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,341,      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());,0,0,0,2,4,0,0,0,0,6,79,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,0,0,2,4,0,0,0,0,6,102,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,343,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,4,0,0,8,48,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);,0,0,0,2,4,0,0,0,0,6,63,4,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,10,0,0,10,35,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,351,              basicRows.add(basicRow);,12,0,1,1,2,2,6,2,0,29,24,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,352,              coefficients[i] =,2,0,0,1,2,0,0,0,0,3,17,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,32,2,0,38,70,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,0,0,2,4,1,0,0,0,7,70,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,10,2,0,0,0,1,6,0,0,19,79,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,50,        this.value  = value;,10,0,0,0,0,0,0,4,0,15,20,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,86,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,83,92,        return coefficients.dotProduct(point) + constantTerm;,0,0,0,1,2,1,0,0,0,4,53,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,146,        if (tableau.getNumArtificialVariables() > 0) {,16,3,0,2,5,0,0,2,0,23,46,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,16,2,0,3,7,4,8,0,0,31,83,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",4,2,0,3,7,0,0,0,0,7,66,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,188,        tableau.discardArtificialVariables();,10,1,0,1,2,0,4,0,0,17,37,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,367,"        if (equals(x, y, eps)) {",4,1,0,2,5,0,8,0,0,13,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,368,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,369,        } else if (x < y) {,0,0,0,1,4,0,0,0,0,5,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,370,          return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,42,        this(DEFAULT_EPSILON);,0,0,0,1,2,0,0,0,0,3,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,43,    },2,0,0,0,1,0,0,0,0,3,1,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,49,    public SimplexSolver(final double epsilon) {,0,0,0,1,3,0,0,0,0,4,44,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,50,        this.epsilon = epsilon;,0,0,0,0,0,0,0,0,0,0,23,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,59,        double minValue = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,60,        Integer minPos = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,61,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,16,0,0,25,83,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",4,0,0,3,7,0,8,0,0,12,73,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,63,"                minValue = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,64,                minPos = i;,4,0,0,0,0,0,0,0,0,6,11,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,67,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,77,        double minRatio = Double.MAX_VALUE;,2,0,0,0,0,0,0,0,0,2,35,10,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,78,        Integer minRatioPos = null;,2,0,0,0,0,0,10,2,0,14,27,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,79,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,0,0,0,3,7,0,0,0,0,10,80,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,80,"            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",8,2,0,2,4,0,10,0,0,20,57,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,81,"            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {",4,2,1,3,7,0,14,0,0,24,69,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,82,"                double ratio = rhs / tableau.getEntry(i, col);",2,0,0,1,2,0,0,0,0,3,46,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,83,                if (ratio < minRatio) {,0,0,0,1,3,0,0,0,0,4,23,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,84,                    minRatio = ratio;,4,0,0,0,0,0,0,0,0,5,17,10,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,85,                    minRatioPos = i; ,0,0,0,0,0,0,0,0,0,0,16,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,89,        return minRatioPos;,2,0,0,0,0,1,0,0,0,2,19,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,102,        incrementIterationsCounter();,0,0,0,1,2,0,0,0,0,3,29,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,104,        Integer pivotCol = getPivotColumn(tableau);,2,0,0,1,2,0,4,2,0,8,43,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,105,"        Integer pivotRow = getPivotRow(pivotCol, tableau);",8,1,0,1,2,0,6,2,0,18,50,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,106,        if (pivotRow == null) {,4,1,0,1,3,1,4,0,0,10,23,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,111,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",2,0,0,1,2,0,8,0,0,10,55,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,112,"        tableau.divideRow(pivotRow, pivotVal);",16,1,0,1,2,3,14,0,0,38,38,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,115,        for (int i = 0; i < tableau.getHeight(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,116,            if (i != pivotRow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,117,"                double multiplier = tableau.getEntry(i, pivotCol);",0,0,0,1,2,0,0,0,0,3,50,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,118,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,10,0,0,10,45,9,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,167,        if (tableau.getNumArtificialVariables() == 0) {,0,0,0,2,5,0,0,0,0,7,47,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,185,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,187,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,61,    protected AbstractLinearOptimizer() {,2,0,0,1,3,1,0,0,0,3,37,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,62,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,4,0,0,4,41,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,67,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,86,        if (++iterations > maxIterations) {,6,1,0,1,3,3,0,0,0,11,35,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,89,    },4,0,1,0,1,0,0,0,0,20,1,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,98,        this.f                     = f;,4,0,0,0,0,0,0,0,0,5,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,99,        this.constraints           = constraints;,4,0,0,0,0,0,0,0,0,5,41,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,100,        this.goalType              = goalType;,4,0,0,0,0,0,0,0,0,5,38,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,101,        this.restrictToNonNegative = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,51,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,103,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,83,106,        return doOptimize();,0,0,0,1,2,1,2,0,0,2,20,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,307,        if (numArtificialVariables == 0) {,2,1,0,1,3,0,0,0,0,3,34,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,370,        for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,371,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",5,2,0,2,4,1,16,0,0,24,77,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,497,        return numArtificialVariables;,2,0,0,0,0,1,0,0,0,2,30,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,339,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,342,        return new ArrayRealVector(out);,0,0,0,1,2,1,0,0,0,4,32,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,134,            matrix[0][0] = -1;,0,0,0,2,4,0,0,0,0,6,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,171,                    } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,178,                        matrix[0][getArtificialVariableOffset() + artificialVar] = 1; ,0,0,0,3,6,0,0,0,0,9,61,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,179,                        matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; ,2,1,1,3,6,0,2,0,0,11,65,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,249,            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);,8,2,0,2,4,0,4,0,0,15,69,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,250,"            subtractRow(0, row, 1.0);",0,0,0,1,2,0,4,0,0,4,25,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,441,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,0,0,0,1,2,1,0,0,0,4,77,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,449,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",0,0,0,3,8,0,12,0,0,13,63,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,354,            return data[row][column];,0,0,0,2,4,1,0,0,0,7,25,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,372,        },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,30,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,473,    private static final long[] factorials = new long[] ,4,0,0,2,4,3,0,0,0,8,51,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0,0,0,4,8,1,0,0,0,13,56,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,83,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",8,3,1,3,6,1,10,0,0,24,48,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,273,"        return getBasicRow(col, true);",0,0,0,1,2,1,0,0,0,4,30,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,291,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,292,        int start = getNumObjectiveFunctions();,2,0,0,1,2,0,2,0,0,4,39,5,0.06667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,293,        for (int i = start; i < getHeight(); i++) {,8,1,0,2,5,0,2,0,0,12,43,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,294,"            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {",14,5,0,4,9,3,12,0,0,36,72,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,295,                row = i;,4,0,0,0,0,0,0,0,0,5,8,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,300,        return row;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,387,        for (int j = 0; j < getWidth(); j++) {,6,2,1,2,5,0,2,0,0,16,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,388,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",4,0,0,1,3,0,0,0,0,4,65,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,391,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,398,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,406,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,415,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,83,81,"        this(new ArrayRealVector(coefficients), relationship, value);",8,0,0,2,4,0,0,2,0,11,61,0,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,83,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,0,0,0,0,6,36,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,79,    },2,0,0,0,1,1,6,2,0,11,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,36,    private static final RealVectorFormat DEFAULT_FORMAT =,0,0,0,0,0,0,0,0,0,0,54,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,854,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1157,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,83,43,    protected AbstractRealMatrix() {,2,1,0,1,3,0,0,0,0,3,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,83,44,        lu = null;,2,0,0,0,0,0,2,0,0,6,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,83,45,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,95,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,117,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,118,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,119,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,120,        this.separator   = separator;,0,0,0,0,0,0,0,0,0,0,29,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,121,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,123,        trimmedSeparator = separator.trim();,4,1,0,1,2,0,4,0,0,10,36,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,124,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,83,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,4,2,0,6,60,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,83,31,public abstract class CompositeFormat extends Format {,6,0,0,0,1,2,0,2,0,12,54,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,83,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,2,1,1,2,0,0,0,0,13,57,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,83,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,83,56,        return nf;,4,1,0,0,0,1,2,0,0,9,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,94,"        throws IllegalArgumentException, NullPointerException {",4,0,0,0,1,0,0,0,0,4,55,2,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,95,        copyIn(d);,0,0,0,1,2,0,14,0,0,14,10,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,314,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,315,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,320,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,325,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,326,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,330,            final int nCols = subMatrix[0].length;,0,0,0,1,2,0,0,0,0,3,38,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,331,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,334,            data = new double[subMatrix.length][nCols];,6,0,1,2,4,0,0,0,0,9,43,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,335,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,336,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,1,0,2,0,18,35,3,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,343,        } else {,4,0,0,0,2,0,0,0,0,4,8,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,347,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,404,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,622,"        setSubMatrix(in, 0, 0);",10,1,0,1,2,0,4,0,0,17,23,1,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,83,623,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,104,                   final double epsilon) {,0,0,0,0,2,0,0,0,0,2,23,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,105,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,106,        this.constraints            = constraints;,4,0,0,0,0,0,0,0,0,5,42,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,107,        this.restrictToNonNegative  = restrictToNonNegative;,0,0,0,0,0,0,0,0,0,0,52,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,108,        this.epsilon                = epsilon;,8,2,1,0,0,0,0,0,0,25,38,0,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,109,        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);,2,0,0,2,4,1,2,4,0,9,82,4,0.0625,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,0,0,0,1,2,0,4,0,0,4,47,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },2,0,0,0,1,3,0,0,0,5,1,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,278,                    final double v1 = o1.getValue();,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,4,0,0,1,2,1,0,0,0,4,40,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,142,        final int n = steps.length;,0,0,0,0,0,0,0,0,0,0,27,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,2,0,1,2,4,0,0,0,0,7,38,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,2,1,0,1,3,0,0,0,0,3,29,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,2,0,1,2,4,1,0,0,0,7,47,6,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,146,            for (int j = 0; j < i + 1; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,147,                if (steps[j] == 0.0) {,0,0,0,2,5,0,0,0,0,7,22,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",2,1,0,1,2,0,8,0,0,11,46,9,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },2,0,0,0,1,0,0,0,0,2,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,2,0,0,2,4,1,0,0,0,3,71,2,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,294,            if (iterations > 0) {,0,0,0,1,3,0,0,0,0,4,21,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",4,0,0,1,2,0,8,0,0,12,58,7,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,6,6,0,1,2,0,16,0,0,28,27,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,5,35,5,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,322,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,401,"        Arrays.sort(simplex, comparator);",4,0,0,1,2,0,0,0,0,5,33,8,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,403,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,45,    public MultiDirectional() {,0,0,0,1,3,0,0,0,0,4,27,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,47,        this.gamma = 0.5;,0,0,0,0,0,0,0,0,0,0,17,4,2.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,0,0,0,0,0,0,0,0,0,0,23,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,0,0,0,1,4,0,0,0,0,5,40,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",18,4,1,4,8,2,10,2,0,43,104,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ConvergenceException,85,45,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/ConvergenceException,85,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,128,        } catch (MaxIterationsExceededException ex) {,0,0,0,1,4,0,0,0,0,5,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,129,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,0,0,0,2,5,0,0,0,0,7,65,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,4,0,0,2,6,0,0,0,0,5,49,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,8,2,0,0,0,1,0,0,0,11,12,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,6,0,0,1,2,0,0,0,0,6,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,4,1,0,1,3,0,4,0,0,10,13,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,2,0,1,0,0,0,2,0,0,6,23,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,206,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,85,181,                throw new MaxIterationsExceededException(maxIterations);,0,0,0,1,2,0,0,0,0,3,56,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,162,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,156,        if (p == 0) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,159,        if (p == 1) {,8,3,0,1,3,0,0,0,0,12,13,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,72,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,88,        return standardDeviation;,0,0,0,0,0,1,0,0,0,1,25,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,126,            return 0.5 * (1.0 + Erf.erf((x - mean) /,8,2,0,1,4,1,0,0,0,13,40,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,85,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,65,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,85,52,        if (x < 0) {,4,1,0,1,3,0,2,0,0,7,12,3,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,85,55,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,85,162,            ret = 0.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,54,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,43,    private double mean = 0;,2,0,0,0,0,1,0,0,0,3,24,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,46,    private double standardDeviation = 1;,8,1,0,0,0,0,0,0,0,10,37,12,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,55,        setMean(mean);,10,2,0,1,2,0,0,0,0,13,14,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,56,        setStandardDeviation(sd);,8,3,0,1,2,0,10,0,0,23,25,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,57,    },0,0,0,0,1,0,6,0,0,6,1,9,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,40,    private static final double SQRT2PI = Math.sqrt(2 * Math.PI);,0,0,0,1,2,0,0,0,0,3,61,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,81,    },2,0,0,0,1,0,0,0,0,3,1,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",2,0,0,1,2,0,8,0,0,11,16,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",6,0,1,2,4,0,0,0,0,11,27,3,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");",0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,        return res.toString();,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,        if (left.getColumnDimension() != right.getRowDimension()) {,0,0,0,3,7,0,0,0,0,10,59,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,4,1,0,2,4,1,2,2,0,9,37,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",6,2,0,1,2,0,0,0,0,8,51,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",10,0,1,1,2,1,0,4,0,19,65,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,560,        int blockIndex = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,561,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0,0,0,1,3,0,0,0,0,4,56,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,563,            final int pStart = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,564,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,567,                final int jWidth = out.blockWidth(jBlock);,0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,568,                final int jWidth2 = jWidth  + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,569,                final int jWidth3 = jWidth2 + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,570,                final int jWidth4 = jWidth3 + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,573,                final double[] outBlock = out.blocks[blockIndex];,0,0,0,2,4,0,0,0,0,6,49,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,8,1,0,1,3,0,0,0,0,10,55,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,2,0,0,1,2,1,4,0,0,7,38,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,578,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0,0,0,2,4,0,0,0,0,6,63,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,579,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0,0,0,2,4,0,0,0,0,6,67,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,580,"                    for (int p = pStart, k = 0; p < pEnd; ++p) {",0,0,0,1,3,0,0,0,0,4,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,581,                        final int lStart = (p - pStart) * kWidth;,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,582,                        final int lEnd   = lStart + kWidth;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,583,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,2,0,0,1,3,0,0,0,0,3,49,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,8,2,0,0,0,0,8,0,0,19,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,585,                            int l = lStart;,0,0,0,0,0,0,0,2,0,2,15,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,586,                            int n = nStart;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,587,                            while (l < lEnd - 3) {,4,0,0,1,3,0,0,0,0,4,22,7,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,588,                                sum += tBlock[l] * mBlock[n] +,0,0,0,2,4,0,0,0,0,6,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,592,                                l += 4;,2,0,0,0,0,0,0,0,0,3,7,16,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,593,                                n += jWidth4;,2,1,0,0,0,0,0,0,0,3,13,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,595,                            while (l < lEnd) {,4,1,0,1,3,0,0,0,0,5,18,14,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,596,                                sum += tBlock[l++] * mBlock[n];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,597,                                n += jWidth;,8,0,1,0,0,0,0,0,0,14,12,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,599,                            outBlock[k++] += sum;,0,0,0,1,2,0,0,0,0,3,21,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,605,                ++blockIndex;,34,8,1,0,0,5,24,8,0,98,13,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,610,        return out;,4,0,0,0,0,1,0,0,0,5,11,8,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,132,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,134,            final double[] ltI = lTData[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,138,            ltI[i] = Math.sqrt(ltI[i]);,2,0,1,3,6,0,4,2,0,18,27,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,139,            final double inverse = 1.0 / ltI[i];,0,0,0,1,2,0,6,0,0,6,36,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,141,            for (int q = order - 1; q > i; --q) {,0,0,0,1,3,0,0,0,0,4,37,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,142,                ltI[q] *= inverse;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,143,                final double[] ltQ = lTData[q];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,144,                for (int p = q; p < order; ++p) {,2,0,0,1,3,3,0,0,0,5,33,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,145,                    ltQ[p] -= ltI[q] * ltI[p];,0,0,0,3,6,0,0,0,0,9,26,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,618,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,76,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,619,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,36,10,0,1,2,1,0,0,0,50,66,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,621,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,6,1,0,1,3,0,0,0,0,8,52,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,622,            final int pStart = iBlock * BLOCK_SIZE;,2,0,0,0,0,3,0,0,0,5,39,2,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,623,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,0,0,0,0,3,55,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,624,            int regularPos   = 0;,2,0,0,0,0,0,0,0,0,3,21,2,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,625,            int lastPos      = 0;,2,1,0,0,0,0,0,0,0,4,21,11,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,626,            for (int p = pStart; p < pEnd; ++p) {,8,2,0,1,3,0,0,0,0,11,37,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,627,                final double[] dataP = data[p];,8,2,0,2,4,3,4,0,0,18,31,0,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,628,                int blockIndex = iBlock * blockColumns;,6,1,0,0,0,0,0,0,0,7,39,9,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,629,                int dataPos    = 0;,0,0,0,0,0,0,8,0,0,8,19,5,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,630,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0,0,0,1,3,0,0,0,0,4,59,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,634,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,0,2,4,0,0,0,0,6,75,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,635,                regularPos += BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,25,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,636,                lastPos    += lastColumns;,0,0,0,0,0,0,0,0,0,0,26,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,640,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,104,        final int order = matrix.getRowDimension();,4,1,0,1,2,1,4,0,0,10,43,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,105,        lTData   = matrix.getData();,2,0,0,1,2,0,4,0,0,7,28,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,106,        cachedL  = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,107,        cachedLT = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,110,        for (int i = 0; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,33,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,112,            final double[] lI = lTData[i];,6,0,1,2,4,1,0,0,0,13,30,3,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,8,1,0,3,7,0,0,0,0,11,49,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,118,            for (int j = i + 1; j < order; ++j) {,16,3,0,1,3,0,0,0,0,22,37,1,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,119,                final double[] lJ = lTData[j];,6,1,0,2,4,1,4,0,0,12,30,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,120,                final double lIJ = lI[j];,0,0,0,1,2,0,0,0,0,3,25,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,121,                final double lJI = lJ[i];,2,0,1,1,2,1,0,0,0,7,25,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,122,                final double maxDelta =,2,0,0,0,0,1,0,0,0,3,23,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,124,                if (Math.abs(lIJ - lJI) > maxDelta) {,0,0,0,2,5,0,0,0,0,7,37,4,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,127,                lJ[i] = 0;,0,0,1,1,2,0,0,0,0,5,10,8,0.44444,0,0,-1
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,88,        return new DenseRealMatrix(data);,2,0,0,1,2,1,0,2,0,4,33,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",2,1,0,3,6,0,4,0,0,7,72,7,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,148,"        super(rows, columns);",0,1,0,1,2,0,2,0,0,4,21,7,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,149,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,150,        this.columns = columns;,6,1,1,0,0,0,0,0,0,17,23,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,156,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,164,        int index = 0;,6,0,0,0,0,0,0,0,0,7,14,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,13,52,0,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",12,1,0,1,3,1,0,0,0,16,64,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,4,2,1,3,7,0,4,0,0,14,62,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,173,                if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,206,        final int rows         = rawData.length;,2,0,0,0,0,3,0,0,0,5,40,2,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,207,        final int columns      = rawData[0].length;,8,1,1,1,2,1,0,0,0,12,43,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,3,0,1,2,1,0,0,0,16,65,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,1,0,0,0,14,65,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,212,        for (int i = 0; i < rawData.length; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,213,            final int length = rawData[i].length;,0,0,0,1,2,0,0,0,0,3,37,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,214,            if (length != columns) {,0,0,0,1,3,0,0,0,0,4,24,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,222,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,223,"        for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {",0,0,0,1,3,0,0,0,0,4,68,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,224,            final int pStart  = iBlock * BLOCK_SIZE;,8,3,1,0,0,0,4,0,0,25,40,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,225,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",8,1,0,1,2,1,6,0,0,16,56,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,226,            final int iHeight = pEnd - pStart;,0,0,0,0,0,0,0,0,0,0,34,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,227,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {",0,0,0,1,3,0,6,0,0,7,69,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,228,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,229,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0,0,0,1,2,0,0,0,0,3,58,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,230,                final int jWidth = qEnd - qStart;,6,1,0,0,0,1,0,0,0,8,33,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,233,                final double[] block = new double[iHeight * jWidth];,6,1,0,2,4,1,0,0,0,8,52,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,234,                blocks[blockIndex] = block;,0,0,0,1,2,0,0,0,0,3,27,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,237,"                for (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {",16,1,0,1,3,0,0,0,0,19,65,8,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,238,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,0,2,4,0,0,0,0,6,59,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,244,        return blocks;,2,0,0,0,0,1,0,0,0,2,14,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1317,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1323,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1626,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,20,5,0,1,2,1,0,0,0,26,79,3,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1635,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,91,5,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,55,        throws IllegalArgumentException {,0,0,0,0,1,0,0,0,0,1,33,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,56,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,639,        return (getColumnDimension() == getRowDimension());,2,1,0,3,6,1,4,0,0,8,51,0,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,74,"        this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,",0,0,0,0,1,0,0,0,0,1,49,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,97,"               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {",4,0,0,0,1,0,0,0,0,4,65,2,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,99,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.4,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1214,            final int iBlock = row    / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1215,            final int jBlock = column / BLOCK_SIZE;,6,1,0,0,0,1,6,0,0,14,39,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1216,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,8,4,0,2,4,1,4,0,0,17,72,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1218,            return blocks[iBlock * blockColumns + jBlock][k];,6,2,1,2,4,1,0,0,0,12,49,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,0,0,0,1,2,1,0,0,0,4,21,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,2,2,1,1,3,0,0,0,0,9,23,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },8,1,1,0,1,0,4,0,0,15,1,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,8,2,0,3,6,0,2,0,0,13,70,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",6,3,0,2,4,0,0,0,0,9,80,6,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,329,        Set<Integer> basicRows = new HashSet<Integer>();,0,0,0,1,2,0,0,0,0,3,48,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,330,        for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,4,0,0,12,55,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,            if (basicRows.contains(basicRow)) {,0,0,1,2,5,0,0,0,0,5,35,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,337,                basicRows.add(basicRow);,0,0,0,1,2,0,0,0,0,3,24,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,                coefficients[i] =,6,1,1,1,2,0,4,0,0,17,17,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,70,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,458,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,0,0,0,0,0,1,0,0,0,1,79,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,50,        this.value  = value;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,        return coefficients.dotProduct(point) + constantTerm;,8,2,0,1,2,2,6,0,0,17,53,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,154,        return true;,12,3,0,0,0,2,0,0,0,18,12,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,146,        if (tableau.getNumArtificialVariables() > 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,8,2,0,3,7,3,8,0,0,22,83,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,188,        tableau.discardArtificialVariables();,0,0,0,1,2,0,4,0,0,4,37,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,367,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,368,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,369,        } else if (x < y) {,6,0,0,1,4,0,0,0,0,6,19,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,370,          return -1;,2,0,0,0,0,1,0,2,0,4,10,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,145,                    matrix[zIndex][getSlackVariableOffset() - 1] =,0,0,0,3,6,0,0,0,0,9,46,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,161,                        matrix[row][getSlackVariableOffset() - 1] =,0,0,0,3,6,0,0,0,0,9,43,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,2,1,1,3,6,0,2,0,0,11,65,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,260,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,261,        for (double coefficient : coefficients.getData()) {,0,0,0,2,5,0,4,0,0,5,51,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,262,            sum -= coefficient;,0,1,0,0,0,0,6,0,0,8,19,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,264,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,290,        if (numArtificialVariables == 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,356,        for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,357,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",6,2,1,2,4,0,16,0,0,29,77,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,359,    },2,0,0,0,1,0,0,0,0,2,1,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,474,        return numArtificialVariables;,8,0,1,0,0,1,8,0,0,22,30,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,42,        this(DEFAULT_EPSILON);,0,0,0,1,2,0,0,0,0,3,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,49,    public SimplexSolver(final double epsilon) {,0,0,0,1,3,0,0,0,0,4,44,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,50,        this.epsilon = epsilon;,0,0,0,0,0,0,0,0,0,0,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,59,        double minValue = 0;,2,0,0,0,0,3,0,0,0,5,20,2,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,60,        Integer minPos = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,61,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",4,3,1,3,7,0,14,0,0,28,73,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,63,"                minValue = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,34,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,64,                minPos = i;,0,0,0,0,0,0,0,0,0,0,11,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,67,        return minPos;,4,0,0,0,0,1,0,0,0,5,14,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,77,        double minRatio = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,35,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,78,        Integer minRatioPos = null;,2,0,0,0,0,0,0,2,0,4,27,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,79,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,80,"            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",4,1,0,2,4,0,0,0,0,5,57,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,81,"            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {",0,1,0,3,7,0,14,0,0,15,69,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,82,"                double ratio = rhs / tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,83,                if (ratio < minRatio) {,6,1,0,1,3,3,0,0,0,10,23,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,84,                    minRatio = ratio;,8,1,0,0,0,0,6,0,0,17,17,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,85,                    minRatioPos = i; ,0,0,0,0,0,0,0,0,0,0,16,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,89,        return minRatioPos;,2,0,0,0,0,1,0,0,0,2,19,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,102,        incrementIterationsCounter();,0,0,0,1,2,0,0,0,0,3,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,104,        Integer pivotCol = getPivotColumn(tableau);,6,0,0,1,2,4,4,4,0,18,43,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,105,"        Integer pivotRow = getPivotRow(pivotCol, tableau);",2,0,0,1,2,0,6,2,0,10,50,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,106,        if (pivotRow == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,111,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",6,0,0,1,2,0,8,0,0,15,55,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,112,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,0,0,0,3,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,115,        for (int i = 0; i < tableau.getHeight(); i++) {,20,1,0,2,5,0,4,0,0,29,47,0,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,116,            if (i != pivotRow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,117,"                double multiplier = tableau.getEntry(i, pivotCol);",8,0,0,1,2,1,8,0,0,18,50,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,118,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,0,0,0,3,45,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,167,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,185,        final SimplexTableau tableau =,4,0,0,0,0,1,2,4,0,11,30,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,187,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,61,    protected AbstractLinearOptimizer() {,0,0,0,1,3,0,0,0,0,4,37,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,62,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,0,1,2,0,0,0,0,3,41,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,67,        this.maxIterations = maxIterations;,0,0,0,0,0,0,0,0,0,0,35,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,86,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,91,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,100,        this.f                     = f;,4,0,0,0,0,0,0,0,0,5,31,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,101,        this.constraints           = constraints;,0,0,0,0,0,0,0,0,0,0,41,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,102,        this.goalType              = goalType;,4,0,0,0,0,0,0,0,0,5,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,103,        this.restrictToNonNegative = restrictToNonNegative;,0,0,0,0,0,0,0,0,0,0,51,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,105,        iterations = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,87,108,        return doOptimize();,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,339,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,340,            out[i] = data[i] * d;,4,3,0,2,4,0,0,0,0,8,21,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,342,        return new RealVectorImpl(out);,2,0,0,1,2,1,0,2,0,4,31,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,435,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,30,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,473,    private static final long[] factorials = new long[] ,0,0,0,2,4,0,0,0,0,6,51,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0,0,0,4,8,1,0,0,0,13,56,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,87,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,48,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,354,            return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,372,        },8,1,0,0,1,0,0,0,0,11,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,273,        Integer row = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,274,        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {,6,1,0,3,7,0,4,0,0,12,64,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",2,0,1,3,7,1,12,0,0,20,56,5,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,276,                if (row == null) {,4,1,0,1,3,1,0,4,0,10,18,3,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,277,                row = i;,4,0,0,0,0,0,0,0,0,5,8,10,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,283,        return row;,4,0,0,0,0,1,0,0,0,4,11,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,373,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,374,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",6,3,0,1,3,0,22,0,0,31,65,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,377,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,384,        return tableau.getColumnDimension();,0,0,0,1,2,1,0,0,0,4,36,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,392,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,401,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,419,        return getNumObjectiveFunctions() + numDecisionVariables;,2,1,0,1,2,1,2,0,0,5,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,87,81,"        this(new RealVectorImpl(coefficients), relationship, value);",6,0,0,2,4,1,4,0,0,11,60,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,87,82,    },2,0,0,0,1,0,6,0,0,8,1,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,87,31,public abstract class CompositeFormat extends Format {,8,0,0,0,1,5,0,2,0,16,54,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,87,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,87,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,87,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,87,43,    protected AbstractRealMatrix() {,0,0,0,1,3,0,0,0,0,4,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,87,44,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,87,45,    },6,1,0,0,1,0,12,0,0,22,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,77,    public RealVectorImpl(double[] d) {,0,0,0,2,5,0,0,0,0,7,35,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,36,    private static final RealVectorFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,2,0,7,54,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,854,        return data.clone();,0,0,0,1,2,1,0,0,0,4,20,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1157,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,95,    },4,2,0,0,1,0,4,0,0,10,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,117,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,118,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,119,        this.suffix      = suffix;,4,0,1,0,0,0,0,0,0,15,26,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,120,        this.separator   = separator;,0,0,0,0,0,0,0,0,0,0,29,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,121,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,122,        trimmedSuffix    = suffix.trim();,4,0,0,1,2,0,4,0,0,9,33,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,123,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,124,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,87,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,0,0,0,7,60,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,94,"        throws IllegalArgumentException, NullPointerException {",0,0,0,0,1,0,0,0,0,1,55,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,95,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,314,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,315,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,320,            if (column > 0) {,2,1,1,1,3,0,4,0,0,9,17,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,325,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,326,            if (nRows == 0) {,2,0,0,1,3,3,0,0,0,5,17,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,330,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,331,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,334,            data = new double[subMatrix.length][nCols];,8,1,0,2,4,0,0,0,0,9,43,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,335,            for (int i = 0; i < data.length; ++i) {,16,1,1,1,3,0,0,0,0,23,39,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,336,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,2,1,3,6,0,12,0,0,24,64,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,343,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,347,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,404,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,622,"        setSubMatrix(in, 0, 0);",0,0,1,1,2,0,8,0,0,10,23,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,87,623,    },10,2,0,0,1,0,0,0,0,12,1,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,87,42,    private Relationship(String stringValue) {,4,0,0,1,3,1,0,2,0,7,42,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,87,43,        this.stringValue = stringValue;,4,0,0,0,0,0,0,0,0,5,31,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,87,44,    },2,1,0,0,1,0,0,0,0,3,1,6,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,87,28,"    EQ(""=""),",2,0,0,1,2,0,0,0,0,3,8,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,87,31,"    LEQ(""<=""),",2,0,0,1,2,0,0,0,0,3,10,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,87,34,"    GEQ("">="");",2,0,0,1,2,0,0,0,0,3,10,2,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/Relationship,87,25,public enum Relationship {,2,0,0,0,1,1,0,0,0,3,26,1,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,104,                   final double epsilon) {,2,0,0,0,2,1,0,0,0,3,23,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,105,        this.f                      = f;,0,0,0,0,0,0,0,0,0,0,32,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,106,        this.constraints            = constraints;,4,0,0,0,0,0,0,0,0,5,42,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,107,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,108,        this.epsilon                = epsilon;,4,0,0,0,0,0,0,0,0,5,38,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,109,        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);,4,1,0,2,4,0,2,0,0,8,82,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,110,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,8,1,0,1,2,0,2,0,0,12,73,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,112,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,14,3,0,1,2,0,2,0,0,21,72,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,114,        this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));,8,1,0,2,4,0,2,2,0,14,80,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,115,        initialize();,0,0,0,1,2,0,2,0,0,2,13,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,126,        List<LinearConstraint> constraints = getNormalizedConstraints();,14,3,0,1,2,0,2,4,0,23,64,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,127,        int width = numDecisionVariables + numSlackVariables +,6,1,0,0,0,0,0,0,0,7,54,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,129,        int height = constraints.size() + getNumObjectiveFunctions();,2,1,0,2,4,0,6,0,0,9,61,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,130,        double[][] matrix = new double[height][width];,2,0,1,4,8,0,0,0,0,6,46,5,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,133,        if (getNumObjectiveFunctions() == 2) {,2,1,1,2,5,0,2,0,0,10,38,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,136,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,0,0,0,2,4,0,0,0,0,6,55,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,137,        matrix[zIndex][zIndex] = maximize ? 1 : -1;,8,0,1,2,4,1,0,0,0,17,43,3,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,138,        RealVector objectiveCoefficients =,2,0,0,0,0,0,0,2,0,4,34,4,0.06667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,0,0,0,3,6,0,0,0,0,9,66,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,2,0,0,1,2,2,0,8,0,11,21,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,                    return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,6,0,0,1,2,0,4,2,0,12,32,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,2,0,0,2,1,7,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,4,0,0,0,0,1,0,0,0,5,12,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },10,0,0,0,1,3,0,4,0,17,1,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,4,0,0,1,2,0,0,0,0,4,27,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,6,1,0,0,0,0,4,0,0,12,20,3,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,80,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,0,0,10,55,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,6,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0,0,0,1,3,0,2,0,0,2,23,7,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0,0,0,3,7,0,10,0,0,10,83,9,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",0,0,0,2,5,0,0,0,0,7,41,4,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,459,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,129,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",6,3,0,3,7,0,22,0,0,31,66,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,134,                return false;,10,1,0,0,0,1,0,0,0,12,13,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,137,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,146,        if (tableau.getNumArtificialVariables() > 0) {,4,1,0,2,5,0,4,0,0,9,46,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,171,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,172,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",0,0,0,4,9,0,0,0,0,13,81,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,188,        tableau.discardArtificialVariables();,0,0,0,1,2,0,0,0,0,3,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,0,0,0,7,29,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,293,        int width = getWidth() - numArtificialVariables - 1;,10,2,0,1,2,0,2,0,0,14,52,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,294,        int height = getHeight() - 1;,2,1,0,1,2,0,2,0,0,5,29,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,295,        double[][] matrix = new double[height][width];,2,0,1,4,8,0,0,0,0,6,46,5,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,296,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,10,0,0,20,34,3,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,297,            for (int j = 0; j < width - 1; j++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,298,"                matrix[i][j] = getEntry(i + 1, j + 1);",0,0,0,3,6,0,0,0,0,9,38,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,300,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",0,0,0,4,8,0,0,0,0,12,55,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,302,        this.tableau = new RealMatrixImpl(matrix);,2,1,0,1,2,0,0,0,0,3,42,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,303,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,304,    },6,1,0,0,1,0,0,0,0,8,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,61,    protected AbstractLinearOptimizer() {,0,0,0,1,3,0,6,0,0,6,37,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,62,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0,0,1,1,2,0,0,0,0,5,41,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,63,    },6,2,0,0,1,0,8,0,0,17,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,67,        this.maxIterations = maxIterations;,8,0,0,0,0,0,0,0,0,10,35,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,86,        if (++iterations > maxIterations) {,2,0,0,1,3,0,4,0,0,7,35,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,91,    },4,1,0,0,1,0,6,0,0,11,1,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,100,        this.f                     = f;,0,0,0,0,0,0,0,0,0,0,31,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,101,        this.constraints           = constraints;,4,0,0,0,0,0,0,0,0,5,41,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,102,        this.goalType              = goalType;,4,3,0,0,0,0,0,0,0,8,38,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,103,        this.restrictToNonNegative = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,51,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,105,        iterations = 0;,6,0,0,0,0,0,0,0,0,8,15,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,108,        return doOptimize();,8,1,0,1,2,5,2,0,0,15,20,1,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,42,        this(DEFAULT_EPSILON);,8,1,0,1,2,0,8,0,0,18,22,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,49,    public SimplexSolver(final double epsilon) {,0,0,0,1,3,0,0,0,0,4,44,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,50,        this.epsilon = epsilon;,0,0,0,0,0,0,0,0,0,0,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,51,    },0,0,1,0,1,0,6,0,0,11,1,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,59,        double minValue = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,60,        Integer minPos = null;,8,0,0,0,0,0,0,2,0,11,22,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,61,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,16,2,0,3,7,6,0,0,0,26,83,0,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",0,1,0,3,7,0,14,0,0,15,73,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,63,"                minValue = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,64,                minPos = i;,0,0,0,0,0,0,0,2,0,2,11,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,67,        return minPos;,2,0,0,0,0,1,0,0,0,2,14,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,77,        double minRatio = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,35,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,78,        Integer minRatioPos = null;,2,1,0,0,0,0,0,0,0,3,27,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,79,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,6,1,0,3,7,0,8,0,0,16,80,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,80,"            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",2,1,1,2,4,0,12,0,0,18,57,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,81,"            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {",0,1,0,3,7,0,14,0,0,15,69,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,82,"                double ratio = rhs / tableau.getEntry(i, col);",0,0,0,1,2,0,0,0,0,3,46,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,83,                if (ratio < minRatio) {,4,1,0,1,3,0,0,0,0,5,23,8,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,84,                    minRatio = ratio;,0,0,0,0,0,0,0,0,0,0,17,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,85,                    minRatioPos = i; ,4,0,0,0,0,0,0,0,0,5,16,10,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,89,        return minRatioPos;,0,0,0,0,0,1,0,0,0,1,19,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,102,        incrementIterationsCounter();,0,0,0,1,2,0,0,0,0,3,29,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,104,        Integer pivotCol = getPivotColumn(tableau);,2,0,0,1,2,0,4,2,0,8,43,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,105,"        Integer pivotRow = getPivotRow(pivotCol, tableau);",12,1,0,1,2,0,8,2,0,24,50,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,106,        if (pivotRow == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,111,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",0,0,0,1,2,0,0,0,0,3,55,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,112,"        tableau.divideRow(pivotRow, pivotVal);",0,0,0,1,2,0,8,0,0,8,38,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,115,        for (int i = 0; i < tableau.getHeight(); i++) {,10,4,1,2,5,0,4,0,0,23,47,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,116,            if (i != pivotRow) {,4,1,0,1,3,0,0,0,0,5,20,6,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,117,"                double multiplier = tableau.getEntry(i, pivotCol);",0,0,0,1,2,0,0,0,0,3,50,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,118,"                tableau.subtractRow(i, pivotRow, multiplier);",0,0,0,1,2,0,10,0,0,10,45,9,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,121,    },0,0,0,0,1,0,6,0,0,6,1,19,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,167,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,185,        final SimplexTableau tableau =,0,0,0,0,0,0,0,0,0,0,30,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,187,        solvePhase1(tableau);,0,0,0,1,2,0,4,0,0,4,21,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,290,        if (numArtificialVariables == 0) {,2,1,0,1,3,0,0,0,0,3,34,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,357,        for (int j = 0; j < getWidth(); j++) {,8,1,0,2,5,0,2,0,0,12,38,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,358,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",2,1,0,2,4,0,16,0,0,19,77,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,360,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,475,        return numArtificialVariables;,2,0,0,0,0,1,0,0,0,2,30,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,367,"        if (equals(x, y, eps)) {",4,1,0,2,5,0,0,0,0,8,24,3,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,368,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,369,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,370,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.1,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,372,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.1,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,436,        return getWidth() - 1;,0,1,0,1,2,1,2,0,0,3,22,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,134,            matrix[0][0] = -1;,0,0,0,2,4,0,0,0,0,6,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,171,                    } else if (constraint.getRelationship() == Relationship.GEQ) {,4,1,0,2,6,0,4,0,0,9,62,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,178,                        matrix[0][getArtificialVariableOffset() + artificialVar] = 1; ,2,1,1,3,6,0,2,0,0,8,61,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,179,                        matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; ,2,1,1,3,6,0,10,0,0,19,65,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,249,            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);,6,2,0,2,4,0,4,0,0,12,69,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,250,"            subtractRow(0, row, 1.0);",0,0,0,1,2,0,4,0,0,4,25,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,428,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,0,0,0,1,2,1,0,0,0,4,77,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,354,            return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,7,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,367,            data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,372,        },2,0,0,0,1,0,0,0,0,2,1,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,373,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,273,        Integer row = null;,0,0,0,0,0,0,0,0,0,0,19,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,274,        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {,6,1,0,3,7,0,4,0,0,12,64,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",0,0,0,3,7,0,12,0,0,13,56,6,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,276,                if (row == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,277,                    row = i;,4,0,0,0,0,0,0,0,0,5,8,10,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,283,        return row;,2,0,0,0,0,1,0,0,0,2,11,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,374,        for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,375,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",2,0,0,1,3,0,0,0,0,3,65,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,378,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,385,        return tableau.getColumnDimension();,0,0,0,1,2,1,4,0,0,4,36,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,393,        return tableau.getRowDimension();,0,0,0,1,2,1,4,0,0,4,33,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,402,"        return tableau.getEntry(row, column);",0,0,0,1,2,1,8,0,0,8,37,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,420,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,88,81,"        this(new RealVectorImpl(coefficients), relationship, value);",6,0,0,2,4,0,0,2,0,8,60,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,88,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,30,public final class MathUtils {,0,0,0,0,1,0,0,0,0,1,30,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,473,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,4,3,0,4,8,1,12,0,0,19,56,5,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,88,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,48,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,88,43,    protected AbstractRealMatrix() {,0,0,0,1,3,0,0,0,0,4,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,88,44,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,88,45,    },0,1,0,0,1,0,4,0,0,5,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,77,    public RealVectorImpl(double[] d) {,4,0,0,2,5,1,0,0,0,5,35,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,36,    private static final RealVectorFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,2,0,7,54,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,854,        return data.clone();,0,0,0,1,2,1,8,0,0,8,20,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1157,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,117,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,118,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,119,        this.suffix      = suffix;,4,2,0,0,0,0,0,0,0,6,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,120,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,121,        trimmedPrefix    = prefix.trim();,16,0,0,1,2,0,14,0,0,32,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,122,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,123,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,124,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,125,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,173,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,88,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0,0,0,2,4,1,4,2,0,6,60,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,88,31,public abstract class CompositeFormat extends Format {,0,0,0,0,1,0,0,0,0,1,54,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,88,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,88,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,0,0,0,3,31,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/util/CompositeFormat,88,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,94,"        throws IllegalArgumentException, NullPointerException {",4,0,0,0,1,0,0,0,0,4,55,2,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,95,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,314,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,315,            if (row > 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,320,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,325,            final int nRows = subMatrix.length;,2,1,0,0,0,0,0,0,0,3,35,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,326,            if (nRows == 0) {,6,3,0,1,3,0,0,0,0,9,17,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,330,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,331,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,334,            data = new double[subMatrix.length][nCols];,6,0,1,2,4,0,0,0,0,9,43,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,335,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,336,                if (subMatrix[i].length != nCols) {,6,2,1,2,5,0,0,0,0,16,35,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,343,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,347,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,404,        return (data == null) ? 0 : data.length;,0,0,0,1,2,1,0,2,0,3,40,7,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,6,3,1,5,10,4,0,0,0,16,66,1,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,622,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,88,623,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,104,                   final double epsilon) {,2,0,0,0,2,1,0,0,0,3,23,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,105,        this.f                      = f;,4,0,0,0,0,0,0,0,0,5,32,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,106,        this.constraints            = constraints;,4,0,0,0,0,0,0,0,0,5,42,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,107,        this.restrictToNonNegative  = restrictToNonNegative;,4,0,0,0,0,0,0,0,0,5,52,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,108,        this.epsilon                = epsilon;,4,0,0,0,0,0,0,0,0,5,38,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,109,        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);,4,1,0,2,4,0,2,0,0,8,82,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,110,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,8,2,0,1,2,0,2,0,0,13,73,3,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,112,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,6,1,0,1,2,0,2,0,0,10,72,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,114,        this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));,8,1,0,2,4,0,2,2,0,14,80,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,115,        initialize();,0,0,0,1,2,0,0,0,0,3,13,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,126,        List<LinearConstraint> constraints = getNormalizedConstraints();,2,0,0,1,2,0,2,4,0,8,64,4,0.07143,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,0,0,0,2,4,0,0,0,0,6,28,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,        freqTable = new TreeMap();,0,0,0,1,2,0,0,0,0,3,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,468,"    private static class NaturalComparator implements Comparator, Serializable {",0,0,0,0,1,0,0,0,0,1,76,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,487,            return ((Comparable)o1).compareTo(o2);,0,0,0,3,6,1,0,0,0,10,38,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,67,        freqTable = new TreeMap(comparator);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,68,    },2,0,0,0,1,0,0,0,0,3,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,78,        NumberFormat nf = NumberFormat.getPercentInstance();,2,0,0,1,2,0,4,2,0,8,52,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,79,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.2,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,0,0,0,1,2,0,0,0,0,3,26,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,67,        freqTable = new TreeMap(comparator);,4,0,0,1,2,0,0,2,0,7,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.02439,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,0,0,0,2,4,0,0,0,0,6,51,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,6,1,0,0,0,0,2,0,0,10,10,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,        if ((u == 0) || (v == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0,0,0,3,7,0,0,0,0,10,59,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,8,3,0,3,6,2,12,0,0,24,35,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,12,5,0,1,3,0,0,0,0,17,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,580,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,583,        int k = 0;,2,0,0,0,0,0,4,0,0,7,10,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,584,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,590,        if (k == 31) {,2,0,0,1,3,1,2,0,0,5,14,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,597,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,14,3,0,3,6,0,0,0,0,18,46,1,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,603,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,607,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,608,                u = -t;,4,1,0,0,0,1,0,0,0,6,7,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,610,                v = t;,4,1,0,0,0,0,0,2,0,7,6,2,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,613,            t = (v - u) / 2;,2,0,0,1,2,3,0,4,0,10,16,2,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,616,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,617,        return -u * (1 << k); // gcd is u*2^k,6,3,0,1,2,1,0,0,0,10,37,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,209,        super();,12,7,1,1,2,0,6,0,0,35,8,3,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,210,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,214,        if (den < 0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,223,"        int d = MathUtils.gcd(num, den);",4,0,0,1,2,1,8,2,0,15,32,1,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,224,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,230,        if (den < 0) {,4,0,0,1,3,0,0,0,0,5,14,10,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,234,        this.numerator = num;,6,0,0,0,0,0,0,0,0,6,21,5,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,235,        this.denominator = den;,14,0,0,0,0,1,0,0,0,15,23,1,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,236,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,33,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,36,"    public static final Fraction ONE = new Fraction(1, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,39,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,42,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",0,0,0,1,2,0,0,0,0,3,61,4,0.01818,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,65,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,79,        long s = (long)x + (long)y;,4,1,0,2,4,0,4,2,0,12,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,80,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,81,"            throw new ArithmeticException(""overflow: add"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,83,        return (int)s;,4,0,0,1,2,1,0,0,0,5,14,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,97,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,1,2,1,0,0,0,4,42,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,113,        if (a > b) {,8,2,1,1,3,0,0,0,0,12,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,115,"            ret = addAndCheck(b, a, msg);",2,0,0,1,2,0,8,0,0,11,29,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,119,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,120,                if (b < 0) {,4,1,0,1,3,0,0,0,0,6,12,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,91,122,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,4,0,0,0,0,1,0,0,0,4,9,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,8,4,0,3,7,0,0,2,0,14,31,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,31,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,113,"            ret = addAndCheck(b, a, msg);",0,0,0,1,2,0,0,0,0,3,29,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,                if (a <= Long.MAX_VALUE - b) {,18,4,1,1,3,1,0,0,0,30,30,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,                    ret = a + b;,8,1,0,0,0,0,0,0,0,11,12,0,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,170,        if (n < k) {,0,0,0,1,3,0,0,0,0,4,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,174,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,        if ((n == k) || (k == 0)) {,10,3,1,3,7,0,0,0,0,17,27,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,236,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,0,0,3,6,1,0,0,0,10,64,4,0.11111,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,3,0,0,0,0,0,0,0,10,18,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,289,        for (int i = k + 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,10,1,0,2,4,0,4,2,0,19,30,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,294,        for (int i = 2; i <= n - k; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,295,            logSum -= Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,298,        return logSum;      ,0,0,0,0,0,1,0,0,0,1,14,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,14,2,0,1,3,0,0,0,0,17,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,399,            logSum += Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,401,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,4,0,0,2,4,3,0,0,0,8,51,1,0.00498,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,63,        super();,16,5,0,1,2,1,0,0,0,23,8,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,77,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,79,"            throw new ArithmeticException(""overflow: add"");",2,1,0,1,2,0,4,0,0,7,47,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,81,        return (int)s;,6,0,0,1,2,1,0,0,0,6,14,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,95,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,1,2,1,6,0,0,7,42,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,111,        if (a > b) {,0,0,0,1,3,0,4,0,0,4,12,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,113,"            ret = addAndCheck(b, a, msg);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,117,            if (a < 0) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,118,                if (b < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,120,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,121,                        ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,2,1,0,0,0,0,0,0,0,3,22,4,0.05,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,0,0,1,0,0,0,0,0,0,6,7,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,413,            return (Math.abs(u) + Math.abs(v));,8,1,0,3,6,1,0,0,0,10,35,6,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,420,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,421,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,423,        if (v > 0) {,6,2,0,1,3,1,16,2,0,29,12,0,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,424,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,427,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,428,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,434,        if (k == 31) {,14,1,0,1,3,1,10,0,0,27,14,3,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,439,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,445,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,449,            if (t > 0) {,2,2,1,1,3,0,0,0,0,17,12,7,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,452,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,455,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,458,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,459,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.02222,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,63,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {,0,0,0,1,3,0,0,0,0,4,79,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,0,0,0,0,0,1,0,0,0,1,24,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,145,        double d = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,80,        double lowerBound = getDomainLowerBound(p);,0,0,0,1,2,0,0,0,0,3,43,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,18,0,0,1,2,0,8,0,0,28,24,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,16,1,0,0,1,1,4,2,0,25,44,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,2,0,0,1,3,0,0,2,0,4,30,3,0.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,106,        return super.inverseCumulativeProbability(p);,8,1,1,1,2,1,0,0,0,29,45,3,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,61,        if (p < 0.0 || p > 1.0) {,14,6,0,1,3,0,0,0,0,21,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,100,        if (p == 0) {,12,2,0,1,3,3,0,4,0,22,13,1,0.25,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,103,        if (p == 1) {,8,8,0,1,3,0,0,0,0,16,13,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,75,            double n = getNumeratorDegreesOfFreedom();,2,0,0,1,2,0,2,0,0,4,42,7,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,76,            double m = getDenominatorDegreesOfFreedom();,8,0,0,1,2,0,2,0,0,11,44,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,78,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",14,4,1,2,5,0,6,0,0,27,49,1,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,72,        if (x <= 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,82,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,170,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,192,        return denominatorDegreesOfFreedom;,0,0,0,0,0,1,0,0,0,1,35,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,50,        super();,10,0,0,1,2,0,0,0,0,12,8,1,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,51,        setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);,8,2,0,1,2,0,4,0,0,17,56,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,52,        setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);,8,3,0,1,2,1,4,0,0,16,60,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,158,        if (degreesOfFreedom <= 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,162,        this.numeratorDegreesOfFreedom = degreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,50,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,180,        if (degreesOfFreedom <= 0.0) {,4,1,1,1,3,1,0,0,0,10,30,12,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,184,        this.denominatorDegreesOfFreedom = degreesOfFreedom;,0,0,0,0,0,0,0,0,0,0,52,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,59,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,68,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,126,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,10,3,0,4,9,0,24,0,0,38,71,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,130,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,20,5,0,3,8,1,2,0,0,29,43,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,133,            ContinuedFraction fraction = new ContinuedFraction() {,4,0,0,1,3,0,0,0,0,5,54,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,156,            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -,10,8,0,4,9,0,20,0,0,40,60,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,161,        return ret;,0,1,1,0,0,1,0,0,0,9,11,8,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,197,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,0,0,0,5,11,0,0,0,0,16,69,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,200,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,8,3,0,2,4,0,12,0,0,24,45,3,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/special/Beta,95,204,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,6,0,0,9,45,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,0,1,1,2,5,0,2,0,0,14,62,6,0.04348,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,355,        if (isNaN() || rhs.isNaN()) {,0,0,0,3,7,0,0,0,0,10,29,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,255,                if (rhs.isNaN()) {,0,0,0,2,5,0,0,0,0,7,18,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,263,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,254,                Complex rhs = (Complex)other;,4,0,0,1,2,0,0,4,0,8,29,9,0.0303,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,250,        } else if (other == null) {,4,2,0,1,4,0,0,0,0,6,27,4,0.02941,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,248,        if (this == other) { ,2,1,0,1,3,0,0,0,0,3,20,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,266,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.02703,0,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,872,"        return new Complex(real, imaginary);",4,0,0,1,2,1,0,2,0,6,36,5,0.01639,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);",0,0,0,1,2,0,0,0,0,3,17,4,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,185,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,186,                y1 = y2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,187,                y2 = y0;,6,0,0,0,0,0,8,0,0,16,8,3,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,151,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,140,        this.result = result;,0,0,0,0,0,0,0,0,0,0,21,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,141,        this.iterationCount = iterationCount;,0,0,0,0,0,0,0,0,0,0,37,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,142,        this.resultComputed = true;,2,0,0,0,0,0,0,0,0,4,27,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,147,"            ret = solve(min, yMin, max, yMax, min, yMin);",2,0,0,1,2,0,10,4,0,16,45,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,175,        double delta = x1 - x0;,6,1,0,0,0,0,0,0,0,7,23,5,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,176,        double oldDelta = delta;,0,0,0,0,0,0,0,0,0,0,24,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,178,        int i = 0;,2,0,0,0,0,0,4,0,0,7,10,4,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,179,        while (i < maximalIterationCount) {,6,1,0,1,3,1,2,0,0,10,35,3,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,180,            if (Math.abs(y2) < Math.abs(y1)) {,0,1,0,3,7,0,12,0,0,13,34,6,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,189,            if (Math.abs(y1) <= functionValueAccuracy) {,2,0,0,2,5,0,0,0,0,3,44,11,0.03571,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,4,44,7,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,0,0,0,2,4,0,0,0,0,6,50,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,0,0,0,5,10,0,0,0,0,15,43,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,5,44,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,0,0,0,2,4,0,0,0,0,6,42,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,780,        for (int row = 0; row < nRows; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,2,0,1,2,4,1,0,0,0,7,35,6,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,0,0,0,2,4,0,0,0,0,6,25,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,2,0,0,1,2,0,0,0,0,2,15,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,4,1,0,2,5,0,0,2,0,7,27,3,0.05263,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",12,2,0,3,7,1,0,2,0,18,59,2,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,12,1,0,1,3,0,0,0,0,14,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,4,2,0,1,3,0,0,0,0,6,16,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,145,            final int nRows = d.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,146,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,149,            final int nCols = d[0].length;,12,1,1,1,2,1,6,0,0,23,30,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,2,1,1,1,3,0,0,0,0,8,17,1,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,158,            data = d;,0,0,0,0,0,0,0,0,0,0,9,4,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,160,        lu = null;,8,0,0,0,0,0,0,0,0,9,10,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,161,    },10,2,0,0,1,0,4,0,0,17,1,3,0.04762,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,947,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,956,        return data[0].length;,2,0,1,1,2,1,0,0,0,4,22,5,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,56,    protected BigDecimal data[][] = null;,0,0,0,2,4,0,0,0,0,6,37,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,61,    protected BigDecimal lu[][] = null;,2,0,0,2,4,1,0,2,0,5,35,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,64,    protected int[] permutation = null;,2,1,0,1,2,0,0,0,0,3,35,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,67,    protected int parity = 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,70,    private int roundingMode = BigDecimal.ROUND_HALF_UP;,6,0,0,0,0,1,0,0,0,7,52,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,73,    private int scale = 64;,2,0,0,0,0,3,0,0,0,5,23,2,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,76,    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);,0,0,0,1,2,0,0,0,0,3,67,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,79,    static final BigDecimal ZERO = new BigDecimal(0);,0,0,0,1,2,0,0,0,0,3,49,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,81,    static final BigDecimal ONE = new BigDecimal(1);,0,0,0,1,2,0,0,0,0,3,48,4,0.03125,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,146,                if (d[r].length != nCols) {,6,2,1,2,5,0,2,0,0,12,27,3,0.02,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,141,            final int nCols = d[0].length;,0,0,0,1,2,0,0,0,0,3,30,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,142,            if (nCols == 0) {,0,0,1,1,3,0,4,0,0,9,17,6,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,145,            for (int r = 1; r < nRows; r++) {,12,1,0,1,3,3,4,4,0,27,33,1,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,150,            data = d;,8,0,0,0,0,0,0,0,0,10,9,3,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,152,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,153,    },2,0,0,0,1,0,0,0,0,3,1,6,0.01887,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,130,"    public RealMatrixImpl(double[][] d, boolean copyArray) {",0,0,0,3,7,0,0,0,0,10,56,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,131,        if (copyArray) {,10,0,0,1,3,3,6,2,0,21,16,2,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,134,            if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,137,            final int nRows = d.length;,6,0,0,0,0,1,0,0,0,7,27,6,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,138,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.01852,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,750,        return data[0].length;,0,0,0,1,2,1,0,0,0,4,22,4,0.01299,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,743,        return data.length;,10,0,0,0,0,2,0,0,0,11,19,3,0.01282,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,58,    protected double data[][] = null;,2,0,0,2,4,0,2,0,0,4,33,5,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,63,    protected double lu[][] = null;,0,0,0,2,4,0,0,0,0,6,31,4,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,66,    protected int[] permutation = null;,4,0,0,1,2,1,4,0,0,9,35,1,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,69,    protected int parity = 1;,10,4,0,0,0,0,0,0,0,14,25,3,0.0122,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,86,    public BigMatrixImpl() {,4,0,0,1,3,1,0,0,0,6,24,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,97,"    public BigMatrixImpl(int rowDimension, int columnDimension) {",0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,98,        if (rowDimension <=0 || columnDimension <=0) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,99,            throw new IllegalArgumentException,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,102,        data = new BigDecimal[rowDimension][columnDimension];,6,0,1,2,4,0,0,2,0,14,53,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,103,        lu = null;,10,2,0,0,0,0,0,0,0,14,10,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,104,    },0,0,1,0,1,0,6,0,0,10,1,9,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,118,    public BigMatrixImpl(BigDecimal[][] d) {,8,0,0,3,7,1,0,0,0,9,40,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,119,        this.copyIn(d);,4,1,0,1,2,0,0,0,0,5,15,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,120,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,121,    },4,0,0,0,1,0,0,0,0,5,1,6,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,140,            copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,143,                throw new NullPointerException();,8,1,0,1,2,0,0,2,0,11,33,3,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,147,"                throw new IllegalArgumentException(""Matrix must have at least one row.""); ",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,151,"                throw new IllegalArgumentException(""Matrix must have at least one column.""); ",12,2,0,1,2,0,6,2,0,24,76,1,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,155,"                    throw new IllegalArgumentException(""All input rows must have the same length."");",2,0,0,1,2,0,0,0,0,3,80,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,174,    public BigMatrixImpl(double[][] d) {,0,0,0,3,7,0,0,0,0,10,36,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,175,        final int nRows = d.length;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,176,        if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,177,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,180,        final int nCols = d[0].length;,4,0,0,1,2,0,0,0,0,5,30,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,181,        if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,182,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,185,        for (int row = 1; row < nRows; row++) {,10,1,0,1,3,0,0,0,0,13,39,0,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,186,            if (d[row].length != nCols) {,0,0,0,2,5,0,0,0,0,7,29,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,187,                throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,10,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,191,        this.copyIn(d);,0,0,0,1,2,0,12,0,0,12,15,5,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,192,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,193,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,204,    public BigMatrixImpl(String[][] d) {,4,0,0,3,7,1,0,2,0,7,36,2,0.0,0,0,-1
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,205,        final int nRows = d.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,4,1,1,0,0,0,0,0,0,8,7,8,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,578,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.08889,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,540,        int u = p;,10,1,0,0,0,0,0,0,0,12,10,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,541,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,542,        if ((u == 0) || (v == 0)) {,4,0,0,3,7,0,2,0,0,6,27,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,550,        if (u > 0) {,4,1,0,1,3,1,6,2,0,14,12,3,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,551,            u = -u;,4,0,0,0,0,0,4,0,0,10,7,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,553,        if (v > 0) {,6,1,0,1,3,0,0,0,0,8,12,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,554,            v = -v;,8,1,0,0,0,0,0,2,0,14,7,5,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,557,        int k = 0;,4,0,0,0,0,0,0,0,0,4,10,3,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,558,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,10,1,0,3,7,1,6,0,0,19,69,0,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,564,        if (k == 31) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,571,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,577,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,581,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,582,                u = -t;,2,0,0,0,0,0,4,0,0,7,7,8,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,584,                v = t;,8,1,1,0,0,0,0,0,0,12,6,3,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,587,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,590,        } while (t != 0);,4,1,0,1,3,0,0,0,0,6,17,1,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,591,        return -u * (1 << k); // gcd is u*2^k,0,0,0,1,2,1,0,0,0,4,37,4,0.0678,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,748,        long m = ((long)x) * ((long)y);,0,0,0,4,8,0,0,0,0,12,31,4,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,749,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,1,0,1,3,3,0,4,0,21,53,1,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,752,        return (int)m;,2,2,0,1,2,1,8,0,0,12,14,5,0.03448,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,413,    private static final long[] factorials = new long[] ,0,0,0,2,4,0,0,0,0,6,51,4,0.01869,0,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,543,            return (Math.abs(u) + Math.abs(v));,0,1,0,3,6,1,12,0,0,13,35,7,0.01754,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,99,105,"      super(buildMessage(pattern, arguments, Locale.US));",6,1,0,2,4,1,0,0,0,8,51,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/MathRuntimeException,99,106,      this.pattern   = pattern;,2,0,0,0,0,0,0,0,0,4,25,4,0.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,0,0,0,1,2,0,0,0,0,3,50,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,0,0,0,0,2,40,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,        for (int i = 0; i < cols; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,4,0,0,1,3,3,16,2,0,25,32,1,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,0,1,3,0,0,0,0,15,37,0,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,735,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,8,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,736,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,0,0,6,12,0,0,0,0,18,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,747,                for (int j = 0; j < nColB; j++) {,14,1,0,1,3,0,0,0,0,16,33,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,748,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,0,0,6,12,0,0,0,0,18,36,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,80,                             boolean ignored) {,6,0,0,0,2,0,12,6,0,25,18,3,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,81,    this.weight        = weight;,4,0,0,0,0,0,0,0,0,5,28,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,82,    this.measuredValue = measuredValue;,0,0,0,0,0,0,0,0,0,0,35,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,83,    this.ignored       = ignored;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,84,  },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,146,    this.ignored = ignored;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,147,  },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,156,                for (int i = 0; i < parameters.length; ++i) {,0,0,0,1,3,0,0,0,0,4,45,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,157,"                    parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i, 0));",0,0,0,5,10,0,0,0,0,15,75,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,162,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,165,            previous = cost;,4,0,0,0,0,0,0,0,0,5,16,6,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,166,            updateResidualsAndCost();,6,1,0,1,2,0,0,0,0,7,25,5,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,168,        } while ((getCostEvaluations() < 2) ||,0,2,0,2,6,0,2,0,0,4,38,4,0.09091,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,591,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,720,        int nCol = this.getColumnDimension();,10,0,1,1,2,0,0,0,0,17,37,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,721,        int nColB = b.getColumnDimension();,6,0,0,1,2,0,0,0,0,7,35,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,722,        int nRowB = b.getRowDimension();,6,0,0,1,2,2,4,0,0,12,32,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,725,        double[][] bp = new double[nRowB][nColB];,2,0,1,4,8,0,0,0,0,6,41,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,726,        for (int row = 0; row < nRowB; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,727,            for (int col = 0; col < nColB; col++) {,8,1,0,1,3,0,0,0,0,10,39,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,728,"                bp[row][col] = b.getEntry(permutation[row], col);",0,0,1,4,8,0,2,0,0,3,49,10,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,733,        for (int col = 0; col < nCol; col++) {,2,1,0,1,3,0,0,0,0,3,38,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,734,            for (int i = col + 1; i < nCol; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,742,        for (int col = nCol - 1; col >= 0; col--) {,0,0,0,1,3,0,0,0,0,4,43,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,743,            for (int j = 0; j < nColB; j++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,744,                bp[col][j] /= lu[col][col];,0,0,0,4,8,0,0,0,0,12,27,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,746,            for (int i = 0; i < col; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,753,        RealMatrixImpl outMat = new RealMatrixImpl(bp);,4,0,0,1,2,0,0,0,0,5,47,10,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,754,        return outMat;,2,0,0,0,0,2,2,0,0,5,14,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,847,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/EstimatedParameter,100,107,    return bound;,0,0,0,0,0,1,0,0,0,1,13,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,48,    public SimpleEstimationProblem() {,2,0,0,1,3,1,0,0,0,3,34,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,49,        parameters   = new ArrayList();,18,2,1,1,2,0,0,0,0,35,31,1,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,50,        measurements = new ArrayList();,2,0,0,1,2,0,0,2,0,5,31,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,51,    },0,0,0,0,1,0,6,0,0,6,1,11,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,68,        List unbound = new ArrayList(parameters.size());,2,0,0,2,4,0,0,0,0,2,48,2,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,69,        for (Iterator iterator = parameters.iterator(); iterator.hasNext();) {,8,0,0,3,7,0,8,2,0,19,70,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,70,            EstimatedParameter p = (EstimatedParameter) iterator.next();,0,0,0,2,4,0,0,0,0,6,60,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,71,            if (! p.isBound()) {,4,3,0,2,5,0,2,0,0,9,20,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,72,                unbound.add(p);,0,0,0,1,2,0,4,0,0,4,15,5,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,74,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,77,        return (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);,2,0,0,5,10,1,8,4,0,15,86,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,86,        return (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);,0,0,0,5,10,1,0,0,0,16,98,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,93,        parameters.add(p);,6,1,0,1,2,1,0,0,0,8,18,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,101,        measurements.add(m);,0,0,0,1,2,0,0,0,0,3,20,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,102,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,57,        return costEvaluations;,24,2,1,0,0,2,22,6,0,62,23,0,0.07692,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",4,1,0,2,4,0,6,2,0,14,60,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,59,    },6,1,0,0,1,2,4,0,0,13,1,3,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,237,        return getDefaultNumberFormat(Locale.getDefault());,2,0,1,2,4,1,0,0,0,6,51,9,0.28571,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,361,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,364,"        Number im = parseNumber(source, getRealFormat(), pos);",0,0,0,2,4,0,0,0,0,6,54,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,365,        if (im == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,374,        int n = getImaginaryCharacter().length();,0,0,0,2,4,0,0,0,0,6,41,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,375,        startIndex = pos.getIndex();,4,0,0,1,2,1,6,0,0,11,28,4,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,376,        int endIndex = startIndex + n;,6,1,0,0,0,0,0,0,0,7,30,5,0.18182,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,        if (,0,0,0,0,1,0,4,0,0,4,4,5,0.18182,1,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,321,        int initialIndex = pos.getIndex();,8,0,0,1,2,0,0,0,0,10,34,1,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,324,"        parseAndIgnoreWhitespace(source, pos);",6,0,0,1,2,0,6,0,0,13,38,4,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",6,1,0,3,6,1,12,0,0,21,57,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,2,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,4,1,0,0,0,2,0,0,0,6,12,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,        return getGamma().cumulativeProbability(x);,0,0,0,2,4,1,6,0,0,6,43,5,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,8,0,0,15,67,3,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,160,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,186,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,3.6,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,93,            double g = 607.0 / 128.0;,0,0,0,0,0,0,0,0,0,0,25,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,95,            double sum = 0.0;,0,0,0,0,0,0,0,0,0,0,17,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,96,            for (int i = lanczos.length - 1; i > 0; --i) {,0,0,0,1,3,0,0,0,0,4,46,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,97,                sum = sum + (lanczos[i] / (x + i));,0,0,0,3,6,0,0,0,0,9,35,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,4,1,1,1,2,0,0,0,0,8,23,6,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,10,3,0,0,0,0,0,0,0,13,24,3,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,46,    },4,0,0,0,1,0,0,0,0,4,1,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,38,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,39,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,48,        setAlpha(alpha);,0,0,0,1,2,0,0,0,0,3,16,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,49,        setBeta(beta);,0,0,0,1,2,0,4,0,0,4,14,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,111,        if (alpha <= 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,114,        this.alpha = alpha;,4,0,0,0,0,0,0,0,0,5,19,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,115,    },4,1,0,0,1,0,4,2,0,11,1,6,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,131,        if (beta <= 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,134,        this.beta = beta;,2,1,0,0,0,0,0,0,0,3,17,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,135,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,43,"        this(df, new GammaDistributionImpl(df / 2.0, 2.0));",0,0,0,2,4,0,0,0,0,6,51,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,44,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,53,        super();,6,0,1,1,2,0,0,0,0,9,8,6,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,54,        setGamma(g);,2,0,0,1,2,0,4,0,0,6,12,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,55,        setDegreesOfFreedom(df);,2,1,1,1,2,0,4,0,0,11,24,3,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,63,        getGamma().setAlpha(degreesOfFreedom / 2.0);,2,1,0,2,4,0,4,0,0,7,44,5,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,64,    },8,1,0,0,1,0,0,0,0,9,1,0,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,180,        this.gamma = g;,0,0,0,0,0,0,0,0,0,0,15,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,182,    },6,0,0,0,1,0,0,0,0,7,1,3,1.5,0,0,-1
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,189,        return gamma;,4,0,0,0,0,1,0,0,0,4,13,1,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,39,        this(new ChiSquaredDistributionImpl(1.0));,14,2,0,2,4,1,4,0,0,22,42,3,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,40,    },8,1,1,0,1,0,0,2,0,20,1,3,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,49,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,50,        setDistribution(x);,2,0,0,1,2,0,4,2,0,8,19,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,51,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,402,        distribution = value;,2,1,0,0,0,0,0,0,0,3,21,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,403,    },4,0,0,0,1,0,0,0,0,5,1,4,1.5,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,168,            double n = 0.0; // current element index,6,0,0,0,0,0,0,0,0,7,40,3,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,170,            double sum = an; // partial sum,6,1,0,0,0,0,0,0,0,8,31,4,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,18,4,0,2,5,1,6,2,0,32,53,1,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,173,                n = n + 1.0;,0,0,0,0,0,0,0,0,0,0,12,4,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,174,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,177,                sum = sum + an;,0,0,0,0,0,0,4,0,0,5,15,7,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,179,            if (n >= maxIterations) {,2,0,0,1,3,1,8,0,0,11,25,7,1.125,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,0,0,0,4,8,0,0,0,0,12,59,4,1.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,278,"        return chiSquareTest.chiSquare(expected, observed);",0,0,0,1,2,1,0,0,0,4,51,4,1.0,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,243,            ContinuedFraction cf = new ContinuedFraction() {,4,0,0,1,3,1,4,4,0,13,48,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,248,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,252,                    return n * (a - n);,2,1,0,1,2,1,0,0,0,3,19,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,165,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0,0,0,1,2,0,0,0,0,3,60,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,235,        } else if (x == 0.0) {,12,1,1,1,4,0,0,0,0,19,22,0,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,237,        } else if (x < a || a < 1.0) {,12,4,0,1,4,1,0,0,0,17,30,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,243,            ContinuedFraction cf = new ContinuedFraction() {,4,0,0,1,3,0,4,4,0,13,48,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",4,1,0,1,2,0,10,0,0,17,51,3,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,6,2,0,4,8,3,4,0,0,15,59,2,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,102,260,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.81818,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,46,        setDegreesOfFreedom(degreesOfFreedom);,0,0,0,1,2,0,0,0,0,3,38,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,54,        if (degreesOfFreedom <= 0.0) {,0,0,0,1,3,0,0,0,0,4,30,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,57,        this.degreesOfFreedom = degreesOfFreedom;,6,0,0,0,0,0,0,0,0,7,41,3,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,58,    },4,1,0,0,1,0,12,0,0,17,1,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,43,        this(new TDistributionImpl(1.0));,6,1,0,2,4,0,0,2,0,10,33,3,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,53,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,54,        setDistribution(t);,0,0,0,1,2,0,4,0,0,4,19,5,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,55,    },6,1,0,0,1,0,0,0,0,7,1,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1067,        distribution = value;,4,0,0,0,0,0,0,0,0,5,21,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1068,    },0,0,0,0,1,0,0,0,0,1,1,4,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,38,    private static TTest tTest = new TTestImpl();,4,0,0,1,2,2,2,4,0,13,45,1,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,41,    private static ChiSquareTest chiSquareTest = ,12,2,1,0,0,0,0,0,0,23,44,0,0.7619,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,0,0,0,1,4,1,0,0,0,6,40,4,0.14286,1,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,2,0,0,1,3,0,0,0,0,3,12,6,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,58,            ret = -ret;,0,0,0,0,0,0,0,0,0,0,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Erf,103,60,        return ret;,2,0,0,0,0,1,0,2,0,5,11,4,0.14286,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,2,0,0,1,2,1,6,0,0,9,33,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,0,0,0,1,2,0,0,0,0,3,74,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,90,        if (Double.isNaN(x) || (x <= 0.0)) {,0,0,0,3,7,0,0,0,0,10,36,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,96,            for (int i = lanczos.length - 1; i > 0; --i) {,12,2,1,1,3,1,0,0,0,22,46,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,97,                sum = sum + (lanczos[i] / (x + i));,12,3,1,3,6,0,0,0,0,21,35,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,99,            sum = sum + lanczos[0];,6,1,1,1,2,0,0,0,0,10,23,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,101,            double tmp = x + g + .5;,0,0,0,0,0,0,0,0,0,0,24,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,0,0,0,3,6,0,0,0,0,9,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,106,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,160,        } else if (x == 0.0) {,4,1,0,1,4,0,0,0,0,6,22,0,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,168,            double n = 0.0; // current element index,0,0,0,0,0,0,0,0,0,0,40,4,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,170,            double sum = an; // partial sum,8,0,0,0,0,1,0,0,0,10,31,3,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,103,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.08333,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,6,2,0,2,4,4,10,2,0,24,33,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,10,2,0,1,2,1,4,0,0,16,19,3,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,0,1,0,1,4,0,6,0,0,7,30,4,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,0,0,2,48,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",8,1,0,1,2,0,10,2,0,22,51,1,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,8,2,0,4,8,0,0,0,0,11,59,5,0.04,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,235,        } else if (x == 0.0) {,8,2,0,1,4,0,0,0,0,11,22,4,0.03846,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,67,4,0.03704,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,168,            double n = 0.0; // current element index,10,5,0,0,0,0,8,0,0,23,40,11,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,170,            double sum = an; // partial sum,0,0,0,0,0,0,0,0,0,0,31,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,173,                n = n + 1.0;,4,0,0,0,0,0,0,0,0,4,12,3,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,174,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/special/Gamma,104,177,                sum = sum + an;,4,0,0,0,0,0,0,0,0,5,15,8,0.03226,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,6,1,0,0,0,0,0,2,0,9,25,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,2,0,1,0,0,0,0,0,0,7,26,6,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,2,0,0,0,0,0,4,0,0,6,25,5,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,72,    private double sumXY = 0d;,0,0,0,0,0,0,0,0,0,0,26,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,75,    private long n = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.125,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,0,0,0,3,30,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,10,0,1,0,0,1,0,0,0,13,12,5,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,32,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,177,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",10,1,0,1,2,0,0,0,0,12,38,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",0,0,0,2,4,0,4,0,0,5,55,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,192,        if (den == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,204,        int d = den.intValue();,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",6,3,0,5,10,1,16,2,0,27,68,4,0.5,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,153,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,0,0,0,3,38,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,156,"        Number num = getNumeratorFormat().parse(source, pos);",2,0,0,2,4,0,8,2,0,12,53,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,157,        if (num == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.33333,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,137,        int initialIndex = pos.getIndex();,6,0,0,1,2,0,4,0,0,11,34,3,0.25,0,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,140,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.25,0,0,-1
