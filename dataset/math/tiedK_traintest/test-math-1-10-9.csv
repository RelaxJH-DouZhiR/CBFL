dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,2,2,0,1,3,1,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,125,        double yMax = f.value(max);,1,0,0,1,2,1,3,0,0,5,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,1,1,0,2,5,1,3,0,0,6,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,132,        if (yInitial * yMax < 0) {,2,2,0,1,3,1,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,184,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,1,2,0,0,3,58,10,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,          filteredH = maxStep;,2,0,0,0,0,0,0,0,1,2,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,                    final double factor = computeStepGrowShrinkFactor(error);,1,0,0,1,2,2,2,0,2,6,57,10,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",3,1,0,0,2,0,2,0,3,5,53,10,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,3,0,0,3,27,11,1.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,4,0,1,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,1,0,0,0,0,0,0,0,1,2,4,6,4.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,1,2,0,3,9,1,4,0,1,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,1,0,0,1,2,2,2,0,1,6,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,3,1,0,0,0,0,0,0,1,3,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,        return Math.sqrt(sum);,0,0,0,1,2,1,3,0,0,4,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,1,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,1,0,0,1,2,0,1,2,1,6,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,1,2,0,3,9,1,4,0,1,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,1,0,0,2,4,0,4,0,1,5,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,1,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,1,0,0,1,2,0,2,1,0,5,35,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,0,0,0,2,5,1,2,0,0,4,24,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,0,0,0,1,2,0,2,0,0,3,15,7,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,1,0,0,1,2,0,2,0,1,5,20,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,1,0,0,1,2,0,3,0,1,5,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,2,0,0,1,3,2,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",1,0,0,1,4,0,6,0,1,5,34,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,3,1,0,0,0,1,0,0,0,3,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,3,1,0,0,0,1,0,0,0,3,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,9,7,0,2,8,0,0,0,1,5,56,10,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,4,4,0,1,6,0,0,0,1,5,42,10,0.11111,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",1,0,0,0,1,3,0,3,1,5,96,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,    public Cluster(final T center) {,2,0,0,1,3,2,0,1,2,6,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,        this.center = center;,2,0,0,0,0,1,0,0,1,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,1,0,0,1,2,1,0,2,2,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,48,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,        return center;,1,0,0,0,0,1,0,0,0,2,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,2,0,0,1,3,2,0,1,2,6,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,2,0,0,0,0,1,0,0,1,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,42,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",1,0,0,0,2,0,4,3,1,5,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,57,"        assignPointsToClusters(clusters, points);",0,0,0,0,2,0,3,0,1,3,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,2,0,0,1,3,2,0,1,1,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,90,"            Cluster<T> cluster = getNearestCluster(clusters, p);",1,0,0,0,2,0,3,2,1,5,52,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,91,            cluster.addPoint(p);,0,0,0,1,2,0,3,0,0,3,20,7,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,107,        final List<T> pointSet = new ArrayList<T>(points);,2,0,0,1,2,2,0,4,2,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,108,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,1,0,0,1,2,2,0,6,2,6,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,111,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,1,0,0,3,6,1,6,1,1,7,70,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,1,0,0,2,4,1,2,2,1,7,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,114,        final double[] dx2 = new double[pointSet.size()];,1,0,0,1,6,4,2,0,1,6,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,1,1,0,2,5,1,2,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,1,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,38,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,1,0,0,0,0,0,0,2,0,2,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,2,0,0,1,3,2,0,2,1,6,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,1,0,0,2,4,2,4,0,1,6,58,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,2,1,0,1,3,1,0,0,0,5,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,161,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,1,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,2,3,1,0,2,0,0,0,1,5,43,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,1,0,0,0,0,0,0,0,1,2,11,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,                    updateSigma(tau);,0,0,0,1,2,0,2,0,1,4,17,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,                    return deflatedEnd;,1,0,0,0,0,1,0,0,0,2,19,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,1,0,0,2,4,1,1,1,1,7,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,2,0,0,1,2,0,1,0,1,5,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,1,0,0,0,0,1,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,1,1,1,0,4,0,0,0,1,5,22,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,2,0,0,1,2,1,1,0,1,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,1,2,7,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,1,0,0,0,0,0,0,0,2,2,11,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,2,1,0,0,0,1,0,0,0,3,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,3,2,0,0,0,2,0,0,1,4,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,2,1,1,0,2,1,0,0,0,5,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,1,1,0,2,1,0,0,0,5,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,2,0,0,0,0,2,0,0,1,3,23,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,4,5,1,1,7,1,0,0,0,6,45,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,5,6,1,1,8,1,0,0,0,6,58,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,2,2,0,1,3,1,0,0,0,5,22,8,0.5,1,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,3,3,1,0,4,0,0,0,1,5,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,2,1,0,0,0,0,0,0,1,3,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,2,1,0,1,3,1,0,0,0,5,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,1,0,0,0,0,0,0,0,2,2,11,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,1,0,0,0,2,2,0,0,1,4,26,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,3,0,0,1,2,1,2,0,1,6,47,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,2,0,0,0,0,1,0,0,1,3,20,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,278,                    final double v1 = o1.getValue();,1,0,0,1,2,2,2,0,1,6,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,1,0,0,1,2,2,2,0,1,6,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,3,1,0,1,2,1,0,0,0,5,40,12,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,142,        final int n = steps.length;,3,0,0,0,0,2,0,0,1,3,27,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,1,0,1,0,4,2,0,0,1,5,38,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,4,1,0,1,3,2,0,0,1,6,29,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,1,0,1,0,4,2,0,0,1,5,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,146,            for (int j = 0; j < i + 1; ++j) {,4,2,0,1,3,2,0,0,1,6,33,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,147,                if (steps[j] == 0.0) {,0,1,1,1,5,1,0,0,0,5,22,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",1,1,0,0,2,0,4,0,0,4,46,9,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,3,0,0,0,4,1,0,2,0,4,71,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,294,            if (iterations > 0) {,1,1,0,1,3,1,0,0,0,5,21,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",2,0,0,0,2,0,4,0,0,3,58,7,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,0,0,0,1,2,0,2,0,1,4,27,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,2,1,0,1,3,1,0,0,1,6,35,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,322,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,401,"        Arrays.sort(simplex, comparator);",0,0,0,0,2,0,4,0,0,2,33,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,403,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,45,    public MultiDirectional() {,1,0,0,1,3,1,0,0,1,5,27,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,1,0,0,0,0,1,0,0,1,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,47,        this.gamma = 0.5;,1,0,0,0,0,1,0,0,1,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,48,    },0,0,0,0,1,0,0,0,0,1,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,66,            incrementIterationsCounter();,0,0,0,1,2,0,1,0,1,4,29,6,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,69,            final RealPointValuePair[] original = simplex;,2,0,0,0,2,1,0,1,1,5,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,70,            final RealPointValuePair best = original[0];,1,0,1,0,2,1,0,1,1,6,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,73,"            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);",1,0,0,0,2,1,3,1,2,6,83,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,74,"            if (comparator.compare(reflected, best) < 0) {",0,1,0,0,5,1,4,0,0,4,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,89,"            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);",1,0,0,0,2,1,4,1,2,6,86,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,90,"            if (comparator.compare(contracted, best) < 0) {",0,1,0,0,5,1,4,0,0,4,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },0,0,0,0,1,0,0,0,0,1,1,2,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,115,        final double[] xSmallest = original[0].getPointRef();,1,0,1,1,6,2,1,0,1,7,53,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,116,        final int n = xSmallest.length;,3,0,0,0,0,2,0,0,1,3,31,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,119,        simplex = new RealPointValuePair[n + 1];,2,1,0,0,2,1,0,1,1,6,40,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,120,        simplex[0] = original[0];,0,0,1,0,4,0,0,0,1,3,25,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,121,        for (int i = 1; i <= n; ++i) {,4,1,0,1,3,2,0,0,1,6,30,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,122,            final double[] xOriginal    = original[i].getPointRef();,1,0,1,1,6,2,1,0,1,7,56,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,123,            final double[] xTransformed = new double[n];,1,0,1,0,4,4,0,0,1,5,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,124,            for (int j = 0; j < n; ++j) {,4,1,0,1,3,2,0,0,1,6,29,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,125,                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);,1,3,1,1,10,0,0,0,1,6,71,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,127,"            simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);",3,0,1,0,4,1,0,1,3,6,69,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,131,        evaluateSimplex(comparator);,0,0,0,1,2,0,2,0,1,4,28,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,132,        return simplex[0];,0,0,1,0,2,1,0,0,0,3,18,5,2.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",2,0,0,0,4,1,3,0,2,5,51,3,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,109,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,1,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",2,1,0,1,8,2,5,1,3,8,104,5,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",1,0,0,1,6,1,0,0,2,5,68,3,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,45,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,45,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,46,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,128,        } catch (MaxIterationsExceededException ex) {,1,0,0,1,4,1,0,1,0,5,45,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,129,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,3,3,0,2,5,1,0,0,0,5,65,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,3,3,0,2,6,2,0,0,0,5,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,0,0,0,0,0,1,0,0,0,1,12,2,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,1,0,0,1,2,0,1,0,2,5,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,206,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,1,1,0,1,3,1,0,0,0,5,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,1,1,0,1,4,2,0,0,0,5,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,1,1,0,1,4,0,2,0,3,6,41,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,181,                throw new MaxIterationsExceededException(maxIterations);,1,0,0,1,2,2,0,1,1,6,56,10,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,1,0,0,1,2,2,1,0,2,6,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,1,0,0,1,2,2,1,0,2,6,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,1,0,0,1,2,2,0,2,2,6,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,1,0,0,1,4,0,2,1,1,6,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,1,1,0,2,4,0,4,1,1,7,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",0,0,0,1,5,0,4,0,1,4,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,4,1,0,1,3,2,0,0,1,6,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,0,2,0,2,0,1,3,16,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",0,0,0,1,3,0,2,0,1,4,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,4,1,0,1,3,2,0,0,1,6,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,1,1,0,1,3,1,0,0,0,5,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",0,0,0,0,2,0,2,0,1,3,16,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",0,0,0,0,4,0,5,0,1,3,27,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");",0,0,0,1,3,0,2,0,1,4,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,        return res.toString();,0,0,0,1,2,1,2,0,0,4,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,0,0,1,2,7,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,1,2,7,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,0,2,0,0,0,1,3,20,12,0.5,1,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,1,0,0,2,4,0,1,1,1,6,28,4,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,1,0,0,1,4,1,0,1,0,5,33,6,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,2,0,1,2,5,79,7,1.0,1,1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,2,1,0,1,4,3,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,1,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,1,0,0,2,4,1,4,0,1,6,45,5,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,1,0,0,0,0,0,0,0,1,2,7,6,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,1,0,0,0,0,0,0,0,1,2,22,6,0.05,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,1,0,0,0,0,2,0,1,2,4,58,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",0,0,0,0,1,1,5,0,1,4,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,1,1,0,1,3,1,0,0,0,5,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {,6,5,0,1,3,1,0,0,0,5,79,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,145,        double d = getDenominatorDegreesOfFreedom();,1,0,0,1,2,1,1,0,1,6,44,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,3,2,0,1,2,0,0,0,1,5,20,4,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,1,0,0,0,0,1,0,0,0,2,11,4,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,1,0,0,0,0,0,0,1,0,2,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,80,        double lowerBound = getDomainLowerBound(p);,1,0,0,1,2,1,2,0,1,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,1,0,0,1,2,1,2,0,1,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,1,0,0,0,2,1,0,0,0,3,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,1,0,0,0,1,0,2,0,1,4,44,6,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,0,0,0,1,3,1,0,1,1,5,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,1,1,0,1,5,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,3,0,0,5,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.33333,1,1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,1,0,0,0,0,1,0,0,0,2,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,2,1,0,2,5,2,1,0,0,6,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,3,0,0,0,4,2,0,2,1,5,50,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,2,0,0,0,0,0,0,1,0,2,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,1,0,1,2,10,0,3,0,1,6,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,1,0,0,1,2,3,1,0,1,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,1,0,0,1,2,3,1,0,1,6,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,3,1,0,1,3,1,0,0,0,5,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,3,0,0,0,4,4,0,0,1,4,42,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,780,        for (int row = 0; row < nRows; row++) {,4,1,0,1,3,2,0,0,1,6,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,1,0,1,0,4,2,0,0,1,5,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,1,0,0,0,0,1,0,0,0,2,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,1,1,1,0,4,0,0,0,1,5,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,1,0,1,0,2,0,0,0,1,4,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,2,3,0,1,3,1,0,0,0,5,18,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,0,6,1,7,0,2,6,50,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,1,0,0,0,0,1,0,0,0,2,11,4,1.0,1,1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,2,10,2,4,2,0,5,92,5,1.0,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,1,0,0,0,0,0,0,0,1,2,9,5,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,5,1,0,1,3,2,0,0,1,6,38,4,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,0,1,1,1,5,1,0,0,0,5,16,6,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.25,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",2,0,0,0,2,1,4,0,1,5,67,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,1,0,0,0,0,2,0,0,1,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,1,0,0,0,0,2,0,0,1,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,72,    private double sumXY = 0d;,1,0,0,0,0,2,0,0,1,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,75,    private long n = 0;,1,0,0,0,0,2,0,0,1,3,19,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,78,    private double xbar = 0;,1,0,0,0,0,2,0,0,1,3,24,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,81,    private double ybar = 0;,1,0,0,0,0,2,0,0,1,3,24,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,106,        if (n == 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,107,            xbar = x;,2,0,0,0,0,0,0,0,1,2,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,108,            ybar = y;,2,0,0,0,0,0,0,0,1,2,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,110,            double dx = x - xbar;,3,1,0,0,0,1,0,0,0,3,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,111,            double dy = y - ybar;,3,1,0,0,0,1,0,0,0,3,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,112,            sumXX += dx * dx * (double) n / (double) (n + 1.0);,5,3,0,1,6,2,0,0,1,6,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,113,            sumYY += dy * dy * (double) n / (double) (n + 1.0);,5,3,0,1,6,2,0,0,1,6,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,114,            sumXY += dx * dy * (double) n / (double) (n + 1.0);,5,3,0,1,6,2,0,0,1,6,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,115,            xbar += dx / (double) (n + 1.0);,3,2,0,1,4,1,0,0,1,6,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,116,            ybar += dy / (double) (n + 1.0);,3,2,0,1,4,1,0,0,1,6,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,118,        sumX += x;,2,0,0,0,0,0,0,0,1,2,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,119,        sumY += y;,2,0,0,0,0,0,0,0,1,2,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,120,        n++;,1,0,0,0,0,0,0,0,1,2,4,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,4,3,0,0,0,1,0,0,0,3,37,4,0.125,1,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,3,0,0,3,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,3,0,0,3,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,1,0,0,1,2,1,2,0,0,5,32,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",1,0,0,0,2,1,3,0,1,5,41,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,1,0,0,1,3,1,0,0,0,4,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,177,            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,0,2,0,3,0,1,3,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",1,0,0,1,4,0,4,1,1,6,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,192,        if (den == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,1,0,0,1,2,1,2,0,0,5,25,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,1,0,0,1,2,1,2,0,0,5,23,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,204,        int d = den.intValue();,1,0,0,1,2,1,2,0,0,5,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",3,3,0,3,10,2,6,1,1,8,68,4,0.5,0,0
