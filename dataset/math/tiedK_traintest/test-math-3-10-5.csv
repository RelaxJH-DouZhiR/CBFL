dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,139,            final double residual = targetValues[i] - objective[i];,1,1,1,0,4,2,0,0,1,6,55,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,140,            weightedResiduals[i]= residual*FastMath.sqrt(residualsWeights[i]);,1,1,1,1,6,0,2,0,1,7,66,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,141,            cost += residualsWeights[i] * residual * residual;,3,1,1,0,2,0,0,0,1,5,50,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,142,            index += cols;,2,0,0,0,0,0,0,0,1,2,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,144,        cost = FastMath.sqrt(cost);,1,0,0,1,2,0,3,0,1,5,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,145,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,237,        jacobianEvaluations = 0;,1,0,0,0,0,0,0,0,1,2,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,240,        jF = f.jacobian();,1,0,0,1,2,0,2,0,1,5,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,241,        this.residuals = new double[target.length];,3,0,0,0,2,3,0,0,1,4,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,244,        point = startPoint.clone();,1,0,0,1,2,0,2,0,1,5,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,245,        rows = target.length;,3,0,0,0,0,0,0,0,1,2,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,246,        cols = point.length;,3,0,0,0,0,0,0,0,1,2,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,248,        weightedResidualJacobian = new double[rows][cols];,1,0,1,0,4,2,0,0,1,5,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,249,        this.weightedResiduals = new double[rows];,1,0,1,0,2,3,0,0,1,5,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,251,        cost = Double.POSITIVE_INFINITY;,3,0,0,0,0,0,0,0,1,2,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,253,"        return super.optimize(maxEval, f, target, weights, startPoint);",6,0,0,0,2,2,0,0,0,3,63,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,43,public abstract class AbstractLeastSquaresOptimizer,1,0,0,0,0,3,0,0,2,3,51,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,73,        return relativeThreshold;,1,0,0,0,0,1,0,0,0,2,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,80,        return absoluteThreshold;,1,0,0,0,0,1,0,0,0,2,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,76,        final double[] p = previous.getValueRef();,1,0,0,1,4,2,2,0,1,6,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,77,        final double[] c = current.getValueRef();,1,0,0,1,4,2,2,0,1,6,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,78,        for (int i = 0; i < p.length; ++i) {,5,1,0,1,3,2,0,0,1,6,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,79,            final double pi         = p[i];,1,0,1,0,2,2,0,0,1,5,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,80,            final double ci         = c[i];,1,0,1,0,2,2,0,0,1,5,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,81,            final double difference = FastMath.abs(pi - ci);,3,1,0,1,2,2,2,0,1,7,48,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,82,"            final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));",1,0,0,1,6,2,8,0,1,6,75,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,83,            if (difference > size * getRelativeThreshold() &&,2,3,0,1,3,1,1,0,1,7,49,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,85,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,34,public class SimpleVectorialValueChecker,1,0,0,0,0,2,0,0,1,3,40,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,44,        maximalCount = max;,2,0,0,0,0,0,0,0,1,2,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,84,        if (++count > maximalCount) {,2,1,0,1,3,1,0,0,1,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,93,        count = 0;,1,0,0,0,0,0,0,0,1,2,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,94,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,73,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,76,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,85,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,105,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,118,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,128,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,131,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,134,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,137,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,140,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,143,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,146,    private static final long RECIP_2PI[] = new long[] {,1,0,0,0,5,6,0,0,3,4,52,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,167,    private static final long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,6,0,0,3,4,54,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,126,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,208,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,209,        for (i = 1; i < FACT.length; i++) {,5,1,0,1,3,1,0,0,2,6,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,210,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,213,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,214,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,217,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,218,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,222,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,224,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,225,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,226,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,5,1,0,1,3,1,0,0,2,6,47,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,232,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,238,        for (i = 0; i < LN_MANT.length; i++) {,5,1,0,1,3,1,0,0,2,6,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,240,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,244,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,245,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,277,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,697,"        return exp(x, 0.0, null);",0,0,0,0,2,1,2,0,1,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,716,        if (x < 0.0) {,1,1,0,1,3,1,0,0,0,5,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,717,            intVal = (int) -x;,2,0,0,1,2,1,0,0,2,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,719,            if (intVal > 746) {,1,1,0,1,3,1,0,0,0,5,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,727,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,737,            if (intVal == 709) {,1,1,0,1,3,1,0,0,0,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,747,            intVal++;,1,0,0,0,0,0,0,0,1,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,752,            intVal = -intVal;,2,0,0,0,0,0,0,0,2,2,17,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,754,            intVal = (int) x;,2,0,0,1,2,1,0,0,1,5,17,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,756,            if (intVal > 709) {,1,1,0,1,3,1,0,0,0,5,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,2,1,1,0,2,0,0,0,1,5,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,3,2,0,2,6,3,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,1,0,1,0,2,2,0,0,1,5,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,4,3,0,1,2,2,0,0,1,6,55,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,789,        double z = 0.04168701738764507;,1,0,0,0,0,1,0,0,0,2,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,790,        z = z * epsilon + 0.1666666505023083;,3,2,0,0,0,0,0,0,1,3,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,791,        z = z * epsilon + 0.5000000000042687;,3,2,0,0,0,0,0,0,1,3,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,792,        z = z * epsilon + 1.0;,3,2,0,0,0,0,0,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,793,        z = z * epsilon + -3.940510424527919E-20;,3,2,0,0,0,0,0,0,2,3,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,800,        double tempA = intPartA * fracPartA;,3,1,0,0,0,1,0,0,0,3,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,7,5,0,0,0,1,0,0,0,3,82,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,807,        final double tempC = tempB + tempA;,3,1,0,0,0,2,0,0,1,4,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,809,        if (extra != 0.0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,812,            result = tempC*z + tempB + tempA;,5,3,0,0,0,0,0,0,1,3,33,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,815,        if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,821,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,987,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,988,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,989,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,990,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,991,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,992,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,994,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,995,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,996,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,997,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,999,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1000,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1002,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1003,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1004,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1007,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1008,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1009,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1012,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1021,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1022,            final double a = d * HEX_40000000;,3,1,0,0,0,2,0,0,1,4,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1023,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1024,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1025,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1030,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1037,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1038,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1040,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1041,            double z = c * HEX_40000000;,3,1,0,0,0,1,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1042,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1043,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1044,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1045,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1046,            a[0] = (c + z - c) * HEX_40000000;,4,3,1,1,4,0,0,0,1,6,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1047,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1049,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1057,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1061,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1062,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1070,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1071,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1073,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1074,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1095,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1096,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1098,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1103,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1107,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1111,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1113,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1118,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1120,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1122,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1130,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1131,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1132,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1135,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1136,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1137,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1139,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1140,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1143,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1144,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1146,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1148,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1149,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1151,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1154,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1155,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1156,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1158,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1160,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1161,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1163,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1166,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1167,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1168,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1170,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1172,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1173,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1175,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1176,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1185,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1186,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1187,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1196,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1197,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1199,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1201,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1202,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1203,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1207,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1210,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1213,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1214,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1215,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1217,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1220,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1716,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1717,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1718,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1719,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1721,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1724,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1725,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1726,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1727,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1728,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1729,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1730,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1731,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1734,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1744,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1745,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1746,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1748,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1749,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1752,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1753,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1754,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1756,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1766,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1767,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1768,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1769,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1770,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1771,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1773,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1774,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1777,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1778,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1781,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1782,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1784,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1785,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1786,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1789,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1790,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1793,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1794,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1795,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1798,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1809,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1810,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1811,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1812,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1813,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1814,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1816,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1817,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1818,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1820,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1821,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1824,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1825,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1827,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1828,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1829,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1832,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1833,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1836,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1837,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1838,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1841,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1847,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1850,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1851,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1853,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1854,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1855,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1857,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1858,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1859,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1863,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1864,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1865,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1866,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1867,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1868,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1870,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1872,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1873,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1874,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1875,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1878,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1883,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1884,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1885,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1886,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1887,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1888,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1889,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1891,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1892,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1893,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1894,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1895,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1896,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1901,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1902,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1903,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1904,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1905,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1908,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1909,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1910,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1911,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1912,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1913,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1914,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1919,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1920,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1921,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1922,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1924,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1925,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1927,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1929,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1930,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1932,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1934,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1935,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1938,    },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,4,2,0,1,4,1,0,0,1,6,61,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3784,        return (a <= b) ? a : b;,4,1,0,1,2,1,0,0,0,5,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3827,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3828,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3895,        if (a > b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3896,            return a;,1,0,0,0,0,1,0,0,0,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3898,        if (a < b) {,2,1,0,1,3,1,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3899,            return b;,1,0,0,0,0,1,0,0,0,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3902,        if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3907,        long bits = Double.doubleToRawLongBits(a);,1,0,0,1,2,1,3,0,0,5,42,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3908,        if (bits == 0x8000000000000000L) {,1,1,0,1,3,1,0,0,0,5,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3911,        return a;,1,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,197,        return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);,4,2,0,1,2,1,2,0,1,7,60,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,35,public class Gaussian implements DifferentiableUnivariateRealFunction {,1,0,0,0,1,3,0,1,1,5,71,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,114,    public static class Parametric implements ParametricUnivariateRealFunction {,1,0,0,0,1,4,0,1,2,5,76,2,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,128,            validateParameters(param);,0,0,0,1,2,0,2,0,1,4,26,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,130,            final double diff = x - param[1];,2,1,1,0,2,2,0,0,1,6,33,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,131,            final double i2s2 = 1 / (2 * param[2] * param[2]);,1,2,1,1,6,2,0,0,1,7,50,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,132,"            return Gaussian.value(diff, param[0], i2s2);",0,0,1,0,4,1,4,0,0,4,44,6,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,150,            validateParameters(param);,0,0,0,1,2,0,2,0,1,4,26,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,152,            final double norm = param[0];,1,0,1,0,2,2,0,0,1,5,29,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,153,            final double diff = x - param[1];,2,1,1,0,2,2,0,0,1,6,33,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,154,            final double sigma = param[2];,1,0,1,0,2,2,0,0,1,5,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,155,            final double i2s2 = 1 / (2 * sigma * sigma);,3,2,0,1,2,2,0,0,1,6,44,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,157,"            final double n = Gaussian.value(diff, 1, i2s2);",1,0,0,0,2,2,4,0,1,5,47,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,158,            final double m = norm * n * 2 * i2s2 * diff;,5,1,0,0,0,2,0,0,1,4,44,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,159,            final double s = m * diff / sigma;,4,2,0,0,0,2,0,0,1,4,34,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,161,"            return new double[] { n, m, s };",3,0,0,0,4,3,0,0,0,3,32,7,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,176,            if (param == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,179,            if (param.length != 3) {,2,1,0,1,3,1,0,0,0,5,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,182,            if (param[2] <= 0) {,0,1,1,1,5,1,0,0,0,5,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,185,        },0,0,0,0,1,0,0,0,0,1,1,2,0.2,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);",1,0,0,0,2,1,0,0,1,4,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",3,0,0,0,3,5,0,0,3,4,75,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,3,3,0,1,4,1,0,0,1,6,70,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,3,0,0,0,0,1,0,0,1,3,48,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,1,0,0,0,0,1,0,0,1,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);",1,0,0,0,2,3,0,1,2,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",1,0,0,0,2,3,0,1,2,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",1,0,0,0,2,3,0,1,2,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,        if (computeConstants) {,1,0,0,1,3,1,0,0,0,4,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,            synchronized (DfpField.class) {,0,0,0,1,3,2,0,1,0,4,31,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,2,2,0,2,6,0,1,0,1,6,73,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",2,0,0,0,2,2,0,1,2,5,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,1,0,0,1,2,0,2,0,2,5,35,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",2,0,0,0,2,2,0,1,2,5,53,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",2,0,0,0,2,2,0,1,2,5,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",2,0,0,0,2,2,0,1,2,5,53,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",2,0,0,0,2,2,0,1,2,5,41,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,1,0,0,1,2,0,2,0,2,5,33,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);",2,0,0,0,2,2,0,1,2,5,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,1,0,0,1,2,0,2,0,2,5,32,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",2,0,0,0,2,2,0,1,2,5,42,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,1,0,0,1,2,0,2,0,2,5,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);",2,0,0,0,2,2,0,1,2,5,42,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,                ln5Split       = split(ln5String);,1,0,0,1,2,0,2,0,2,5,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);",2,0,0,0,2,2,0,1,2,5,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,223,            },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,            sqr2           = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,            sqr2Split      = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,            sqr2Reciprocal = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,            sqr3           = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,            sqr3Reciprocal = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,231,            pi             = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,            piSplit        = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,            e              = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,            eSplit         = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,            ln2            = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,236,            ln2Split       = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,            ln5            = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,            ln5Split       = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,239,            ln10           = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,248,        return radixDigits;,1,0,0,0,0,1,0,0,0,2,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,        return rMode;,1,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,7,2,0,1,2,0,0,0,1,5,99,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,329,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,        return zero;,1,0,0,0,0,1,0,0,0,2,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,522,      Dfp result[] = new Dfp[2];,1,0,0,0,4,1,0,2,0,4,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,      boolean leading = true;,1,0,0,0,0,1,0,0,1,3,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,524,      int sp = 0;,1,0,0,0,0,1,0,0,0,2,11,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,525,      int sig = 0;,1,0,0,0,0,1,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,527,      char[] buf = new char[a.length()];,1,0,0,1,6,3,2,0,0,5,34,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,      for (int i = 0; i < buf.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,        buf[i] = a.charAt(i);,0,0,1,1,4,0,3,0,1,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,532,        if (buf[i] >= '1' && buf[i] <= '9') {,0,3,1,1,7,1,0,0,2,6,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,533,            leading = false;,1,0,0,0,0,0,0,0,2,2,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,536,        if (buf[i] == '.') {,0,1,1,1,5,1,0,0,1,6,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,537,          sig += (400 - sig) % 4;,2,2,0,1,2,0,0,0,1,5,23,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,538,          leading = false;,1,0,0,0,0,0,0,0,2,2,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,541,        if (sig == (radixDigits / 2) * 4) {,2,3,0,2,5,1,0,0,0,5,35,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,542,          sp = i;,2,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,543,          break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,546,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,1,4,1,1,7,1,0,0,3,7,49,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,            sig ++;,1,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",2,0,1,0,6,3,0,2,3,6,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,553,      for (int i = 0; i < buf.length; i++) {,5,1,0,1,3,2,0,0,1,6,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,554,        buf[i] = a.charAt(i);,0,0,1,1,4,0,3,0,1,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,555,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,2,5,1,1,7,1,0,0,2,7,47,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,556,            buf[i] = '0';,0,0,1,0,2,0,0,0,2,3,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));",1,0,1,1,6,3,0,2,3,7,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,      return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,570,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,2,4,0,2,5,1,2,0,0,6,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,573,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",2,0,0,0,2,2,0,2,3,5,84,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",2,0,0,0,2,2,0,2,2,5,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",2,0,0,0,2,2,0,2,2,5,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",2,0,0,0,2,2,0,2,2,5,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,1,0,0,1,2,1,2,1,1,7,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,579,            sqr2String           = highPrecisionSqr2.toString();,1,0,0,1,2,0,2,0,1,5,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,580,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,1,0,0,1,4,0,4,0,1,5,77,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,1,0,0,1,2,1,2,1,1,7,56,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,            sqr3String           = highPrecisionSqr3.toString();,1,0,0,1,2,0,2,0,1,5,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,584,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,1,0,0,1,4,0,4,0,1,5,77,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",1,0,0,1,4,0,5,0,2,5,90,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,587,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",1,0,0,1,4,0,4,0,2,5,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,588,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",1,0,0,1,4,0,5,0,2,5,88,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",2,0,0,1,6,1,4,1,3,7,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",2,0,0,1,6,1,4,1,3,7,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,593,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,603,        Dfp sqrt2   = two.sqrt();,1,0,0,1,2,0,2,1,0,5,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,604,        Dfp yk      = sqrt2.subtract(one);,1,0,0,1,2,0,3,1,0,5,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,605,        Dfp four    = two.add(two);,1,0,0,1,2,0,3,1,0,5,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,606,        Dfp two2kp3 = two;,2,0,0,0,0,0,0,1,0,2,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,607,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,1,0,0,3,6,0,7,1,0,5,64,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,615,        for (int i = 1; i < 20; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,616,            final Dfp ykM1 = yk;,2,0,0,0,0,1,0,1,1,4,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,618,            final Dfp y2         = yk.multiply(yk);,1,0,0,1,2,1,3,1,1,7,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,619,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,1,0,0,2,4,1,5,1,1,7,53,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,620,            final Dfp s          = oneMinusY4.sqrt().sqrt();,1,0,0,1,4,1,3,1,1,7,48,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,621,            yk = one.subtract(s).divide(one.add(s));,1,0,0,2,6,0,7,0,1,5,40,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,623,            two2kp3 = two2kp3.multiply(four);,1,0,0,1,2,0,3,0,1,5,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,625,            final Dfp p = one.add(yk);,1,0,0,1,2,1,3,1,1,7,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,626,            final Dfp p2 = p.multiply(p);,1,0,0,1,2,1,3,1,1,7,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,627,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,1,0,0,4,16,0,17,0,1,5,108,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,629,            if (yk.equals(ykM1)) {,0,0,0,2,5,1,3,0,0,4,22,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,630,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,634,        return one.divide(ak);,0,0,0,1,2,1,3,0,0,4,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,645,        Dfp y  = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,646,        Dfp py = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,647,        Dfp f  = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,648,        Dfp fi = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,649,        Dfp x  = new Dfp(one);,2,0,0,1,2,1,0,2,1,6,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,651,        for (int i = 0; i < 10000; i++) {,3,1,0,1,3,2,0,0,1,6,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,652,            x = x.multiply(a);,1,0,0,1,2,0,3,0,1,5,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,653,            y = y.add(x.divide(f));,1,0,0,2,4,0,5,0,1,5,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,654,            fi = fi.add(one);,1,0,0,1,2,0,3,0,1,5,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,655,            f = f.multiply(fi);,1,0,0,1,2,0,3,0,1,5,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,656,            if (y.equals(py)) {,0,0,0,2,5,1,3,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,657,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,659,            py = new Dfp(y);,2,0,0,1,2,1,0,1,2,6,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,662,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,728,        int den = 1;,1,0,0,0,0,1,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",1,0,0,2,10,1,8,2,2,7,60,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,731,        Dfp y = new Dfp(x);,2,0,0,1,2,1,0,2,1,6,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,732,        Dfp num = new Dfp(x);,2,0,0,1,2,1,0,2,1,6,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,733,        Dfp py = new Dfp(y);,2,0,0,1,2,1,0,2,1,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,734,        for (int i = 0; i < 10000; i++) {,3,1,0,1,3,2,0,0,1,6,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,735,            num = num.multiply(x);,1,0,0,1,2,0,3,0,1,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,736,            num = num.multiply(x);,1,0,0,1,2,0,3,0,1,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,737,            den = den + 2;,2,1,0,0,0,0,0,0,1,3,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,738,            Dfp t = num.divide(den);,1,0,0,1,2,0,3,1,0,5,24,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,739,            y = y.add(t);,1,0,0,1,2,0,3,0,1,5,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,740,            if (y.equals(py)) {,0,0,0,2,5,1,3,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,741,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,743,            py = new Dfp(y);,2,0,0,1,2,1,0,1,2,6,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,746,        return y.multiply(two);,0,0,0,1,2,1,3,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,29,    public enum RoundingMode {,1,0,0,0,1,2,0,0,1,4,26,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,32,"        ROUND_DOWN,",1,0,0,0,0,0,0,0,0,1,11,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,35,"        ROUND_UP,",1,0,0,0,0,0,0,0,0,1,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,38,"        ROUND_HALF_UP,",1,0,0,0,0,0,0,0,0,1,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,41,"        ROUND_HALF_DOWN,",1,0,0,0,0,0,0,0,0,1,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,46,"        ROUND_HALF_EVEN,",1,0,0,0,0,0,0,0,0,1,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,49,"        ROUND_HALF_ODD,",1,0,0,0,0,0,0,0,0,1,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,52,"        ROUND_CEIL,",1,0,0,0,0,0,0,0,0,1,11,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,55,        ROUND_FLOOR;,1,0,0,0,0,0,0,0,0,1,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,202,"        this(field, (long) x);",2,0,0,1,4,2,0,0,0,4,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,203,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,209,"    protected Dfp(final DfpField field, long x) {",3,0,0,0,3,3,0,1,2,5,45,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,212,        mant = new int[field.getRadixDigits()];,1,0,0,1,4,2,2,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,213,        nans = FINITE;,2,0,0,0,0,0,0,0,1,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,214,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,216,        boolean isLongMin = false;,1,0,0,0,0,1,0,0,1,3,26,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,217,        if (x == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,225,        if (x < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,226,            sign = -1;,1,0,0,0,0,0,0,0,2,2,10,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,227,            x = -x;,2,0,0,0,0,0,0,0,2,2,7,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,229,            sign = 1;,1,0,0,0,0,0,0,0,1,2,9,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,232,        exp = 0;,1,0,0,0,0,0,0,0,1,2,8,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,233,        while (x != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",6,2,0,0,2,0,5,0,0,4,76,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,235,            mant[mant.length - 1] = (int) (x % RADIX);,4,2,1,1,6,1,0,0,1,7,42,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,236,            x /= RADIX;,2,0,0,0,0,0,0,0,1,2,11,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,237,            exp++;,1,0,0,0,0,0,0,0,1,2,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,240,        if (isLongMin) {,1,0,0,1,3,1,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,250,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,318,    public Dfp(final Dfp d) {,2,0,0,1,3,2,0,1,2,6,25,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,319,        mant  = d.mant.clone();,3,0,0,1,2,0,1,0,1,5,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,320,        sign  = d.sign;,3,0,0,0,0,0,0,0,1,2,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,321,        exp   = d.exp;,3,0,0,0,0,0,0,0,1,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,322,        nans  = d.nans;,3,0,0,0,0,0,0,0,1,2,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,323,        field = d.field;,3,0,0,0,0,0,0,0,1,2,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,324,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,330,"    protected Dfp(final DfpField field, final String s) {",3,0,0,0,3,3,0,2,3,5,53,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,333,        mant = new int[field.getRadixDigits()];,1,0,0,1,4,2,2,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,334,        sign = 1;,1,0,0,0,0,0,0,0,1,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,335,        exp = 0;,1,0,0,0,0,0,0,0,1,2,8,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,336,        nans = FINITE;,2,0,0,0,0,0,0,0,1,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,337,        this.field = field;,2,0,0,0,0,1,0,0,1,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,339,        boolean decimalFound = false;,1,0,0,0,0,1,0,0,1,3,29,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,        final int rsize = 4;   // size of radix in decimal digits,1,0,0,0,0,2,0,0,1,3,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,        final int offset = 4;  // Starting offset into Striped,1,0,0,0,0,2,0,0,1,3,54,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,3,3,0,1,6,4,1,0,2,7,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,        if (s.equals(POS_INFINITY_STRING)) {,0,0,0,2,5,1,3,0,0,4,36,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,351,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,1,3,0,0,4,36,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,357,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,1,3,0,0,4,27,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");",1,0,0,1,2,1,2,0,1,6,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,        if (p == -1) { // try upper case?,1,1,0,1,3,3,0,0,1,6,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");",1,0,0,1,2,0,2,0,2,5,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,        int sciexp = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,        if (p != -1) {,1,1,0,1,3,1,0,0,1,6,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,            fpdecimal = s;,2,0,0,0,0,0,0,0,1,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,1,2,0,2,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,        p = 0;,1,0,0,0,0,0,0,0,1,2,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,405,        int decimalPos = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,2,7,1,6,0,2,6,63,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,408,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,411,            if (decimalFound && fpdecimal.charAt(p) == '0') {,1,2,0,2,5,1,3,0,1,7,49,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,                decimalPos--;,1,0,0,0,0,0,0,0,1,2,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,1,3,0,1,6,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,416,                decimalFound = true;,1,0,0,0,0,0,0,0,2,2,20,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,419,            p++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,421,            if (p == fpdecimal.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,427,        int q = offset;,2,0,0,0,0,1,0,0,0,2,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,428,        striped[0] = '0';,0,0,1,0,2,0,0,0,2,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,        striped[1] = '0';,0,0,1,0,2,0,0,0,2,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,        striped[2] = '0';,0,0,1,0,2,0,0,0,2,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,431,        striped[3] = '0';,0,0,1,0,2,0,0,0,2,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,        int significantDigits=0;,1,0,0,0,0,1,0,0,0,2,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,434,            if (p == (fpdecimal.length())) {,1,1,0,3,7,1,2,0,0,6,32,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,435,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,            if (q == mant.length*rsize+offset+1) {,5,4,0,1,3,1,0,0,0,5,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,440,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,443,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,1,3,0,1,6,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,444,                decimalFound = true;,1,0,0,0,0,0,0,0,2,2,20,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,445,                decimalPos = significantDigits;,2,0,0,0,0,0,0,0,1,2,31,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,                p++;,1,0,0,0,0,0,0,0,1,2,4,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,447,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,3,0,2,7,1,6,0,2,6,61,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,455,            striped[q] = fpdecimal.charAt(p);,0,0,1,1,4,0,3,0,1,5,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,456,            q++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,457,            p++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,            significantDigits++;,1,0,0,0,0,0,0,0,1,2,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,463,        if (decimalFound && q != offset) {,3,2,0,1,3,1,0,0,0,5,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,465,                q--;,1,0,0,0,0,0,0,0,1,2,4,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,                if (q == offset) {,2,1,0,1,3,1,0,0,0,5,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,469,                if (striped[q] == '0') {,0,1,1,1,5,1,0,0,1,6,24,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,470,                    significantDigits--;,1,0,0,0,0,0,0,0,1,2,20,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,478,        if (decimalFound && significantDigits == 0) {,2,2,0,1,3,1,0,0,0,5,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,        if (!decimalFound) {,1,0,0,1,3,1,0,0,1,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,        q = offset;  // set q to point to first sig digit,2,0,0,0,0,0,0,0,1,2,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,489,        p = significantDigits-1+offset;,3,2,0,0,0,0,0,0,1,3,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,        int trailingZeros = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,492,        while (p > q) {,2,1,0,1,3,1,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,            if (striped[p] != '0') {,0,1,1,1,5,1,0,0,1,6,24,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,501,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,6,4,0,2,4,1,0,0,0,5,62,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,        q -= i;,2,0,0,0,0,0,0,0,1,2,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,        decimalPos += i;,2,0,0,0,0,0,0,0,1,2,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,506,        while ((p - q) < (mant.length * rsize)) {,5,3,0,2,7,1,0,0,0,5,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,507,            for (i = 0; i < rsize; i++) {,4,1,0,1,3,1,0,0,2,6,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,                striped[++p] = '0';,1,0,1,0,2,0,0,0,3,4,19,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,        for (i = mant.length - 1; i >= 0; i--) {,5,2,0,1,3,1,0,0,2,6,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,515,            mant[i] = (striped[q]   - '0') * 1000 +,0,5,1,1,6,0,0,0,2,5,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,            q += 4;,1,0,0,0,0,0,0,0,1,2,7,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,        exp = (decimalPos+sciexp) / rsize;,4,2,0,1,2,0,0,0,1,5,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,        if (q < striped.length) {,3,1,0,1,3,1,0,0,0,5,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,527,            round((striped[q] - '0')*1000);,0,2,1,2,6,0,1,0,2,6,31,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,530,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,594,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,        return new Dfp(d);,1,0,0,1,2,2,0,1,1,6,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,632,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,639,        return field.getRadixDigits();,0,0,0,1,2,1,2,0,0,4,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,646,        return field.getZero();,0,0,0,1,2,1,2,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,        for (int i = mant.length - 1; i > 0; i--) {,5,2,0,1,3,2,0,0,1,6,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,667,            mant[i] = mant[i-1];,1,1,1,0,4,0,0,0,1,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,        mant[0] = 0;,0,0,1,0,2,0,0,0,1,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,        exp--;,1,0,0,0,0,0,0,0,1,2,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,671,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,        for (int i = 0; i < mant.length - 1; i++) {,5,2,0,1,3,2,0,0,1,6,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,            mant[i] = mant[i+1];,1,1,1,0,4,0,0,0,1,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,        mant[mant.length - 1] = 0;,2,1,1,0,2,0,0,0,1,5,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,682,        exp++;,1,0,0,0,0,0,0,0,1,2,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,683,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,        int lostdigit = 0;,1,0,0,0,0,1,0,0,0,2,18,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,        boolean inexact = false;,1,0,0,0,0,1,0,0,1,3,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,        int diff = exp - e;,3,1,0,0,0,1,0,0,0,3,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,        int adiff = diff;,2,0,0,0,0,1,0,0,0,2,17,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,        if (adiff < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,            adiff = -adiff;,2,0,0,0,0,0,0,0,2,2,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,        if (diff == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,        if (adiff > (mant.length + 1)) {,3,2,0,2,5,1,0,0,0,5,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,710,"            Arrays.fill(mant, 0);",0,0,0,0,2,0,3,0,0,2,21,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,711,            exp = e;,2,0,0,0,0,0,0,0,1,2,8,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,713,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,0,2,0,0,4,46,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",2,0,0,0,2,2,2,0,1,5,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,719,        for (int i = 0; i < adiff; i++) {,4,1,0,1,3,2,0,0,1,6,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,            if (diff < 0) {,1,1,0,1,3,1,0,0,0,5,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,                if (lostdigit != 0) {,1,1,0,1,3,1,0,0,0,5,21,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,                    inexact = true;,1,0,0,0,0,0,0,0,2,2,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,                lostdigit = mant[0];,1,0,1,0,2,0,0,0,1,4,20,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,731,                shiftRight();,0,0,0,1,2,0,1,0,1,4,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,737,        if (inexact) {,1,0,0,1,3,1,0,0,0,4,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,738,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,0,2,0,0,4,46,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",2,0,0,0,2,2,2,0,1,5,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,        return lostdigit;,1,0,0,0,0,1,0,0,0,2,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,762,        if (isNaN() || x.isNaN()) {,0,1,0,2,7,1,3,0,1,6,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;",0,1,0,0,2,2,2,0,1,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,778,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,787,        if (isNaN() || x.isNaN()) {,0,1,0,2,7,1,3,0,1,6,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,793,"        return compare(this, x) > 0;",0,1,0,0,2,2,2,0,1,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,807,        return (nans == QNAN) || (nans == SNAN);,4,3,0,1,4,1,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,817,        if (other instanceof Dfp) {,1,0,0,1,3,2,0,1,0,5,27,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,818,            final Dfp x = (Dfp) other;,2,0,0,1,2,1,0,2,1,6,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,819,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,2,2,0,2,11,1,6,0,1,7,81,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,823,"            return compare(this, x) == 0;",0,1,0,0,2,2,2,0,1,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,844,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,2,2,0,2,11,1,6,0,1,7,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,848,        return greaterThan(x) || lessThan(x);,0,1,0,1,4,1,4,0,2,6,37,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,859,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,10,7,0,0,5,1,0,0,0,4,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,861,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,864,        if (a.sign != b.sign) {,4,1,0,1,3,1,0,0,0,5,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,873,        if (a.nans == INFINITE && b.nans == FINITE) {,6,3,0,1,3,1,0,0,0,5,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,877,        if (a.nans == FINITE && b.nans == INFINITE) {,6,3,0,1,3,1,0,0,0,5,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,881,        if (a.nans == INFINITE && b.nans == INFINITE) {,6,3,0,1,3,1,0,0,0,5,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,886,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,10,5,0,1,7,1,0,0,0,5,67,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,887,            if (a.exp < b.exp) {,4,1,0,1,3,1,0,0,0,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,888,                return -a.sign;,2,0,0,0,0,1,0,0,1,3,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,891,            if (a.exp > b.exp) {,4,1,0,1,3,1,0,0,0,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,892,                return a.sign;,2,0,0,0,0,1,0,0,0,2,14,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,897,        for (int i = a.mant.length - 1; i >= 0; i--) {,6,2,0,1,3,2,0,0,1,6,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,898,            if (a.mant[i] > b.mant[i]) {,4,1,1,1,7,1,0,0,0,6,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,899,                return a.sign;,2,0,0,0,0,1,0,0,0,2,14,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,902,            if (a.mant[i] < b.mant[i]) {,4,1,1,1,7,1,0,0,0,6,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,903,                return -a.sign;,2,0,0,0,0,1,0,0,1,3,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,907,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1144,        extra = RADIX-extra;,3,1,0,0,0,0,0,0,1,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1145,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1146,            mant[i] = RADIX-mant[i]-1;,1,1,1,0,4,0,0,0,1,5,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1149,        int rh = extra / RADIX;,3,1,0,0,0,1,0,0,0,3,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1150,        extra = extra - rh * RADIX;,4,2,0,0,0,0,0,0,1,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1151,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1152,            final int r = mant[i] + rh;,2,1,1,0,2,2,0,0,1,6,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1153,            rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1154,            mant[i] = r - rh * RADIX;,3,2,1,0,2,0,0,0,1,5,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1157,        return extra;,1,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1167,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1175,        if (nans != FINITE || x.nans != FINITE) {,5,3,0,1,3,1,0,0,0,5,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1206,        Dfp a = newInstance(this);,1,0,0,1,2,1,1,1,1,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1207,        Dfp b = newInstance(x);,1,0,0,1,2,0,2,1,1,6,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1210,        Dfp result = newInstance(getZero());,1,0,0,2,4,0,2,1,2,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1213,        final byte asign = a.sign;,3,0,0,0,0,2,0,0,1,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1214,        final byte bsign = b.sign;,3,0,0,0,0,2,0,0,1,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1216,        a.sign = 1;,2,0,0,0,0,0,0,0,1,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1217,        b.sign = 1;,2,0,0,0,0,0,0,0,1,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1220,        byte rsign = bsign;,2,0,0,0,0,1,0,0,0,2,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1221,"        if (compare(a, b) > 0) {",0,1,0,0,5,1,3,0,1,5,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1222,            rsign = asign;,2,0,0,0,0,0,0,0,1,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1228,        if (b.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1229,            b.exp = a.exp;,4,0,0,0,0,0,0,0,1,2,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1232,        if (a.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1237,        int aextradigit = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1238,        int bextradigit = 0;,1,0,0,0,0,1,0,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1239,        if (a.exp < b.exp) {,4,1,0,1,3,1,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1240,            aextradigit = a.align(b.exp);,3,0,0,1,2,0,2,0,1,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1242,            bextradigit = b.align(a.exp);,3,0,0,1,2,0,2,0,1,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1246,        if (asign != bsign) {,2,1,0,1,3,1,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1247,            if (asign == rsign) {,2,1,0,1,3,1,0,0,0,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1248,                bextradigit = b.complement(bextradigit);,1,0,0,1,2,0,3,0,1,5,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1250,                aextradigit = a.complement(aextradigit);,1,0,0,1,2,0,3,0,1,5,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1255,        int rh = 0; /* acts as a carry */,1,0,0,0,0,1,0,0,0,2,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1256,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1257,            final int r = a.mant[i]+b.mant[i]+rh;,6,1,1,0,4,2,0,0,1,6,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1258,            rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1259,            result.mant[i] = r - rh * RADIX;,5,2,1,0,2,0,0,0,1,5,32,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1261,        result.exp = a.exp;,4,0,0,0,0,0,0,0,1,2,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1262,        result.sign = rsign;,3,0,0,0,0,0,0,0,1,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1267,        if (rh != 0 && (asign == bsign)) {,3,3,0,2,5,1,0,0,0,5,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1268,            final int lostdigit = result.mant[0];,3,0,0,0,2,2,0,0,1,4,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1269,            result.shiftRight();,0,0,0,1,2,0,2,0,0,3,20,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1270,            result.mant[mant.length-1] = rh;,5,1,0,0,2,0,0,0,1,4,32,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1271,            final int excp = result.round(lostdigit);,1,0,0,1,2,2,3,0,1,6,41,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1272,            if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1273,"                result = dotrap(excp, ADD_TRAP, x, result);",1,0,0,0,2,0,5,0,2,4,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1278,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1279,            if (result.mant[mant.length-1] != 0) {,4,2,0,1,5,1,0,0,0,5,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1280,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1282,            result.shiftLeft();,0,0,0,1,2,0,2,0,0,3,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1283,            if (i == 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1284,                result.mant[0] = aextradigit+bextradigit;,4,1,0,0,2,0,0,0,1,4,41,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1285,                aextradigit = 0;,1,0,0,0,0,0,0,0,1,2,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1286,                bextradigit = 0;,1,0,0,0,0,0,0,0,1,2,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1291,        if (result.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1292,            result.exp = 0;,2,0,0,0,0,0,0,0,1,2,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1294,            if (asign != bsign) {,2,1,0,1,3,1,0,0,0,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1296,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,2,0,0,0,0,0,0,0,1,2,50,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1301,        final int excp = result.round(aextradigit + bextradigit);,3,1,0,1,2,2,2,0,1,7,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1302,        if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1303,"            result = dotrap(excp, ADD_TRAP, x, result);",1,0,0,0,2,0,5,0,2,4,43,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1306,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1313,        Dfp result = newInstance(this);,1,0,0,1,2,1,1,1,1,7,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1314,        result.sign = (byte) - result.sign;,4,0,0,1,2,1,0,0,2,5,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1315,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1323,        return add(x.negate());,0,0,0,2,4,1,3,0,1,5,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1331,        boolean inc = false;,1,0,0,0,0,1,0,0,1,3,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1332,        switch (field.getRoundingMode()) {,0,0,0,2,5,1,2,0,0,4,34,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1350,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,3,6,1,2,6,0,0,0,1,6,72,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1351,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1367,        if (inc) {,1,0,0,1,3,1,0,0,0,4,10,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1369,            int rh = 1;,1,0,0,0,0,1,0,0,0,2,11,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1370,            for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1371,                final int r = mant[i] + rh;,2,1,1,0,2,2,0,0,1,6,27,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1372,                rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1373,                mant[i] = r - rh * RADIX;,3,2,1,0,2,0,0,0,1,5,25,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1376,            if (rh != 0) {,1,1,0,1,3,1,0,0,0,5,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1383,        if (exp < MIN_EXP) {,2,1,0,1,3,1,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1389,        if (exp > MAX_EXP) {,2,1,0,1,3,1,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1395,        if (n != 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1397,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,0,2,0,0,4,46,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1398,            return DfpField.FLAG_INEXACT;,2,0,0,0,0,1,0,0,0,2,29,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1401,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1412,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1419,        Dfp result = newInstance(getZero());,1,0,0,2,4,0,2,1,2,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1422,        if (nans != FINITE || x.nans != FINITE) {,5,3,0,1,3,1,0,0,0,5,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1459,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,3,1,0,0,4,3,0,0,0,4,86,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1461,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1462,            int rh = 0;  // acts as a carry,1,0,0,0,0,1,0,0,0,2,31,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1463,            for (int j=0; j<mant.length; j++) {,5,1,0,1,3,2,0,0,1,6,35,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1464,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,3,1,1,0,4,1,0,0,0,5,56,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1465,                r = r + product[i+j] + rh;  // add to the product digit with carry in,5,2,1,0,2,0,0,0,1,5,69,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1467,                rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1468,                product[i+j] = r - rh * RADIX;,5,3,1,0,2,0,0,0,1,5,30,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1470,            product[i+mant.length] = rh;,4,1,1,0,2,0,0,0,1,5,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1474,"        int md = mant.length * 2 - 1;  // default, in case result is zero",3,2,0,0,0,3,0,0,0,3,65,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1475,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,5,3,0,1,3,2,0,0,1,6,48,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1476,            if (product[i] != 0) {,0,1,1,1,5,1,0,0,0,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1477,                md = i;,2,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1478,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1483,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1484,            result.mant[mant.length - i - 1] = product[md - i];,7,2,1,0,4,0,0,0,1,5,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1488,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,8,4,0,0,0,0,0,0,1,3,52,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1489,        result.sign = (byte)((sign == x.sign)?1:-1);,5,1,0,2,6,1,0,0,2,6,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1491,        if (result.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1493,            result.exp = 0;,2,0,0,0,0,0,0,0,1,2,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1497,        if (md > (mant.length-1)) {,3,2,0,2,5,1,0,0,0,5,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1498,            excp = result.round(product[md-mant.length]);,4,1,1,1,4,0,2,0,1,7,45,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1503,        if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1504,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",1,0,0,0,2,0,5,0,2,4,48,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1507,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1584,        int trial=0;    // trial quotient digit,1,0,0,0,0,1,0,0,0,2,39,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1587,        int md=0;       // most sig digit in result,1,0,0,0,0,1,0,0,0,2,43,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1591,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,2,1,0,2,7,1,3,0,0,6,63,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1598,        Dfp result = newInstance(getZero());,1,0,0,2,4,0,2,1,2,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1601,        if (nans != FINITE || divisor.nans != FINITE) {,5,3,0,1,3,1,0,0,0,5,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1632,        if (divisor.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1641,        dividend = new int[mant.length+1];  // one extra digit needed,3,1,0,0,2,2,0,0,1,5,61,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1642,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",3,1,0,0,2,4,0,0,1,5,93,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1643,        remainder = new int[mant.length+1]; // one extra digit needed,3,1,0,0,2,2,0,0,1,5,61,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1647,        dividend[mant.length] = 0;,2,0,1,0,2,0,0,0,1,4,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1648,        quotient[mant.length] = 0;,2,0,1,0,2,0,0,0,1,4,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1649,        quotient[mant.length+1] = 0;,2,1,1,0,2,0,0,0,1,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1650,        remainder[mant.length] = 0;,2,0,1,0,2,0,0,0,1,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1655,        for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1656,            dividend[i] = mant[i];,0,0,1,0,4,0,0,0,1,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1657,            quotient[i] = 0;,0,0,1,0,2,0,0,0,1,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1658,            remainder[i] = 0;,0,0,1,0,2,0,0,0,1,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1662,        nsqd = 0;,1,0,0,0,0,0,0,0,1,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1663,        for (qd = mant.length+1; qd >= 0; qd--) {,5,2,0,1,3,1,0,0,2,6,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1667,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,6,3,1,0,4,2,0,0,1,6,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1668,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,6,3,0,1,4,1,0,0,0,5,57,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1669,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,6,3,0,1,4,1,0,0,0,5,53,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1671,            trialgood = false;,1,0,0,0,0,0,0,0,2,2,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1672,            while (!trialgood) {,1,0,0,1,3,1,0,0,1,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1674,                trial = (min+max)/2;,3,2,0,1,2,0,0,0,1,5,20,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1677,                int rh = 0;,1,0,0,0,0,1,0,0,0,2,11,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1678,                for (int i = 0; i < mant.length + 1; i++) {,5,2,0,1,3,2,0,0,1,6,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1679,                    int dm = (i<mant.length)?divisor.mant[i]:0;,6,1,1,1,4,1,0,0,0,6,43,11,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1680,                    final int r = (dm * trial) + rh;,4,2,0,1,2,2,0,0,1,6,32,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1681,                    rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1682,                    remainder[i] = r - rh * RADIX;,3,2,1,0,2,0,0,0,1,5,30,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1686,                rh = 1;  // carry in to aid the subtraction,1,0,0,0,0,0,0,0,1,2,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1687,                for (int i = 0; i < mant.length + 1; i++) {,5,2,0,1,3,2,0,0,1,6,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1688,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,3,3,1,2,8,2,0,0,1,7,60,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1689,                    rh = r / RADIX;,3,1,0,0,0,0,0,0,1,3,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1690,                    remainder[i] = r - rh * RADIX;,3,2,1,0,2,0,0,0,1,5,30,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1694,                if (rh == 0) {,1,1,0,1,3,1,0,0,0,5,14,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1696,                    max = trial-1;,2,1,0,0,0,0,0,0,1,3,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1697,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1701,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,6,3,1,1,6,0,0,0,1,6,67,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1702,                minadj = minadj / (divisor.mant[mant.length-1]+1);,6,3,0,1,4,0,0,0,1,5,50,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1704,                if (minadj >= 2) {,1,1,0,1,3,1,0,0,0,5,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1705,                    min = trial+minadj;  // update the minimum,3,1,0,0,0,0,0,0,1,3,42,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1706,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1711,                trialgood = false;  // assume false,1,0,0,0,0,0,0,0,2,2,35,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1712,                for (int i = mant.length - 1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,44,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1713,                    if (divisor.mant[i] > remainder[i]) {,2,1,1,1,7,1,0,0,0,6,37,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1714,                        trialgood = true;,1,0,0,0,0,0,0,0,2,2,17,12,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1716,                    if (divisor.mant[i] < remainder[i]) {,2,1,1,1,7,1,0,0,0,6,37,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1717,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1721,                if (remainder[mant.length] != 0) {,2,1,1,1,5,1,0,0,0,6,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1722,                    trialgood = false;,1,0,0,0,0,0,0,0,2,2,18,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1725,                if (trialgood == false) {,1,1,0,1,3,1,0,0,1,6,25,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1726,                    min = trial+1;,2,1,0,0,0,0,0,0,1,3,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1728,            },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1731,            quotient[qd] = trial;,1,0,1,0,2,0,0,0,1,4,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1732,            if (trial != 0 || nsqd != 0) {,2,3,0,1,3,1,0,0,0,5,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1733,                nsqd++;,1,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1736,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,6,3,0,2,5,1,2,0,0,6,89,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1741,            if (nsqd > mant.length) {,3,1,0,1,3,1,0,0,0,5,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1743,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1747,            dividend[0] = 0;,0,0,1,0,2,0,0,0,1,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1748,            for (int i = 0; i < mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1749,                dividend[i + 1] = remainder[i];,1,1,1,0,4,0,0,0,1,5,31,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1754,        md = mant.length;  // default,3,0,0,0,0,0,0,0,1,2,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1755,        for (int i = mant.length + 1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1756,            if (quotient[i] != 0) {,0,1,1,1,5,1,0,0,0,5,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1757,                md = i;,2,0,0,0,0,0,0,0,1,2,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1758,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1763,        for (int i=0; i<mant.length; i++) {,5,1,0,1,3,2,0,0,1,6,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1764,            result.mant[mant.length-i-1] = quotient[md-i];,7,2,1,0,4,0,0,0,1,5,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1768,        result.exp = exp - divisor.exp + md - mant.length;,8,3,0,0,0,0,0,0,1,3,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1769,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,5,1,0,2,6,1,0,0,2,6,55,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1771,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",4,2,0,1,5,2,0,0,0,5,76,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1772,            result.exp = 0;,2,0,0,0,0,0,0,0,1,2,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1775,        if (md > (mant.length-1)) {,3,2,0,2,5,1,0,0,0,5,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1776,            excp = result.round(quotient[md-mant.length]);,4,1,1,1,4,0,2,0,1,7,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1781,        if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1782,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",1,0,0,0,2,0,5,0,2,4,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1785,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1796,        if (nans != FINITE) {,2,1,0,1,3,1,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1807,        if (divisor == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1817,        if (divisor < 0 || divisor >= RADIX) {,3,3,0,1,3,1,0,0,0,5,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1825,        Dfp result = newInstance(this);,1,0,0,1,2,1,1,1,1,7,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1827,        int rl = 0;,1,0,0,0,0,1,0,0,0,2,11,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1828,        for (int i = mant.length-1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1829,            final int r = rl*RADIX + result.mant[i];,5,2,1,0,2,2,0,0,1,6,40,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1830,            final int rh = r / divisor;,3,1,0,0,0,2,0,0,1,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1831,            rl = r - rh * divisor;,4,2,0,0,0,0,0,0,1,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1832,            result.mant[i] = rh;,3,0,1,0,2,0,0,0,1,4,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1835,        if (result.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1837,            result.shiftLeft();,0,0,0,1,2,0,2,0,0,3,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1838,            final int r = rl * RADIX;        // compute the next digit and put it in,3,1,0,0,0,2,0,0,1,4,72,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1839,            final int rh = r / divisor;,3,1,0,0,0,2,0,0,1,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1840,            rl = r - rh * divisor;,4,2,0,0,0,0,0,0,1,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1841,            result.mant[0] = rh;,3,0,0,0,2,0,0,0,1,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1844,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,4,2,0,1,2,3,2,0,1,7,72,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1845,        if (excp != 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1846,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",1,0,0,0,2,0,5,0,2,4,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1849,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1859,        if (nans == FINITE && mant[mant.length-1] == 0) {,4,4,1,1,5,1,0,0,0,6,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1864,        if (nans != FINITE) {,2,1,0,1,3,1,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1884,        if (sign == -1) {,1,1,0,1,3,1,0,0,1,6,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1895,        Dfp x = newInstance(this);,1,0,0,1,2,1,1,1,1,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1898,        if (x.exp < -1 || x.exp > 1) {,4,3,0,1,3,1,0,0,1,6,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1903,        switch (x.mant[mant.length-1] / 2000) {,4,2,0,1,5,1,0,0,0,5,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1905,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,8,4,0,0,4,0,0,0,1,4,50,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1906,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1914,                x.mant[mant.length-1] = 3000;,4,1,0,0,2,0,0,0,1,4,29,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1917,        Dfp dx = newInstance(x);,1,0,0,1,2,0,2,1,1,6,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1922,        Dfp px  = getZero();,1,0,0,1,2,0,1,1,1,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1923,        Dfp ppx = getZero();,1,0,0,1,2,0,1,1,1,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1924,        while (x.unequal(px)) {,0,0,0,2,5,1,3,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1925,            dx = newInstance(x);,1,0,0,1,2,0,2,0,2,5,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1926,            dx.sign = -1;,2,0,0,0,0,0,0,0,2,2,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1927,            dx = dx.add(this.divide(x));,1,0,0,2,4,1,4,0,1,6,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1928,            dx = dx.divide(2);,1,0,0,1,2,0,2,0,1,5,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1929,            ppx = px;,2,0,0,0,0,0,0,0,1,2,9,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1930,            px = x;,2,0,0,0,0,0,0,0,1,2,7,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1931,            x = x.add(dx);,1,0,0,1,2,0,3,0,1,5,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1933,            if (x.equals(ppx)) {,0,0,0,2,5,1,3,0,0,4,20,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1940,            if (dx.mant[mant.length-1] == 0) {,4,2,0,1,5,1,0,0,0,5,34,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1941,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1945,        return x;,1,0,0,0,0,1,0,0,0,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1954,        if (nans != FINITE) {,2,1,0,1,3,1,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1963,        if (exp > mant.length || exp < -1) {,4,3,0,1,3,1,0,0,1,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1967,        return dfp2string();,0,0,0,1,2,1,1,0,1,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2056,        char buffer[] = new char[mant.length*4 + 20];,3,2,0,0,4,3,0,0,0,4,45,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2057,        int p = 1;,1,0,0,0,0,1,0,0,0,2,10,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2059,        int e = exp;,2,0,0,0,0,1,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2060,        boolean pointInserted = false;,1,0,0,0,0,1,0,0,1,3,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2062,        buffer[0] = ' ';,0,0,1,0,2,0,0,0,2,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2064,        if (e <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2065,            buffer[p++] = '0';,1,0,1,0,2,0,0,0,3,4,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2066,            buffer[p++] = '.';,1,0,1,0,2,0,0,0,3,4,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2067,            pointInserted = true;,1,0,0,0,0,0,0,0,2,2,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2070,        while (e < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2078,        for (int i = mant.length - 1; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2079,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,1,2,1,2,10,1,0,0,3,7,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2080,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,1,3,1,3,12,1,0,0,3,7,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2081,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,1,3,1,3,12,1,0,0,3,7,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2082,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,1,2,1,3,12,1,0,0,3,7,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2083,            if (--e == 0) {,1,1,0,1,3,1,0,0,1,6,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2084,                buffer[p++] = '.';,1,0,1,0,2,0,0,0,3,4,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2085,                pointInserted = true;,1,0,0,0,0,0,0,0,2,2,21,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2089,        while (e > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2097,        if (!pointInserted) {,1,0,0,1,3,1,0,0,1,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2103,        q = 1;,1,0,0,0,0,0,0,0,1,2,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2104,        while (buffer[q] == '0') {,0,1,1,1,5,1,0,0,1,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2105,            q++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2107,        if (buffer[q] == '.') {,0,1,1,1,5,1,0,0,1,6,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2108,            q--;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2112,        while (buffer[p-1] == '0') {,1,2,1,1,5,1,0,0,1,7,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2113,            p--;,1,0,0,0,0,0,0,0,1,2,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2117,        if (sign < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2121,"        return new String(buffer, q, p - q);",4,1,0,0,2,2,0,1,1,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2133,        Dfp def = result;,2,0,0,0,0,0,0,1,0,2,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2135,        switch (type) {,1,0,0,1,3,1,0,0,0,4,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2184,            default: def = result; break;,2,0,0,0,0,2,0,0,2,3,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2187,"        return trap(type, what, oper, def, result);",0,0,0,0,2,1,6,0,1,4,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2203,        return def;,1,0,0,0,0,1,0,0,0,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,            switch (rmode) {,1,0,0,1,3,1,0,0,0,4,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,131,    public MersenneTwister(long seed) {,2,0,0,1,3,2,0,0,1,5,35,2,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,132,        mt = new int[N];,1,0,1,0,2,2,0,0,1,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,133,        setSeed(seed);,0,0,0,1,2,0,2,0,1,4,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,35,    public BitsStreamGenerator() {,1,0,0,1,3,1,0,0,1,5,30,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,36,        nextGaussian = Double.NaN;,3,0,0,0,0,0,0,0,1,2,26,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,37,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",1,0,0,0,4,4,0,0,3,4,55,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,144,        long longMT = seed;,2,0,0,0,0,1,0,0,0,2,19,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,145,        mt[0]= (int) longMT;,1,0,1,1,4,1,0,0,1,6,20,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,146,        for (mti = 1; mti < N; ++mti) {,4,1,0,1,3,1,0,0,2,6,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,149,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,4,5,0,3,6,0,0,0,1,5,71,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,150,            mt[mti]= (int) longMT;,1,0,1,1,4,1,0,0,1,6,22,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,152,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,163,        if (seed == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,168,        setSeed(19650218);,0,0,0,1,2,0,1,0,1,4,18,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,169,        int i = 1;,1,0,0,0,0,1,0,0,0,2,10,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,170,        int j = 0;,1,0,0,0,0,1,0,0,0,2,10,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,172,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",5,1,0,0,5,2,3,0,1,6,57,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,173,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,1,3,1,2,10,1,0,0,0,6,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,174,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,3,5,1,2,10,1,0,0,0,6,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,175,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,5,5,1,4,10,1,0,0,0,6,76,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,176,            mt[i]   = (int) (l & 0xffffffffl);,1,1,1,1,6,1,0,0,1,7,34,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,177,            i++; j++;,2,0,0,0,0,0,0,0,2,2,9,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,178,            if (i >= N) {,2,1,0,1,3,1,0,0,0,5,13,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,179,                mt[0] = mt[N - 1];,1,1,1,0,4,0,0,0,1,5,18,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,180,                i = 1;,1,0,0,0,0,0,0,0,1,2,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,182,            if (j >= seed.length) {,3,1,0,1,3,1,0,0,0,5,23,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,183,                j = 0;,1,0,0,0,0,0,0,0,1,2,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,187,        for (int k = N - 1; k != 0; k--) {,4,2,0,1,3,2,0,0,1,6,34,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,188,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,1,3,1,2,10,1,0,0,0,6,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,189,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,3,5,1,2,10,1,0,0,0,6,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,190,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,5,5,0,4,8,1,0,0,0,5,69,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,191,            mt[i]   = (int) (l & 0xffffffffL);,1,1,1,1,6,1,0,0,1,7,34,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,192,            i++;,1,0,0,0,0,0,0,0,1,2,4,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,193,            if (i >= N) {,2,1,0,1,3,1,0,0,0,5,13,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,194,                mt[0] = mt[N - 1];,1,1,1,0,4,0,0,0,1,5,18,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,195,                i = 1;,1,0,0,0,0,0,0,0,1,2,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,199,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,0,2,0,0,0,1,3,64,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,201,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,210,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",2,2,0,1,14,4,1,0,1,7,71,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,211,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3464,        return (a <= b) ? b : a;,4,1,0,1,2,1,0,0,0,5,24,5,0.00602,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,                double scaleFactor = 1d;,1,0,0,0,0,1,0,0,0,2,24,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,1,0,0,0,0,1,0,0,0,2,28,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,1,0,0,0,0,2,0,0,1,3,23,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",1,0,0,0,2,2,4,0,1,5,39,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,                if (scale <= 0) {  // Can't scale,1,1,0,1,3,1,0,0,0,5,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,                infinite = true;,1,0,0,0,0,0,0,0,2,2,16,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,4,1,0,1,3,2,0,0,1,6,36,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,2,0,0,0,0,0,0,0,1,2,30,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,                    scaleFactor *= scale;,2,0,0,0,0,0,0,0,1,2,21,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,3,3,0,1,3,1,0,0,0,5,24,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);,1,1,0,1,4,0,6,0,1,6,58,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,1,0,0,1,3,1,0,0,1,5,16,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,644,                if (hiPrec != null) {,1,1,0,1,3,1,0,0,0,5,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,648,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,2,0.25,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,169,            ret = 0.0;,1,0,0,0,0,0,0,0,1,2,10,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,8,2,0,2,6,1,2,0,0,6,61,5,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,173,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",1,1,0,0,2,0,5,0,2,5,60,8,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,53,            ret = -ret;,2,0,0,0,0,0,0,0,2,2,11,6,0.16667,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,2,0,1,2,6,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,        this.sourceFormat = sourceFormat;,2,0,0,0,0,1,0,0,1,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,    },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",1,0,0,1,10,0,0,0,1,4,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",1,0,0,2,8,0,0,0,1,4,94,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",1,0,0,1,2,0,0,0,1,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",1,0,0,1,2,0,0,0,1,4,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",1,0,0,1,2,0,0,0,1,4,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",1,0,0,1,2,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",1,0,0,0,6,0,0,0,1,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",1,0,0,0,8,1,0,0,1,4,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",1,0,0,0,6,1,0,0,1,4,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",1,0,0,1,2,0,0,0,1,4,123,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",1,0,0,0,2,0,0,0,1,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",1,0,0,0,4,0,0,0,1,3,108,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",1,0,0,1,2,0,0,0,1,4,100,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",1,0,0,1,4,1,0,0,1,5,94,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",1,0,0,1,4,0,0,0,1,4,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",1,0,0,2,6,0,0,0,1,4,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",1,0,0,1,4,0,0,0,1,4,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",1,0,0,1,4,0,0,0,1,4,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",1,0,0,1,4,0,0,0,1,4,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",1,0,0,1,2,0,0,0,1,4,84,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",1,0,0,1,2,0,0,0,1,4,131,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",1,0,0,1,2,0,0,0,1,4,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",1,0,0,1,4,0,0,0,1,4,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",1,0,0,1,4,0,0,0,1,4,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",1,0,0,1,2,0,0,0,1,4,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",1,0,0,1,4,0,0,0,1,4,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",1,0,0,1,2,0,0,0,1,4,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",1,0,0,2,6,1,0,0,1,5,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",1,0,0,1,4,0,0,0,1,4,115,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",1,0,0,1,4,1,0,0,1,5,112,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",1,0,0,1,4,1,0,0,1,5,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",1,0,0,2,10,1,0,0,1,5,290,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",1,0,0,2,6,0,0,0,1,4,263,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",1,0,0,1,6,1,0,0,1,5,109,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",1,0,0,1,6,1,0,0,1,5,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",1,0,0,1,2,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,82,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",1,0,0,1,10,0,0,0,1,4,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,83,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",1,0,0,1,6,0,0,0,1,4,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,84,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",1,0,0,1,2,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,85,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",1,0,0,1,4,1,0,0,1,5,119,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,86,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",1,0,0,1,2,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,87,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",1,0,0,1,8,0,0,0,1,4,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,88,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",1,0,0,1,2,0,0,0,1,4,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,89,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",1,0,0,1,2,0,0,0,1,4,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,90,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",1,0,0,1,2,0,0,0,1,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,91,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",1,0,0,1,2,1,0,0,1,5,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,92,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",1,0,0,0,8,1,0,0,1,4,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,93,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",1,0,0,1,6,0,0,0,1,4,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,94,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",1,0,0,1,2,0,0,0,1,4,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,95,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",1,0,0,1,4,1,0,0,1,5,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,96,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,97,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",1,0,0,0,4,1,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,98,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",1,0,0,1,24,2,0,0,1,5,175,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,99,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",1,0,0,1,6,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,100,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,101,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",1,0,0,1,4,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,102,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",1,0,0,1,4,0,0,0,1,4,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,103,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",1,0,0,2,10,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,104,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",1,0,0,1,2,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,105,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",1,0,0,1,2,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,106,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,107,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,108,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",1,0,0,1,4,0,0,0,1,4,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,109,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",1,0,0,1,12,0,0,0,1,4,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,110,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",1,0,0,1,6,0,0,0,1,4,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,111,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,112,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,113,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",1,0,0,0,6,0,0,0,1,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,114,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",1,0,0,1,2,0,0,0,1,4,59,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,115,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",1,0,0,2,6,0,0,0,1,4,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,116,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",1,0,0,1,6,1,0,0,1,5,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,117,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",1,0,0,1,6,1,0,0,1,5,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,118,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",1,0,0,0,8,0,0,0,1,3,121,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,119,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",1,0,0,1,4,1,0,0,1,5,103,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,120,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",1,0,0,0,4,1,0,0,1,4,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,121,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",1,0,0,0,6,0,0,0,1,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,122,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",1,0,0,0,6,0,0,0,1,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,123,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",1,0,0,1,6,0,0,0,1,4,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,124,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",1,0,0,1,4,0,0,0,1,4,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,125,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",1,0,0,0,4,0,0,0,1,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,126,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",1,0,0,0,8,0,0,0,1,3,112,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,127,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",1,0,0,0,8,0,0,0,1,3,124,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,128,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",1,0,0,0,6,0,0,0,1,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,129,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",1,0,0,1,4,1,0,0,1,5,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,130,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",1,0,0,1,8,0,0,0,1,4,141,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,131,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",1,0,0,1,52,0,0,0,1,4,165,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,132,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",1,0,0,1,2,0,0,0,1,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,133,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",1,0,0,0,8,0,0,0,1,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,134,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",1,0,0,0,8,0,0,0,1,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,135,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",1,0,0,1,2,0,0,0,1,4,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,136,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",1,0,0,1,2,0,0,0,1,4,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,137,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,111,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,138,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",1,0,0,2,10,0,0,0,1,4,111,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,139,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",1,0,0,1,2,1,0,0,1,5,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,140,"    EVALUATIONS(""evaluations""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,141,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",1,0,0,2,6,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,142,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,143,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",1,0,0,2,6,0,0,0,1,4,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,144,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",1,0,0,0,8,0,0,0,1,3,132,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,145,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",1,0,0,0,6,0,0,0,1,3,156,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,146,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",1,0,0,1,4,0,0,0,1,4,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,147,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",1,0,0,1,2,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,148,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",1,0,0,0,4,0,0,0,1,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,149,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",1,0,0,1,4,0,0,0,1,4,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,150,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",1,0,0,0,10,0,0,0,1,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,151,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",1,0,0,1,6,0,0,0,1,4,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,152,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,153,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",1,0,0,2,6,0,0,0,1,4,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,154,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",1,0,0,0,4,0,0,0,1,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,155,"    START_POSITION(""start position ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,156,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",1,0,0,1,4,1,0,0,1,5,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,157,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",1,0,0,0,4,0,0,0,1,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,158,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",1,0,0,1,4,0,0,0,1,4,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,159,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,160,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,161,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",1,0,0,0,6,0,0,0,1,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,162,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",1,0,0,1,6,0,0,0,1,4,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,163,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",1,0,0,1,2,0,0,0,1,4,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,164,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",1,0,0,1,2,0,0,0,1,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,165,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",1,0,0,1,10,0,0,0,1,4,93,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,166,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,167,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,168,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",1,0,0,2,10,2,0,0,1,5,113,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,169,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",1,0,0,0,6,0,0,0,1,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,170,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",1,0,0,2,12,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,171,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,172,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",1,0,0,1,10,0,0,0,1,4,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,173,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,174,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,175,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,176,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",1,0,0,1,2,0,0,0,1,4,61,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,177,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,178,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",1,0,0,1,6,0,0,0,1,4,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,179,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,180,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,181,"    LENGTH(""length ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,34,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,182,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,183,"    MEAN(""mean ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,184,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",1,0,0,1,4,0,0,0,1,4,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,185,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,186,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",1,0,0,2,6,0,0,0,1,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,187,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",1,0,0,1,5,0,0,0,1,4,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,188,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,189,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,190,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",1,0,0,2,6,0,0,0,1,4,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,191,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,192,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,193,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,194,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,195,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,196,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,197,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",1,0,0,2,6,0,0,0,1,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,198,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",1,0,0,1,4,0,0,0,1,4,44,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,199,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",1,0,0,0,4,1,0,0,1,4,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,200,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",1,0,0,1,4,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,201,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,202,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,203,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",1,0,0,1,2,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,204,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",1,0,0,2,12,0,0,0,1,4,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,205,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",1,0,0,2,12,0,0,0,1,4,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,206,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",1,0,0,1,10,0,0,0,1,4,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,207,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",1,0,0,1,2,0,0,0,1,4,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,208,"    NO_BIN_SELECTED(""no bin selected""),",1,0,0,1,2,0,0,0,1,4,35,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,209,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",1,0,0,1,4,0,0,0,1,4,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,210,"    NO_DATA(""no data""), /* keep */",1,0,0,1,2,0,0,0,1,4,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,211,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",1,0,0,0,8,0,0,0,1,3,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,212,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",1,0,0,1,2,0,0,0,1,4,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,213,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",1,0,0,1,2,0,0,0,1,4,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,214,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",1,0,0,1,2,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,215,"    NO_RESULT_AVAILABLE(""no result available""),",1,0,0,1,2,0,0,0,1,4,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,216,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",1,0,0,0,12,0,0,0,1,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,217,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",1,0,0,1,2,0,0,0,1,4,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,218,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",1,0,0,1,2,0,0,0,1,4,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,219,"    DENOMINATOR(""denominator""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,220,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,221,"    FRACTION(""fraction""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,222,"    FUNCTION(""function""), /* keep */",1,0,0,1,2,0,0,0,1,4,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,223,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,224,"    INPUT_ARRAY(""input array""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,225,"    NUMERATOR(""numerator""), /* keep */",1,0,0,1,2,0,0,0,1,4,34,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,226,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",1,0,0,1,2,0,0,0,1,4,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,227,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",1,0,0,1,2,0,0,0,1,4,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,228,"    REAL_FORMAT(""real format""), /* keep */",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,229,"    WHOLE_FORMAT(""whole format""), /* keep */",1,0,0,1,2,0,0,0,1,4,40,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,230,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,231,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",1,0,0,2,8,0,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,232,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,233,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",1,0,0,1,8,0,0,0,1,4,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,234,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,127,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,235,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",1,0,0,0,4,0,0,0,1,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,236,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",1,0,0,0,8,0,0,0,1,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,237,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",1,0,0,1,4,0,0,0,1,4,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,238,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",1,0,0,1,4,1,0,0,1,5,84,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,239,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",1,0,0,0,6,0,0,0,1,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,240,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",1,0,0,0,8,0,0,0,1,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,241,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",1,0,0,0,10,0,0,0,1,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,242,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",1,0,0,2,12,0,0,0,1,4,96,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,243,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",1,0,0,0,10,0,0,0,1,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,244,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",1,0,0,0,6,0,0,0,1,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,245,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",1,0,0,1,6,0,0,0,1,4,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,246,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",1,0,0,1,6,0,0,0,1,4,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,247,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",1,0,0,1,6,0,0,0,1,4,108,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,248,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",1,0,0,1,6,0,0,0,1,4,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,249,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,250,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",1,0,0,2,8,0,0,0,1,4,130,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,251,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",1,0,0,1,2,0,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,252,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",1,0,0,1,8,0,0,0,1,4,109,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,253,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",1,0,0,2,8,0,0,0,1,4,90,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,254,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",1,0,0,1,2,0,0,0,1,4,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,255,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",1,0,0,0,4,0,0,0,1,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,256,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",1,0,0,1,2,0,0,0,1,4,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,257,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",1,0,0,1,6,0,0,0,1,4,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,258,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",1,0,0,0,10,0,0,0,1,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,259,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",1,0,0,0,14,1,0,0,1,4,126,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,260,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",1,0,0,2,10,0,0,0,1,4,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,261,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",1,0,0,2,10,0,0,0,1,4,113,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,262,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",1,0,0,1,2,0,0,0,1,4,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,263,"    SIMPLE_MESSAGE(""{0}""),",1,0,0,1,4,0,0,0,1,4,22,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,264,"    SINGULAR_MATRIX(""matrix is singular""),",1,0,0,1,2,0,0,0,1,4,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,265,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",1,0,0,1,2,0,0,0,1,4,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,266,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",1,0,0,0,6,0,0,0,1,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,267,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",1,0,0,1,6,0,0,0,1,4,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,268,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",1,0,0,0,8,0,0,0,1,3,174,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,269,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",1,0,0,1,6,0,0,0,1,4,136,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,270,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",1,0,0,1,4,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,271,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",1,0,0,1,6,0,0,0,1,4,120,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,272,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",1,0,0,1,6,0,0,0,1,4,156,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,273,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",1,0,0,0,4,0,0,0,1,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,274,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",1,0,0,0,4,0,0,0,1,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,275,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",1,0,0,1,2,0,0,0,1,4,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,276,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",1,0,0,1,2,0,0,0,1,4,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,277,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",1,0,0,1,2,0,0,0,1,4,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,278,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",1,0,0,1,4,0,0,0,1,4,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,279,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",1,0,0,1,6,0,0,0,1,4,117,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,280,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",1,0,0,1,2,0,0,0,1,4,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,281,"    UNBOUNDED_SOLUTION(""unbounded solution""),",1,0,0,1,2,0,0,0,1,4,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,282,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",1,0,0,1,40,0,0,0,1,4,118,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,283,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,284,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,285,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,286,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",1,0,0,1,4,0,0,0,1,4,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,287,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",1,0,0,1,16,0,0,0,1,4,106,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,288,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",1,0,0,1,2,0,0,0,1,4,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,289,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",1,0,0,1,4,0,0,0,1,4,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,290,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",1,0,0,1,4,0,0,0,1,4,103,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,291,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",1,0,0,1,6,0,0,0,1,4,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,292,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",1,0,0,1,2,0,0,0,1,4,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,293,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",1,0,0,1,2,0,0,0,1,4,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,294,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",1,0,0,0,8,0,0,0,1,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,295,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",1,0,0,0,6,0,0,0,1,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,296,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",1,0,0,2,6,0,0,0,1,4,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,297,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",1,0,0,1,2,0,0,0,1,4,57,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,298,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,299,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",1,0,0,1,6,0,0,0,1,4,82,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,300,"    ZERO_NORM(""zero norm""),",1,0,0,1,2,0,0,0,1,4,23,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,301,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",1,0,0,1,2,1,0,0,1,5,59,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,302,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",1,0,0,1,2,1,0,0,1,5,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,303,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",1,0,0,1,2,0,0,0,1,4,42,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,39,public enum LocalizedFormats implements Localizable {,1,0,0,0,1,3,0,1,1,5,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,2,0,1,1,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,1,0,0,0,4,6,0,0,3,4,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,1,0,0,0,4,6,0,0,3,4,66,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,53,    private static final double FACT[] = new double[20];,1,0,0,0,4,6,0,0,3,4,52,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,56,    private static final double LN_MANT[][] = new double[1024][];,1,0,0,0,8,6,0,0,3,4,61,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,65,    private static final double LN_SPLIT_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,85,    private static final double LN_QUICK_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,49,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,98,    private static final double LN_HI_PREC_COEF[][] = {,1,0,0,0,5,4,0,0,3,4,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,108,    private static final double SINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,111,    private static final double SINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,60,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,114,    private static final double COSINE_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,117,    private static final double COSINE_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,62,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,120,    private static final double TANGENT_TABLE_A[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,123,    private static final double TANGENT_TABLE_B[] = new double[14];,1,0,0,0,4,6,0,0,3,4,63,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,126,    private static long RECIP_2PI[] = new long[] {,1,0,0,0,5,5,0,0,2,4,46,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,147,    private static long PI_O_4_BITS[] = new long[] {,1,0,0,0,5,5,0,0,2,4,48,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",1,0,0,0,4,4,0,0,3,4,127,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",1,0,0,0,3,4,0,0,3,4,61,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,169,        FACT[0] = 1.0;,0,0,1,0,2,0,0,0,1,3,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,170,        for (i = 1; i < 20; i++) {,3,1,0,1,3,1,0,0,2,6,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,171,            FACT[i] = FACT[i-1] * i;,2,2,1,0,4,0,0,0,1,5,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,174,        double tmp[] = new double[2];,1,0,0,0,4,3,0,0,0,3,29,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,175,        double recip[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,178,        for (i = 0; i < 750; i++) {,3,1,0,1,3,1,0,0,2,6,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,179,"            expint(i, tmp);",0,0,0,0,2,0,3,0,1,3,15,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,1,1,1,0,4,0,0,0,1,5,32,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,1,1,1,0,4,0,0,0,1,5,32,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,183,            if (i != 0) {,1,1,0,1,3,1,0,0,0,5,13,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,185,"                splitReciprocal(tmp, recip);",0,0,0,0,2,0,3,0,1,3,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,186,                EXP_INT_TABLE_A[750-i] = recip[0];,1,1,1,0,4,0,0,0,1,5,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,187,                EXP_INT_TABLE_B[750-i] = recip[1];,1,1,1,0,4,0,0,0,1,5,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,192,        for (i = 0; i < 1025; i++) {,3,1,0,1,3,1,0,0,2,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,193,"            slowexp(i/1024.0, tmp);",1,1,0,0,2,0,2,0,1,5,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,0,4,0,0,0,1,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,0,4,0,0,0,1,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,199,        for (i = 0; i < 1024; i++) {,3,1,0,1,3,1,0,0,2,6,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,2,0,4,8,2,2,0,0,6,79,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,201,            LN_MANT[i] = slowLog(d);,0,0,1,1,4,0,2,0,2,5,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,205,        buildSinCosTables();,0,0,0,1,2,0,1,0,1,4,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,206,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,219,        return Math.sqrt(a);,0,0,0,1,2,1,3,0,0,4,20,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,680,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,681,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,682,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,683,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,684,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,685,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,687,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,688,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,689,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,690,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,692,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,693,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,695,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,696,            ys[0] = as[0];,0,0,1,0,4,0,0,0,1,3,14,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,697,            ys[1] = as[1];,0,0,1,0,4,0,0,0,1,3,14,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,700,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,701,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,702,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,705,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,714,        if (d < 8e298 && d > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,715,            final double a = d * 1073741824.0;,2,1,0,0,0,2,0,0,1,4,34,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,716,            split[0] = (d + a) - a;,3,2,1,1,4,0,0,0,1,6,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,717,            split[1] = d - split[0];,1,1,1,0,4,0,0,0,1,5,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,718,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,723,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,730,        final double c = a[0] + a[1];,1,1,1,0,4,2,0,0,1,6,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,731,        final double d = -(c - a[0] - a[1]);,2,1,1,1,6,2,0,0,2,7,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,733,        if (c < 8e298 && c > -8e298) {,2,3,0,1,3,1,0,0,1,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,734,            double z = c * 1073741824.0;,2,1,0,0,0,1,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,735,            a[0] = (c + z) - z;,3,2,1,1,4,0,0,0,1,6,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,736,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,737,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,738,            double z = c * 9.31322574615478515625E-10;,2,1,0,0,0,1,0,0,0,3,42,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,739,            a[0] = (c + z - c) * 1073741824.0;,3,3,1,1,4,0,0,0,1,6,34,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,740,            a[1] = c - a[0] + d;,2,2,1,0,4,0,0,0,1,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,742,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,750,        ans[0] = a[0] * b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,0,14,0,0,0,1,4,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,754,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,755,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,763,        ans[0] = a[0] + b[0];,0,1,1,0,6,0,0,0,1,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,764,        ans[1] = a[1] + b[1];,0,1,1,0,6,0,0,0,1,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,766,        resplit(ans);,0,0,0,1,2,0,2,0,1,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,767,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,788,        final double b = 1.0/4194304.0;,1,1,0,0,0,2,0,0,1,4,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,789,        final double a = 1.0 - b;,2,1,0,0,0,2,0,0,1,4,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,791,        if (in[0] == 0.0) {,0,1,1,1,5,1,0,0,0,5,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,796,        result[0] = a / in[0];,1,1,1,0,4,0,0,0,1,5,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,2,7,1,1,18,0,0,0,1,6,60,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,1,9,2,0,0,0,5,63,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,800,            result[1] = 0.0;,0,0,1,0,2,0,0,0,1,3,16,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,804,        resplit(result);,0,0,0,1,2,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,806,        for (int i = 0; i < 2; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,1,6,1,0,8,1,0,0,0,5,58,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,811,            err = err * (result[0] + result[1]);,2,2,1,1,6,0,0,0,1,6,36,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,813,            result[1] += err;,1,0,1,0,2,0,0,0,1,4,17,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,815,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,823,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,824,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,825,        final double zs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,828,"        split(a[0], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,829,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,830,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,832,        result[0] = zs[0];,0,0,1,0,4,0,0,0,1,3,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,833,        result[1] = zs[1];,0,0,1,0,4,0,0,0,1,3,18,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,836,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,837,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,839,        double tmp = result[0] + zs[0];,1,1,1,0,4,1,0,0,0,5,31,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,841,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,842,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,843,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,844,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,847,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,848,"        split(b[0], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,849,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,851,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,853,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,854,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,855,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,856,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,859,"        split(a[1], xs);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,860,"        split(b[1], ys);",0,0,1,0,4,0,2,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,861,"        splitMult(xs, ys, zs);",0,0,0,0,2,0,4,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,863,        tmp = result[0] + zs[0];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,865,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,866,        tmp = result[0] + zs[1];,1,1,1,0,4,0,0,0,1,5,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,1,2,1,1,10,0,0,0,1,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,868,        result[0] = tmp;,1,0,1,0,2,0,0,0,1,4,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,869,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,878,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,879,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,880,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,889,        xs[0] = 2.718281828459045;,0,0,1,0,2,0,0,0,1,3,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,890,        xs[1] = 1.4456468917292502E-16;,0,0,1,0,2,0,0,0,1,3,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,892,"        split(1.0, ys);",0,0,0,0,2,0,2,0,1,3,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,894,        while (p > 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,895,            if ((p & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,896,"                quadMult(ys, xs, as);",0,0,0,0,2,0,4,0,1,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,897,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,900,"            quadMult(xs, xs, as);",0,0,0,0,2,0,4,0,1,3,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,901,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,903,            p >>= 1;,1,0,0,0,0,0,0,0,1,2,8,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,906,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,907,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,908,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,910,            resplit(result);,0,0,0,1,2,0,2,0,1,4,16,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,913,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1396,        double x[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1397,        double x2[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1398,        double y[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1399,        double a[] = new double[2];,1,0,0,0,4,3,0,0,0,3,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1401,"        split(xi, x);",0,0,0,0,2,0,3,0,1,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1404,        x[0] += 1.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1405,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1406,"        splitReciprocal(x, a);",0,0,0,0,2,0,3,0,1,3,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1407,        x[0] -= 2.0;,0,0,1,0,2,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1408,        resplit(x);,0,0,0,1,2,0,2,0,1,4,11,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1409,"        splitMult(x, a, y);",0,0,0,0,2,0,4,0,1,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1410,        x[0] = y[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1411,        x[1] = y[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1414,"        splitMult(x, x, x2);",0,0,0,0,2,0,4,0,1,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,2,1,1,0,6,0,0,0,1,5,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,2,1,1,0,6,0,0,0,1,5,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,5,2,0,1,3,2,0,0,1,6,51,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1424,"            splitMult(y, x2, a);",0,0,0,0,2,0,4,0,1,3,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1425,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1426,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,0,4,0,3,0,1,4,33,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1428,            y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1429,            y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1432,"        splitMult(y, x, a);",0,0,0,0,2,0,4,0,1,3,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1433,        y[0] = a[0];,0,0,1,0,4,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1434,        y[1] = a[1];,0,0,1,0,4,0,0,0,1,3,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1436,        return y;,1,0,0,0,0,1,0,0,0,2,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1446,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1447,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1448,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1449,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1450,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1451,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1453,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1454,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1455,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1457,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1458,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1461,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1462,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1464,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1465,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1466,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1469,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1473,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1474,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1475,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1478,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1489,        final double xs[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1490,        final double ys[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1491,        final double facts[] = new double[2];,1,0,0,0,4,4,0,0,1,4,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1492,        final double as[] = new double[2];,1,0,0,0,4,4,0,0,1,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1493,"        split(x, xs);",0,0,0,0,2,0,3,0,1,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1494,        ys[0] = ys[1] = 0.0;,0,0,1,0,4,0,0,0,2,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1496,        for (int i = 19; i >= 0; i--) {,3,1,0,1,3,2,0,0,1,6,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1497,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1500,            if ( (i & 1) != 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1501,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1504,"            split(FACT[i], as);",0,0,1,0,4,0,2,0,1,4,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1505,"            splitReciprocal(as, facts);",0,0,0,0,2,0,3,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1507,            if ( (i & 2) != 0 ) {,1,2,0,2,5,1,0,0,0,5,21,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1508,                facts[0] = -facts[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1509,                facts[1] = -facts[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1512,"            splitAdd(ys, facts, as);",0,0,0,0,2,0,4,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,0,8,0,0,0,2,3,29,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1516,        if (result != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1517,            result[0] = ys[0];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1518,            result[1] = ys[1];,0,0,1,0,4,0,0,0,1,3,18,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1521,        return ys[0] + ys[1];,0,1,1,0,4,1,0,0,0,4,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1527,        final double result[] = new double[2];,1,0,0,0,4,4,0,0,1,4,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1530,        for (int i = 0; i < 7; i++) {,3,1,0,1,3,2,0,0,1,6,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1531,            double x = i / 8.0;,2,1,0,0,0,1,0,0,0,3,19,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1533,"            slowSin(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1535,            SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1537,"            slowCos(x, result);",0,0,0,0,2,0,3,0,1,3,19,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1538,            COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1539,            COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1543,        for (int i = 7; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1544,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1545,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1546,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1547,            double bs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1548,            double temps[] = new double[2];,1,0,0,0,4,3,0,0,0,3,31,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1550,            if ( (i & 1) == 0) {,1,2,0,2,5,1,0,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1552,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1553,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1554,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1555,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1558,"                splitMult(xs, ys, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,0,4,0,0,0,1,4,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1563,"                splitMult(ys, ys, as);",0,0,0,0,2,0,4,0,1,3,22,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1564,"                splitMult(xs, xs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1565,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1566,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1567,"                splitAdd(as, temps, result);",0,0,0,0,2,0,4,0,1,3,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1568,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1569,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1571,                xs[0] = SINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1572,                xs[1] = SINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1573,                ys[0] = COSINE_TABLE_A[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1574,                ys[1] = COSINE_TABLE_B[i/2];,1,1,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1575,                as[0] = SINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1576,                as[1] = SINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1577,                bs[0] = COSINE_TABLE_A[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,1,2,1,0,4,0,0,0,1,5,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1581,"                splitMult(xs, bs, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1582,"                splitMult(ys, as, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1583,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1584,                SINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1585,                SINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1588,"                splitMult(ys, bs, result);",0,0,0,0,2,0,4,0,1,3,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1589,"                splitMult(xs, as, temps);",0,0,0,0,2,0,4,0,1,3,25,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1590,                temps[0] = -temps[0];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1591,                temps[1] = -temps[1];,0,0,1,0,4,0,0,0,2,3,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1592,"                splitAdd(result, temps, result);",0,0,0,0,2,0,4,0,1,3,32,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1593,                COSINE_TABLE_A[i] = result[0];,0,0,1,0,4,0,0,0,1,3,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1594,                COSINE_TABLE_B[i] = result[1];,0,0,1,0,4,0,0,0,1,3,30,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1599,        for (int i = 0; i < 14; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1600,            double xs[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1601,            double ys[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1602,            double as[] = new double[2];,1,0,0,0,4,3,0,0,0,3,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1604,            as[0] = COSINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1605,            as[1] = COSINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,26,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1607,"            splitReciprocal(as, ys);",0,0,0,0,2,0,3,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1609,            xs[0] = SINE_TABLE_A[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1610,            xs[1] = SINE_TABLE_B[i];,0,0,1,0,4,0,0,0,1,3,24,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1612,"            splitMult(xs, ys, as);",0,0,0,0,2,0,4,0,1,3,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1614,            TANGENT_TABLE_A[i] = as[0];,0,0,1,0,4,0,0,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1615,            TANGENT_TABLE_B[i] = as[1];,0,0,1,0,4,0,0,0,1,3,27,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1618,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,52,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,46,    protected final RandomDataImpl randomData = new RandomDataImpl();,1,0,0,1,2,3,0,2,3,6,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,40,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,41,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,62,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,50,    protected final RandomDataImpl randomData = new RandomDataImpl();,1,0,0,1,2,3,0,2,3,6,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,56,    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;,3,0,0,0,0,2,0,0,1,3,78,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,65,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",3,0,0,0,2,1,0,0,0,3,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,78,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,51,    private double mean = 0;,1,0,0,0,0,2,0,0,1,3,24,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,54,    private double standardDeviation = 1;,1,0,0,0,0,2,0,0,1,3,37,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,79,        setMeanInternal(mean);,0,0,0,1,2,0,2,0,1,4,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,80,        setStandardDeviationInternal(sd);,0,0,0,1,2,0,2,0,1,4,33,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,81,        solverAbsoluteAccuracy = inverseCumAccuracy;,2,0,0,0,0,0,0,0,1,2,44,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,82,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,48,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,3,1,0,1,2,4,2,0,3,7,69,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,114,        this.mean = newMean;,2,0,0,0,0,1,0,0,1,3,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,141,        if (sd <= 0.0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,146,        standardDeviation = sd;,2,0,0,0,0,0,0,0,1,2,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,147,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,80,"        this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);",3,0,0,0,2,1,0,0,0,3,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,81,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,92,"    public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {",4,0,0,0,3,4,0,0,1,4,77,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,65,    private int maxIterations = DEFAULT_MAX_ITERATIONS;,2,0,0,0,0,2,0,0,1,3,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,70,    private double epsilon = DEFAULT_EPSILON;,2,0,0,0,0,2,0,0,1,3,41,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,93,        if (p <= 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,96,        mean = p;,2,0,0,0,0,0,0,0,1,2,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,97,"        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));",2,0,0,1,4,1,3,1,2,7,57,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,98,        this.epsilon = epsilon;,2,0,0,0,0,1,0,0,1,3,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,99,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,100,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,119,    public RandomDataImpl() {,1,0,0,1,3,1,0,0,1,5,25,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,111,    private RandomGenerator rand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,114,    private SecureRandom secRand = null;,1,0,0,0,0,1,0,1,1,4,36,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,120,    },0,0,0,0,1,0,0,0,0,1,1,2,0.09091,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,667,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,673,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,64,"        this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",3,0,0,0,3,3,0,2,3,5,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,76,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,78,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,88,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",2,1,0,1,8,2,2,1,2,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,107,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,121,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,122,        this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",1,0,0,1,6,2,5,1,1,7,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,146,        return pattern.getSourceString();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,155,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,163,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,173,        if (pattern != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,174,"            return buildMessage(locale, pattern, arguments);",0,0,0,0,2,1,4,0,1,4,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,176,"        return """";",0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,182,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,188,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,196,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,206,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,207,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,208,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,210,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,211,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,212,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,359,        ioe.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,360,        return ioe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,1,0,0,2,4,1,2,2,1,7,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,416,        iae.initCause(rootCause);,0,0,0,1,2,0,3,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,417,        return iae;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,444,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,532,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,0,0,0,1,3,2,0,1,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,595,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,2,1,2,7,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,643,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",1,0,0,1,4,2,3,1,2,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",1,0,0,0,3,2,0,1,1,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,685,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",1,0,0,0,0,1,0,1,2,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,1,0,0,1,3,2,0,1,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,39,public class MathRuntimeException extends RuntimeException {,1,0,0,0,1,3,0,1,1,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",3,0,0,0,2,1,0,0,1,4,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,46,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,73,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,74,        this.maxIterations = maxIterations;,2,0,0,0,0,1,0,0,1,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,81,        return maxIterations;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,2,0,0,1,2,1,0,0,1,5,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,51,"        this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,62,"        super(pattern, arguments);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,70,        super(cause);,1,0,0,1,2,1,0,0,1,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,84,"        this(cause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,85,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,96,"        super(cause, pattern, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,57,    public MathException() {,1,0,0,1,3,1,0,0,1,5,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,59,"        this.arguments = new Object[] { """" };",1,0,0,0,4,2,0,1,2,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,72,"      this(new DummyLocalizable(pattern), arguments);",2,0,0,1,4,2,0,1,1,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,83,"    public MathException(Localizable pattern, Object ... arguments) {",3,0,0,0,3,1,0,2,1,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,84,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,86,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,96,        super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,3,0,0,0,0,1,0,0,1,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",2,1,0,1,8,2,2,1,2,8,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",3,0,0,1,4,2,0,1,1,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,115,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,128,      super(rootCause);,1,0,0,1,2,1,0,0,1,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,129,      this.pattern   = pattern;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,2,1,0,1,6,2,2,1,1,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,131,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,141,        return pattern.getSourceString();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,150,        return pattern;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,159,        return arguments.clone();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,170,        if (pattern != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",1,0,0,1,6,2,5,1,1,7,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,173,"        return """";",0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,179,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,193,        printStackTrace(System.err);,2,0,0,1,2,0,1,0,1,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,203,        synchronized (out) {,1,0,0,1,3,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,204,"            PrintWriter pw = new PrintWriter(out, false);",2,0,0,0,2,1,0,2,2,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,205,            printStackTrace(pw);,0,0,0,1,2,0,2,0,1,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,207,            pw.flush();,0,0,0,1,2,0,2,0,0,3,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,208,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,209,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,61,                                           Object ... args) {,1,0,0,0,2,0,0,1,0,3,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,62,        this.specific = specific;,2,0,0,0,0,1,0,0,1,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,63,        this.general = general;,2,0,0,0,0,1,0,0,1,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,64,        arguments = ArgUtils.flatten(args);,1,0,0,1,2,0,3,0,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,65,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,72,"        this(null, general, args);",2,0,0,0,2,1,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,73,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,0,2,1,6,0,0,3,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,89,        return getMessage(Locale.US);,2,0,0,1,2,1,1,0,1,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,3,0,1,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,52,"        this(null, wrong, min, boundIsAllowed);",3,0,0,0,2,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,67,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,73,        this.min = min;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,74,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,81,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,88,        return min;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,50,"        super(specific, general, wrong, arguments);",4,0,0,0,2,1,0,0,1,4,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,51,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,64,"        super(general, wrong, arguments);",3,0,0,0,2,1,0,0,1,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,65,        argument = wrong;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,66,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,72,        return argument;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,32,    private ArgUtils() {},1,0,0,1,4,1,0,0,1,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,42,        final List<Object> list = new ArrayList<Object>();,1,0,0,1,2,2,0,4,2,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,43,        if (array != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,44,            for (Object o : array) {,2,0,0,1,3,1,0,1,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,45,                if (o instanceof Object[]) {,1,0,0,1,5,2,0,1,0,5,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,46,                    for (Object oR : flatten((Object[]) o)) {,2,0,0,3,9,1,1,2,1,7,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,47,                        list.add(oR);,0,0,0,1,2,0,3,0,0,3,13,13,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,50,                    list.add(o);,0,0,0,1,2,0,3,0,0,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,54,        return list.toArray();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,322,        return sourceFormat;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,328,            ResourceBundle bundle =,1,0,0,0,0,0,0,1,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,330,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,3,11,1,6,0,0,4,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,332,                return bundle.getString(toString());,0,0,0,2,4,1,3,0,1,5,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,337,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,335,        } catch (MissingResourceException mre) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,341,        return sourceFormat;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,38,"        super(value, 0, false);",1,0,0,0,2,1,0,0,2,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,48,"        super(specific, value, 0, false);",2,0,0,0,2,1,0,0,2,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,52,"        this(null, wrong, max, boundIsAllowed);",3,0,0,0,2,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,66,"        super(specific,",1,0,0,0,1,1,0,0,1,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,72,        this.max = max;,2,0,0,0,0,1,0,0,1,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,73,        this.boundIsAllowed = boundIsAllowed;,2,0,0,0,0,1,0,0,1,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,74,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,80,        return boundIsAllowed;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,87,        return max;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,0,0,0,1,3,2,0,1,1,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,572,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,578,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,532,        return new NoSuchElementException() {,0,0,0,1,3,2,0,1,1,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,540,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,0,0,0,1,3,2,0,1,1,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,496,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,444,        return new IllegalStateException() {,0,0,0,1,3,2,0,1,1,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,452,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,395,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,0,0,0,1,3,2,0,1,1,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,334,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,340,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,2,0,1,1,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,290,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,296,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,0,0,0,1,3,2,0,1,1,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,246,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,252,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,1,0,0,1,3,2,0,1,1,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,695,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",4,0,0,0,2,1,2,0,1,5,74,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,701,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",2,0,0,1,4,1,4,0,1,6,84,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,0,0,0,1,3,2,0,1,1,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,617,"                return buildMessage(Locale.US, pattern, arguments);",2,0,0,0,2,1,3,0,1,5,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,623,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,1,4,1,5,0,1,5,61,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,211,    private FastMath() {,1,0,0,1,3,1,0,0,1,5,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,212,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,227,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,1,2,0,2,6,1,5,0,1,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,236,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,237,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,238,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,239,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,243,        if (a > 0.3) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,244,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,2,2,0,2,6,0,5,0,2,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,246,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,247,            if (a > 0.05) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,248,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,7,15,0,5,10,0,0,0,1,5,93,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,250,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,5,9,0,3,6,0,0,0,1,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,254,        return negative ? -absSinh : absSinh;,3,0,0,0,0,1,0,0,1,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,264,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,265,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,266,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,267,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,271,        if (a > 0.074) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,272,            final double twoA = 2 * a;,2,1,0,0,0,2,0,0,1,4,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,273,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,1,2,0,2,6,0,6,0,1,6,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,274,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,275,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,276,            if (a > 0.016) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,277,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,7,16,0,5,10,0,0,0,1,5,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,279,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,5,10,0,3,6,0,0,0,1,5,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,283,        return negative ? -absTanh : absTanh;,3,0,0,0,0,1,0,0,1,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,292,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,3,3,0,2,4,1,4,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,301,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,302,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,303,            negative = true;,1,0,0,0,0,0,0,0,2,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,304,            a = -a;,2,0,0,0,0,0,0,0,2,2,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,308,        if (a > 0.167) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,309,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,3,0,2,4,0,4,0,1,6,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,311,            final double a2 = a * a;,3,1,0,0,0,2,0,0,1,4,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,312,            if (a > 0.097) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,313,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,10,33,0,9,18,0,0,0,1,5,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,314,            } else if (a > 0.036) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,315,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,8,25,0,7,14,0,0,0,1,5,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,316,            } else if (a > 0.0036) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,317,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,6,17,0,5,10,0,0,0,1,5,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,319,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,4,9,0,3,6,0,0,0,1,5,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,323,        return negative ? -absAsinh : absAsinh;,3,0,0,0,0,1,0,0,1,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,333,        boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,334,        if (a < 0) {,1,1,0,1,3,1,0,0,0,5,12,4,0.0,0,0
