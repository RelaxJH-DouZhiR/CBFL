dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/util/FastMath,30,2742,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2743,      zb += -(temp - za - yb);,16,3,0,1,2,0,0,0,0,22,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2744,      za = temp;,12,2,1,0,0,0,0,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2748,      y = sqrt(za);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2749,      temp = y * HEX_40000000;,16,5,0,0,0,0,0,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2750,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2751,      yb = y - ya;,18,3,0,0,0,0,0,0,0,24,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2757,      double dx = zb / (2.0*y);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2760,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2761,      temp = r * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2762,      double ra = r + temp - temp;,20,4,0,0,0,0,0,0,0,26,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2763,      double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,24,9,1,1,2,0,0,0,0,37,83,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2768,      temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2769,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2770,      ra = temp;,8,0,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2772,"      return atan(ra, rb, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2780,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2781,          return Double.NaN;,4,0,0,0,0,1,6,0,0,10,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2784,      if (x > 1.0 || x < -1.0) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2785,          return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2788,      if (x == -1.0) {,10,4,0,1,3,0,0,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2789,          return Math.PI;,12,2,0,0,0,1,0,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2792,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2793,          return 0.0;,4,1,0,0,0,2,0,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2796,      if (x == 0) {,2,1,0,1,3,0,0,2,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2797,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2803,      double temp = x * HEX_40000000;,8,1,0,0,0,0,0,0,0,9,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2804,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2805,      final double xb = x - xa;,0,0,0,0,0,0,4,0,0,4,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2808,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2809,      double yb = xa*xb*2.0 + xb*xb;,8,2,0,0,0,0,0,0,0,11,30,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2812,      ya = -ya;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2813,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2815,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2816,      double zb = -(za - 1.0 - ya);,14,3,0,1,2,0,0,0,0,19,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2818,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2819,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2820,      za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2823,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2824,      temp = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2825,      ya = y + temp - temp;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2826,      yb = y - ya;,6,1,0,0,0,0,6,0,0,14,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,4,2,0,2,4,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2832,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2833,      y = ya+yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2834,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2837,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2840,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,0,6,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2841,          return Math.PI/2; // so return the appropriate value,0,0,1,0,0,2,6,0,0,11,52,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2844,      double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2845,      double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,1,0,0,0,4,0,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2850,      temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2851,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2852,      ra = temp;,8,3,0,0,0,0,4,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2854,"      return atan(ra, rb, x<0);",2,1,0,1,2,1,6,0,0,9,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2863,      long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,3,0,3,6,0,0,0,0,9,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2865,      boolean subnormal = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2867,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2868,          if (x == 0) {,4,1,0,1,3,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2869,              return x;,4,0,0,0,0,2,2,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2873,          subnormal = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2874,          x *= 1.8014398509481984E16;  // 2^54,10,1,0,0,0,1,6,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2875,          inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2879,      if (exponent == 1024) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2881,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2885,      int exp3 = exponent / 3;,10,1,0,0,0,1,4,2,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2895,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2896,      est = est * mant + 0.0875862700108075;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2897,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2898,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2899,      est = est * mant + 0.5039018405998233;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2901,      est *= CBRTTWO[exponent % 3 + 2];,4,3,0,1,2,0,4,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2906,      final double xs = x / (p2*p2*p2);,30,9,0,1,2,1,0,0,0,41,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2907,      est += (xs - est*est*est) / (3*est*est);,16,4,0,2,4,0,0,0,0,21,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2908,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2911,      double temp = est * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2912,      double ya = est + temp - temp;,4,2,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2913,      double yb = est - ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2915,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2916,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2917,      temp = za * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2918,      double temp2 = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2919,      zb += za - temp2;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2920,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2922,      zb = za * yb + ya * zb + zb * yb;,20,5,0,0,0,0,4,0,0,32,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2923,      za = za * ya;,2,1,0,0,0,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2925,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2926,      double nb = -(na - xs + za);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2927,      nb -= zb;,10,0,0,0,0,0,4,4,0,21,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2929,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2932,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2934,      if (subnormal) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2935,          est *= 3.814697265625E-6;  // 2^-18,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2938,      return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,2,5,1,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2949,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2953,        final double facta = 0.01745329052209854;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2954,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2956,        double xa = doubleHighPart(x);,12,1,0,1,2,0,8,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2957,        double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2960,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2961,            result = result * x; // ensure correct sign if calculation underflows,10,5,0,0,0,0,0,0,0,16,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2963,        return result;,6,1,0,0,0,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,2,5,1,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2974,            return x;,10,1,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2978,        final double facta = 57.2957763671875;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2979,        final double factb = 3.145894820876798E-6;,4,0,0,0,0,1,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2981,        double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2982,        double xb = x - xa;,8,2,0,0,0,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,24,8,0,0,0,1,0,0,0,33,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2993,        return (x < 0) ? -x : x;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3002,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3029,        if (Double.isInfinite(x)) {,14,3,0,2,5,0,6,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3030,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0,0,0,3,6,1,0,0,0,10,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3041,        if (Float.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3042,            return Float.POSITIVE_INFINITY;,6,1,1,0,0,1,0,0,0,10,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3056,        if ((n > -1023) && (n < 1024)) {,8,4,0,3,7,0,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,6,2,0,4,9,0,12,0,0,21,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3062,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3064,        if (n < -2098) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3065,            return (d > 0) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3067,        if (n > 2097) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0,0,0,1,2,1,6,0,0,6,69,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3072,        final long bits = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3073,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,10,3,0,3,6,1,0,0,0,14,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3075,        long mantissa   = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3078,        int scaledExponent = exponent + n;,8,1,0,0,0,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3080,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3082,            if (scaledExponent > 0) {,6,1,0,1,3,0,0,2,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3085,            } else if (scaledExponent > -53) {,8,2,0,1,4,0,0,0,0,12,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3089,                mantissa = mantissa | (1L << 52);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3093,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3094,                if (mostSignificantLostBit != 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3096,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3098,                return Double.longBitsToDouble(sign | mantissa);,12,2,0,1,2,1,4,0,0,20,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3102,                return (sign == 0L) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3106,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3109,                while ((mantissa >>> 52) != 1) {,0,0,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3110,                    mantissa = mantissa << 1;,6,1,0,0,0,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3111,                    --scaledExponent;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3113,                ++scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3114,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3116,                if (scaledExponent < 2047) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,3,0,1,2,1,0,0,0,21,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3122,            } else if (scaledExponent < 2047) {,4,1,0,1,4,0,0,2,0,7,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,16,3,0,4,8,1,4,0,0,23,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,16,3,0,1,2,2,0,0,0,21,74,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3140,        if ((n > -127) && (n < 128)) {,0,0,0,3,7,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,0,1,0,2,4,1,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0,0,0,4,9,0,0,0,0,13,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3146,            return f;,6,3,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3148,        if (n < -277) {,20,8,0,1,3,1,0,0,0,29,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3149,            return (f > 0) ? 0.0f : -0.0f;,0,0,0,1,2,1,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3151,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3156,        final int bits = Float.floatToIntBits(f);,4,1,0,1,2,1,6,0,0,13,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3157,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3158,        int  exponent  = (bits >>> 23) & 0xff;,6,1,0,1,2,0,0,0,0,8,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3159,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3162,        int scaledExponent = exponent + n;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3164,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3166,            if (scaledExponent > 0) {,6,2,0,1,3,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3169,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3173,                mantissa = mantissa | (1 << 23);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3177,                mantissa = mantissa >>> (1 - scaledExponent);,14,3,0,1,2,0,0,0,0,18,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3178,                if (mostSignificantLostBit != 0) {,6,2,0,1,3,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3180,                    mantissa++;,4,1,0,0,0,0,0,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3182,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3186,                return (sign == 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3190,            if (exponent == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3193,                while ((mantissa >>> 23) != 1) {,0,0,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3194,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3195,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3197,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3198,                mantissa = mantissa & 0x007fffff;,8,2,0,0,0,0,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3200,                if (scaledExponent < 255) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3206,            } else if (scaledExponent < 255) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,1,0,2,4,2,0,0,0,8,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,0,0,3,7,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3250,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3251,        } else if (d == direction) {,6,1,0,1,4,1,4,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3252,            return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3253,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,6,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,10,1,0,1,2,1,0,0,0,12,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3255,        } else if (d == 0) {,4,1,0,1,4,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,12,3,0,1,2,1,0,0,0,16,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3261,        final long bits = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3262,        final long sign = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3263,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,6,3,1,3,6,2,4,0,0,20,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3306,            return Float.NaN;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3307,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3308,            return (float) direction;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3309,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,6,0,0,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,16,1,0,1,2,2,2,0,0,23,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3311,        } else if (f == 0f) {,2,0,0,1,4,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3317,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3318,        final int sign = bits & 0x80000000;,12,3,0,0,0,1,0,0,0,16,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3319,        if ((direction < f) ^ (sign == 0)) {,0,0,0,3,7,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0,0,0,3,6,1,0,0,0,10,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3335,            return x;,0,0,0,0,0,1,0,4,0,4,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3339,            return x;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3344,            y--;,4,1,0,0,0,0,0,0,0,5,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3348,            return x*y;,14,2,0,0,0,1,0,0,0,16,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3362,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3370,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3372,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3373,            return x*y;,6,1,0,0,0,1,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3376,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3384,        double y = floor(x);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3385,        double d = x - y;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3387,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3388,            if (y == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3389,                return -0.0; // Preserve sign of operand,4,2,0,0,0,1,0,0,0,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3391,            return y+1.0;,8,2,0,0,0,2,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3393,        if (d < 0.5) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3394,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3398,        long z = (long) y;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3399,        return (z & 1) == 0 ? y : y + 1.0;,10,3,0,1,2,1,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3407,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3415,        return (int) floor(x + 0.5f);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3424,        return (a <= b) ? a : b;,24,4,0,1,2,1,0,2,0,31,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3433,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3442,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3443,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3445,        if (a < b) {,2,0,0,1,3,0,0,0,0,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3446,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3449,        if (a != b) {,2,1,0,1,3,0,12,0,0,16,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3450,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3454,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3455,        if (bits == 0x80000000) {,8,4,1,1,3,0,0,0,0,21,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3456,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3458,        return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3467,        if (a > b) {,4,2,1,1,3,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3468,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3470,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3471,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3474,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3475,            return Double.NaN;,8,4,0,0,0,1,0,0,0,12,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3479,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3480,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3481,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3483,        return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3492,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3501,        return (a <= b) ? b : a;,16,4,0,1,2,1,0,2,0,22,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3510,        if (a > b) {,8,4,0,1,3,0,4,0,0,16,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3511,            return a;,2,0,0,0,0,1,6,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3513,        if (a < b) {,6,0,0,1,3,1,0,4,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3514,            return b;,4,0,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3517,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3522,        int bits = Float.floatToRawIntBits(a);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3523,        if (bits == 0x80000000) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3524,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3526,        return a;,10,1,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3536,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3538,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3539,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3542,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3543,            return Double.NaN;,8,0,0,0,0,1,2,0,0,12,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3547,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3548,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3549,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3551,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,14,8,1,3,7,0,12,0,0,40,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3570,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,4,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,3,8,0,12,0,0,13,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3572,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3575,            final int expX = getExponent(x);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3576,            final int expY = getExponent(y);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3577,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3579,                return abs(x);,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3580,            } else if (expY > expX + 27) {,4,3,1,1,4,0,0,0,0,20,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3582,                return abs(y);,2,0,0,1,2,2,6,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3586,                final int middleExp = (expX + expY) / 2;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3589,"                final double scaledX = scalb(x, -middleExp);",6,0,0,1,2,1,4,2,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3590,"                final double scaledY = scalb(y, -middleExp);",0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3596,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",6,1,0,1,2,1,8,0,0,15,90,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3636,        long m = Double.doubleToLongBits(magnitude);,4,0,0,1,2,0,6,2,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3637,        long s = Double.doubleToLongBits(sign);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3639,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3641,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3653,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,10,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3654,        int s = Float.floatToIntBits(sign);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0,0,0,3,7,0,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3656,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3658,        return -magnitude; // flip sign,8,1,0,0,0,1,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,0,0,4,8,1,0,0,0,13,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,0,0,3,6,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3693,        PrintStream out = System.out;,6,0,0,0,0,0,0,2,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",6,1,0,1,2,0,0,0,0,8,96,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0,0,0,1,2,0,0,0,0,3,96,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",8,2,0,1,2,0,8,0,0,19,68,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",10,5,0,1,2,0,10,0,0,26,75,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,1,2,0,10,0,0,11,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,1,2,0,10,0,0,11,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",6,1,0,1,2,0,10,0,0,19,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3705,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,145,    public ResizableDoubleArray() {,8,2,1,1,3,0,2,0,0,18,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,146,        internalArray = new double[initialCapacity];,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,182,    public ResizableDoubleArray(double[] initialArray) {,4,0,0,2,5,1,0,0,0,5,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,183,        if (initialArray == null) {,8,2,0,1,3,1,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,184,            this.internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,186,            this.internalArray = new double[initialArray.length];,16,6,0,1,2,0,0,0,0,23,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",6,0,0,1,2,0,6,0,0,12,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,188,            initialCapacity = initialArray.length;,6,0,0,0,0,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,189,            numElements = initialArray.length;,6,0,0,0,0,0,0,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,191,    },4,0,0,0,1,0,0,0,0,5,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,215,"    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {",0,0,0,1,3,0,0,0,0,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,216,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,217,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,218,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,219,        setContractionCriteria(expansionFactor +0.5f);,2,1,0,1,2,0,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,242,        float contractionCriteria) {,8,1,0,0,2,0,0,0,0,9,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,243,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,244,        setContractionCriteria(contractionCriteria);,0,0,0,1,2,0,4,0,0,4,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,245,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,246,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,271,"            float contractionCriteria, int expansionMode) {",4,0,0,0,2,0,0,0,0,4,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,272,        this.expansionFactor = expansionFactor;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,273,        setContractionCriteria(contractionCriteria);,0,0,0,1,2,0,4,0,0,4,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,274,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,2,0,6,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,275,        setExpansionMode(expansionMode);,0,0,1,1,2,0,8,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,276,        internalArray = new double[initialCapacity];,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,277,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,290,        throws NullArgumentException {,4,1,0,0,1,0,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,291,        MathUtils.checkNotNull(original);,0,0,0,1,2,0,6,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,292,"        copy(original, this);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,293,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,318,        final double[] tempArray = new double[numElements + values.length + 1];,8,1,0,2,4,1,0,0,0,10,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,319,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,1,2,0,12,0,0,12,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",4,0,0,1,2,0,10,0,0,14,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,321,        internalArray = tempArray;,10,5,1,0,0,0,0,0,0,21,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,322,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,323,        numElements += values.length;,6,0,0,0,0,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,324,    },2,0,0,0,1,0,6,0,0,9,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,343,        double discarded = internalArray[startIndex];,2,0,1,1,2,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,12,4,1,3,7,0,0,0,0,19,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,346,            expand();,0,0,0,1,2,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,349,        startIndex += 1;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,352,        internalArray[startIndex + (numElements - 1)] = value;,6,2,1,2,4,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,355,        if (shouldContract()) {,0,0,0,2,5,0,2,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,356,            contract();,0,0,0,1,2,0,2,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,358,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,372,        if (numElements < 1) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,373,            throw new MathIllegalStateException(,0,0,0,0,1,0,0,0,0,1,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,377,        double discarded = internalArray[startIndex + (numElements - 1)];,6,2,1,2,4,0,0,0,0,10,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,379,        internalArray[startIndex + (numElements - 1)] = value;,8,2,1,2,4,1,2,0,0,16,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,381,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,397,        if (contraction < expansion) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,398,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,403,        if (contraction <= 1.0) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,404,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,409,        if (expansion <= 1.0) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,410,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,414,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,421,        numElements = 0;,2,0,0,0,0,1,4,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,422,        startIndex = 0;,4,1,0,0,0,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,423,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,424,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,455,"        discardExtremeElements(i,true);",0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,472,"        discardExtremeElements(i,false);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,496,        if (i > numElements) {,4,1,0,1,3,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,497,            throw new MathIllegalArgumentException(,8,2,0,0,1,1,0,0,0,11,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,500,       } else if (i < 0) {,4,1,0,1,4,0,2,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,501,           throw new MathIllegalArgumentException(,4,1,1,0,1,0,0,2,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,506,            numElements -= i;,4,0,0,0,0,0,0,0,0,5,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,507,            if (front) {,2,0,0,1,3,0,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,508,                startIndex += i;,4,1,1,0,0,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,511,        if (shouldContract()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,512,            contract();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,514,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,6,1,0,1,2,0,6,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,551,        double[] tempArray = new double[size];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",4,0,0,1,2,0,8,0,0,12,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,554,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,555,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,570,        return contractionCriteria;,2,0,0,0,0,1,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,582,        if (index >= numElements) {,18,6,0,1,3,0,0,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,583,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,584,        } else if (index >= 0) {,4,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,585,            return internalArray[startIndex + index];,4,1,1,1,2,1,0,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,587,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,618,        return expansionFactor;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,629,        return expansionMode;,8,2,0,0,0,1,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,641,        return internalArray.length;,4,0,0,0,0,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,651,        return numElements;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,667,        return internalArray;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,676,"        checkContractExpand(contractionCriteria, getExpansionFactor());",0,0,0,2,4,0,6,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,677,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,678,            this.contractionCriteria = contractionCriteria;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,679,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,680,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,696,        if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,697,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,699,        if (index + 1 > numElements) {,4,2,0,1,3,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,700,            numElements = index + 1;,8,1,0,0,0,0,0,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,702,        if ((startIndex + index) >= internalArray.length) {,0,0,0,2,5,0,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,703,            expandTo(startIndex + (index + 1));,4,2,0,2,4,0,14,0,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,705,        internalArray[startIndex + index] = value;,12,5,0,1,2,0,4,0,0,22,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,706,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,720,"        checkContractExpand(getContractionCriteria(), expansionFactor);",0,0,0,2,4,0,6,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,722,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,723,            this.expansionFactor = expansionFactor;,6,0,0,0,0,1,2,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,724,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,725,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,4,2,0,0,1,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,737,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,742,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,743,            this.expansionMode = expansionMode;,4,0,0,0,0,0,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,744,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,745,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,760,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,777,        if (i < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,778,            throw new MathIllegalArgumentException(,6,2,0,0,1,0,0,0,0,9,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,785,        if ((startIndex + i) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,786,            expandTo(startIndex + i);,4,1,0,1,2,0,2,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,790,        numElements = i;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,791,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,803,            return (internalArray.length - numElements) > contractionCriteria;,0,0,0,1,2,1,0,0,0,4,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,817,        return startIndex;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,839,        MathUtils.checkNotNull(source);,6,0,0,1,2,0,16,0,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,840,        MathUtils.checkNotNull(dest);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,841,        synchronized(source) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,842,           synchronized(dest) {,2,0,0,1,3,0,0,0,0,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,843,               dest.initialCapacity = source.initialCapacity;,16,2,0,0,0,0,0,0,0,19,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,844,               dest.contractionCriteria = source.contractionCriteria;,8,0,0,0,0,0,0,0,0,9,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,845,               dest.expansionFactor = source.expansionFactor;,8,0,0,0,0,0,0,0,0,9,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,846,               dest.expansionMode = source.expansionMode;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,847,               dest.internalArray = new double[source.internalArray.length];,10,0,0,1,2,0,0,0,0,11,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",8,0,0,0,1,0,4,0,0,12,61,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,850,               dest.numElements = source.numElements;,8,0,0,0,0,0,0,0,0,9,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,851,               dest.startIndex = source.startIndex;,8,0,0,0,0,0,0,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,852,           },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,853,       },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,854,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,865,        ResizableDoubleArray result = new ResizableDoubleArray();,0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,866,"        copy(this, result);",0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,867,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,881,        if (object == this ) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,882,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,884,       if (object instanceof ResizableDoubleArray == false) {,2,1,0,1,3,0,0,2,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,885,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,887,       synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,888,           synchronized(object) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,889,               boolean result = true;,10,2,0,0,0,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,4,0,0,1,2,0,0,4,0,8,59,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,891,               result = result && (other.initialCapacity == initialCapacity);,14,2,0,1,2,0,0,0,0,19,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,892,               result = result && (other.contractionCriteria == contractionCriteria);,10,2,0,1,2,0,0,0,0,13,70,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,893,               result = result && (other.expansionFactor == expansionFactor);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,894,               result = result && (other.expansionMode == expansionMode);,2,0,0,1,2,0,0,0,0,2,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,895,               result = result && (other.numElements == numElements);,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,896,               result = result && (other.startIndex == startIndex);,10,2,0,1,2,0,0,0,0,13,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,897,               if (!result) {,10,2,1,1,3,1,0,0,0,23,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,898,                   return false;,4,0,0,0,0,1,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,900,"                   return Arrays.equals(internalArray, other.internalArray);",4,0,0,1,2,1,6,0,0,10,57,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,902,           },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,903,       },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,914,        int[] hashData = new int[7];,2,0,0,2,4,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,915,        hashData[0] = new Float(expansionFactor).hashCode();,4,1,1,3,6,0,0,0,0,10,52,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,916,        hashData[1] = new Float(contractionCriteria).hashCode();,2,0,1,3,6,0,2,2,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,917,        hashData[2] = expansionMode;,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,918,            hashData[3] = Arrays.hashCode(internalArray);,0,0,0,2,4,0,8,0,0,8,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,919,            hashData[4] = initialCapacity;,2,0,1,1,2,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,920,            hashData[5] = numElements;,2,0,1,1,2,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,921,            hashData[6] = startIndex;,2,0,1,1,2,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,922,        return Arrays.hashCode(hashData);,0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,2,1,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,50,"        super(pattern, arguments);",4,0,0,1,2,0,6,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,47,    },8,1,0,0,1,0,8,0,0,18,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,60,        long s = (long)x + (long)y;,8,1,1,2,4,1,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,16,4,0,1,3,0,0,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",10,0,0,1,2,1,2,2,0,15,79,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,64,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0,0,0,1,2,1,0,0,0,4,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,108,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,109,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,110,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,112,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,113,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,116,        if (k > n / 2) {,14,3,0,1,3,0,0,0,0,17,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,117,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,125,        long result = 1;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,126,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,128,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,131,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,133,        } else if (n <= 66) {,8,1,1,1,4,1,0,2,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,136,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,144,"                final long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,145,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,146,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,148,        } else {,2,0,0,0,2,0,4,0,0,7,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,152,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,153,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,154,"                final long d = gcd(i, j);",14,2,0,1,2,1,6,0,0,24,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,155,"                result = mulAndCheck(result / (j / d), i / d);",0,0,1,2,4,0,4,0,0,9,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,156,                i++;,8,1,1,0,0,0,0,0,0,19,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,186,"        ArithmeticUtils.checkBinomial(n, k);",2,1,0,1,2,0,12,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,187,        if ((n == k) || (k == 0)) {,14,5,0,3,7,1,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,188,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,190,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,191,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,193,        if (k > n/2) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,194,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,196,        if (n < 67) {,8,1,0,1,3,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,197,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,200,        double result = 1d;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,202,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,205,        return FastMath.floor(result + 0.5);,6,2,1,1,2,1,4,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,228,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,229,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,230,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,232,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,233,            return FastMath.log(n);,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,240,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,241,"            return FastMath.log(binomialCoefficient(n,k));",2,0,1,2,4,2,10,0,0,17,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,248,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",4,1,0,2,4,1,10,0,0,15,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,252,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,253,"            return binomialCoefficientLog(n, n - k);",0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,259,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,262,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,10,0,0,26,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,263,            logSum += FastMath.log(i);,10,2,0,1,2,0,6,0,0,19,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,267,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,268,            logSum -= FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,271,        return logSum;,22,1,0,0,0,2,0,0,0,26,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",12,0,0,0,1,0,4,2,0,18,77,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,304,            throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,327,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,328,            return factorial(n);,0,0,0,1,2,1,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0,1,0,3,6,1,14,0,0,15,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,341,        if (n < 0) {,4,1,0,1,3,0,0,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,348,        double logSum = 0;,4,0,0,0,0,1,2,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,349,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,350,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,352,        return logSum;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,385,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,386,        int v = q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,12,0,0,27,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,392,            return FastMath.abs(u) + FastMath.abs(v);,0,0,0,2,4,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,399,        if (u > 0) {,6,3,0,1,3,0,0,0,0,9,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,400,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,403,            v = -v;,8,0,0,0,0,0,0,0,0,11,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,409,            u /= 2;,4,0,0,0,0,0,2,2,0,9,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,410,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,413,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,425,            while ((t & 1) == 0) { // while t is even..,10,3,0,2,5,0,0,0,0,14,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,426,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,429,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,430,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,432,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,435,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,438,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,439,        return -u * (1 << k); // gcd is u*2^k,6,2,0,1,2,2,4,2,0,16,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,472,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,473,        long v = q;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,474,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0,0,0,3,7,0,0,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",10,1,0,0,1,1,0,2,0,14,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,486,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,487,            u = -u;,8,1,0,0,0,0,0,0,0,11,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,489,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,490,            v = -v;,6,0,0,0,0,1,4,2,0,15,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,493,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,8,0,0,21,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,496,            u /= 2;,8,1,0,0,0,0,0,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,497,            v /= 2;,4,0,0,0,0,0,0,0,0,5,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,498,            k++; // cast out twos.,4,0,0,0,0,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,500,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",8,0,0,0,1,0,0,2,0,11,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,512,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,516,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,517,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,519,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,522,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,525,        } while (t != 0);,6,1,0,1,3,0,4,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,526,        return -u * (1L << k); // gcd is u*2^k,10,3,0,1,2,1,0,0,0,13,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,552,        if (a == 0 || b == 0){,16,2,0,1,3,0,0,0,0,19,22,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,553,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0,0,0,3,6,0,0,0,0,9,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,556,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,560,        return lcm;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,586,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,587,            return 0;,10,2,0,0,0,2,0,0,0,13,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0,0,0,3,6,0,0,0,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,590,        if (lcm == Long.MIN_VALUE){,18,4,1,1,3,1,0,0,0,27,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,594,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,608,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,610,            throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,612,        return (int)m;,2,1,1,1,2,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,629,"            ret = mulAndCheck(b, a);",8,1,0,1,2,1,12,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,631,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,632,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,634,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,635,                        ret = a * b;,12,1,0,0,0,0,2,2,0,19,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,637,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,639,                } else if (b > 0) {,4,1,1,1,4,1,0,2,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,641,                    if (Long.MIN_VALUE / b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,642,                        ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,644,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,649,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,651,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,656,                if (a <= Long.MAX_VALUE / b) {,12,2,0,1,3,0,2,2,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,657,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,659,                    throw new MathArithmeticException();,0,0,0,1,2,0,4,2,0,6,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,663,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,666,        return ret;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,680,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",6,1,0,1,2,0,0,0,0,8,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,684,        return (int)s;,8,1,0,1,2,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,699,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,700,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,701,                ret = a - b;,16,2,0,0,0,0,0,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",8,0,0,1,2,0,0,2,0,11,80,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",2,0,0,1,2,1,2,0,0,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,709,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,721,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,725,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,727,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,728,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,729,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,731,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,732,            e = e >> 1;,8,1,0,0,0,0,0,2,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,751,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,752,        int k2p    = k;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,753,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,754,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,755,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,757,            k2p *= k2p;,10,1,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,758,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,761,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,773,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,778,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,779,        while (e != 0) {,6,1,0,1,3,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,780,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,781,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,783,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,784,            e = e >> 1;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,787,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,799,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,803,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,805,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,806,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,807,                result *= k2p;,14,3,0,0,0,0,0,0,0,18,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,809,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,810,            e = e >> 1;,6,1,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,813,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,825,        if (e < 0) {,4,2,1,1,3,0,6,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,829,        return k.pow(e);,0,0,0,1,2,1,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,841,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,4,2,0,12,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,845,        BigInteger result = BigInteger.ONE;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,846,        BigInteger k2p    = k;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,847,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,848,            if ((e & 0x1) != 0) {,8,3,0,2,5,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,849,                result = result.multiply(k2p);,8,1,0,1,2,1,6,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,851,            k2p = k2p.multiply(k2p);,4,1,0,1,2,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,855,        return result;,10,1,0,0,0,1,6,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,20,8,0,2,5,0,4,0,0,32,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,873,        BigInteger k2p    = k;,18,3,0,0,0,0,4,2,0,28,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,874,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,875,            if (e.testBit(0)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,876,                result = result.multiply(k2p);,12,3,0,1,2,0,6,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,879,            e = e.shiftRight(1);,2,0,0,1,2,0,4,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,900,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,904,            if (a < 0) {,6,1,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,907,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,908,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,910,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,921,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,928,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,940,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,944,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,947,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,956,        return (n > 0) && ((n & (n - 1)) == 0);,0,0,0,4,8,1,0,0,0,13,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,43,    public MathArithmeticException() {,4,2,0,1,3,1,0,0,0,7,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,44,        context = new ExceptionContext(this);,8,6,1,1,2,0,0,2,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,59,                            final TiesStrategy tiesStrategy) {,2,0,0,0,2,1,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,60,"        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);",6,0,0,1,2,0,0,2,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,61,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,76,            throw new NullArgumentException();,2,0,0,1,2,0,0,2,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,80,            throw new NoDataException();,0,0,0,1,2,0,0,2,0,2,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,37,        this(LocalizedFormats.NO_DATA);,4,0,0,1,2,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,92,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,93,        tiesStrategy = DEFAULT_TIES_STRATEGY;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,94,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,1,0,0,0,0,12,0,0,18,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,95,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,96,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,104,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,105,        this.tiesStrategy = tiesStrategy;,8,1,0,0,0,0,0,0,0,10,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,106,        nanStrategy = DEFAULT_NAN_STRATEGY;,6,0,0,0,0,1,8,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,107,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,116,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,117,        this.nanStrategy = nanStrategy;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,118,        tiesStrategy = DEFAULT_TIES_STRATEGY;,10,0,0,0,0,0,0,0,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,119,        randomData = null;,30,9,0,0,0,0,0,0,0,41,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,142,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,143,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,144,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,145,        randomData = new RandomDataImpl(randomGenerator);,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,146,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,158,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,159,        this.nanStrategy = nanStrategy;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,160,        this.tiesStrategy = TiesStrategy.RANDOM;,8,0,1,0,0,0,0,0,0,14,40,1,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,161,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,2,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,162,    },6,0,0,0,1,0,0,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,170,        return nanStrategy;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,179,        return tiesStrategy;,8,2,0,0,0,1,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,202,"                recodeNaNs(ranks, Double.POSITIVE_INFINITY);",4,0,0,1,2,0,4,0,0,8,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,203,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,205,"                recodeNaNs(ranks, Double.NEGATIVE_INFINITY);",8,0,0,1,2,0,4,2,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,206,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,208,                ranks = removeNaNs(ranks);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,209,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,214,                throw new MathInternalError();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,232,"                    resolveTie(out, tiesTrace);",0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,238,                tiesTrace.add(ranks[i].getPosition());,0,0,1,3,6,0,6,0,0,10,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,243,"            resolveTie(out, tiesTrace);",0,0,0,1,2,0,6,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,259,        if (!containsNaNs(ranks)) {,0,0,0,2,5,0,4,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,260,            return ranks;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,262,        IntDoublePair[] outRanks = new IntDoublePair[ranks.length];,6,0,0,2,4,0,0,4,0,10,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,263,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,264,        for (int i = 0; i < ranks.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,265,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,267,                for (int k = i + 1; k < ranks.length; k++) {,20,4,0,1,3,0,0,0,0,27,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,268,                    ranks[k] = new IntDoublePair(,0,0,1,1,3,0,0,2,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,272,                outRanks[j] = new IntDoublePair(,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,274,                j++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,277,        IntDoublePair[] returnRanks = new IntDoublePair[j];,2,0,1,2,4,0,0,4,0,8,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,278,"        System.arraycopy(outRanks, 0, returnRanks, 0, j);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,279,        return returnRanks;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,289,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,290,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,291,                ranks[i] = new IntDoublePair(,0,0,1,1,3,0,0,2,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,295,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,304,        for (int i = 0; i < ranks.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,305,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,306,                return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,309,        return false;,2,0,0,0,0,1,10,0,0,13,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,329,        final double c = ranks[tiesTrace.get(0)];,2,0,1,2,4,1,4,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,332,        final int length = tiesTrace.size();,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,336,"                fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);",4,4,0,2,4,0,6,0,0,14,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,337,                break;,2,0,1,0,0,0,12,0,0,19,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,339,"                fill(ranks, tiesTrace, c + length - 1);",6,2,1,1,2,0,6,0,0,17,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,340,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,342,"                fill(ranks, tiesTrace, c);",0,0,0,1,2,0,8,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,343,                break;,2,2,0,0,0,0,12,0,0,16,6,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,345,                Iterator<Integer> iterator = tiesTrace.iterator();,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,346,                long f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,347,                while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,348,                    ranks[iterator.next()] =,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,354,                iterator = tiesTrace.iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,355,                f = FastMath.round(c);,8,1,0,1,2,0,6,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,356,                int i = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,357,                while (iterator.hasNext()) {,4,0,0,2,5,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,358,                    ranks[iterator.next()] = f + i++;,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,362,                throw new MathInternalError();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,364,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,374,        Iterator<Integer> iterator = tiesTrace.iterator();,2,0,0,1,2,1,4,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,375,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,376,            data[iterator.next()] = value;,2,0,1,2,4,0,8,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,378,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,390,        Iterator<Integer> iterator = nanPositions.iterator();,0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,391,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,392,            ranks[iterator.next().intValue()] = Double.NaN;,4,0,1,3,6,0,6,0,0,13,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,395,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,407,                out.add(Integer.valueOf(i));,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,6,0,0,1,3,2,0,6,0,14,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,62,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,63,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0,0,0,0,1,0,0,0,0,1,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,107,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,108,"            throw new OutOfRangeException(p, 0, 1);",6,4,0,1,2,0,0,2,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,111,        double lowerBound = getSupportLowerBound();,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,112,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,113,            return lowerBound;,4,1,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,116,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,117,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,118,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,122,        final double sig = FastMath.sqrt(getNumericalVariance());,4,0,0,2,4,1,6,0,0,11,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,128,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,12,4,0,2,4,0,4,0,0,21,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,131,                lowerBound = -1.0;,2,0,0,0,0,0,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,132,                while (cumulativeProbability(lowerBound) >= p) {,0,0,0,2,5,0,0,0,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,133,                    lowerBound *= 2.0;,6,1,0,0,0,0,12,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,138,        if (upperBound == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,139,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,142,                upperBound = 1.0;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,143,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,144,                    upperBound *= 2.0;,8,0,0,0,0,0,0,0,0,10,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,156,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,161,        if (!isSupportConnected()) {,0,0,0,2,5,0,2,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,163,            final double dx = getSolverAbsoluteAccuracy();,8,1,0,1,2,1,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,164,            if (x - dx >= getSupportLowerBound()) {,0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,165,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,166,                if (cumulativeProbability(x - dx) == px) {,6,2,0,2,5,0,2,0,0,10,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,167,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,168,                    while (upperBound - lowerBound > dx) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,169,                        final double midPoint = 0.5 * (lowerBound + upperBound);,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,170,                        if (cumulativeProbability(midPoint) < px) {,4,1,0,2,5,0,4,0,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,171,                            lowerBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,173,                            upperBound = midPoint;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,175,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,176,                    return upperBound;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,180,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,191,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,4,0,0,6,30,1,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,196,        randomData.reSeed(seed);,8,2,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,208,        return randomData.nextInversionDeviate(this);,0,0,0,1,2,1,4,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,218,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",4,0,0,0,1,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,222,        double[] out = new double[sampleSize];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,223,        for (int i = 0; i < sampleSize; i++) {,8,1,1,1,3,0,2,0,0,25,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,224,            out[i] = sample();,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,226,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,90,"        this(0, 1);",0,0,0,1,2,0,4,0,0,5,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,91,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,99,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,108,        return standardDeviation;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,124,        final double x0 = x - mean;,12,2,0,0,0,1,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,125,        final double x1 = x0 / standardDeviation;,12,2,0,0,0,1,0,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,126,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,8,3,0,2,4,1,4,0,0,16,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,139,            return dev < 0 ? 0.0d : 1.0d;,2,1,0,0,0,1,10,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,148,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,149,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,152,        final double denom = standardDeviation * SQRT2;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,153,        final double v0 = (x0 - mean) / denom;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,154,        final double v1 = (x1 - mean) / denom;,2,1,0,1,2,0,2,0,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,155,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,1,2,1,8,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,161,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,170,        return getMean();,0,0,0,1,2,1,2,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,179,        final double s = getStandardDeviation();,2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,180,        return s * s;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,193,        return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,206,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,211,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,216,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,227,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,233,"        return randomData.nextGaussian(mean, standardDeviation);",10,1,0,1,2,1,8,0,0,20,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",12,0,0,1,2,0,0,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,47,    },8,2,0,0,1,1,0,0,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,63,        this.lo = lo;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,64,        this.hi = hi;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,71,        return lo;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,4,0,0,0,0,1,2,4,0,10,30,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,2,0,0,1,2,1,8,0,0,11,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,4,1,0,0,0,1,0,0,0,6,49,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,8,5,0,3,6,1,0,0,0,13,84,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,2,0,0,0,0,0,0,0,0,3,8,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,3,0,0,0,8,37,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,0,0,0,1,2,0,0,0,0,3,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,2,0,0,0,0,0,0,0,0,4,37,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,0,0,0,0,0,1,0,0,0,1,45,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,0,0,0,0,0,0,0,0,0,0,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,10,3,1,1,2,1,0,0,0,18,36,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,4,1,0,0,0,1,0,0,0,5,55,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,8,1,0,0,0,1,2,0,0,14,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",2,0,0,4,8,0,14,0,0,16,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },4,0,0,0,1,1,0,0,0,5,1,8,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,6,0,0,1,2,1,6,2,0,15,72,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,8,0,0,8,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,1,0,0,0,0,4,0,0,5,6,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,10,1,0,2,4,1,4,0,0,16,92,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,4,1,0,4,8,1,8,2,0,15,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,8,5,0,1,2,1,6,0,0,20,54,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,0,0,0,3,6,1,0,0,0,10,88,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,0,1,0,1,2,0,6,0,0,7,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",0,0,0,2,5,1,6,2,0,9,73,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,6,1,0,1,2,0,6,0,0,13,21,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,1,1,3,1,0,0,0,9,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,0,0,0,0,4,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,2,0,0,1,2,1,2,0,0,5,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,4,0,0,4,30,5,1.0,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,0,0,0,3,7,0,0,0,0,10,67,4,0.5,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,16,2,0,1,2,0,0,0,0,19,22,1,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,12,1,0,1,3,0,0,0,0,14,40,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,0,0,0,1,3,0,0,0,0,4,20,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,6,0,0,1,2,1,12,10,0,29,53,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,0,0,0,3,6,0,10,0,0,10,60,7,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,2,0,0,0,0,1,0,0,0,2,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",2,0,1,1,3,0,0,0,0,7,86,3,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,2,1,0,2,5,0,4,0,0,7,43,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,8,0,0,0,0,1,4,0,0,14,31,3,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",4,0,0,1,2,0,0,0,0,4,36,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,12,2,0,1,3,0,0,2,0,18,27,3,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,4,0,9,62,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,6,0,0,0,0,0,4,0,0,12,31,3,0.4,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",0,0,0,1,3,0,0,0,0,4,52,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",6,0,0,1,2,0,8,0,0,14,56,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",0,0,0,1,2,0,0,0,0,3,58,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,4,0,0,2,5,0,12,0,0,16,34,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,6,0,0,2,5,1,6,0,0,13,34,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,8,1,0,0,0,0,0,0,0,10,30,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,0,0,0,1,2,0,0,0,0,3,36,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,2,0,0,1,2,0,6,0,0,9,22,8,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,2,0,0,1,2,0,6,0,0,9,22,8,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,8,1,0,0,0,0,0,0,0,10,18,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",4,0,0,2,4,0,6,0,0,10,46,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,0,0,0,9,55,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,2,0,0,1,2,3,0,4,0,9,57,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,2,0,0,1,2,3,0,4,0,9,57,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,0,1,0,1,2,0,8,0,0,9,58,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,4,1,0,1,2,3,0,4,0,13,64,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0,0,0,1,2,0,0,0,0,3,68,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",0,0,0,1,2,0,0,0,0,3,66,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,3,0,4,0,9,69,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0,0,0,1,2,0,0,0,0,3,71,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",2,0,0,1,2,3,0,4,0,9,69,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,2,0,0,1,2,3,4,2,0,11,70,2,0.05405,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",10,4,0,5,10,0,0,0,0,15,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",6,0,0,3,6,0,0,0,0,8,29,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",4,0,0,4,8,0,10,2,0,17,108,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",8,0,0,1,2,1,0,0,0,10,89,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0,0,0,3,6,0,0,0,0,9,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",10,1,0,2,4,0,0,0,0,13,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,1,1,2,0,2,0,0,14,95,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,0,0,0,0,6,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,0,6,2,0,13,112,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,0,0,1,2,0,6,2,0,13,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",8,0,0,3,6,0,0,0,0,10,109,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",4,0,0,3,6,3,0,0,0,8,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",2,0,0,1,2,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,4,0,0,7,71,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,1,3,6,0,4,0,0,12,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,0,0,0,0,6,119,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,8,0,0,14,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0,0,0,1,2,0,0,0,0,3,88,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",4,1,0,1,2,1,0,0,0,8,71,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,8,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",6,0,0,2,4,0,10,0,0,17,54,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",4,0,0,2,4,0,8,0,0,13,73,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,3,0,2,4,0,12,0,0,20,62,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0,0,0,3,6,0,0,0,0,9,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,120,"    INDEX(""index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",8,1,0,2,4,0,0,0,0,11,59,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0,0,0,1,2,0,0,0,0,3,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0,0,0,3,6,0,0,0,0,9,105,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",20,3,0,2,4,0,0,2,0,26,103,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",0,0,0,2,4,0,0,0,0,6,50,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,1,1,2,0,0,0,0,12,96,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,4,0,0,7,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",4,0,1,4,8,0,2,0,0,21,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,2,0,5,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",6,1,0,3,6,0,4,2,0,15,62,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,162,"    MUTATION_RATE(""mutation rate ({0})""),",0,0,0,3,6,0,0,0,0,9,37,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0,0,0,2,4,0,0,0,0,6,43,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0,0,0,2,4,0,0,0,0,6,92,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",10,2,0,2,4,1,0,0,0,14,55,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",6,1,1,3,6,1,0,0,0,14,82,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,1,3,6,0,0,0,0,7,43,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,175,"    START_POSITION(""start position ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,50,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0,0,0,4,8,0,0,0,0,12,131,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0,0,0,1,2,0,0,0,0,3,100,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",4,1,0,2,4,0,0,0,0,6,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,4,0,0,7,93,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",4,0,0,6,12,0,0,0,0,5,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",4,0,1,1,2,0,0,0,0,13,26,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,198,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,200,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0,0,0,1,2,0,0,0,0,3,73,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,0,0,0,6,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,202,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",12,2,0,3,6,4,4,0,0,23,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",4,0,0,3,6,0,0,0,0,6,66,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,208,"    LENGTH(""length ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,34,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,4,0,0,4,49,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,30,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,0,0,3,6,1,6,2,0,14,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",4,0,0,3,6,3,0,0,0,8,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,0,0,6,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",4,0,0,3,6,0,0,0,0,5,63,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",8,1,0,6,12,0,0,0,0,10,104,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",8,1,0,8,16,0,0,0,0,11,134,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,240,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",0,0,0,4,8,0,0,0,0,12,82,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0,0,0,1,2,0,0,0,0,3,99,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",8,1,0,1,2,0,0,0,0,11,70,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",4,1,0,1,2,0,0,0,0,6,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,1,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,80,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",4,0,0,1,2,0,0,0,0,6,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",4,0,0,1,2,0,0,0,0,6,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,257,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0,0,0,1,2,0,0,0,0,3,48,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",16,2,0,1,2,0,0,0,0,20,40,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,98,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",6,1,0,4,8,0,0,0,0,8,150,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,6,0,0,9,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0,0,0,2,4,0,0,0,0,6,84,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0,0,0,3,6,0,0,0,0,9,87,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",6,0,0,4,8,0,6,2,0,16,101,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,8,0,0,11,150,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0,0,0,5,10,0,0,0,0,15,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",2,0,0,5,10,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",0,0,0,5,10,0,0,0,0,15,50,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,284,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0,0,0,1,2,0,0,0,0,3,63,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",10,1,0,1,2,0,0,0,0,13,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0,0,0,3,6,0,0,0,0,9,68,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",6,1,0,3,6,1,0,0,0,8,62,6,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",8,1,0,3,6,0,0,0,0,10,99,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,292,"    POLYNOMIAL(""polynomial""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,293,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0,0,0,4,8,0,0,0,0,12,130,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,294,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,295,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",0,0,0,4,8,0,0,0,0,12,109,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,297,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,298,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",4,0,0,1,2,1,0,0,0,6,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,301,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,302,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,8,0,0,11,40,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",6,1,1,5,10,0,0,0,0,12,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,305,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,306,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,1,1,2,0,16,0,0,21,66,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,6,0,0,9,49,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,1,3,6,0,0,0,0,9,87,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",6,1,0,5,10,0,0,0,0,8,97,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,317,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",4,0,0,3,6,0,0,0,0,5,120,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",6,1,1,1,2,0,0,0,0,13,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,6,0,0,9,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",6,0,0,3,6,0,4,0,0,11,117,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",6,0,0,5,10,0,0,0,0,8,107,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0,0,0,1,2,0,0,0,0,3,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",10,1,0,3,6,0,0,0,0,13,64,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",8,0,1,3,6,0,0,0,0,17,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,82,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",4,1,0,1,2,0,0,0,0,6,23,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,356,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,39,public enum LocalizedFormats implements Localizable {,0,0,0,0,1,0,0,0,0,1,53,4,0.04706,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,4,0,0,1,2,1,6,0,0,10,18,5,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,6,1,0,1,2,1,4,0,0,11,18,3,4.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,0,0,1,2,2,4,2,0,15,44,1,2.0,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,4,1,1,1,3,0,0,0,0,9,21,3,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,1.77778,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,12,1,0,1,3,0,0,0,0,15,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,1,0,1,2,0,4,0,0,7,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,0,0,0,1,2,1,0,2,0,2,50,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",14,0,0,1,2,0,0,0,0,14,83,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,10,1,0,1,3,0,0,0,0,12,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,0,0,1,2,4,0,0,0,0,7,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,2,0,0,2,4,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,10,1,0,1,3,0,0,0,0,12,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,1,2,4,0,0,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,4,0,0,1,2,0,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,2,0,0,0,0,0,8,0,0,12,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",10,0,0,0,1,1,0,0,0,12,54,1,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,12,1,0,0,0,0,0,0,0,15,17,3,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },6,3,0,0,1,0,10,0,0,19,1,5,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,2,0,0,2,5,3,0,0,0,5,37,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,2,0,0,2,5,3,0,0,0,5,44,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,4,0.03125,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,4,0,0,2,4,0,4,0,0,8,54,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0,0,0,1,2,0,0,0,0,3,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,10,0,0,10,45,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,4,0,0,0,0,1,4,0,0,8,11,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",6,1,0,1,2,0,8,0,0,15,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,0,0,0,1,2,0,6,0,0,6,39,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,2,0,0,1,2,0,0,2,0,4,41,10,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",12,0,0,1,2,1,0,0,0,12,53,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,2,0,0,1,4,0,0,2,0,4,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,0,0,0,2,4,0,0,0,0,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,0,0,0,0,5,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,14,1,0,0,0,0,0,0,0,17,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,2,1,0,1,3,0,6,0,0,9,23,3,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",8,1,1,1,2,0,0,0,0,14,65,1,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",0,0,0,1,2,1,0,0,0,4,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",0,0,0,1,2,1,0,0,0,4,51,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,8,1,0,1,3,0,0,0,0,9,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,2,0,0,0,0,0,0,0,0,3,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,14,3,0,1,3,0,0,0,0,18,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,1,3,7,0,4,0,0,8,31,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,0,0,1,3,7,0,4,0,0,8,36,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,2,3,1,2,5,0,0,0,0,9,21,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,2,2,1,2,5,0,0,0,0,9,50,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,2,0,0,0,0,0,0,0,0,4,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,2,0,0,1,3,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,10,0,0,10,47,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,10,0,0,10,42,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,2,0,0,1,2,3,2,4,0,11,8,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,6,1,0,1,4,0,0,0,0,9,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,2,0,0,1,2,0,0,4,0,6,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",4,1,0,1,2,0,12,0,0,18,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",0,0,0,2,5,0,10,0,0,10,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,2,1,0,1,4,0,0,0,0,3,24,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,14,2,0,0,0,0,0,0,0,17,17,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,4,1,1,1,2,0,0,0,0,10,27,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,16,1,0,1,3,3,0,4,0,25,42,2,0.5,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,2,0,0,1,3,0,0,0,0,2,22,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,12,5,0,3,6,0,0,0,0,18,60,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",0,0,0,2,5,0,16,0,0,16,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,2,0,0,1,2,0,0,4,0,6,20,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",2,0,0,1,2,0,10,0,0,12,49,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",4,1,0,1,2,0,12,0,0,17,67,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,4,2,1,3,6,0,0,0,0,15,47,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,6,2,0,1,2,1,0,0,0,8,33,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,2,0,0,0,0,0,0,0,0,3,10,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,4,0,0,4,15,7,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01563,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },4,1,0,0,1,0,0,0,0,6,1,6,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,0,0,0,1,2,0,0,0,0,3,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,4,3,0,1,3,0,0,0,0,7,17,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,8,0,1,2,4,3,0,4,0,19,43,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,0,0,0,1,2,0,4,0,0,4,21,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,6,1,0,3,7,0,4,0,0,12,82,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,10,2,0,2,5,0,2,0,0,15,55,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,4,1,0,1,2,0,2,0,0,7,44,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,1,0,2,5,0,4,0,0,6,31,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,6,0,0,7,33,8,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,0,0,0,3,6,0,10,0,0,10,48,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,2,0,0,0,0,0,0,0,0,3,32,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,10,3,0,1,3,0,0,0,0,13,16,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },2,0,0,0,1,0,0,4,0,6,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },0,0,0,0,1,0,0,0,0,1,1,4,9.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,2,0,0,0,0,0,0,0,8,25,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,6,1,0,0,0,0,0,0,0,7,20,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,6,0,0,0,0,0,0,0,0,7,8,5,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,18,5,0,0,0,0,0,0,0,24,33,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,8,2,0,0,0,0,2,2,0,15,18,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0,0,0,2,4,0,0,0,0,6,30,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,8,2,1,2,4,0,0,0,0,15,30,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,10,2,0,0,0,0,0,4,0,17,18,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,2,1,0,0,0,0,6,0,0,9,13,11,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,12,2,0,0,0,0,4,0,0,21,18,5,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,1.28571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,1,4,0,0,18,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,4,0,0,0,0,0,0,0,0,5,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,4,0,0,0,0,0,0,0,0,5,25,4,0.03333,1,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,6,3,0,0,0,0,28,0,0,39,31,3,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },2,0,0,0,1,0,0,0,0,2,1,7,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",6,0,0,1,3,3,0,0,0,9,81,2,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,0,0,0,0,0,1,0,0,0,1,26,4,2.0,1,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,18,0,0,18,49,3,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,0,0,0,0,0,1,0,0,0,1,11,4,2.0,1,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,10,0,0,1,3,1,0,8,0,19,28,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,2,0,0,1,2,1,0,8,0,11,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,2,0,0,3,6,1,0,8,0,11,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,2,0,1,2,0,0,0,0,9,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",12,1,0,1,2,0,0,0,0,15,60,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",4,1,0,1,2,0,0,0,0,6,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",6,0,0,2,4,0,0,0,0,7,108,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,6,0,0,11,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,6,0,0,9,55,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",8,1,0,1,2,0,0,0,0,11,52,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",0,0,0,1,2,0,0,0,0,3,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,8,0,0,11,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0,0,0,2,4,0,0,0,0,6,119,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0,0,0,4,8,0,0,0,0,12,78,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,1,0,3,6,0,4,0,0,8,77,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",4,0,0,2,4,0,0,0,0,6,79,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,108,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,6,0,0,9,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,64,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",4,1,1,2,4,0,0,0,0,11,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,129,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0,0,0,2,4,0,0,0,0,6,66,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,4,0,0,7,124,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",22,2,0,4,8,3,0,0,0,31,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0,0,0,1,2,0,0,0,0,3,70,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",6,1,1,3,6,0,0,0,0,11,58,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0,0,0,2,4,0,0,0,0,6,81,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,6,0,0,11,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",10,1,0,3,6,0,0,0,0,14,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,1,4,8,0,0,0,0,8,49,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",4,0,0,5,10,0,0,0,0,6,93,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0,0,0,6,12,0,0,0,0,18,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,1,1,3,6,0,0,0,0,10,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",8,1,0,1,2,0,0,0,0,10,61,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",4,0,1,1,2,0,0,0,0,8,80,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",24,8,1,4,8,3,0,0,0,40,78,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,1,3,6,0,0,0,0,7,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",0,0,0,2,4,0,0,0,0,6,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,4,0,0,8,65,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",12,4,0,2,5,0,0,0,0,18,53,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",12,2,0,3,6,0,0,0,0,16,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",0,0,0,2,4,0,0,0,0,6,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",4,0,0,6,12,0,0,0,0,5,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",10,1,0,1,2,0,2,2,0,17,45,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0,0,0,8,16,0,0,0,0,24,134,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,8,0,0,12,35,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",8,7,0,4,8,0,0,0,0,16,82,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0,0,0,1,2,0,0,0,0,3,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,246,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,251,"    NUMERATOR(""numerator""), /* keep */",6,1,1,1,2,1,0,0,0,14,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,252,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",16,2,0,1,2,0,0,0,0,19,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,255,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,256,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,6,0,0,9,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,258,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,97,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,259,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,262,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,263,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,1,1,2,4,0,0,0,0,13,84,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,266,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0,0,0,3,6,0,0,0,0,9,87,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,269,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",4,0,0,1,2,0,0,0,0,6,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",2,0,0,1,2,0,0,0,0,3,63,2,0.25,0,0
