dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,587,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,590,        if (lcm == Long.MIN_VALUE){,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",10,1,0,0,1,0,0,2,0,13,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,594,        return lcm;,8,2,1,0,0,2,0,0,0,13,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,608,        long m = ((long)x) * ((long)y);,0,0,0,4,8,0,0,0,0,12,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,610,            throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,612,        return (int)m;,8,3,0,1,2,1,6,0,0,18,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,629,"            ret = mulAndCheck(b, a);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,631,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,632,                if (b < 0) {,0,0,0,1,3,0,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,634,                    if (a >= Long.MAX_VALUE / b) {,14,3,0,1,3,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,635,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,637,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,639,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,641,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,6,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,642,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,644,                        throw new MathArithmeticException();,2,1,0,1,2,0,0,2,0,5,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,649,                    ret = 0;,8,2,0,0,0,0,0,0,0,11,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,651,            } else if (a > 0) {,4,2,1,1,4,0,0,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,656,                if (a <= Long.MAX_VALUE / b) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,657,                    ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,659,                    throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,663,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,666,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,680,        long s = (long)x - (long)y;,2,0,0,2,4,0,4,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,684,        return (int)s;,12,2,0,1,2,1,0,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,699,        if (b == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,700,            if (a < 0) {,6,1,1,1,3,2,2,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,701,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",4,1,0,1,2,0,0,0,0,5,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,709,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,721,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",2,0,0,1,2,0,0,0,0,2,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,725,        int result = 1;,8,2,0,0,0,1,6,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,727,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,728,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,729,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,731,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,732,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",18,3,0,1,2,0,0,2,0,23,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,751,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,752,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,753,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,754,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,755,                result *= k2p;,8,1,0,0,0,0,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,757,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,758,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,761,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,773,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,778,        long k2p    = k;,6,1,0,0,0,0,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,779,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,780,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,781,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,783,            k2p *= k2p;,8,0,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,784,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,787,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,799,        if (e < 0) {,10,3,1,1,3,0,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,803,        long result = 1l;,2,0,0,0,0,0,2,2,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,805,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,806,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,807,                result *= k2p;,6,1,0,0,0,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,809,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,810,            e = e >> 1;,14,3,0,0,0,1,0,0,0,19,11,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,813,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,825,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",4,2,0,1,2,0,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,829,        return k.pow(e);,0,0,0,1,2,1,6,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,841,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,845,        BigInteger result = BigInteger.ONE;,6,0,1,0,0,0,4,2,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,846,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,847,        while (e != 0) {,4,1,1,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,848,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,849,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,851,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,855,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,873,        BigInteger k2p    = k;,16,4,0,0,0,0,0,2,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,874,        while (!BigInteger.ZERO.equals(e)) {,0,0,0,2,5,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,875,            if (e.testBit(0)) {,0,0,0,2,5,0,4,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,876,                result = result.multiply(k2p);,4,1,0,1,2,0,6,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,12,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,879,            e = e.shiftRight(1);,4,0,0,1,2,0,4,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,900,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,904,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,907,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,908,                        ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,910,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,921,                if (a <= Long.MAX_VALUE - b) {,12,2,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,928,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,940,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,944,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,947,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,956,        return (n > 0) && ((n & (n - 1)) == 0);,22,12,0,4,8,1,8,0,0,42,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,48,    },8,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,68,"        super(specific, wrong, min);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,46,"        super(pattern, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,50,        this(boundIsAllowed ?,10,1,0,0,1,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3687,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3701,                LN_MANT = FastMathLiteralArrays.loadLnMant();,4,1,1,1,2,0,4,0,0,19,45,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3703,        },4,0,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3654,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3680,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,2,0,0,1,2,0,4,0,0,7,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3681,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3683,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3615,    private static class ExpIntTable {,4,1,1,0,1,2,0,0,0,10,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3647,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3648,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,12,3,1,1,2,1,4,0,0,24,54,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3650,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,0,0,4,9,0,0,0,0,13,86,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,63,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,0,0,0,0,0,1,0,0,0,1,11,4,2.0,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,0,0,0,0,0,0,0,0,0,0,17,4,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,8,0,0,0,0,0,0,0,0,10,26,3,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,1.8,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,1.33333,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,        int perturb = perturb(hash);,0,0,0,1,2,0,0,0,0,3,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,        int j = index;,0,0,0,0,0,0,0,0,0,0,14,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,6,1,0,0,0,1,0,0,0,8,25,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,        return (j << 2) + j + perturb + 1;,2,0,0,1,2,1,4,0,0,7,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,        final int hash  = hashOf(key);,0,0,0,1,2,0,8,0,0,8,30,7,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,        keys[index]   = 0;,0,0,1,1,2,0,0,0,0,5,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,10,4,0,1,2,0,12,0,0,27,24,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,8,1,1,1,2,1,4,0,0,19,38,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,2,0,0,0,0,0,0,0,0,3,7,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,592,            entries.remove(index);,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,82,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,0,0,0,2,5,0,0,0,0,7,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,10,5,0,0,0,1,6,0,0,23,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,0,0,0,1,2,0,0,0,0,3,52,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,0,0,0,2,4,0,12,0,0,12,51,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",6,0,0,1,2,0,6,0,0,13,71,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,18,7,0,1,2,4,6,0,0,35,51,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,14,2,0,0,0,1,0,0,0,18,47,0,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",0,0,0,1,2,1,0,0,0,4,59,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,1,1,0,1,0,2,0,0,8,1,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",0,0,0,1,2,1,0,0,0,4,42,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,0,0,0,0,1,0,0,0,0,1,74,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,4,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,0,0,0,2,4,0,0,0,0,6,55,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,14,0,0,1,3,3,0,0,0,18,39,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,1,0,0,0,7,41,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,4,0,0,0,0,0,4,4,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,212,                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,4,1,0,1,2,0,18,2,0,26,19,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,2,0,0,2,4,0,0,0,0,2,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,0,0,0,0,0,0,0,0,0,0,41,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,4,3,0,3,6,0,0,0,0,7,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,2,0,0,3,6,1,6,0,0,9,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,4,0,0,1,3,0,0,0,0,4,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,0,0,0,0,0,0,0,0,0,0,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",0,0,0,2,5,0,0,0,0,7,61,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,0,0,0,3,6,0,0,0,0,9,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,11,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,0,0,0,2,5,0,0,0,0,7,58,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,2,0,1,1,3,1,0,0,0,7,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",0,0,0,1,2,0,6,0,0,6,31,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,387,        if (nanPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,388,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,18,4,0,1,3,0,0,0,0,23,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,410,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,53,    protected AbstractRealDistribution() { },0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,8,0,0,0,0,1,4,0,0,15,73,0,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },2,0,0,0,1,0,0,0,0,3,1,5,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,6,0,0,0,1,1,0,0,0,7,37,1,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,8,0,0,0,0,2,6,0,0,17,23,3,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },2,0,0,0,1,0,2,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,69,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,2,0,1,2,0,0,0,0,4,55,6,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,0,0,0,2,5,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,16,5,0,3,6,1,4,0,0,27,62,0,1.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,8,1,0,0,0,1,0,2,0,13,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,169,    },12,0,0,0,1,0,0,4,0,19,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,1,4,0,0,11,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,2,1,0,1,3,0,8,0,0,11,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,12,4,0,1,2,1,6,0,0,23,18,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,6,0,0,1,2,1,4,4,0,16,37,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,158,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,2,0,0,0,1,2,4,0,0,8,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,10,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,14,4,1,1,2,3,4,0,0,36,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3776,        },4,2,0,0,1,0,10,0,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,2,2,0,2,5,0,12,0,0,17,56,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,10,2,0,1,2,4,0,0,0,16,44,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,8,2,1,1,2,3,0,0,0,16,44,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,10,1,0,1,2,3,0,0,0,16,47,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,6,3,0,2,5,3,0,0,0,13,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,2,0,0,1,3,1,0,0,0,3,14,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,14,2,0,1,2,2,4,2,0,26,18,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,4,1,0,1,3,0,0,0,0,5,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,3,0,0,0,5,71,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,2,0,0,2,64,9,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,8,2,0,0,0,0,0,0,0,11,37,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,3,0,2,0,21,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,4,0,0,0,0,0,0,0,0,5,63,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",2,0,0,1,2,1,4,0,0,9,20,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,15,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,14,6,0,2,5,0,10,0,0,30,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,0,0,5,10,0,0,0,0,3,73,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1215,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1218,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1221,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1224,            double xb = ab;,0,0,0,0,0,0,8,0,0,8,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1227,            double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,12,3,0,1,2,0,4,0,0,20,59,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,14,4,0,0,0,0,0,0,0,20,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1230,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1238,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1239,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1241,                tmp = aa * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,24,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1242,                ya = aa + tmp - tmp;,2,0,0,0,0,0,0,0,0,3,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1243,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1249,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1250,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1251,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1264,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1265,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1266,        } else {,2,0,0,0,2,0,0,0,0,4,8,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1269,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1270,            lnza = lnza * epsilon + 0.19999954120254515;,10,1,0,0,0,0,0,0,0,12,44,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1274,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,6,1,1,0,0,0,0,0,0,14,22,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1292,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1294,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,8,1,0,0,0,0,0,0,0,11,10,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1301,        a = c;,10,2,0,0,0,0,0,0,0,12,6,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1304,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1305,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1307,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,4,1,1,1,2,0,2,0,0,10,15,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1310,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1312,        b = b + d;,14,1,0,0,0,0,0,0,0,16,10,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1316,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1317,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,16,6,1,1,2,0,0,0,0,30,14,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1321,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1324,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,8,3,0,2,4,2,8,4,0,26,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1422,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1431,        if (x == 0) {,0,0,0,1,3,0,12,0,0,12,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1456,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1467,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,12,1,0,1,3,1,0,0,0,14,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,6,0,0,7,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1517,        if (x < 0) {,0,0,1,1,3,0,0,0,0,6,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1534,        if (y < 8e298 && y > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1535,            double tmp1 = y * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1536,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1537,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1538,        } else {,8,2,0,0,2,0,0,0,0,11,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",2,0,0,1,2,1,6,0,0,9,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1551,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1552,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1555,        double tmp1 = lna * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1556,        double tmp2 = lna + tmp1 - tmp1;,10,2,0,0,0,1,0,0,0,13,32,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1557,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1558,        lna = tmp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1561,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1564,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1565,        lnb = -(lna - aa - ab);,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1567,        double z = 1.0 / 120.0;,4,1,0,0,0,0,4,2,0,11,23,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1568,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1569,        z = z * lnb + (1.0 / 6.0);,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1570,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1571,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1572,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1574,"        final double result = exp(lna, z, null);",6,1,1,1,2,1,6,0,0,18,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1576,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3334,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3342,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3343,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3347,        if (y == 0) {,2,0,0,1,3,0,0,0,0,3,13,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3351,        return y;,2,0,1,0,0,1,0,0,0,7,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3366,        if (y == x) {,6,1,1,1,3,0,0,0,0,10,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3367,            return y;,4,0,0,0,0,1,0,0,0,4,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3780,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3796,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,93,    private float contractionCriteria = 2.5f;,8,0,1,0,0,2,0,2,0,16,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,103,    private float expansionFactor = 2.0f;,4,0,0,0,0,1,0,0,0,6,37,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,109,    private int expansionMode = MULTIPLICATIVE_MODE;,4,0,0,0,0,1,0,0,0,5,48,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,115,    private int initialCapacity = 16;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,126,    private int numElements = 0;,2,0,0,0,0,1,0,0,0,3,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,134,    private int startIndex = 0;,2,0,0,0,0,1,0,0,0,3,27,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,160,    public ResizableDoubleArray(int initialCapacity) {,4,0,0,1,3,1,0,0,0,5,50,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,161,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,162,        internalArray = new double[this.initialCapacity];,4,0,0,1,2,0,0,0,0,5,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,163,    },2,0,0,0,1,0,0,0,0,3,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,301,        numElements++;,2,0,0,0,0,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,302,        if ((startIndex + numElements) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,303,            expand();,0,0,0,1,2,0,8,0,0,8,9,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,305,        internalArray[startIndex + (numElements - 1)] = value;,2,0,0,2,4,0,0,2,0,5,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,306,        if (shouldContract()) {,0,0,0,2,5,0,2,0,0,2,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,307,            contract();,0,0,0,1,2,0,2,0,0,2,11,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,309,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,432,        double[] tempArray = new double[numElements + 1];,4,1,0,2,4,0,0,0,0,5,49,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,435,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,1,2,0,12,0,0,12,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,436,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,439,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,440,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,532,        int newSize = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,8,0,0,13,43,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,534,            newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);,10,1,1,2,4,1,4,0,0,21,70,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,538,        double[] tempArray = new double[newSize];,2,0,1,2,4,0,0,0,0,4,41,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",4,0,0,1,2,0,8,0,0,12,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,542,        internalArray = tempArray;,8,1,0,0,0,1,0,0,0,11,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,543,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,599,        double[] elementArray = new double[numElements];,16,3,1,2,4,0,2,0,0,25,48,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",8,1,0,0,1,1,10,0,0,20,61,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,602,        return elementArray;,2,0,0,0,0,1,0,0,0,2,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,755,        if (initialCapacity > 0) {,4,1,0,1,3,0,0,2,0,7,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,756,            synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,757,                this.initialCapacity = initialCapacity;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,758,            },2,0,0,0,1,1,4,2,0,9,1,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,764,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,0,0,0,5,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,801,            return (internalArray.length / ((float) numElements)) > contractionCriteria;,8,2,0,3,6,1,0,0,0,10,76,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3708,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0,0,0,1,2,0,0,0,0,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,8,0,0,1,2,0,4,0,0,13,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3743,        },4,0,0,0,1,0,0,0,0,5,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,5,45,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,303,        if (n > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,306,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,44,    public MannWhitneyUTest() {,0,0,0,1,3,0,0,0,0,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,45,"        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,",6,0,0,0,1,0,0,2,0,9,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,74,        if (x == null ||,2,2,0,0,1,0,0,0,0,4,16,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,78,        if (x.length == 0 ||,4,2,0,0,1,0,0,0,0,6,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,222,"        ensureDataConformance(x, y);",0,0,0,1,2,0,6,0,0,6,28,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,36,public enum NaNStrategy {,0,0,0,0,1,0,0,0,0,1,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,39,"    MINIMAL,",0,0,0,0,0,0,0,0,0,0,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,42,"    MAXIMAL,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,45,"    REMOVED,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,48,    FIXED,2,0,0,0,0,0,0,0,0,2,5,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,39,public enum TiesStrategy {,0,0,0,0,1,0,0,0,0,1,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,42,"    SEQUENTIAL,",2,0,0,0,0,0,0,0,0,2,11,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,45,"    MINIMUM,",6,0,0,0,0,0,0,0,0,6,8,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,48,"    MAXIMUM,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,51,"    AVERAGE,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,54,    RANDOM,12,1,0,0,0,0,0,0,0,14,6,0,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,129,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,130,        this.nanStrategy = nanStrategy;,4,0,0,0,0,0,0,0,0,5,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,131,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,132,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,74,    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;,6,0,0,0,0,3,0,2,0,11,75,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,77,    public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;,8,0,0,0,0,3,0,2,0,13,78,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,180,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,181,        this.rand = rand;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,201,        if (len <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,202,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",12,1,0,1,2,1,0,2,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,206,        RandomGenerator ran = getRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,209,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,212,        byte[] randomBytes = new byte[(len / 2) + 1];,0,0,0,3,6,0,0,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,213,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,216,        for (int i = 0; i < randomBytes.length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,217,            Integer c = Integer.valueOf(randomBytes[i]);,8,1,1,2,4,0,4,2,0,19,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,224,            String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,227,            if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,228,"                hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,230,            outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,232,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,237,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,238,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,241,        double r = getRan().nextDouble();,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,242,        double scaled = r * upper + (1.0 - r) * lower + r;,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,243,        return (int) FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,248,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,249,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,4,0,0,4,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,252,        double r = getRan().nextDouble();,8,1,0,2,4,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,253,        double scaled = r * upper + (1.0 - r) * lower + r;,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,254,        return (long)FastMath.floor(scaled);,6,0,1,2,4,2,10,0,0,22,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,274,        if (len <= 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,275,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,279,        SecureRandom secRan = getSecRan();,0,0,1,1,2,0,0,0,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,280,        MessageDigest alg = null;,4,1,0,0,0,0,0,2,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,282,"            alg = MessageDigest.getInstance(""SHA-1"");",2,0,0,1,2,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,286,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,283,        } catch (NoSuchAlgorithmException ex) {,12,2,0,1,4,0,0,2,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,285,            throw new MathInternalError(ex);,2,0,0,1,2,0,0,2,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,287,        alg.reset();,0,0,0,1,2,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,290,        int numIter = (len / 40) + 1;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,292,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,293,        for (int iter = 1; iter < numIter + 1; iter++) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,294,            byte[] randomBytes = new byte[40];,10,2,0,2,4,1,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,295,            secRan.nextBytes(randomBytes);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,296,            alg.update(randomBytes);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,299,            byte[] hash = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,302,            for (int i = 0; i < hash.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,303,                Integer c = Integer.valueOf(hash[i]);,10,2,1,2,4,1,4,2,0,23,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,310,                String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,313,                if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,314,"                    hex = ""0"" + hex;",8,4,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,316,                outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,319,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,324,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,325,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,328,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,329,        double r = sec.nextDouble();,6,0,0,1,2,1,20,4,0,32,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,330,        double scaled = r * upper + (1.0 - r) * lower + r;,16,9,0,1,2,0,0,0,0,25,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,331,        return (int)FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,337,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,338,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,341,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,342,        double r = sec.nextDouble();,2,0,0,1,2,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,343,        double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,0,0,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,344,        return (long)FastMath.floor(scaled);,2,0,0,2,4,1,6,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,361,        if (mean <= 0) {,2,1,1,1,3,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,362,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",8,1,0,1,2,0,0,2,0,11,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,365,        final double pivot = 40.0d;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,366,        if (mean < pivot) {,4,1,0,1,3,0,4,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,367,            final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,368,            double p = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,9,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,369,            long n = 0;,2,0,0,0,0,0,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,370,            double r = 1.0d;,2,0,0,0,0,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,371,            double rnd = 1.0d;,2,0,0,0,0,0,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,373,            while (n < 1000 * mean) {,10,1,0,1,3,0,0,0,0,12,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,374,                rnd = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,375,                r = r * rnd;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,376,                if (r >= p) {,12,3,0,1,3,0,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,377,                    n++;,4,2,1,0,0,0,0,0,0,12,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,379,                    return n;,2,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,382,            return n;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,384,            final double lambda = FastMath.floor(mean);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,385,            final double lambdaFractional = mean - lambda;,12,2,0,0,0,1,0,0,0,16,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,386,            final double logLambda = FastMath.log(lambda);,2,0,0,1,2,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,387,            final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);,0,0,0,2,4,0,0,0,0,6,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,388,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,8,1,0,1,2,1,8,0,0,19,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,389,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,10,4,0,2,4,1,8,0,0,23,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,390,            final double halfDelta = delta / 2;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,391,            final double twolpd = 2 * lambda + delta;,6,2,0,0,0,1,0,0,0,9,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,392,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,12,4,0,2,4,2,8,0,0,26,85,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,393,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,14,5,0,3,6,1,4,0,0,25,81,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,394,            final double aSum = a1 + a2 + 1;,6,1,0,0,0,1,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,395,            final double p1 = a1 / aSum;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,396,            final double p2 = a2 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,397,            final double c1 = 1 / (8 * lambda);,4,2,0,1,2,1,0,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,399,            double x = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,400,            double y = 0;,6,1,0,0,0,0,0,0,0,7,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,401,            double v = 0;,0,1,0,0,0,0,18,0,0,19,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,402,            int a = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,403,            double t = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,404,            double qr = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,405,            double qa = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,407,"                final double u = nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,408,                if (u <= p1) {,4,1,0,1,3,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,409,"                    final double n = nextGaussian(0d, 1d);",2,0,0,1,2,0,0,0,0,2,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,410,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,411,                    if (x > delta || x < -lambda) {,12,3,0,1,3,0,0,0,0,17,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,412,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,414,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,4,1,0,2,4,0,12,0,0,18,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,415,                    final double e = nextExponential(1d);,2,0,0,1,2,1,2,0,0,5,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,416,                    v = -e - (n * n / 2) + c1;,10,4,0,1,2,0,0,0,0,16,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,417,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,418,                    if (u > p1 + p2) {,6,2,0,1,3,0,0,0,0,8,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,419,                        y = lambda;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,420,                        break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,422,                        x = delta + (twolpd / delta) * nextExponential(1d);,8,3,0,2,4,0,2,0,0,14,51,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,423,                        y = FastMath.ceil(x);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,424,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,8,4,0,2,4,0,2,0,0,16,52,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,427,                a = x < 0 ? 1 : 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,428,                t = y * (y + 1) / (2 * lambda);,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,429,                if (v < -t && a == 0) {,8,4,1,1,3,0,0,0,0,17,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,430,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,431,                    break;,2,1,1,0,0,0,0,0,0,9,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,433,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,8,6,0,3,6,0,0,0,0,15,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,434,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,2,0,0,4,8,0,0,0,0,2,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,435,                if (v < qa) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,436,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,437,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,439,                if (v > qr) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,440,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,442,                if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,12,5,0,4,9,0,4,0,0,21,96,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,443,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,444,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,446,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,447,            return y2 + (long) y;,4,1,0,1,2,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,454,        if (sigma <= 0) {,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,455,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,457,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,473,        if (mean <= 0.0) {,4,1,0,1,3,0,0,0,0,6,18,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,474,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,0,1,2,0,0,2,0,8,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,478,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,479,"        double u = this.nextUniform(0, 1);",0,2,0,1,2,0,4,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,482,        while (u < 0.5) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,483,            a += EXPONENTIAL_SA_QI[0];,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,484,            u *= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,488,        u += u - 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,491,        if (u <= EXPONENTIAL_SA_QI[0]) {,6,2,1,2,5,0,4,0,0,15,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,492,            return mean * (a + u);,12,3,0,1,2,1,0,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,496,"        int i = 0; // Should be 1, be we iterate before it in while using 0",2,0,0,0,0,0,0,0,0,2,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,497,"        double u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,498,        double umin = u2;,8,0,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,502,            ++i;,4,0,0,0,0,0,0,0,0,5,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,503,"            u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,505,            if (u2 < umin) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,506,                umin = u2;,4,0,0,0,0,0,0,0,0,5,10,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,510,        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1,2,1,1,3,7,0,0,0,0,7,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,512,        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);,0,0,0,2,4,1,0,0,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,530,"        return nextUniform(lower, upper, false);",8,1,1,1,2,1,10,0,0,26,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,551,        if (lower >= upper) {,6,1,0,1,3,0,4,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,552,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,556,        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {,8,6,1,3,7,0,12,0,0,34,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,557,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,4,0,0,1,2,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,560,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,561,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,4,0,0,1,2,0,0,2,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,564,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,567,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,568,        while (!lowerInclusive && u <= 0.0) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,569,            u = generator.nextDouble();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,572,        return u * upper + (1.0 - u) * lower;,8,4,0,1,2,1,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,586,"        return nextInversionDeviate(new BetaDistribution(alpha, beta));",4,0,0,2,4,1,2,2,0,8,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,600,"        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));",0,0,0,2,4,1,0,0,0,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,614,"        return nextInversionDeviate(new CauchyDistribution(median, scale));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,627,        return nextInversionDeviate(new ChiSquaredDistribution(df));,2,0,0,2,4,1,2,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,641,"        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));",4,0,0,2,4,1,2,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,666,        if (shape < 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,671,"                final double u = this.nextUniform(0, 1);",4,0,0,1,2,0,6,0,0,10,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,672,                final double bGS = 1 + shape/FastMath.E;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,673,                final double p = bGS*u;,6,1,0,0,0,1,0,0,0,8,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,675,                if (p <= 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,678,"                    final double x = FastMath.pow(p, 1/shape);",4,1,0,1,2,1,6,0,0,12,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,679,"                    final double u2 = this.nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,681,                    if (u2 > FastMath.exp(-x)) {,2,1,0,2,5,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,683,                        continue;,2,0,1,0,0,0,2,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,685,                        return scale*x;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,690,                    final double x = -1 * FastMath.log((bGS-p)/shape);,8,3,0,2,4,1,4,0,0,17,50,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,691,"                    final double u2 = this.nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,693,"                    if (u2 > FastMath.pow(x, shape - 1)) {",4,2,0,2,5,0,6,0,0,12,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,695,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,697,                        return scale*x;,10,2,0,0,0,1,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,705,        final RandomGenerator generator = this.getRan();,2,0,0,1,2,1,2,2,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,706,        final double d = shape - 0.333333333333333333;,4,1,0,0,0,1,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,707,        final double c = 1.0 / (3*FastMath.sqrt(d));,8,6,0,2,4,1,10,0,0,26,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,710,            final double x = generator.nextGaussian();,2,0,0,1,2,1,4,0,0,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,711,            final double v = (1+c*x)*(1+c*x)*(1+c*x);,14,7,0,3,6,1,0,0,0,22,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,713,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,714,                continue;,8,2,0,0,0,0,0,0,0,12,9,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,717,            final double xx = x*x;,6,1,0,0,0,1,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,718,"            final double u = this.nextUniform(0, 1);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,721,            if (u < 1 - 0.0331*xx*xx) {,6,3,0,1,3,0,0,0,0,9,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,722,                return scale*d*v;,22,5,0,0,0,1,0,0,0,27,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,725,            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {,28,9,0,4,9,0,16,0,0,55,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,726,                return scale*d*v;,6,1,0,0,0,1,0,0,0,7,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,728,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,743,"        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));",6,0,0,2,4,1,2,2,0,10,107,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,757,"        return nextInversionDeviate(new PascalDistribution(r, p));",0,0,0,2,4,1,0,0,0,7,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,770,        return nextInversionDeviate(new TDistribution(df));,2,0,0,2,4,1,2,2,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,784,"        return nextInversionDeviate(new WeibullDistribution(shape, scale));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,798,"        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));",4,0,0,2,4,1,2,2,0,8,78,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,812,        if (rand == null) {,12,4,0,1,3,0,0,0,0,17,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,813,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,815,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,823,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,2,1,0,3,6,0,8,2,0,14,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,824,    },6,0,0,0,1,0,0,2,0,8,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,836,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,837,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,838,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,840,        return secRand;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,853,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,854,            initRan();,0,0,0,1,2,0,2,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,856,        rand.setSeed(seed);,0,0,0,1,2,0,8,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,857,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,867,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,868,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,870,        secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,871,    },2,2,0,0,1,0,0,0,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,883,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,884,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,886,        secRand.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,887,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,894,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,895,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,897,        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,898,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,922,"        secRand = SecureRandom.getInstance(algorithm, provider);",24,4,1,1,2,0,10,0,0,58,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,923,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,935,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,936,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,939,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,940,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0,0,0,0,1,0,0,0,0,1,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,944,        int[] index = getNatural(n);,4,1,0,2,4,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,945,"        shuffle(index, n - k);",4,1,0,1,2,0,4,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,946,        int[] result = new int[k];,2,0,1,2,4,0,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,947,        for (int i = 0; i < k; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,948,            result[i] = index[n - i - 1];,4,1,1,2,4,0,0,0,0,12,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,951,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,969,        int len = c.size();,4,0,0,1,2,0,6,0,0,10,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,970,        if (k > len) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,971,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,974,        if (k <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,975,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",6,0,0,1,2,0,0,2,0,8,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,978,        Object[] objects = c.toArray();,2,0,0,2,4,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,979,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,980,        Object[] result = new Object[k];,2,0,1,2,4,0,0,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,981,        for (int i = 0; i < k; i++) {,10,1,0,1,3,0,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,982,            result[i] = objects[index[i]];,0,0,1,3,6,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,984,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,996,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1009,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1024,        int target = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1025,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1026,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1027,                target = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1029,"                target = nextInt(0, i);",2,0,0,1,2,0,4,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1031,            int temp = list[target];,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1032,            list[target] = list[i];,0,0,0,2,4,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1033,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1035,    },4,1,0,0,1,0,4,0,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1045,        int[] natural = new int[n];,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1046,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1047,            natural[i] = i;,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1049,        return natural;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,39,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,49,    },4,1,0,0,1,0,0,0,0,5,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,50,        this(boundIsAllowed ?,4,0,0,0,1,0,0,0,0,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,71,        this.boundIsAllowed = boundIsAllowed;,8,1,1,0,0,0,0,0,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,85,        return min;,6,2,0,0,0,1,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,46,"        super(pattern, wrong, arguments);",12,2,0,1,2,0,0,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,47,        argument = wrong;,6,0,1,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,54,        return argument;,10,1,1,0,0,2,0,2,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,47,    },16,3,0,0,1,0,0,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,57,        return context.getMessage();,4,0,0,1,2,1,4,4,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,54,    },2,0,0,0,1,0,0,0,0,2,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,67,"        super(specific, wrong, max);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,69,        this.max = max;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,77,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,84,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,37,    public MathInternalError() {,2,0,0,1,3,1,8,0,0,11,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,2,4,0,6,0,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,47,    },8,0,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,56,"        super(pattern, args);",4,0,0,1,2,0,4,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,45,                                     Object ... args) {,8,1,0,0,2,0,0,2,0,11,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,47,"        context.addMessage(pattern, args);",2,0,0,1,2,1,8,4,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,48,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,62,"        context.addMessage(pattern, args);",4,0,0,1,2,0,10,4,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,69,        this(LocalizedFormats.ILLEGAL_STATE);,8,0,0,1,2,2,0,2,0,12,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,74,        return context;,14,4,0,0,0,2,2,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,80,        return context.getMessage();,8,2,1,1,2,1,4,0,0,25,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,86,        return context.getLocalizedMessage();,6,0,0,1,2,1,4,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,246,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,251,                    return n * (a - n);,6,2,0,1,2,1,6,0,0,14,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",18,5,0,1,2,1,6,0,0,30,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,95,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",6,1,0,1,2,1,8,0,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,124,        final double small = 1e-50;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,125,"        double hPrev = getA(0, x);",4,0,0,1,2,0,8,0,0,12,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,129,            hPrev = small;,4,0,0,0,0,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,132,        int n = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,133,        double dPrev = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,134,        double cPrev = hPrev;,4,0,0,0,0,0,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,135,        double hN = hPrev;,18,2,0,0,0,0,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,137,        while (n < maxIterations) {,4,1,0,1,3,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,138,"            final double a = getA(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,139,"            final double b = getB(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,141,            double dN = a + b * dPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,142,"            if (Precision.equals(dN, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,143,                dN = small;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,145,            double cN = a + b / cPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,146,"            if (Precision.equals(cN, 0.0, small)) {",0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,147,                cN = small;,4,0,0,0,0,0,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,150,            dN = 1 / dN;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,151,            final double deltaN = cN * dN;,10,1,0,0,0,1,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,152,            hN = hPrev * deltaN;,8,1,0,0,0,0,2,2,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,154,            if (Double.isInfinite(hN)) {,4,0,0,2,5,0,6,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,155,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,158,            if (Double.isNaN(hN)) {,0,0,0,2,5,0,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,159,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",4,0,0,0,1,0,0,2,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,163,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,4,2,0,2,5,0,4,2,0,12,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,164,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,167,            dPrev = dN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,168,            cPrev = cN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,169,            hPrev = hN;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,170,            n++;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,171,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,173,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,174,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,178,        return hN;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,73,    private Gamma() {},0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,95,        if (Double.isNaN(x) || (x <= 0.0)) {,10,4,0,3,7,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,96,            ret = Double.NaN;,10,0,0,0,0,0,0,0,0,12,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,98,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,99,            double sum = lanczos(x);,4,0,0,1,2,0,4,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,100,            double tmp = x + g + .5;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,105,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,117,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,155,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,156,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,157,            ret = 0.0;,8,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,158,        } else if (x >= a + 1) {,10,2,0,1,4,0,2,2,0,17,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,161,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,164,            double n = 0.0; // current element index,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,165,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,166,            double sum = an; // partial sum,4,0,0,0,0,0,0,0,0,4,31,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,168,                   n < maxIterations &&,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,171,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,172,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,175,                sum = sum + an;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,177,            if (n >= maxIterations) {,6,1,0,1,3,0,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,178,                throw new MaxCountExceededException(maxIterations);,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,179,            } else if (Double.isInfinite(sum)) {,0,0,0,2,6,0,6,0,0,6,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,180,                ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,182,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,0,0,0,4,8,0,0,0,0,12,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,198,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,232,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,233,            ret = Double.NaN;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,234,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,235,            ret = 1.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,236,        } else if (x < a + 1.0) {,0,0,0,1,4,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,239,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,255,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,256,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,12,4,0,4,8,0,14,0,0,32,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,259,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,284,        if (x > 0 && x <= S_LIMIT) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,287,            return -GAMMA - 1 / x;,4,2,0,0,0,1,0,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,290,        if (x >= C_LIMIT) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,292,            double inv = 1 / (x * x);,8,2,0,1,2,0,0,2,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,296,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,14,11,0,4,8,1,12,0,0,38,86,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,299,        return digamma(x + 1) - 1 / x;,4,3,0,1,2,1,2,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,314,        if (x > 0 && x <= S_LIMIT) {,6,3,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,315,            return 1 / (x * x);,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,318,        if (x >= C_LIMIT) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,319,            double inv = 1 / (x * x);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,324,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,14,13,0,2,4,1,0,2,0,29,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,327,        return trigamma(x + 1) + 1 / (x * x);,6,4,0,2,4,1,4,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,350,        double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,352,            sum = sum + (LANCZOS[i] / (x + i));,12,5,1,3,6,0,0,0,0,27,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,354,        return sum + LANCZOS[0];,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",10,0,0,1,2,0,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,53,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,10,0,0,10,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,55,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,44,    private Erf() {},0,0,0,2,4,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,68,            return x > 0 ? 1 : -1;,4,2,0,0,0,1,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,98,        if (FastMath.abs(x) > 40) {,0,1,0,2,5,0,6,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,99,            return x > 0 ? 0 : 2;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,101,"        final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,1,4,0,0,12,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,102,        return x < 0 ? 2 - ret : ret;,6,2,0,0,0,1,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,116,        if(x1 > x2) {,8,3,1,1,3,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,117,"            return -erf(x2, x1);",0,0,0,1,2,1,6,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,120,        return,0,0,0,0,0,0,6,0,0,6,6,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6134,    private FastMathLiteralArrays() {},6,2,0,2,4,2,0,0,0,10,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,349,    private FastMath() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,362,            return d; // These are un-normalised - don't try to convert,0,0,0,0,0,1,0,0,0,1,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,364,        long xl = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,365,        xl = xl & MASK_30BITS; // Drop low order bits,6,1,0,0,0,0,0,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,383,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,384,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,392,      if (x > 20.0) {,4,2,0,1,3,0,0,0,0,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,396,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,397,          return exp(-x)/2.0;,0,0,0,1,2,1,4,2,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,400,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,401,      if (x < 0.0) {,12,2,0,1,3,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,402,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,409,      double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,410,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,411,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,415,      temp = recip * HEX_40000000;,4,1,1,0,0,0,0,0,0,8,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,416,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,417,      double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,422,      recipb += -yb * recip * recip;,12,3,0,0,0,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,425,      temp = ya + recipa;,12,1,0,0,0,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,426,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,428,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,429,      yb += -(temp - ya - recipb);,48,14,0,1,2,0,6,2,0,73,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,430,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,432,      double result = ya + yb;,14,3,0,0,0,1,0,0,0,18,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,433,      result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,434,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,442,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,443,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,444,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,452,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,453,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,456,      if (x < -20) {,6,2,0,1,3,0,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,457,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,460,      if (x == 0) {,6,1,0,1,3,0,0,0,0,9,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,461,          return x;,4,1,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,464,      if (x < 0.0) {,6,1,0,1,3,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,465,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,466,          negate = true;,8,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,471,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,472,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,473,"          exp(x, 0.0, hiPrec);",18,3,0,1,2,0,0,0,0,23,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,475,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,0,0,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,478,          double temp = ya * HEX_40000000;,0,0,0,0,0,0,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,479,          double yaa = ya + temp - temp;,4,0,0,0,0,1,6,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,483,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,484,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,485,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,486,          double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,2,1,0,1,2,0,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,491,          recipb += -yb * recip * recip;,6,0,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,493,          recipa = -recipa;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,494,          recipb = -recipb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,497,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,498,          yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,499,          ya = temp;,16,1,0,0,0,0,0,0,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,500,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,501,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,502,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,504,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,505,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,506,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,508,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,509,"          expm1(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,511,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,515,          double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,516,          double denomr = 1.0 / denom;,18,4,0,0,0,0,0,0,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,517,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,518,          double ratio = ya * denomr;,12,2,0,0,0,0,0,0,0,14,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,519,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,520,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,521,          double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,523,          temp = denom * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,524,          double za = denom + temp - temp;,10,2,0,0,0,1,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,525,          double zb = denom - za;,8,2,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0,0,0,1,2,0,0,0,0,1,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,530,          rb += yb*denomr;                        // numerator,12,2,0,0,0,1,0,0,0,16,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,531,          rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,534,          temp = ya + ra;,16,2,0,0,0,0,0,0,0,20,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,535,          yb += -(temp - ya - ra);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,536,          ya = temp;,10,0,0,0,0,0,0,2,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,537,          temp = ya + rb;,16,2,0,0,0,0,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,538,          yb += -(temp - ya - rb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,539,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,541,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,542,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,545,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,546,          result = -result;,14,1,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,549,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,557,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,559,      if (x != x) {,4,1,0,1,3,0,0,2,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,560,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,569,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,570,          return 1.0;,4,0,0,0,0,1,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,573,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,574,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,577,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,578,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,581,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,582,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,583,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,587,      if (x >= 0.5) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,588,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,590,"          exp(x*2.0, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,592,          double ya = hiPrec[0] + hiPrec[1];,8,2,0,2,4,0,0,0,0,11,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,596,          double na = -1.0 + ya;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,597,          double nb = -(na + 1.0 - ya);,2,1,0,1,2,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,598,          double temp = na + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,599,          nb += -(temp - na - yb);,12,1,0,1,2,0,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,600,          na = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,603,          double da = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,604,          double db = -(da - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,605,          temp = da + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,606,          db += -(temp - da - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,607,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,609,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,610,          double daa = da + temp - temp;,14,2,0,0,0,0,0,0,0,17,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,611,          double dab = da - daa;,20,6,0,0,0,0,0,0,0,27,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,614,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,615,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,616,          double ratioa = ratio + temp - temp;,10,2,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,617,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,623,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,625,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,627,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,628,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,630,          double hiPrec[] = new double[2];,10,1,0,2,4,0,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,632,"          expm1(x*2.0, hiPrec);",2,1,0,1,2,0,4,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,634,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,638,          double na = ya;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,639,          double nb = yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,642,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,643,          double db = -(da - 2.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,644,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,645,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,646,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,648,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,649,          double daa = da + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,650,          double dab = da - daa;,8,1,0,0,0,0,6,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,653,          double ratio = na/da;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,654,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,655,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,656,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,662,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,664,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,666,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,669,      if (negate) {,4,0,0,1,3,0,0,0,0,4,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,670,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,673,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,689,        boolean negative = false;,8,1,0,0,0,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,690,        if (a < 0) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,691,            negative = true;,16,3,0,0,0,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,692,            a = -a;,10,2,0,0,0,1,0,0,0,13,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,696,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,0,0,2,4,0,0,0,0,4,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,699,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,700,            if (a > 0.097) {,6,4,0,1,3,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,52,17,0,8,16,0,0,0,0,70,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,702,            } else if (a > 0.036) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,40,13,0,6,12,0,0,0,0,54,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,704,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,2,0,24,63,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,711,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,719,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,720,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,721,            negative = true;,4,1,0,0,0,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,722,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,726,        if (a > 0.15) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,10,3,1,3,6,0,0,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,729,            final double a2 = a * a;,8,1,1,0,0,1,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,730,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0,0,0,8,16,0,0,0,0,24,141,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,732,            } else if (a > 0.031) {,2,0,0,1,4,0,0,0,0,2,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,28,13,0,6,12,0,6,0,0,48,109,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,734,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,6,1,0,4,8,0,0,0,0,7,77,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,741,        return negative ? -absAtanh : absAtanh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,2,0,0,3,6,2,0,0,0,2,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",8,1,1,1,2,2,16,0,0,28,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,783,        return Math.random();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,830,                if (hiPrec != null) {,14,5,1,1,3,1,4,0,0,28,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,831,                    hiPrec[0] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,832,                    hiPrec[1] = 0.0;,4,1,1,1,2,0,0,0,0,8,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,834,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,840,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,842,                    hiPrec[1] /= 285040095144011776.0;,8,2,1,1,2,0,0,0,0,13,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,844,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,3,0,1,2,1,6,0,0,16,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,850,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,851,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,852,                    hiPrec[1] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,854,                return result;,12,2,0,0,0,1,12,0,0,29,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,867,                if (hiPrec != null) {,8,2,0,1,3,1,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,0,1,2,2,0,0,0,4,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,869,                    hiPrec[1] = 0.0;,6,3,0,1,2,1,6,0,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,922,            result = tempC*z + tempB + tempA;,14,3,0,0,0,0,6,0,0,24,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,927,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,22,6,1,1,2,1,0,0,0,32,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,939,"      return expm1(x, null);",0,0,0,1,2,1,4,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,948,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,949,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,952,        if (x <= -1.0 || x >= 1.0) {,14,4,0,1,3,0,0,0,0,21,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,955,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,956,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,957,            if (x > 0.0) {,10,3,1,1,3,0,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,960,                final double ra = -1.0 + hiPrec[0];,8,2,1,1,2,1,0,0,0,15,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,961,                double rb = -(ra + 1.0 - hiPrec[0]);,12,4,1,2,4,1,0,0,0,22,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,962,                rb += hiPrec[1];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,963,                return ra + rb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,970,        boolean negative = false;,8,1,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,972,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,973,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,974,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,978,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,6,0,1,1,2,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,982,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,983,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,984,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,986,            temp = tempA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,987,            baseA = tempA + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,988,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,990,            epsilon = x - intFrac/1024.0;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,995,        double zb = 0.008336750013465571;,6,1,0,0,0,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,996,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,997,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,998,        zb = zb * epsilon + 0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,999,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1000,        zb = zb * epsilon;,10,2,1,0,0,0,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1002,        double za = epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1003,        double temp = za + zb;,2,0,0,0,0,0,0,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1004,        zb = -(temp - za - zb);,10,2,0,1,2,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1005,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1007,        temp = za * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1008,        temp = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1010,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1013,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1015,        temp = ya + za * baseB;,6,1,0,0,0,1,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1016,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1017,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1019,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1020,        yb += -(temp - ya - zb * baseA);,12,2,0,1,2,0,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1021,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1023,        temp = ya + zb * baseB;,10,3,1,0,0,1,6,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1024,        yb += -(temp - ya - zb*baseB);,14,2,0,1,2,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1025,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1029,        temp = ya + baseA;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1030,        yb += -(temp - baseA - ya);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1031,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1033,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1035,        yb += -(temp - ya - za);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1036,        ya = temp;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1038,        temp = ya + baseB;,2,0,0,0,0,1,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1040,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1041,        ya = temp;,4,0,0,0,0,0,2,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1043,        temp = ya + zb;,16,4,0,0,0,0,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1045,        yb += -(temp - ya - zb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1046,        ya = temp;,2,0,0,0,0,0,4,2,0,8,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1048,        if (negative) {,8,1,0,1,3,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1050,            double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1051,            double denomr = 1.0 / denom;,4,1,0,0,0,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1052,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,0,0,0,0,13,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1053,            double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1054,            temp = ratio * HEX_40000000;,8,1,0,0,0,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1055,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1056,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1058,            temp = denom * HEX_40000000;,8,2,1,0,0,0,0,0,0,14,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1059,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1060,            zb = denom - za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,8,2,0,1,2,1,0,0,0,11,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1073,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1077,            ya = -ra;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1078,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1081,        if (hiPrecOut != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1082,            hiPrecOut[0] = ya;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1083,            hiPrecOut[1] = yb;,14,3,1,1,2,0,0,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1086,        return ya + yb;,14,5,0,0,0,2,4,0,0,24,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1107,            return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1113,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1114,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1115,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1118,                return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1124,            if (hiPrec != null) {,10,1,0,1,3,1,10,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1128,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1136,            if (x == 0) {,6,1,0,1,3,0,0,0,0,9,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1138,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1142,                return Double.NEGATIVE_INFINITY;,2,1,1,0,0,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1146,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1147,            while ( (bits & 0x0010000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1148,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1149,                bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1160,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1161,                double xb = xa - x + 1.0;,8,1,1,0,0,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1163,                double aa = xa + tmp - tmp;,12,2,0,0,0,0,0,0,0,14,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1164,                double ab = xa - aa;,0,0,0,0,0,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1165,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,2,1,2,4,0,0,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1174,                    ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1176,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1181,                    aa = ya + LN_QUICK_COEF[i][0];,6,1,1,2,4,0,0,2,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1182,                    ab = yb + LN_QUICK_COEF[i][1];,4,0,0,2,4,0,0,0,0,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1184,                    tmp = aa * HEX_40000000;,16,2,1,0,0,0,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1185,                    ya = aa + tmp - tmp;,14,2,0,0,0,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1186,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1190,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1191,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1193,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1194,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1195,                yb = aa - ya + ab;,14,3,0,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1197,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1333,        if (x == -1) {,2,0,0,1,3,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1334,            return x/0.0;   // -Infinity,4,3,0,0,0,1,0,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1338,            return x;,6,3,0,0,0,1,0,0,0,9,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1341,        if (x>1e-6 || x<-1e-6) {,20,9,0,1,3,0,0,0,0,30,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1342,            double xpa = 1.0 + x;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1343,            double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1345,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1347,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,1,6,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,8,3,0,2,5,0,0,0,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1349,                return lores;,2,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1354,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1356,            double epsilon = 0.5 * fx1 + 1.0;,14,5,0,0,0,0,0,0,0,19,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1357,            epsilon = epsilon * fx1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1359,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1363,        double y = x * F_1_3 - F_1_2;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1364,        y = y * x + 1.0;,10,2,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1365,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1367,        return y;,4,1,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1375,        final double hiPrec[] = new double[2];,4,1,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1377,"        final double lores = log(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1379,            return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1383,        final double lna = hiPrec[0] + tmp - tmp;,2,0,0,1,2,0,0,0,0,2,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1386,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,0,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1387,        final double rln10b = 1.9699272335463627E-8;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0,0,0,0,0,1,0,0,0,1,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1409,        return log(x) / log(base);,0,1,0,2,4,1,8,0,0,9,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1423,            return 1.0;,4,0,0,0,0,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1427,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1432,            long bits = Double.doubleToLongBits(x);,10,2,0,1,2,0,6,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1433,            if ((bits & 0x8000000000000000L) != 0) {,2,2,0,2,5,0,0,0,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1435,                long yi = (long) y;,14,6,1,1,2,1,6,0,0,31,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1438,                    return Double.NEGATIVE_INFINITY;,12,1,1,0,0,1,4,0,0,21,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,8,1,1,2,5,0,4,0,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1442,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1446,            if (y < 0) {,2,1,0,1,3,0,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1447,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1449,            if (y > 0) {,14,2,1,1,3,0,0,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1450,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1453,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1457,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1458,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1460,            if (y < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1461,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1463,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1468,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1469,                return Double.NaN;,6,0,0,0,0,2,6,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1472,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1473,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1475,                return 0.0;,14,4,0,0,0,1,0,0,0,19,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1480,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1481,                return y;,20,0,0,0,0,1,0,2,0,25,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1484,            if (y < 0) {,4,1,0,1,3,1,0,0,0,6,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1485,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1486,                if (y == yi && (yi & 1) == 1) {,2,0,0,2,5,1,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1487,                    return -0.0;,2,0,0,0,0,2,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1490,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1493,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1494,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1495,                if (y == yi && (yi & 1) == 1) {,4,0,0,2,5,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1496,                    return Double.NEGATIVE_INFINITY;,8,2,0,0,0,1,0,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1499,                return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1505,            if (x * x == 1.0) {,10,3,0,1,3,0,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1506,                return Double.NaN;,10,2,0,0,0,1,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1509,            if (x * x < 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1510,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1512,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,2,0,0,1,3,0,0,0,0,2,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1520,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1523,            if (y == (long) y) {,10,2,0,2,5,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",4,0,0,4,8,1,0,0,0,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1527,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,12,3,0,1,2,0,0,0,0,16,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1542,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1548,            return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1588,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1590,        double p = 2.7553817452272217E-6;,8,0,0,0,0,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1591,        p = p * x2 + -1.9841269659586505E-4;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1592,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1593,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1596,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1598,        return p;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1608,        double x2 = x*x;,14,5,0,0,0,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1610,        double p = 2.479773539153719E-5;,6,1,0,0,0,1,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1611,        p = p * x2 + -0.0013888888689039883;,8,3,0,0,0,0,0,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1612,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1613,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1614,        p *= x2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1616,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1627,        int idx = (int) ((xa * 8.0) + 0.5);,8,2,0,3,6,0,6,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1631,        final double sintA = SINE_TABLE_A[idx];,6,0,1,1,2,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1632,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1633,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1634,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1637,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1638,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1639,        final double cosEpsA = 1.0;,6,1,1,0,0,2,0,0,0,13,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1640,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1643,        final double temp = sinEpsA * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1644,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1645,        sinEpsB +=  sinEpsA - temp2;,12,3,0,0,0,1,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1646,        sinEpsA = temp2;,4,1,0,0,0,0,0,0,0,7,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1672,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1673,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1675,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1676,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1677,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1678,        a = c;,14,1,0,0,0,0,0,0,0,18,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1679,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1681,        t = costA * sinEpsA;,14,3,0,0,0,0,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1682,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1683,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1684,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1685,        b = b + d;,12,2,0,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,6,2,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1729,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1732,            c = a + t;,0,0,1,0,0,0,8,0,0,17,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1733,            d = -(c - a - t);,8,1,0,1,2,0,6,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1734,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1735,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1738,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1740,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1751,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1752,        final double pi2b = 6.123233995736766E-17;,4,0,0,0,0,1,0,0,0,5,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1754,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1755,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1756,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1758,"        return sinQ(a, b);",2,1,0,1,2,1,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,0,1,2,0,0,0,0,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1775,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1776,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1777,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1778,        final double costB = COSINE_TABLE_B[idx];,2,1,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1781,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,11,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1782,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1783,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1784,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1787,        double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1788,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1789,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1790,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1815,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1816,        double b = 0;,2,0,1,0,0,0,6,0,0,13,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1819,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1820,        double c = a + t;,14,2,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1821,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1822,        a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1823,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1825,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1826,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1827,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1828,        a = c;,14,1,0,0,0,0,0,0,0,17,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1829,        b = b + d;,14,1,0,0,0,0,0,0,0,20,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0,0,0,0,0,0,0,0,0,0,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1834,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1835,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1839,        a = b = c = d = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1841,        t = costA*cosEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1842,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1843,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1844,        a = c;,6,1,0,0,0,0,0,0,0,8,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1845,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1847,        t = -sintA*sinEpsA;,12,1,0,0,0,1,2,8,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1848,        c = a + t;,22,6,0,0,0,0,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1849,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1850,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1851,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,2,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1856,        double cosa = a + b;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1857,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1859,        if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1861,            tmp = cosa; cosa = sina; sina = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,20,2,0,0,0,0,0,0,0,25,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1876,        double est = sina/cosa;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1879,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1880,        double esta = (est + temp) - temp;,12,2,0,1,2,0,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1881,        double estb =  est - esta;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1883,        temp = cosa * HEX_40000000;,6,1,0,0,0,1,6,0,0,14,27,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1884,        double cosaa = (cosa + temp) - temp;,8,5,1,1,2,0,0,0,0,20,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1885,        double cosab =  cosa - cosaa;,6,1,0,0,0,0,0,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0,0,0,1,2,0,0,0,0,3,114,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1889,        err += sinb/cosa;                     // Change in est due to sinb,16,3,1,0,0,2,0,0,0,26,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1892,        if (xb != 0.0) {,16,4,0,1,3,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1895,            double xbadj = xb + est*est*xb;,4,2,0,0,0,0,0,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1896,            if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1897,                xbadj = -xbadj;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1900,            err += xbadj;,6,0,0,0,0,1,2,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1903,        return est+err;,16,4,0,0,0,1,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1920,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1924,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1925,        inbits |= 0x0010000000000000L;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1928,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1929,        inbits <<= 11;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1935,        int idx = exponent >> 6;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1936,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1938,        if (shift != 0) {,10,3,1,1,3,0,0,0,0,16,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,2,1,2,4,0,0,0,0,11,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,10,6,1,5,10,0,0,0,0,23,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1945,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1946,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1950,        long a = inbits >>> 32;,10,2,0,0,0,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1951,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1953,        long c = shpiA >>> 32;,10,1,0,0,0,0,0,0,0,13,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1954,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1956,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1957,        long bd = b * d;,10,3,0,0,0,0,0,0,0,14,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1958,        long bc = b * c;,12,2,0,0,0,0,0,0,0,14,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1959,        long ad = a * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1961,        long prodB = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1962,        long prodA = ac + (ad >>> 32);,8,3,0,1,2,0,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,10,4,0,1,2,0,0,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,12,4,0,1,2,0,0,0,0,17,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1969,        if ( (bita && bitb) ||,2,0,0,1,3,1,6,4,0,13,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1971,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1975,        bitb = (bc & 0x80000000L ) != 0;,8,3,1,1,2,0,4,2,0,22,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1977,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1978,        prodA = prodA + (bc >>> 32);,8,2,0,1,2,1,4,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1983,        if ( (bita && bitb) ||,6,3,1,1,3,0,0,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1985,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1989,        c = shpiB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1990,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1991,        ac = a * c;,4,0,0,0,0,0,0,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1992,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1993,        ad = a * d;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1996,        ac = ac + ((bc + ad) >>> 32);,2,0,0,2,4,0,0,0,0,2,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,8,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2000,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2003,        if ( (bita && bitb) ||,2,0,0,1,3,0,4,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2005,            prodA++;,10,2,0,0,0,1,0,0,0,14,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2009,        c = shpi0 >>> 32;,12,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2010,        d = shpi0 & 0xffffffffL;,12,1,0,0,0,1,8,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2012,        bd = b * d;,10,1,0,0,0,0,0,0,0,13,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2014,        ad = a * d;,0,0,0,0,0,0,6,0,0,6,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2016,        prodA += bd + ((bc + ad) << 32);,16,4,0,2,4,0,0,0,0,23,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2028,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2032,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2033,        prodB <<= 2;,6,0,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2036,        a = prodA >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2037,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2039,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2042,        ac = a * c;,2,0,0,0,0,0,0,0,0,3,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2043,        bd = b * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2044,        bc = b * c;,6,1,1,0,0,0,2,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2045,        ad = a * d;,6,1,0,0,0,0,0,2,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2047,        long prod2B = bd + (ad << 32);,18,3,1,1,2,0,0,0,0,24,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2048,        long prod2A = ac + (ad >>> 32);,4,0,0,1,2,0,0,0,0,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2050,        bita = (bd & 0x8000000000000000L) != 0;,2,0,0,1,2,1,0,2,0,5,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2051,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2055,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2057,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2061,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2063,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2064,        prod2A = prod2A + (bc >>> 32);,8,3,0,1,2,0,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2069,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2071,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2075,        c = PI_O_4_BITS[1] >>> 32;,6,1,1,1,2,0,0,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2077,        ac = a * c;,4,1,0,0,0,0,12,0,0,17,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2078,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2079,        ad = a * d;,6,1,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2082,        ac = ac + ((bc + ad) >>> 32);,22,9,0,2,4,0,0,0,0,32,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,8,3,0,1,2,0,0,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2086,        prod2B += ac;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,4,0,1,2,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2089,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2091,            prod2A++;,10,1,0,0,0,0,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2095,        a = prodB >>> 32;,2,0,0,0,0,0,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2096,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2097,        c = PI_O_4_BITS[0] >>> 32;,10,2,1,1,2,0,0,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2099,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2101,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2104,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2108,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,1,0,1,2,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2111,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2113,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,12,5,0,1,2,0,0,0,0,18,68,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2120,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2121,        double sumB = -(sumA - tmpA - tmpB);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2124,        result[0] = intPart;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2125,        result[1] = sumA * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2126,        result[2] = sumB * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2135,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2136,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2138,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2141,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2142,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2143,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2144,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2148,        if (xa == 0.0) {,8,2,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2149,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2150,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2151,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2153,            return 0.0;,2,1,0,0,0,1,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2157,            return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2161,        if (xa > 3294198.0) {,4,1,0,1,3,0,6,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2165,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2166,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2167,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2168,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2169,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2170,        } else if (xa > 1.5707963267948966) {,8,2,0,1,4,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2175,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2181,                double a = -k * 1.570796251296997;,20,5,0,0,0,1,0,0,0,27,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2182,                remA = xa + a;,8,2,0,0,0,0,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2183,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2185,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2186,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2187,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2188,                remB += -(remA - b - a);,16,3,0,1,2,0,0,0,0,21,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2190,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2191,                b = remA;,18,5,0,0,0,0,0,0,0,27,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2192,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2193,                remB += -(remA - b - a);,2,0,0,1,2,0,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2195,                if (remA > 0.0) {,6,1,0,1,3,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2196,                    break;,4,0,0,0,0,0,4,2,0,10,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2202,                k--;,6,0,0,0,0,0,0,0,0,7,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2203,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2204,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2205,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2206,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2209,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2210,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2213,        switch (quadrant) {,4,1,0,1,3,0,4,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2215,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2217,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2219,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2221,"                return -cosQ(xa, xb);",12,2,0,1,2,1,6,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2223,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2233,        int quadrant = 0;,0,0,0,0,0,0,4,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2236,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2237,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2238,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,18,4,0,1,3,0,0,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2242,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2246,        double xb = 0;,6,1,0,0,0,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2247,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2251,            double reduceResults[] = new double[3];,10,2,0,2,4,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2252,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2253,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2254,            xa = reduceResults[1];,4,0,1,1,2,0,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2255,            xb = reduceResults[2];,10,2,1,1,2,0,4,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2256,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2261,            int k = (int)(xa * 0.6366197723675814);,12,1,1,2,4,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2267,                double a = -k * 1.570796251296997;,10,3,0,0,0,0,8,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2268,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2269,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2271,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2272,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2273,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2274,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2276,                a = -k * 6.123233995736766E-17;,4,0,0,0,0,0,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2277,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2278,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2279,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2281,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2282,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2288,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2289,            },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2290,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2291,            xa = remA;,10,2,1,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2292,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2298,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2300,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2302,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2304,"                return -cosQ(xa, xb);",4,0,0,1,2,1,0,0,0,4,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2306,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2308,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2318,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2319,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2322,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2323,        if (x < 0) {,8,2,0,1,3,0,4,0,0,15,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2324,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2325,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2329,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2330,            long bits = Double.doubleToLongBits(x);,8,1,0,1,2,0,6,0,0,16,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2331,            if (bits < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2332,                return -0.0;,4,1,0,0,0,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2334,            return 0.0;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2338,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2342,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2343,        if (xa > 3294198.0) {,4,1,1,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2347,            double reduceResults[] = new double[3];,4,0,0,2,4,0,0,0,0,4,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2348,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2349,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,6,0,0,17,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2350,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2351,            xb = reduceResults[2];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2352,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2357,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2363,                double a = -k * 1.570796251296997;,2,1,0,0,0,0,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2364,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2365,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2367,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2368,                double b = remA;,8,0,0,0,0,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2369,                remA = a + b;,8,2,0,0,0,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2370,                remB += -(remA - b - a);,14,2,0,1,2,0,0,0,0,19,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2372,                a = -k * 6.123233995736766E-17;,6,2,0,0,0,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2373,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2374,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2375,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2377,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2378,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2384,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2385,            },8,2,0,0,1,0,0,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2386,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2387,            xa = remA;,4,1,0,0,0,1,0,0,0,6,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2388,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2391,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2393,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2394,            final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2396,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2397,            double b = -(a - pi2a + xa);,18,3,0,1,2,0,0,0,0,22,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2398,            b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2400,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2401,            xb = -(xa - a - b);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2402,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2403,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2407,        if ((quadrant & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2408,"            result = tanQ(xa, xb, false);",10,1,0,1,2,0,6,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2410,"            result = -tanQ(xa, xb, true);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2413,        if (negative) {,4,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2414,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2417,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2426,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2436,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,4,1,0,1,3,1,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2443,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2445,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2446,            xb = -xb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2447,            negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2450,        if (xa > 1.633123935319537E16) { // Very large input,6,1,0,1,3,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2451,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0,0,0,3,6,1,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2455,        if (xa < 1) {,6,1,0,1,3,1,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2458,            final double oneOverXa = 1 / xa;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,8,4,0,4,8,0,0,0,0,15,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,12,1,0,1,2,0,0,2,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2463,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2465,        double temp = epsA + epsB;,14,2,1,0,0,1,4,0,0,23,26,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2466,        epsB = -(temp - epsA - epsB);,10,2,1,1,2,0,0,0,0,17,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2467,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2470,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2471,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2472,        double yb = xb + xa - ya;,18,3,0,0,0,1,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2473,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2474,        xb += yb;,4,1,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2477,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2483,            yb = epsB * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2484,        } else {,4,0,0,0,2,0,0,0,0,6,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0,0,0,1,2,0,6,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2486,            double za = 1d + temp2;,12,7,1,0,0,1,0,0,0,28,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2487,            double zb = -(za - 1d - temp2);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,20,8,1,2,4,1,0,0,0,38,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2489,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2490,            zb += -(temp - za - temp2);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2491,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2493,            zb += xb * TANGENT_TABLE_B[idx];,8,4,1,1,2,0,4,0,0,21,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2494,            ya = epsA / za;,6,1,0,0,0,0,4,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2496,            temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2497,            final double yaa = (ya + temp) - temp;,14,3,0,1,2,1,0,0,0,18,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2498,            final double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2500,            temp = za * HEX_40000000;,10,2,1,0,0,1,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2501,            final double zaa = (za + temp) - temp;,2,1,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2502,            final double zab = za - zaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2507,            yb += -epsA * zb / za / za;,18,6,0,0,0,1,12,0,0,39,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2508,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,1,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2512,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2513,        epsB = yb;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2516,        final double epsA2 = epsA * epsA;,6,1,0,0,0,1,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2527,        yb = 0.07490822288864472;,4,1,1,0,0,1,0,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2528,        yb = yb * epsA2 + -0.09088450866185192;,18,7,0,0,0,0,0,0,0,28,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2529,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2530,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2531,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2532,        yb = yb * epsA2 + -0.33333333333333287;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2533,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2536,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2538,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2539,        yb = -(temp - ya - yb);,16,3,0,1,2,0,0,0,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2540,        ya = temp;,12,2,0,0,0,1,6,0,0,23,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2543,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2546,        double za = EIGHTHS[idx] + ya;,4,1,1,1,2,0,0,0,0,9,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2547,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2548,        temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2549,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2550,        za = temp;,26,4,0,0,0,0,0,0,0,32,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2552,        double result = za + zb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2553,        double resultb = -(result - za - zb);,22,6,0,1,2,0,4,0,0,34,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2555,        if (leftPlane) {,8,2,0,1,3,0,0,0,0,11,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2557,            final double pia = 1.5707963267948966 * 2;,4,0,0,0,0,0,0,0,0,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2558,            final double pib = 6.123233995736766E-17 * 2;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2560,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2561,            zb = -(za - pia + result);,14,3,0,1,2,0,0,0,0,20,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2562,            zb += pib - resultb;,2,0,0,0,0,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2564,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2565,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2569,        if (negate ^ leftPlane) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2570,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2573,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2583,        if (x != x || y != y) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2584,            return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2587,        if (y == 0) {,10,5,0,1,3,1,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2588,            final double result = x * y;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2589,            final double invx = 1d / x;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2590,            final double invy = 1d / y;,4,1,0,0,0,1,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2592,            if (invx == 0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2593,                if (x > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2594,                    return y; // return +/- 0.0,0,0,0,0,0,2,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2596,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2600,            if (x < 0 || invx < 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2601,                if (y < 0 || invy < 0) {,4,3,0,1,3,0,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2602,                    return -Math.PI;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2604,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2607,                return result;,6,1,0,0,0,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2613,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2614,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2615,                return Math.PI * F_1_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2618,            if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2619,                return Math.PI * F_3_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2622,            return Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2625,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2626,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2627,                return -Math.PI * F_1_4;,8,2,0,0,0,1,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2630,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2631,                return -Math.PI * F_3_4;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2634,            return -Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2637,        if (x == Double.POSITIVE_INFINITY) {,14,2,0,1,3,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2638,            if (y > 0 || 1 / y > 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2639,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2642,            if (y < 0 || 1 / y < 0) {,12,8,0,1,3,0,0,0,0,21,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2643,                return -0d;,14,1,0,0,0,2,4,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2647,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2649,            if (y > 0.0 || 1 / y > 0.0) {,6,5,0,1,3,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2650,                return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2653,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2654,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2660,        if (x == 0) {,8,2,0,1,3,0,4,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2661,            if (y > 0 || 1 / y > 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2662,                return Math.PI * F_1_2;,6,1,0,0,0,1,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2665,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2666,                return -Math.PI * F_1_2;,8,2,0,0,0,1,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2671,        final double r = y / x;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,2,1,0,2,5,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2673,"            return atan(r, 0, x < 0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2676,        double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2677,        double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2680,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2681,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,26,13,0,1,2,0,0,0,0,40,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2685,        final double temp = ra + rb;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2686,        rb = -(temp - ra - rb);,6,2,0,1,2,0,0,0,0,10,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2687,        ra = temp;,8,2,1,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2690,"            ra = copySign(0d, y);",6,0,0,1,2,0,4,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2694,"        final double result = atan(ra, rb, x < 0);",4,1,0,1,2,1,6,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2696,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2704,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2705,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2708,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2709,          return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2712,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2713,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2716,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2717,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,14,2,0,1,3,1,0,0,0,17,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2721,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2727,      double temp = x * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2728,      final double xa = x + temp - temp;,14,3,1,0,0,1,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2729,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2732,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2733,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2736,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2737,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2739,      double za = 1.0 + ya;,4,1,0,0,0,0,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2740,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2742,      temp = za + yb;,10,1,0,0,0,0,0,0,0,13,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2743,      zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2744,      za = temp;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2748,      y = sqrt(za);,8,7,0,1,2,0,4,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2749,      temp = y * HEX_40000000;,0,0,1,0,0,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2750,      ya = y + temp - temp;,14,2,0,0,0,0,0,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2751,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2757,      double dx = zb / (2.0*y);,4,1,0,1,2,0,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2760,      double r = x/y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2761,      temp = r * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2762,      double ra = r + temp - temp;,10,3,0,0,0,0,4,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2763,      double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2768,      temp = ra + rb;,0,0,0,0,0,0,4,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2769,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2770,      ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2772,"      return atan(ra, rb, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2780,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2781,          return Double.NaN;,0,0,0,0,0,1,6,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2784,      if (x > 1.0 || x < -1.0) {,10,4,0,1,3,1,12,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2785,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2788,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2789,          return Math.PI;,12,2,0,0,0,1,0,0,0,14,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2792,      if (x == 1.0) {,4,0,0,1,3,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2793,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2796,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2797,          return Math.PI/2.0;,4,1,0,0,0,1,4,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2803,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2804,      final double xa = x + temp - temp;,14,3,0,0,0,1,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2805,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2808,      double ya = xa*xa;,8,1,0,0,0,0,4,0,0,14,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2809,      double yb = xa*xb*2.0 + xb*xb;,4,0,0,0,0,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2812,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2813,      yb = -yb;,6,1,0,0,0,0,0,0,0,7,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2815,      double za = 1.0 + ya;,12,1,0,0,0,0,0,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2816,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2818,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2819,      zb += -(temp - za - yb);,2,1,1,1,2,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2820,      za = temp;,8,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2823,      double y = sqrt(za);,14,2,0,1,2,0,8,0,0,25,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2824,      temp = y * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2825,      ya = y + temp - temp;,12,2,0,0,0,1,2,8,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2826,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2832,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2833,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2834,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2837,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2840,      if (Double.isInfinite(r)) { // x is effectively zero,2,0,0,2,5,1,10,0,0,13,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2841,          return Math.PI/2; // so return the appropriate value,0,0,0,0,0,2,0,0,0,2,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2844,      double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2845,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2850,      temp = ra + rb;,0,0,0,0,0,0,0,0,0,1,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2851,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2852,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2854,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2863,      long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,10,0,0,14,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2865,      boolean subnormal = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2867,      if (exponent == -1023) {,4,1,0,1,3,0,0,2,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2868,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2869,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2873,          subnormal = true;,2,0,0,0,0,0,0,0,0,3,17,16,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2874,          x *= 1.8014398509481984E16;  // 2^54,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2875,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,12,4,0,3,6,0,0,0,0,19,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2879,      if (exponent == 1024) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2881,          return x;,2,0,0,0,0,1,0,0,0,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2885,      int exp3 = exponent / 3;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,1,0,2,4,0,0,0,0,3,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2895,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2896,      est = est * mant + 0.0875862700108075;,10,2,0,0,0,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2897,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2898,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2899,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2901,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2906,      final double xs = x / (p2*p2*p2);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2907,      est += (xs - est*est*est) / (3*est*est);,16,4,0,2,4,0,0,2,0,23,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2908,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2911,      double temp = est * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2912,      double ya = est + temp - temp;,8,2,0,0,0,0,6,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2913,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2915,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2916,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2917,      temp = za * HEX_40000000;,28,10,0,0,0,0,0,0,0,40,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2918,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2919,      zb += za - temp2;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2920,      za = temp2;,10,2,0,0,0,1,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2922,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2923,      za = za * ya;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2925,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2926,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2927,      nb -= zb;,4,1,0,0,0,0,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2929,      est += (na+nb)/(3*est*est);,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2932,      est *= p2;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2934,      if (subnormal) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2935,          est *= 3.814697265625E-6;  // 2^-18,4,2,0,0,0,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2938,      return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2949,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2953,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2954,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2956,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2957,        double xb = x - xa;,6,1,0,0,0,0,6,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2960,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2961,            result = result * x; // ensure correct sign if calculation underflows,6,1,0,0,0,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2963,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2974,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2978,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2979,        final double factb = 3.145894820876798E-6;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2981,        double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2982,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,1,0,0,0,1,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2993,        return (x < 0) ? -x : x;,8,1,0,1,2,1,0,2,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3002,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,12,2,1,2,4,1,0,0,0,18,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3029,        if (Double.isInfinite(x)) {,10,3,1,2,5,0,6,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3030,            return Double.POSITIVE_INFINITY;,12,1,0,0,0,1,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3041,        if (Float.isInfinite(x)) {,8,2,0,2,5,1,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3042,            return Float.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,4,3,0,3,6,1,12,0,0,19,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3056,        if ((n > -1023) && (n < 1024)) {,0,0,0,3,7,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3062,            return d;,6,0,0,0,0,2,0,0,0,7,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3064,        if (n < -2098) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3065,            return (d > 0) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3067,        if (n > 2097) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,12,1,0,1,2,1,6,4,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3072,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3073,        final long sign = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,4,2,0,3,6,0,0,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3075,        long mantissa   = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3078,        int scaledExponent = exponent + n;,12,2,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3080,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3082,            if (scaledExponent > 0) {,4,1,0,1,3,0,4,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3085,            } else if (scaledExponent > -53) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3089,                mantissa = mantissa | (1L << 52);,4,2,0,1,2,0,0,0,0,7,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,8,2,0,2,4,1,0,0,0,13,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3093,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3094,                if (mostSignificantLostBit != 0) {,4,2,0,1,3,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3096,                    mantissa++;,4,1,0,0,0,0,4,4,0,14,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3098,                return Double.longBitsToDouble(sign | mantissa);,4,0,0,1,2,1,0,0,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3102,                return (sign == 0L) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3106,            if (exponent == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3109,                while ((mantissa >>> 52) != 1) {,0,0,0,2,5,0,6,0,0,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3110,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3111,                    --scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3113,                ++scaledExponent;,10,2,0,0,0,1,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3114,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3116,                if (scaledExponent < 2047) {,8,2,0,1,3,1,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,2,0,1,2,2,8,0,0,29,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3122,            } else if (scaledExponent < 2047) {,4,1,0,1,4,1,4,4,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,2,0,0,1,2,2,6,0,0,9,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3140,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0,0,0,4,9,0,0,0,0,13,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3146,            return f;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3148,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3149,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3151,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3156,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3157,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3158,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3159,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3162,        int scaledExponent = exponent + n;,10,1,0,0,0,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3164,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3166,            if (scaledExponent > 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,12,3,0,2,4,1,4,0,0,19,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3169,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3173,                mantissa = mantissa | (1 << 23);,14,3,0,1,2,0,0,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3177,                mantissa = mantissa >>> (1 - scaledExponent);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3178,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3180,                    mantissa++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3182,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3186,                return (sign == 0) ? 0.0f : -0.0f;,22,9,0,1,2,2,0,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3190,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3193,                while ((mantissa >>> 23) != 1) {,2,2,0,2,5,0,0,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3194,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3195,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3197,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3198,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3200,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3206,            } else if (scaledExponent < 255) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,4,1,1,3,7,0,10,0,0,27,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3250,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3251,        } else if (d == direction) {,8,2,0,1,4,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3252,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3253,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,26,6,0,1,2,1,0,0,0,34,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3255,        } else if (d == 0) {,6,1,0,1,4,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3261,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3262,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,2,0,0,8,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3263,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0,0,0,3,6,1,0,0,0,10,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0,0,0,3,6,1,6,0,0,6,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3306,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3307,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3308,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3309,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0,0,0,1,2,1,6,0,0,6,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3311,        } else if (f == 0f) {,2,1,0,1,4,0,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3317,        final int bits = Float.floatToIntBits(f);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3318,        final int sign = bits & 0x80000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3319,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0,0,0,3,6,1,0,0,0,10,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3335,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3339,            return x;,4,1,0,0,0,1,0,4,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3344,            y--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3348,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3362,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3370,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3372,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3373,            return x*y;,12,4,0,0,0,1,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3376,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3384,        double y = floor(x);,4,0,1,1,2,0,4,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3385,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3387,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3388,            if (y == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3389,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,0,1,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3391,            return y+1.0;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3393,        if (d < 0.5) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3394,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3398,        long z = (long) y;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3399,        return (z & 1) == 0 ? y : y + 1.0;,24,7,0,1,2,2,0,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3407,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3415,        return (int) floor(x + 0.5f);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3424,        return (a <= b) ? a : b;,8,1,0,1,2,1,6,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3433,        return (a <= b) ? a : b;,0,1,0,1,2,1,12,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3442,        if (a > b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3443,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3445,        if (a < b) {,8,2,0,1,3,0,0,0,0,10,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3446,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3449,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3450,            return Float.NaN;,8,0,0,0,0,1,2,2,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3454,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3455,        if (bits == 0x80000000) {,0,0,0,1,3,0,4,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3456,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3458,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3467,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3468,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3470,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3471,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3474,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3475,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3479,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3480,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3481,            return a;,6,1,0,0,0,1,0,0,0,8,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3483,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3492,        return (a <= b) ? b : a;,10,1,0,1,2,2,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3501,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3510,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3511,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3513,        if (a < b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3514,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3517,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3522,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3523,        if (bits == 0x80000000) {,4,1,0,1,3,0,6,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3524,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3526,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3536,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3538,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3539,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3542,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3543,            return Double.NaN;,4,0,0,0,0,1,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3547,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3548,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3549,            return b;,2,0,0,0,0,1,4,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3551,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3570,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,0,0,3,8,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3572,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3575,            final int expX = getExponent(x);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3576,            final int expY = getExponent(y);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3577,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3579,                return abs(x);,0,0,0,1,2,1,4,0,0,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3580,            } else if (expY > expX + 27) {,0,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3582,                return abs(y);,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3586,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3589,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3590,"                final double scaledY = scalb(y, -middleExp);",6,1,1,1,2,1,4,0,0,16,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3596,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",16,1,0,1,2,2,8,2,0,29,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3636,        long m = Double.doubleToLongBits(magnitude);,20,8,1,1,2,0,10,0,0,43,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3637,        long s = Double.doubleToLongBits(sign);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,6,0,0,21,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3639,            return magnitude;,4,0,0,0,0,1,10,2,0,17,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3641,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3653,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3654,        int s = Float.floatToIntBits(sign);,12,1,0,1,2,0,6,2,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3656,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3658,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,2,3,0,4,8,3,6,4,0,17,66,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,6,3,0,3,6,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3693,        PrintStream out = System.out;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0,0,0,1,2,0,0,0,0,3,100,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",4,0,0,1,2,0,8,0,0,13,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",2,0,0,1,2,0,0,0,0,3,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,1,2,0,10,0,0,11,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,1,2,0,10,0,0,11,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,1,2,0,0,0,0,3,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3705,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,145,    public ResizableDoubleArray() {,2,0,0,1,3,1,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,146,        internalArray = new double[initialCapacity];,12,3,1,1,2,0,0,0,0,20,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,182,    public ResizableDoubleArray(double[] initialArray) {,4,0,0,2,5,1,10,0,0,15,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,183,        if (initialArray == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,184,            this.internalArray = new double[initialCapacity];,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,186,            this.internalArray = new double[initialArray.length];,6,0,0,1,2,0,0,0,0,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",6,1,0,1,2,0,0,0,0,8,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,188,            initialCapacity = initialArray.length;,8,0,0,0,0,1,2,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,189,            numElements = initialArray.length;,6,0,0,0,0,0,0,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,191,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,215,"    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {",6,0,0,1,3,1,0,0,0,7,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,216,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,217,        setInitialCapacity(initialCapacity);,4,4,0,1,2,0,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,218,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,219,        setContractionCriteria(expansionFactor +0.5f);,2,1,0,1,2,0,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,220,    },4,1,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,242,        float contractionCriteria) {,2,0,0,0,2,0,0,0,0,2,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,243,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,4,0,0,8,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,244,        setContractionCriteria(contractionCriteria);,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,245,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,246,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,271,"            float contractionCriteria, int expansionMode) {",4,0,0,0,2,0,0,0,0,4,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,272,        this.expansionFactor = expansionFactor;,0,0,0,0,0,0,10,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,273,        setContractionCriteria(contractionCriteria);,4,4,0,1,2,0,4,0,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,274,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,275,        setExpansionMode(expansionMode);,0,0,0,1,2,0,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,276,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,277,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,290,        throws NullArgumentException {,0,0,0,0,1,0,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,291,        MathUtils.checkNotNull(original);,0,0,0,1,2,0,6,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,292,"        copy(original, this);",8,0,0,1,2,0,10,0,0,21,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,293,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,318,        final double[] tempArray = new double[numElements + values.length + 1];,8,1,0,2,4,1,0,0,0,10,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,319,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,1,2,0,12,0,0,12,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",8,0,0,1,2,0,10,0,0,19,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,321,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,322,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,323,        numElements += values.length;,6,0,0,0,0,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,324,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,343,        double discarded = internalArray[startIndex];,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,8,3,0,3,7,0,0,0,0,11,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,346,            expand();,0,0,0,1,2,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,349,        startIndex += 1;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,352,        internalArray[startIndex + (numElements - 1)] = value;,6,2,1,2,4,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,355,        if (shouldContract()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,356,            contract();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,358,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,372,        if (numElements < 1) {,6,1,0,1,3,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,373,            throw new MathIllegalStateException(,0,0,0,0,1,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,377,        double discarded = internalArray[startIndex + (numElements - 1)];,6,2,1,2,4,0,0,0,0,10,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,379,        internalArray[startIndex + (numElements - 1)] = value;,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,381,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,397,        if (contraction < expansion) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,398,            throw new MathIllegalArgumentException(,2,0,0,0,1,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,403,        if (contraction <= 1.0) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,404,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,409,        if (expansion <= 1.0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,410,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,414,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,421,        numElements = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,422,        startIndex = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,423,        internalArray = new double[initialCapacity];,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,424,    },6,1,0,0,1,0,0,0,0,8,1,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,455,"        discardExtremeElements(i,true);",0,0,0,1,2,0,4,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,472,"        discardExtremeElements(i,false);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,496,        if (i > numElements) {,4,0,0,1,3,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,497,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,500,       } else if (i < 0) {,2,1,0,1,4,0,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,501,           throw new MathIllegalArgumentException(,8,3,0,0,1,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,506,            numElements -= i;,4,0,0,0,0,0,0,0,0,5,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,507,            if (front) {,2,0,0,1,3,0,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,508,                startIndex += i;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,511,        if (shouldContract()) {,2,0,0,2,5,1,6,2,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,512,            contract();,0,0,0,1,2,0,2,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,514,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,18,5,0,1,2,0,6,0,0,31,65,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,551,        double[] tempArray = new double[size];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",6,0,0,1,2,0,8,0,0,16,71,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,554,        internalArray = tempArray;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,555,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,570,        return contractionCriteria;,4,1,0,0,0,1,0,0,0,5,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,582,        if (index >= numElements) {,10,2,0,1,3,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,583,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,584,        } else if (index >= 0) {,2,1,0,1,4,0,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,585,            return internalArray[startIndex + index];,4,1,1,1,2,1,0,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,587,            throw new ArrayIndexOutOfBoundsException(index);,4,0,0,1,2,0,0,2,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,618,        return expansionFactor;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,629,        return expansionMode;,6,1,0,0,0,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,641,        return internalArray.length;,4,0,0,0,0,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,651,        return numElements;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,667,        return internalArray;,12,1,0,0,0,1,0,0,0,14,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,676,"        checkContractExpand(contractionCriteria, getExpansionFactor());",0,0,0,2,4,0,6,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,677,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,678,            this.contractionCriteria = contractionCriteria;,0,0,0,0,0,0,8,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,679,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,680,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,696,        if (index < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,697,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,699,        if (index + 1 > numElements) {,6,2,0,1,3,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,700,            numElements = index + 1;,4,1,0,0,0,0,0,0,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,702,        if ((startIndex + index) >= internalArray.length) {,0,0,0,2,5,0,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,703,            expandTo(startIndex + (index + 1));,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,705,        internalArray[startIndex + index] = value;,6,1,1,1,2,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,706,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,720,"        checkContractExpand(getContractionCriteria(), expansionFactor);",0,0,0,2,4,0,6,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,722,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,723,            this.expansionFactor = expansionFactor;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,724,        },8,1,0,0,1,0,0,0,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,725,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,8,2,0,0,1,0,0,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,737,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,742,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,743,            this.expansionMode = expansionMode;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,744,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,745,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,760,            throw new MathIllegalArgumentException(,2,0,0,0,1,0,0,2,0,4,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,777,        if (i < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,778,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,785,        if ((startIndex + i) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,786,            expandTo(startIndex + i);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,790,        numElements = i;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,791,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,803,            return (internalArray.length - numElements) > contractionCriteria;,8,2,0,1,2,1,0,0,0,10,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,817,        return startIndex;,4,0,0,0,0,1,0,0,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,839,        MathUtils.checkNotNull(source);,0,0,0,1,2,0,6,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,840,        MathUtils.checkNotNull(dest);,2,0,0,1,2,1,8,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,841,        synchronized(source) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,842,           synchronized(dest) {,2,0,0,1,3,0,0,0,0,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,843,               dest.initialCapacity = source.initialCapacity;,6,0,0,0,0,0,6,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,844,               dest.contractionCriteria = source.contractionCriteria;,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,845,               dest.expansionFactor = source.expansionFactor;,8,0,0,0,0,0,0,0,0,9,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,846,               dest.expansionMode = source.expansionMode;,8,0,0,0,0,0,0,0,0,9,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,847,               dest.internalArray = new double[source.internalArray.length];,0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",8,0,0,0,1,0,4,0,0,12,61,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,850,               dest.numElements = source.numElements;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,851,               dest.startIndex = source.startIndex;,14,3,0,0,0,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,852,           },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,853,       },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,854,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,865,        ResizableDoubleArray result = new ResizableDoubleArray();,2,0,0,1,2,0,0,4,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,866,"        copy(this, result);",4,1,0,1,2,0,8,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,867,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,881,        if (object == this ) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,882,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,884,       if (object instanceof ResizableDoubleArray == false) {,2,1,0,1,3,0,0,2,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,885,            return false;,10,1,0,0,0,1,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,887,       synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,888,           synchronized(object) {,8,0,0,1,3,0,4,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,889,               boolean result = true;,2,0,0,0,0,0,0,0,0,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,10,1,0,1,2,0,0,4,0,16,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,891,               result = result && (other.initialCapacity == initialCapacity);,10,2,0,1,2,0,0,0,0,13,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,892,               result = result && (other.contractionCriteria == contractionCriteria);,0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,893,               result = result && (other.expansionFactor == expansionFactor);,10,2,0,1,2,0,0,0,0,13,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,894,               result = result && (other.expansionMode == expansionMode);,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,895,               result = result && (other.numElements == numElements);,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,896,               result = result && (other.startIndex == startIndex);,10,2,0,1,2,0,0,0,0,13,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,897,               if (!result) {,2,0,0,1,3,0,0,0,0,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,898,                   return false;,0,0,0,0,0,1,0,0,0,1,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,900,"                   return Arrays.equals(internalArray, other.internalArray);",4,0,0,1,2,1,10,0,0,14,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,902,           },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,903,       },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,914,        int[] hashData = new int[7];,2,0,0,2,4,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,915,        hashData[0] = new Float(expansionFactor).hashCode();,2,0,1,3,6,0,2,2,0,9,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,916,        hashData[1] = new Float(contractionCriteria).hashCode();,2,0,1,3,6,0,2,2,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,917,        hashData[2] = expansionMode;,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,918,            hashData[3] = Arrays.hashCode(internalArray);,0,0,1,2,4,0,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,919,            hashData[4] = initialCapacity;,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,920,            hashData[5] = numElements;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,921,            hashData[6] = startIndex;,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,922,        return Arrays.hashCode(hashData);,4,0,0,1,2,2,6,4,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,12,3,0,1,2,1,0,0,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,60,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,64,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,8,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,108,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,109,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,110,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,112,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,113,            return n;,6,0,0,0,0,1,6,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,116,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,117,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,125,        long result = 1;,10,2,0,0,0,0,4,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,126,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,128,            int i = n - k + 1;,18,2,0,0,0,0,4,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,131,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,133,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,136,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,144,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,145,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,146,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,148,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,152,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,153,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,0,8,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,154,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,155,"                result = mulAndCheck(result / (j / d), i / d);",0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,156,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,186,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,187,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,188,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,190,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,191,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,193,        if (k > n/2) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,194,"            return binomialCoefficientDouble(n, n - k);",0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,196,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,197,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,200,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,202,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,205,        return FastMath.floor(result + 0.5);,4,1,1,1,2,1,10,0,0,19,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,228,"        ArithmeticUtils.checkBinomial(n, k);",4,3,0,1,2,0,12,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,229,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,230,            return 0;,4,2,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,232,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,233,            return FastMath.log(n);,0,0,0,1,2,1,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,240,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,241,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,248,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,10,0,0,10,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,252,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,253,"            return binomialCoefficientLog(n, n - k);",10,3,0,1,2,1,24,0,0,37,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,259,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,262,        for (int i = n - k + 1; i <= n; i++) {,14,4,0,1,3,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,263,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,267,        for (int i = 2; i <= k; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,268,            logSum -= FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,271,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,304,            throw new MathArithmeticException();,22,9,0,1,2,0,0,0,0,32,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0,0,0,0,1,0,0,0,0,1,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,327,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,328,            return factorial(n);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,2,1,1,3,6,1,6,0,0,14,75,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,341,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0,0,0,0,1,0,0,0,0,1,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,348,        double logSum = 0;,10,1,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,349,        for (int i = 2; i <= n; i++) {,10,1,0,1,3,0,6,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,350,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,352,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,385,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,386,        int v = q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,392,            return FastMath.abs(u) + FastMath.abs(v);,0,0,0,2,4,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,399,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,400,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,402,        if (v > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,403,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,409,            u /= 2;,2,0,0,0,0,0,0,0,0,4,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,410,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,413,        if (k == 31) {,10,9,0,1,3,0,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",6,0,0,0,1,0,0,2,0,8,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,425,            while ((t & 1) == 0) { // while t is even..,4,2,0,2,5,1,2,0,0,9,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,426,                t /= 2; // cast out twos,18,2,0,0,0,1,2,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,429,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,430,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,432,                v = t;,10,2,0,0,0,1,0,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,435,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,438,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,472,        long u = p;,8,1,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,473,        long v = q;,12,1,0,0,0,0,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,474,        if ((u == 0) || (v == 0)) {,6,1,0,3,7,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0,0,0,3,7,0,0,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,486,        if (u > 0) {,2,0,0,1,3,1,12,2,0,17,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,487,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,489,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,490,            v = -v;,10,1,0,0,0,0,0,0,0,12,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,493,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,496,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,497,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,498,            k++; // cast out twos.,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,500,        if (k == 63) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,512,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,516,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,517,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,519,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,522,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,525,        } while (t != 0);,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,526,        return -u * (1L << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,552,        if (a == 0 || b == 0){,6,3,0,1,3,0,0,2,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,553,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,556,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,560,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,586,        if (a == 0 || b == 0){,6,3,0,1,3,1,4,2,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,587,            return 0;,0,0,0,0,0,1,4,2,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,590,        if (lcm == Long.MIN_VALUE){,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",14,2,0,0,1,1,0,2,0,20,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,594,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,608,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,610,            throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,612,        return (int)m;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,629,"            ret = mulAndCheck(b, a);",4,0,1,1,2,1,6,4,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,631,            if (a < 0) {,6,1,0,1,3,0,6,2,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,632,                if (b < 0) {,6,1,0,1,3,0,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,634,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,635,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,637,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,639,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,641,                    if (Long.MIN_VALUE / b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,642,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,644,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,649,                    ret = 0;,12,1,0,0,0,0,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,651,            } else if (a > 0) {,12,2,0,1,4,0,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,656,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,657,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,659,                    throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,663,                ret = 0;,6,1,0,0,0,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,666,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,680,        long s = (long)x - (long)y;,10,1,1,2,4,1,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,684,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,699,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,700,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,701,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",2,0,0,1,2,1,6,0,0,9,80,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,709,        return ret;,10,2,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,721,        if (e < 0) {,4,1,1,1,3,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,725,        int result = 1;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,727,        while (e != 0) {,8,1,1,1,3,0,6,0,0,20,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,728,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,729,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,731,            k2p *= k2p;,12,1,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,732,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,751,        int result = 1;,6,1,1,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,752,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,753,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,754,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,755,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,757,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,758,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,761,        return result;,8,1,0,0,0,1,0,0,0,9,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,773,        if (e < 0) {,6,2,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,1,0,1,2,0,0,0,0,7,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,778,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,779,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,780,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,781,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,783,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,784,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,787,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,799,        if (e < 0) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,803,        long result = 1l;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,805,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,806,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,807,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,809,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,810,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,813,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,825,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,829,        return k.pow(e);,0,0,0,1,2,1,6,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,841,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,845,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,846,        BigInteger k2p    = k;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,847,        while (e != 0) {,4,1,0,1,3,1,2,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,848,            if ((e & 0x1) != 0) {,12,3,0,2,5,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,849,                result = result.multiply(k2p);,4,0,0,1,2,0,12,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,851,            k2p = k2p.multiply(k2p);,10,1,0,1,2,0,0,0,0,12,24,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,855,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,10,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,873,        BigInteger k2p    = k;,4,0,1,0,0,0,4,2,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,874,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,875,            if (e.testBit(0)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,876,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,879,            e = e.shiftRight(1);,4,0,0,1,2,0,4,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,900,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,904,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,907,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,908,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,910,"                        throw new MathArithmeticException(pattern, a, b);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,921,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,928,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,940,        if (n < k) {,4,1,0,1,3,0,4,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,944,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,4,4,0,14,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,947,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,956,        return (n > 0) && ((n & (n - 1)) == 0);,10,5,0,4,8,1,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,37,"        super(value, 0, true);",8,2,0,1,2,1,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,58,"        context.addMessage(pattern, args);",6,1,0,1,2,1,8,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,59,                            final TiesStrategy tiesStrategy) {,2,0,0,0,2,1,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,60,"        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,76,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,80,            throw new NoDataException();,0,0,0,1,2,0,0,2,0,2,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,37,        this(LocalizedFormats.NO_DATA);,18,2,0,1,2,0,0,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,46,    },0,0,0,0,1,0,4,0,0,4,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,92,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,93,        tiesStrategy = DEFAULT_TIES_STRATEGY;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,94,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,95,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,104,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,105,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,106,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,12,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,107,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,116,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,117,        this.nanStrategy = nanStrategy;,12,2,1,0,0,1,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,118,        tiesStrategy = DEFAULT_TIES_STRATEGY;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,119,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,142,        super();,2,0,1,1,2,0,0,0,0,9,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,143,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,144,        nanStrategy = DEFAULT_NAN_STRATEGY;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,145,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,146,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,158,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,159,        this.nanStrategy = nanStrategy;,4,2,0,0,0,0,8,0,0,14,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,160,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,161,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,2,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,170,        return nanStrategy;,4,1,0,0,0,1,0,0,0,6,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,179,        return tiesStrategy;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,202,"                recodeNaNs(ranks, Double.POSITIVE_INFINITY);",4,1,0,1,2,0,16,0,0,21,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,203,                break;,8,4,0,0,0,0,0,0,0,14,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,205,"                recodeNaNs(ranks, Double.NEGATIVE_INFINITY);",4,0,0,1,2,0,4,0,0,8,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,206,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,208,                ranks = removeNaNs(ranks);,2,0,0,1,2,0,4,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,209,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,214,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,232,"                    resolveTie(out, tiesTrace);",0,0,0,1,2,0,6,0,0,6,27,11,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,238,                tiesTrace.add(ranks[i].getPosition());,0,0,1,3,6,0,6,0,0,10,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,243,"            resolveTie(out, tiesTrace);",0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,259,        if (!containsNaNs(ranks)) {,2,0,0,2,5,0,8,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,260,            return ranks;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,262,        IntDoublePair[] outRanks = new IntDoublePair[ranks.length];,0,0,0,2,4,0,0,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,263,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,264,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,4,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,265,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,267,                for (int k = i + 1; k < ranks.length; k++) {,12,2,0,1,3,0,0,0,0,15,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,268,                    ranks[k] = new IntDoublePair(,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,272,                outRanks[j] = new IntDoublePair(,0,0,1,1,3,0,0,2,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,274,                j++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,277,        IntDoublePair[] returnRanks = new IntDoublePair[j];,2,0,1,2,4,0,0,4,0,8,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,278,"        System.arraycopy(outRanks, 0, returnRanks, 0, j);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,279,        return returnRanks;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,289,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,290,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,291,                ranks[i] = new IntDoublePair(,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,295,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,304,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,305,            if (Double.isNaN(ranks[i].getValue())) {,2,0,1,4,9,0,10,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,306,                return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,309,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,329,        final double c = ranks[tiesTrace.get(0)];,0,0,0,2,4,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,332,        final int length = tiesTrace.size();,12,1,0,1,2,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,4,0,0,1,3,0,0,0,0,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,336,"                fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);",6,5,0,2,4,0,6,0,0,17,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,337,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,339,"                fill(ranks, tiesTrace, c + length - 1);",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,340,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,342,"                fill(ranks, tiesTrace, c);",0,0,0,1,2,0,8,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,343,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,345,                Iterator<Integer> iterator = tiesTrace.iterator();,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,346,                long f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,347,                while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,348,                    ranks[iterator.next()] =,0,0,1,2,4,0,4,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,354,                iterator = tiesTrace.iterator();,2,0,0,1,2,0,4,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,355,                f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,356,                int i = 0;,2,0,0,0,0,0,0,0,0,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,357,                while (iterator.hasNext()) {,2,0,0,2,5,0,4,0,0,6,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,358,                    ranks[iterator.next()] = f + i++;,8,1,0,2,4,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,362,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,364,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,374,        Iterator<Integer> iterator = tiesTrace.iterator();,2,0,0,1,2,0,4,4,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,375,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,376,            data[iterator.next()] = value;,2,0,1,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,378,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,390,        Iterator<Integer> iterator = nanPositions.iterator();,2,0,0,1,2,0,4,4,0,10,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,391,        while (iterator.hasNext()) {,2,0,0,2,5,0,4,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,392,            ranks[iterator.next().intValue()] = Double.NaN;,4,0,1,3,6,0,6,0,0,13,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,395,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,407,                out.add(Integer.valueOf(i));,0,0,0,2,4,0,10,0,0,10,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,4,0,0,1,3,0,6,0,0,11,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,62,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,63,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,107,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,108,"            throw new OutOfRangeException(p, 0, 1);",10,1,0,1,2,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,111,        double lowerBound = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,112,        if (p == 0.0) {,10,2,0,1,3,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,113,            return lowerBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,116,        double upperBound = getSupportUpperBound();,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,117,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,118,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,122,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,128,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,131,                lowerBound = -1.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,132,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,133,                    lowerBound *= 2.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,138,        if (upperBound == Double.POSITIVE_INFINITY) {,8,1,0,1,3,1,10,4,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,139,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,142,                upperBound = 1.0;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,143,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,144,                    upperBound *= 2.0;,2,0,0,0,0,0,0,0,0,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,8,0,0,1,3,2,0,6,0,16,61,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,156,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,161,        if (!isSupportConnected()) {,0,0,0,2,5,0,2,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,163,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,164,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,2,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,165,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,166,                if (cumulativeProbability(x - dx) == px) {,0,0,0,2,5,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,167,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,168,                    while (upperBound - lowerBound > dx) {,6,2,0,1,3,0,0,0,0,8,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,169,                        final double midPoint = 0.5 * (lowerBound + upperBound);,6,2,0,1,2,1,0,0,0,9,56,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,170,                        if (cumulativeProbability(midPoint) < px) {,2,1,0,2,5,0,4,0,0,7,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,171,                            lowerBound = midPoint;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,173,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,175,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,176,                    return upperBound;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,180,        return x;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,191,        return solverAbsoluteAccuracy;,6,0,0,0,0,1,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,196,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,208,        return randomData.nextInversionDeviate(this);,2,1,0,1,2,1,0,0,0,3,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,218,        if (sampleSize <= 0) {,4,1,0,1,3,0,0,2,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",6,1,0,0,1,0,2,2,0,11,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,222,        double[] out = new double[sampleSize];,2,0,1,2,4,0,10,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,223,        for (int i = 0; i < sampleSize; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,224,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,226,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",2,0,0,1,2,0,0,0,0,2,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,90,"        this(0, 1);",6,1,0,1,2,0,4,0,0,11,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,91,    },6,0,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,99,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,108,        return standardDeviation;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,124,        final double x0 = x - mean;,11,2,0,0,0,1,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,125,        final double x1 = x0 / standardDeviation;,6,1,0,0,0,1,0,0,0,8,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,126,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,0,0,0,2,4,1,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,139,            return dev < 0 ? 0.0d : 1.0d;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,148,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,149,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0,0,0,0,1,0,0,0,0,1,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,152,        final double denom = standardDeviation * SQRT2;,8,1,0,0,0,1,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,153,        final double v0 = (x0 - mean) / denom;,0,0,0,1,2,0,0,2,0,2,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,154,        final double v1 = (x1 - mean) / denom;,8,2,0,1,2,1,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,155,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,1,2,1,8,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,161,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,170,        return getMean();,0,0,0,1,2,1,2,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,179,        final double s = getStandardDeviation();,2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,180,        return s * s;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,193,        return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,206,        return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,211,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,216,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,227,        return true;,8,1,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,233,"        return randomData.nextGaussian(mean, standardDeviation);",0,0,0,1,2,1,0,0,0,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",20,1,0,1,2,0,0,0,0,22,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,63,        this.lo = lo;,2,0,0,0,0,0,0,2,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,71,        return lo;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,8,1,0,1,2,1,8,2,0,21,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,14,2,0,0,0,1,0,0,0,18,49,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,10,5,0,3,6,1,0,0,0,15,84,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,0,0,0,0,5,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,4,1,1,0,0,0,4,0,0,23,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,4,0,0,0,0,1,0,0,0,4,25,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,12,6,0,1,3,0,10,0,0,28,24,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,0,0,0,0,0,1,0,0,0,1,45,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,8,3,1,1,2,1,0,0,0,20,36,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,4,2,0,0,0,1,10,0,0,17,35,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,96,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,",0,0,0,0,1,0,0,0,0,1,54,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",12,3,0,1,2,0,0,0,0,17,67,4,0.10256,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",0,0,0,4,8,0,0,0,0,12,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,0,0,0,1,2,0,0,0,0,3,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,0,0,0,2,4,1,0,0,0,7,92,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,0,0,0,4,8,1,0,0,0,13,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,0,6,2,0,10,54,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,4,0,0,1,2,0,0,0,0,5,54,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,        final double ca1        = SPLIT_FACTOR * a1;,12,1,0,0,0,1,0,0,0,15,44,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,        final double a1High     = ca1 - (ca1 - a1);,16,3,1,1,2,1,0,0,0,24,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,        final double a1Low      = a1 - a1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,        final double ca2        = SPLIT_FACTOR * a2;,6,1,1,0,0,1,0,0,0,13,44,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,0,0,0,5,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,        final double cb2        = SPLIT_FACTOR * b2;,6,0,0,0,0,4,0,4,0,15,44,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,        final double b2Low      = b2 - b2High;,12,4,1,0,0,1,12,0,0,34,38,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,9,0,3,6,1,0,0,0,32,110,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,699,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,        double result = s12High + (prod1Low + prod2Low + s12Low);,2,0,1,1,2,0,0,0,0,5,57,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,706,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,        return result;,0,0,0,0,0,1,4,0,0,4,14,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,        final double a1High     = ca1 - (ca1 - a1);,8,1,0,1,2,0,0,0,0,9,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,        final double a1Low      = a1 - a1High;,14,3,0,0,0,0,6,0,0,23,38,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,758,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,        final double prod1High  = a1 * b1;,16,2,0,0,0,1,0,0,0,21,34,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,6,0,0,12,38,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,770,        final double b2High     = cb2 - (cb2 - b2);,16,2,0,1,2,1,4,4,0,28,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,771,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,        final double prod2High  = a2 * b2;,8,2,0,0,0,0,0,0,0,10,34,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,775,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,778,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,779,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,        final double a3Low      = a3 - a3High;,8,2,0,0,0,0,0,0,0,10,38,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,781,        final double cb3        = SPLIT_FACTOR * b3;,8,4,0,0,0,0,6,2,0,20,44,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,782,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,783,        final double b3Low      = b3 - b3High;,4,0,1,0,0,1,12,0,0,19,38,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,786,        final double prod3High  = a3 * b3;,2,0,0,0,0,0,0,0,0,2,34,9,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,787,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,790,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,791,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,792,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,3,0,3,6,3,0,0,0,19,86,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,795,        final double s123High   = s12High + prod3High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,796,        final double s123Prime  = s123High - prod3High;,14,1,0,0,0,0,0,0,0,17,47,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,797,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0,0,0,3,6,0,0,0,0,9,87,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,801,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,803,        if (Double.isNaN(result)) {,10,0,0,2,5,2,0,2,0,16,27,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,809,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,50,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,51,    },34,10,0,0,1,4,14,0,0,65,1,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,395,        if (barycenter == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,398,        return barycenter;,2,0,0,0,0,1,8,0,0,11,18,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,482,            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);,0,0,0,1,2,0,0,0,0,3,72,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,485,"            recurseSides(node.getPlus(), split.getPlus(), sides);",0,0,0,3,6,0,12,0,0,12,53,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,488,            if (!(sides.plusFound() && sides.minusFound())) {,4,0,0,4,9,0,12,0,0,18,49,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,489,"                recurseSides(node.getMinus(), split.getMinus(), sides);",0,0,0,3,6,0,12,0,0,12,55,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,503,                    sides.rememberMinusFound();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,95,"    public Vector3D(double x, double y, double z) {",8,0,0,1,3,1,0,0,0,9,47,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,96,        this.x = x;,0,0,0,0,0,0,0,0,0,0,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,97,        this.y = y;,2,0,1,0,0,0,2,0,0,8,11,11,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,98,        this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,138,        this.x = a * u.x;,10,1,0,0,0,0,0,0,0,13,17,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,139,        this.y = a * u.y;,12,2,0,0,0,0,0,0,0,15,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,140,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,141,    },2,0,0,0,1,0,0,0,0,3,1,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",14,0,0,1,3,1,6,6,0,28,65,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",10,1,0,1,2,0,12,0,0,24,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",0,0,0,1,2,0,0,0,0,3,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",12,2,0,1,2,3,0,4,0,22,60,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,206,        return y;,2,0,0,0,0,1,4,0,0,6,9,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,275,        final Vector3D v3 = (Vector3D) v;,8,0,0,1,2,1,0,4,0,13,33,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",22,3,0,1,2,1,0,2,0,28,50,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,321,        double threshold = 0.6 * getNorm();,0,0,0,1,2,0,0,0,0,3,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,322,        if (threshold == 0) {,2,0,0,1,3,0,0,0,0,2,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,326,        if ((x >= -threshold) && (x <= threshold)) {,8,3,0,3,7,0,0,0,0,12,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,14,4,0,1,2,0,4,0,0,23,51,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,328,"            return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,329,        } else if ((y >= -threshold) && (y <= threshold)) {,8,3,0,3,8,0,0,0,0,12,51,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,330,            double inverse  = 1 / FastMath.sqrt(x * x + z * z);,18,5,0,1,2,0,4,0,0,27,51,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,462,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,68,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,519,        return v1.crossProduct(v2);,0,0,0,1,2,1,6,0,0,6,27,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,118,        getTree(true).visit(new FacetsContributionVisitor());,0,0,0,3,6,0,4,2,0,7,53,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,42,"public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,78,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,54,"    public Line(final Vector3D p1, final Vector3D p2) {",10,0,0,1,3,4,0,8,0,22,51,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,55,"        reset(p1, p2);",0,1,1,1,2,0,6,0,0,14,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,74,        final Vector3D delta = p2.subtract(p1);,4,0,0,1,2,4,6,2,0,16,39,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,75,        final double norm2 = delta.getNormSq();,6,1,0,1,2,1,4,0,0,13,39,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",0,0,0,2,4,0,0,0,0,6,65,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,94,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,120,"        return new Vector3D(1.0, zero, abscissa, direction);",10,3,0,1,2,1,0,2,0,15,52,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,134,        return pointAt(((Vector1D) point).getX());,2,0,0,4,8,1,4,2,0,8,42,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,55,    public Plane(final Vector3D normal) {,6,0,1,1,3,2,0,2,0,13,37,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,56,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,57,        originOffset = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,58,        setFrame();,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,66,"    public Plane(final Vector3D p, final Vector3D normal) {",6,0,0,1,3,3,0,4,0,13,55,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,67,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,68,        originOffset = -p.dotProduct(w);,6,1,0,1,2,0,6,0,0,16,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,69,        setFrame();,8,0,0,1,2,0,0,0,0,8,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,90,    public Plane(final Plane plane) {,0,0,0,1,3,0,0,0,0,4,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,91,        originOffset = plane.originOffset;,6,0,0,0,0,0,0,0,0,7,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,92,        origin = plane.origin;,6,0,0,0,0,0,0,0,0,7,22,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,93,        u      = plane.u;,6,0,0,0,0,0,0,0,0,7,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,94,        v      = plane.v;,10,0,0,0,0,0,0,0,0,11,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,95,        w      = plane.w;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,105,        return new Plane(this);,0,0,0,1,2,1,0,2,0,2,23,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,137,        final double norm = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,138,        if (norm < 1.0e-10) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,141,"        w = new Vector3D(1.0 / norm, normal);",10,4,1,1,2,0,0,2,0,21,37,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,147,"        origin = new Vector3D(-originOffset, w);",6,0,0,1,2,0,0,2,0,10,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,148,        u = w.orthogonal();,2,0,0,1,2,0,4,0,0,7,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,149,"        v = Vector3D.crossProduct(w, u);",2,0,0,1,2,0,8,0,0,11,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,171,        return w;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,225,"        return new Vector2D(point.dotProduct(u), point.dotProduct(v));",0,0,0,3,6,1,12,2,0,14,62,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,235,        final Vector2D p2D = (Vector2D) point;,4,0,0,1,2,1,0,4,0,9,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,236,"        return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);",0,0,1,3,6,1,4,0,0,13,68,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,322,"        final Vector3D direction = Vector3D.crossProduct(w, other.w);",0,0,0,1,2,0,0,0,0,3,61,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,323,        if (direction.getNorm() < 1.0e-10) {,0,1,0,2,5,0,4,0,0,5,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,326,"        final Vector3D point = intersection(this, other, new Plane(direction));",8,0,0,2,4,1,4,4,0,18,71,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,327,"        return new Line(point, point.add(direction));",8,0,1,2,4,1,6,2,0,19,45,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,339,        final double a1 = plane1.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,340,        final double b1 = plane1.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,341,        final double c1 = plane1.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,342,        final double d1 = plane1.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,344,        final double a2 = plane2.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,345,        final double b2 = plane2.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,346,        final double c2 = plane2.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,347,        final double d2 = plane2.originOffset;,14,1,0,0,0,1,0,0,0,17,38,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,349,        final double a3 = plane3.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,350,        final double b3 = plane3.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,351,        final double c3 = plane3.w.getZ();,4,2,0,1,2,0,4,0,0,11,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,352,        final double d3 = plane3.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,356,        final double a23         = b2 * c3 - b3 * c2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,357,        final double b23         = c2 * a3 - c3 * a2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,358,        final double c23         = a2 * b3 - a3 * b2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,359,        final double determinant = a1 * a23 + b1 * b23 + c1 * c23;,14,5,0,0,0,1,0,0,0,20,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,360,        if (FastMath.abs(determinant) < 1.0e-10) {,0,2,0,2,5,0,12,0,0,14,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,364,        final double r = 1.0 / determinant;,4,1,0,0,0,1,0,0,0,6,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,365,        return new Vector3D(,0,0,0,0,1,1,0,2,0,2,20,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,376,"        return new SubPlane(this, new PolygonsSet());",0,0,0,2,4,1,0,0,0,7,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,34,"public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,92,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,42,"        super(hyperplane, remainingRegion);",4,0,0,1,2,0,0,0,0,4,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,43,    },4,1,0,0,1,0,0,0,0,5,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,49,"        return new SubPlane(hyperplane, remainingRegion);",4,0,0,1,2,1,0,2,0,6,49,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,56,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,57,        final Plane thisPlane  = (Plane) getHyperplane();,0,0,0,2,4,0,0,0,0,6,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,58,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,60,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,74,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,75,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,76,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",2,0,0,3,6,0,12,2,0,16,85,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,77,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,0,0,0,3,7,0,0,0,0,10,52,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,78,            final Vector2D tmp = p;,0,0,0,0,0,0,0,0,0,0,23,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,79,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,80,            q           = tmp;,4,0,0,0,0,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,82,        final org.apache.commons.math3.geometry.euclidean.twod.Line line2D =,22,4,0,0,0,1,16,0,0,44,68,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,86,        return getRemainingRegion().side(line2D);,2,0,0,2,4,1,6,0,0,9,41,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,99,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,100,        final Plane thisPlane  = (Plane) getHyperplane();,2,0,0,2,4,1,2,4,0,9,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,101,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,103,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,112,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,113,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,114,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",4,0,0,3,6,0,18,2,0,25,85,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,115,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,2,1,0,3,7,0,8,0,0,12,52,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,116,            final Vector2D tmp = p;,4,0,0,0,0,1,0,2,0,7,23,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,117,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,118,            q           = tmp;,10,0,0,0,0,0,8,0,0,20,18,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,120,        final SubHyperplane<Euclidean2D> l2DMinus =,2,0,0,0,0,1,0,4,0,7,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,122,        final SubHyperplane<Euclidean2D> l2DPlus =,2,0,0,0,0,1,0,4,0,7,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,125,        final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus);,0,0,0,3,6,0,0,0,0,9,91,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,126,        final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?,2,0,0,3,6,1,8,4,0,15,90,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,131,        final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?,12,1,0,3,6,1,8,4,0,27,91,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,136,"        return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),",0,0,0,3,7,1,0,0,0,11,105,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,137,        public FacetsContributionVisitor() {,0,0,0,1,3,0,0,0,0,4,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,138,            setSize(0);,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,139,"            setBarycenter(new Vector3D(0, 0, 0));",0,0,0,2,4,0,2,2,0,4,37,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,140,        },2,0,0,0,1,1,0,0,0,3,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,144,            return Order.MINUS_SUB_PLUS;,4,0,0,0,0,1,0,0,0,4,28,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,150,            final BoundaryAttribute<Euclidean3D> attribute =,2,0,0,0,0,1,0,4,0,7,48,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,152,            if (attribute.getPlusOutside() != null) {,0,1,0,2,5,0,4,0,0,5,41,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,153,"                addContribution(attribute.getPlusOutside(), false);",0,0,1,2,4,0,4,0,0,6,51,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,155,            if (attribute.getPlusInside() != null) {,0,0,0,2,5,0,0,0,0,7,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,158,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,162,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,170,            final Region<Euclidean2D> polygon = ((SubPlane) facet).getRemainingRegion();,0,0,0,3,6,0,0,0,0,9,76,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,171,            final double area    = polygon.getSize();,2,0,0,1,2,1,4,0,0,7,41,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,173,            if (Double.isInfinite(area)) {,0,0,0,2,5,0,6,0,0,6,30,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,178,                final Plane    plane  = (Plane) facet.getHyperplane();,0,0,0,2,4,0,0,0,0,6,54,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,179,                final Vector3D facetB = plane.toSpace(polygon.getBarycenter());,2,0,0,2,4,0,0,0,0,3,63,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,180,                double   scaled = area * facetB.dotProduct(plane.getNormal());,4,1,0,2,4,0,8,0,0,13,62,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,181,                if (reversed) {,2,0,0,1,3,0,0,0,0,2,15,7,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,185,                setSize(getSize() + scaled);,2,1,0,2,4,0,4,0,0,7,28,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,186,"                setBarycenter(new Vector3D(1.0, (Vector3D) getBarycenter(), scaled, facetB));",6,1,0,4,8,0,4,4,0,15,77,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,190,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,242,        final Line otherL = (Line) other;,0,0,0,1,2,0,0,0,0,3,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,243,        return (sin * otherL.sin + cos * otherL.cos) >= 0.0;,8,1,0,1,2,1,0,0,0,11,52,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,132,        final Vector2D[][] v = getVertices();,2,0,0,3,6,1,2,2,0,7,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,134,        if (v.length == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,151,            double sum  = 0;,1,0,0,0,0,0,0,0,0,1,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,152,            double sumX = 0;,2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,153,            double sumY = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,155,            for (Vector2D[] loop : v) {,4,0,0,2,5,0,0,2,0,6,27,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,156,                double x1 = loop[loop.length - 1].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,157,                double y1 = loop[loop.length - 1].getY();,8,1,1,2,4,0,2,0,0,14,41,0,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,158,                for (final Vector2D point : loop) {,0,0,0,1,3,0,0,0,0,4,35,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,159,                    final double x0 = x1;,14,2,0,0,0,1,6,0,0,25,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,160,                    final double y0 = y1;,4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,161,                    x1 = point.getX();,4,0,0,1,2,3,4,0,0,12,18,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,162,                    y1 = point.getY();,2,0,0,1,2,0,4,0,0,7,18,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,163,                    final double factor = x0 * y1 - y0 * x1;,10,3,0,0,0,1,0,0,0,14,40,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,164,                    sum  += factor;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,165,                    sumX += factor * (x0 + x1);,8,2,0,1,2,0,0,0,0,11,27,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,166,                    sumY += factor * (y0 + y1);,10,2,0,1,2,0,0,0,0,14,27,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,170,            if (sum < 0) {,4,1,0,1,3,3,0,4,0,12,14,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,175,                setSize(sum / 2);,2,1,0,1,2,0,2,0,0,5,17,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,176,"                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));",8,4,0,4,8,0,2,2,0,16,64,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,510,                    final Skew s = right.left.skew;,2,2,1,0,0,0,0,0,0,13,31,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,511,                    right.rotateCW();,0,0,0,1,2,0,4,0,0,4,17,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,512,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,513,                    switch (s) {,2,0,0,1,3,0,0,0,0,2,12,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,523,                        left.skew  = Skew.BALANCED;,8,0,0,0,0,0,0,0,0,9,27,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,524,                        right.skew = Skew.BALANCED;,2,1,1,0,0,0,0,0,0,8,27,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,526,                    skew = Skew.BALANCED;,8,0,1,0,0,1,0,4,0,16,21,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,527,                    return true;,0,0,0,0,0,1,0,0,0,1,12,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,2,0,0,1,2,0,4,0,0,6,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",6,0,0,2,5,2,0,4,0,11,73,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,4,0,0,1,2,0,0,0,0,4,21,9,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,0,1,3,0,0,2,0,4,15,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,0,0,0,0,4,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",0,0,0,2,4,0,0,0,0,6,74,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,        final double[] p = getKey();,10,3,0,2,4,1,4,0,0,18,28,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/util/Pair,33,63,        return key;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,4,1,1,1,2,0,6,0,0,16,44,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,1,1,3,0,8,0,0,16,50,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,        double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,2,0,0,2,5,0,8,0,0,11,51,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,            sum -= coefficient;,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,0,0,0,1,2,0,0,0,0,3,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,1.0,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,2,2,0,3,7,0,8,0,0,12,67,4,0.5,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,6,1,0,1,2,0,0,0,0,7,22,12,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,2,0,0,1,3,0,6,0,0,8,40,5,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,4,3,0,1,3,0,0,0,0,7,20,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },2,0,0,0,1,0,0,0,0,3,1,8,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },4,1,0,0,1,0,6,0,0,11,1,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,0,0,0,1,2,0,0,0,0,3,53,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,10,2,1,1,3,0,0,0,0,26,30,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,8,5,1,3,6,0,0,0,0,20,60,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,8,3,0,0,0,1,4,0,0,15,13,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,42,    public AbstractListChromosome(final List<T> representation) {,16,2,0,1,3,0,0,0,0,21,61,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,43,        checkValidity(representation);,12,2,0,1,2,1,8,4,0,28,30,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,44,        this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));,0,0,0,2,4,0,0,0,0,6,86,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,45,    },10,2,0,0,1,0,0,0,0,13,1,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,2,0,0,0,1,1,0,4,0,7,75,1,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,40,    private static RandomGenerator randomGenerator = new JDKRandomGenerator();,8,3,0,1,2,2,8,6,0,28,74,1,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,104,        return randomGenerator;,0,0,0,0,0,1,0,0,0,1,23,4,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",6,0,0,1,3,3,0,4,0,13,86,2,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,0,0,0,2,5,0,0,0,0,7,43,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,4,0,7,31,1,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,2,2,0,0,0,0,0,0,0,4,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",0,0,0,1,2,0,0,0,0,3,36,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },20,5,1,0,1,3,0,4,0,46,1,1,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,0,0,0,0,0,0,0,0,0,0,39,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,0,0,5,62,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },8,0,0,0,1,1,6,0,0,16,1,3,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,0,0,0,0,0,0,0,0,0,0,31,4,0.4,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,52,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,",4,0,0,0,1,0,0,2,0,6,101,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,56,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,0,0,1,2,0,0,2,0,8,96,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,71,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,1,0,1,2,1,0,0,0,8,96,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,82,        this.chromosomes = chromosomes;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,83,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,90,        return chromosomes;,12,1,0,0,0,1,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,98,        this.chromosomes.add(chromosome);,2,0,0,1,2,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,107,        Chromosome bestChromosome = this.chromosomes.get(0);,4,0,0,1,2,0,2,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,108,        for (Chromosome chromosome : this.chromosomes) {,14,2,1,1,3,0,0,2,0,32,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,109,            if (chromosome.compareTo(bestChromosome) > 0) {,6,1,0,2,5,0,6,0,0,13,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,111,                bestChromosome = chromosome;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,113,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,114,        return bestChromosome;,2,0,1,0,0,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,122,        return this.populationLimit;,4,0,0,0,0,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,130,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,131,    },6,0,1,0,1,1,0,0,0,15,1,0,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,138,        return this.chromosomes.size();,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,146,        return this.chromosomes.toString();,2,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,155,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,28,"public abstract class Chromosome implements Comparable<Chromosome>,Fitness {",4,0,1,0,1,2,0,6,0,20,76,1,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,33,    private double fitness = NO_FITNESS;,2,1,0,0,0,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,45,        if (this.fitness == NO_FITNESS) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,47,            this.fitness = fitness();,2,0,0,1,2,0,2,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,49,        return this.fitness;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,65,        return ((Double)this.getFitness()).compareTo(another.getFitness());,0,0,0,5,10,1,0,0,0,16,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,76,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,89,        for (Chromosome anotherChr : population) {,4,0,0,1,3,0,0,2,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,90,            if (this.isSame(anotherChr)) {,0,0,0,2,5,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,91,                return anotherChr;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,93,        },2,1,0,0,1,0,6,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,94,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,104,        Chromosome sameChromosome = findSameChromosome(population);,2,0,0,1,2,0,4,2,0,8,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,105,        if (sameChromosome != null) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,106,            fitness = sameChromosome.getFitness();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,76,"        ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());",8,3,1,3,6,0,4,4,0,24,119,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,78,        List<Chromosome> oldChromosomes = this.getChromosomes();,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,79,        Collections.sort(oldChromosomes);,6,1,0,1,2,0,6,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,82,        int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());,2,0,0,5,10,0,0,0,0,3,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,83,        for (int i=boundIndex; i<oldChromosomes.size(); i++) {,8,1,0,2,5,0,4,0,0,14,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,84,            nextGeneration.addChromosome(oldChromosomes.get(i));,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,86,        return nextGeneration;,4,0,0,0,0,1,0,0,0,6,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,98,        if (elitismRate < 0 || elitismRate > 1) {,0,0,0,1,3,0,0,0,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,99,"            throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,101,        this.elitismRate = elitismRate;,24,4,0,0,0,0,0,0,0,31,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,102,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,109,        return this.elitismRate;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,47,"        super(specific, value, 0, true);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,54,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,68,"        super(specific, wrong, min);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,70,        this.min = min;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,71,        this.boundIsAllowed = boundIsAllowed;,20,0,0,0,0,3,0,2,0,27,37,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,85,        return min;,10,0,0,0,0,2,8,0,0,20,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,47,        argument = wrong;,8,1,0,0,0,1,0,0,0,10,17,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,44,                                        Object ... args) {,8,1,0,0,2,4,0,2,0,15,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,46,"        context.addMessage(pattern, args);",12,4,1,1,2,0,8,0,0,38,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,47,    },6,1,0,0,1,0,14,0,0,22,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,77,        return boundIsAllowed;,4,0,0,0,0,1,0,0,0,5,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,84,        return max;,14,3,0,0,0,2,0,0,0,19,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",10,0,0,1,2,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,63,        this.lo = lo;,18,3,0,0,0,2,10,2,0,36,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,64,        this.hi = hi;,8,1,0,0,0,0,0,0,0,9,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,71,        return lo;,6,0,0,0,0,1,0,0,0,6,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,77,        return hi;,2,0,0,0,0,1,8,0,0,10,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,64,    public ExceptionContext(final Throwable throwable) {,4,0,0,1,3,2,0,2,0,8,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,66,        msgPatterns    = new ArrayList<Localizable>();,4,0,0,1,2,0,0,6,0,12,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,67,        msgArguments   = new ArrayList<Object[]>();,0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,68,"        context        = new HashMap<String, Object>();",10,3,0,1,2,1,0,6,0,21,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,75,        return throwable;,6,2,0,0,0,1,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,88,        msgArguments.add(ArgUtils.flatten(arguments));,6,2,0,2,4,0,10,0,0,19,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,100,"        context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,110,        return context.get(key);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,119,        return context.keySet();,2,0,0,1,2,1,0,2,0,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,128,        return getMessage(Locale.US);,4,0,0,1,2,1,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,137,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,147,"        return buildMessage(locale, "": "");",4,0,0,1,2,4,4,0,0,12,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,159,"        return buildMessage(locale, separator);",0,0,1,1,2,1,6,0,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,171,        final StringBuilder sb = new StringBuilder();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,172,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,174,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,175,            final Localizable pat = msgPatterns.get(i);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,176,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,10,2,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,179,            sb.append(fmt.format(args));,4,0,0,2,4,0,10,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,182,                sb.append(separator);,0,0,0,1,2,0,6,0,0,6,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,186,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,197,        out.writeObject(throwable);,6,2,1,1,2,0,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,198,        serializeMessages(out);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,199,        serializeContext(out);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,211,        throwable = (Throwable) in.readObject();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,212,        deSerializeMessages(in);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,213,        deSerializeContext(in);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,214,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,225,        final int len = msgPatterns.size();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,226,        out.writeInt(len);,4,1,0,1,2,0,0,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,228,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,229,            final Localizable pat = msgPatterns.get(i);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,231,            out.writeObject(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,232,            final Object[] args = msgArguments.get(i);,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,233,            final int aLen = args.length;,16,2,0,0,0,1,0,0,0,21,29,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,235,            out.writeInt(aLen);,0,0,0,1,2,0,6,0,0,6,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,237,                if (args[j] instanceof Serializable) {,4,2,1,2,5,0,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,239,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,242,                    out.writeObject(nonSerializableReplacement(args[j]));,6,1,1,3,6,0,6,0,0,17,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,246,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,259,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,260,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,263,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,266,            msgPatterns.add(pat);,2,1,0,1,2,0,6,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,268,            final int aLen = in.readInt();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,269,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,272,                args[j] = in.readObject();,0,0,1,2,4,0,4,0,0,9,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,274,            msgArguments.add(args);,0,0,0,1,2,0,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,276,    },0,0,1,0,1,0,4,0,0,17,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,287,        final int len = context.keySet().size();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,288,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,289,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,291,            out.writeObject(key);,2,0,0,1,2,3,6,0,0,11,21,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,293,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,295,                out.writeObject(value);,2,1,0,1,2,0,6,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,298,                out.writeObject(nonSerializableReplacement(value));,4,1,0,2,4,0,8,0,0,13,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,300,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,301,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,314,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,316,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,318,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,321,"            context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,323,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,0,0,3,6,1,0,0,0,10,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,367,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,0,4,2,0,8,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,368,        this.sourceFormat = sourceFormat;,6,0,0,0,0,0,0,0,0,7,33,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,1,5,10,0,0,0,0,9,67,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0,0,0,2,4,0,0,0,0,6,94,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,8,0,0,11,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",4,0,0,1,2,0,0,0,0,6,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",4,0,0,1,2,0,6,0,0,12,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,1,2,4,0,4,0,0,9,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,2,0,5,55,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0,0,0,1,2,0,0,0,0,3,94,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",4,1,1,5,10,0,0,0,0,11,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",6,1,0,1,2,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",20,3,1,1,2,0,8,0,0,40,65,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",6,1,1,3,6,0,0,0,0,11,81,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,101,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",4,0,0,12,24,0,0,2,0,7,175,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",4,0,0,1,2,0,0,0,0,6,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,2,0,0,5,64,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",6,0,0,2,4,0,0,0,0,8,103,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,133,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",6,1,0,1,2,0,12,0,0,21,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",10,1,0,3,6,0,14,0,0,27,124,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",0,0,0,1,2,0,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",6,1,0,3,6,0,0,0,0,8,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,162,"    MUTATION_RATE(""mutation rate ({0})""),",8,1,0,3,6,0,0,0,0,11,37,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0,0,0,2,4,0,0,0,0,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",12,1,0,3,6,0,0,0,0,15,43,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0,0,0,2,4,0,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",4,0,0,6,12,0,0,0,0,5,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,194,"    ALPHA(""alpha""), /* keep */",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,196,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,197,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,198,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,199,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,200,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,201,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",22,1,0,3,6,0,8,0,0,33,58,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,202,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,203,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",6,0,0,3,6,0,0,0,0,7,66,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,204,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",6,2,0,3,6,0,4,0,0,13,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,205,"    EXPONENT(""exponent ({0})""), /* keep */",4,1,0,3,6,0,0,0,0,6,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,206,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,207,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,208,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,209,"    MEAN(""mean ({0})""), /* keep */",8,1,0,3,6,1,0,0,0,11,30,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,210,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,211,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,212,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,213,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,214,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,215,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,216,"    POPULATION_SIZE(""population size ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,6,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,217,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,218,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,219,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",4,1,1,3,6,0,0,0,0,13,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,220,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,221,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,222,"    SHAPE(""shape ({0})""), /* keep */",4,0,0,3,6,0,6,0,0,12,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,223,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,224,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,225,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,226,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,4,0,0,7,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,227,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,228,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0,0,0,2,4,0,0,0,0,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,229,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,230,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",4,0,0,6,12,0,0,0,0,6,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,231,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",8,1,0,6,12,0,0,0,0,11,107,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,232,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",8,3,0,1,2,1,0,0,0,12,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,233,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,234,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,235,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,236,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,237,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,238,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0,0,0,8,16,0,0,0,0,24,134,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,239,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,240,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,241,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,242,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,243,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",12,4,0,1,2,0,0,0,0,17,99,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,244,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",8,1,0,1,2,0,0,0,0,11,45,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,245,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,246,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,247,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,248,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,249,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,250,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,251,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,252,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,253,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,254,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,255,"    FRACTION(""fraction""), /* keep */",6,1,0,1,2,0,0,0,0,8,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,256,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,257,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",4,0,0,1,2,0,0,0,0,5,48,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,258,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,2,0,6,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,259,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,1,0,0,0,6,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,260,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,261,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,262,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,263,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,264,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",4,1,0,4,8,0,6,0,0,12,68,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,265,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,266,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",10,1,0,4,8,0,0,0,0,11,97,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,267,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,268,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,127,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,269,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0,0,0,2,4,0,0,0,0,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,270,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,271,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,272,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,273,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0,0,0,3,6,0,0,0,0,9,150,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,274,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",10,2,1,3,6,1,0,0,0,17,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,275,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,276,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,277,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,278,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,279,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,280,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,281,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0,0,0,5,10,0,0,0,0,15,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,282,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,1,5,10,0,0,2,0,11,50,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,283,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",8,1,0,1,2,0,0,0,0,11,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,284,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,285,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,286,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",8,0,0,3,6,0,6,0,0,16,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,287,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,288,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,289,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0,0,0,3,6,0,0,0,0,9,99,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,290,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,291,"    POLYNOMIAL(""polynomial""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,292,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,293,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,294,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,295,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",4,0,0,1,2,1,6,0,0,12,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,296,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,1,0,2,4,0,0,0,0,3,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,297,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",12,1,0,1,2,0,0,0,0,16,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,298,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,299,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",8,3,0,5,10,0,0,0,0,12,72,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,300,"    ROW_INDEX(""row index ({0})""), /* keep */",8,1,0,3,6,0,0,0,0,11,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,301,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,302,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,303,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,304,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,305,"    SIMPLE_MESSAGE(""{0}""),",6,0,0,2,4,0,2,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,306,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,307,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,4,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,308,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,309,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",18,3,0,3,6,0,4,0,0,28,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,310,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,311,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,312,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,313,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,1,136,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,314,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,315,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,316,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",4,0,0,3,6,0,6,0,0,12,156,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,317,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",6,0,0,1,2,0,0,0,0,9,69,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,318,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,319,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,320,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,321,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,322,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,323,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,324,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0,0,0,3,6,0,0,0,0,9,117,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,325,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,326,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,327,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",6,1,0,20,40,0,4,0,0,12,118,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,328,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,329,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,330,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0,0,0,5,10,0,0,0,0,15,107,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,331,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",4,0,0,4,8,0,2,4,0,11,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,332,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",8,0,0,2,4,1,0,0,0,10,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,333,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,334,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",8,2,0,2,4,0,0,0,0,12,60,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,335,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",16,3,1,8,16,0,0,0,0,31,106,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,336,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,337,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,338,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,339,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,340,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",4,1,0,2,4,0,0,0,0,6,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,341,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,342,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,343,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,344,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,345,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",4,1,0,4,8,0,0,0,0,6,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,346,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",0,0,0,3,6,0,0,0,0,9,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,347,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,348,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,349,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,350,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,351,"    ZERO_NORM(""zero norm""),",4,0,1,1,2,0,12,0,0,22,23,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,352,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,353,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",4,0,0,1,2,0,0,0,0,6,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,354,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,39,public enum LocalizedFormats implements Localizable {,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,373,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,379,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",0,0,0,2,4,0,0,0,0,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,380,            ResourceBundle bundle =,10,3,0,0,0,0,0,2,0,16,23,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,382,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,0,0,0,16,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,384,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,389,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,387,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,393,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,32,    private ArgUtils() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,42,        final List<Object> list = new ArrayList<Object>();,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,43,        if (array != null) {,18,7,0,1,3,0,0,0,0,26,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,46,                    for (Object oR : flatten((Object[]) o)) {,8,2,0,4,9,0,4,4,0,18,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,47,                        list.add(oR);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,54,        return list.toArray();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",8,0,0,1,2,0,6,0,0,15,56,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,6,0,0,0,0,0,0,0,0,7,30,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,2,0,0,1,2,1,6,2,0,11,36,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,0,0,0,1,2,0,0,0,0,3,22,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,8,0,0,1,2,0,0,0,0,8,22,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,2,0,0,0,0,0,0,0,0,2,18,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0,0,0,2,4,0,0,0,0,6,46,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,0,0,0,9,55,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },4,3,1,0,1,0,0,0,0,11,1,11,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,4,0,0,1,2,3,0,4,0,11,57,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,8,1,0,1,2,1,4,0,0,15,57,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,2,0,0,1,2,3,0,4,0,9,58,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,2,0,0,1,2,3,0,4,0,9,64,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,1,1,1,2,3,10,4,0,29,66,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0,0,0,1,2,0,0,0,0,3,68,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,0,0,2,0,4,69,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0,0,0,1,2,0,0,0,0,3,71,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",12,1,0,1,2,3,0,4,0,21,69,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",2,0,0,1,2,3,0,4,0,9,67,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,0,0,0,1,2,0,0,0,0,3,70,4,0.05405,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },4,0,0,0,1,1,0,0,0,5,1,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",6,0,0,5,10,0,6,0,0,14,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,2,108,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",10,1,0,2,4,0,0,0,0,12,94,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",10,0,0,3,6,0,8,2,0,21,97,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0,0,0,1,2,0,0,0,0,3,131,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,1,1,2,4,0,6,0,0,13,78,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,0,0,0,5,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,0,0,0,3,55,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",6,0,0,3,6,0,0,2,0,8,46,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",8,0,0,2,4,0,0,0,0,9,86,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",8,0,0,5,10,0,0,0,0,9,290,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,1,0,0,0,3,263,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0,0,0,1,2,0,2,0,0,2,52,7,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,0,0,1,2,0,0,0,0,5,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0,0,0,3,6,0,0,0,0,9,109,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",6,0,0,3,6,1,0,0,0,7,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0,0,0,1,2,0,0,0,0,3,94,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,0,0,0,3,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0,0,0,5,10,0,0,0,0,15,71,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",4,1,0,3,6,3,8,0,0,18,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,6,54,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0,0,0,2,4,0,0,0,0,6,119,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",8,2,1,1,2,0,0,0,0,15,51,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",10,3,0,4,8,0,8,0,0,21,78,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,92,"    ELITISM_RATE(""elitism rate ({0})""),",0,0,0,3,6,0,0,0,0,9,35,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",10,2,1,1,2,1,0,0,0,18,53,1,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",6,1,1,1,2,1,0,0,0,19,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,1,1,4,8,0,0,0,0,11,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",10,2,0,1,2,1,0,0,0,14,36,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",0,0,0,2,4,0,0,0,0,6,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0,0,0,1,2,0,0,0,0,3,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,1,0,1,2,0,4,0,0,10,59,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",4,0,0,4,8,0,0,0,0,4,121,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",8,2,1,3,6,1,0,0,0,19,75,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",6,0,0,3,6,0,0,0,0,9,40,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,1,2,4,0,2,0,0,18,50,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0,0,0,1,2,0,0,0,0,3,76,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",14,3,0,3,6,0,0,0,0,19,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0,0,0,1,2,0,0,0,0,3,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0,0,0,3,6,0,0,0,0,9,124,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",6,0,0,4,8,1,0,4,0,12,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,2,0,5,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,4,2,0,9,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0,0,0,3,6,0,0,0,0,9,71,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,162,"    MUTATION_RATE(""mutation rate ({0})""),",0,0,0,3,6,0,0,0,0,9,37,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",10,4,1,3,6,0,12,0,0,32,82,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",4,0,0,3,6,0,0,0,0,6,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,6,0,0,9,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,0,0,0,0,11,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",6,0,0,4,8,0,12,2,0,20,49,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0,0,0,1,2,0,0,0,0,3,41,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",10,3,0,6,12,1,0,0,0,15,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,1,6,12,0,0,0,0,10,88,10,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,0,0,5,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,198,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0,0,0,7,14,0,0,0,0,21,118,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,8,0,0,11,83,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,200,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,2,0,0,7,71,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,202,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,2,0,3,6,0,8,0,0,14,77,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,208,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",4,0,1,3,6,0,0,0,0,10,30,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,2,1,3,6,0,0,0,0,16,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",6,1,1,3,6,0,0,0,0,11,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,4,0,7,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",2,0,1,3,6,0,0,0,0,13,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",8,0,0,3,6,0,0,0,0,9,51,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",4,0,0,3,6,0,6,2,0,15,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",8,3,0,3,6,0,2,0,0,14,63,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,1,0,2,4,0,0,0,0,3,44,6,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,1,2,4,0,0,0,0,13,87,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,240,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",10,1,1,2,4,0,0,0,0,17,99,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0,0,0,1,2,0,0,0,0,3,45,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0,0,0,1,2,0,0,0,0,3,70,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,0,0,6,12,0,0,0,0,9,75,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0,0,0,1,2,0,0,0,0,3,51,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",6,1,0,1,2,0,0,0,0,8,80,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",4,1,1,1,2,0,0,0,0,11,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",6,0,0,1,2,0,0,0,0,8,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,257,"    FUNCTION(""function""), /* keep */",0,0,0,1,2,0,0,0,0,3,32,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0,0,0,5,10,0,0,0,0,15,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,0,5,10,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,284,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0,0,0,1,2,0,0,0,0,3,63,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",4,0,0,5,10,0,10,0,0,16,91,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,292,"    POLYNOMIAL(""polynomial""), /* keep */",2,1,1,1,2,0,0,0,0,8,36,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,293,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0,0,0,4,8,0,0,0,0,12,130,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,294,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,295,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",4,1,0,4,8,0,0,0,0,6,109,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",10,3,0,4,8,0,0,0,0,14,90,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,297,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,298,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",8,0,1,1,2,1,4,8,0,26,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,301,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,72,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,302,"    ROW_INDEX(""row index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,1,5,10,0,0,0,0,13,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,305,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,113,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,306,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0,0,0,1,2,0,0,0,0,3,66,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,2,0,6,97,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,2,0,5,64,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",8,1,0,4,8,0,0,0,0,10,82,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,317,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",0,0,0,3,6,0,0,0,0,9,120,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",4,1,1,3,6,0,0,0,0,15,156,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0,0,0,1,2,0,0,0,0,3,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0,0,0,5,10,0,0,0,0,15,107,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",4,1,0,2,4,0,0,0,0,5,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",6,0,0,1,2,0,6,2,0,15,58,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",10,0,0,1,2,1,0,0,0,12,42,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",10,1,0,2,4,0,0,0,0,12,49,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",4,1,0,3,6,0,6,0,0,12,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,356,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,39,public enum LocalizedFormats implements Localizable {,2,1,1,0,1,0,0,0,0,8,53,8,0.04706,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,685,        double result = numerator.doubleValue() / denominator.doubleValue();,2,0,0,2,4,0,6,0,0,9,68,8,0.02564,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,688,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.02564,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,47,    private MathUtils() {},2,0,0,2,4,1,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,57,        return new Double(value).hashCode();,6,0,0,2,4,1,2,2,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,68,        return Arrays.hashCode(value);,4,0,0,1,2,1,0,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,113,        final double p = FastMath.abs(period);,12,1,1,1,2,1,6,0,0,26,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0,0,0,2,4,1,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,128,        if ((magnitude >= 0 && sign >= 0) ||,4,4,0,1,3,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,130,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,131,        } else if (sign >= 0 &&,0,0,0,0,2,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,6,0,0,1,2,0,0,2,0,9,61,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,135,            return (byte) -magnitude; // Flip sign.,0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,150,        if ((magnitude >= 0 && sign >= 0) ||,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,152,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,153,        } else if (sign >= 0 &&,2,2,0,0,2,0,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,157,            return (short) -magnitude; // Flip sign.,2,0,0,1,2,1,0,0,0,3,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,172,        if ((magnitude >= 0 && sign >= 0) ||,10,5,0,1,3,0,0,0,0,16,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,174,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,175,        } else if (sign >= 0 &&,8,3,0,0,2,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,179,            return -magnitude; // Flip sign.,8,1,0,0,0,1,0,0,0,10,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,194,        if ((magnitude >= 0 && sign >= 0) ||,4,4,0,1,3,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,196,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,197,        } else if (sign >= 0 &&,0,0,0,0,2,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,201,            return -magnitude; // Flip sign.,2,0,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,213,            throw new NotFiniteNumberException(x);,4,0,0,1,2,0,0,2,0,7,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,215,    },2,0,1,0,1,1,0,0,0,8,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,225,        for (int i = 0; i < val.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,226,            final double x = val[i];,2,0,1,1,2,1,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",8,0,0,1,2,0,0,2,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,231,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,245,"            throw new NullArgumentException(pattern, args);",10,1,0,1,2,0,0,2,0,13,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,257,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,258,            throw new NullArgumentException();,6,1,0,1,2,0,0,2,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,260,    },2,2,1,0,1,0,0,0,0,9,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,43,    public MathArithmeticException() {,2,2,1,1,3,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,1,0,1,2,0,12,0,0,17,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,56,                                   Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,2,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,69,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,75,        return context.getLocalizedMessage();,10,1,0,1,2,1,4,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,44,                                        Object ... args) {,2,0,0,0,2,0,8,2,0,12,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,45,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,46,"        context.addMessage(pattern, args);",6,1,0,1,2,0,8,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,51,        return context;,8,1,0,0,0,1,0,0,0,10,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",14,1,0,1,2,0,12,0,0,27,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,41,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,47,        argument = wrong;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,54,        return argument;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,107,"        this(num, BigInteger.ONE);",6,0,0,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,123,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,139,                num = num.negate();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,140,                den = den.negate();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,171,    public BigFraction(final double value) throws MathIllegalArgumentException {,6,0,0,1,3,2,0,0,0,8,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,172,        if (Double.isNaN(value)) {,0,0,1,2,5,0,6,2,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,173,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);,4,0,0,1,2,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,175,        if (Double.isInfinite(value)) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,176,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,180,        final long bits     = Double.doubleToLongBits(value);,2,0,1,1,2,1,6,2,0,15,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,181,        final long sign     = bits & 0x8000000000000000L;,0,0,1,0,0,0,10,0,0,25,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,182,        final long exponent = bits & 0x7ff0000000000000L;,6,1,0,0,0,1,0,0,0,9,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,183,        long m              = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,184,        if (exponent != 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,186,            m |= 0x0010000000000000L;,6,0,0,0,0,0,4,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,188,        if (sign != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,189,            m = -m;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,191,        int k = ((int) (exponent >> 52)) - 1075;,4,2,0,3,6,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,192,        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {,0,0,0,5,11,0,0,0,0,16,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,193,            m = m >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,194,            ++k;,22,9,0,0,0,0,0,0,0,33,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,197,        if (k < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,198,            numerator   = BigInteger.valueOf(m);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,199,            denominator = BigInteger.ZERO.flipBit(-k);,10,0,0,1,2,1,8,0,0,21,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,201,            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));,6,0,0,3,6,0,12,0,0,19,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,202,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,205,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,231,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",10,0,0,1,2,0,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,232,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,270,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,271,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,272,        double r0 = value;,4,0,0,0,0,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,273,        long a0 = (long) FastMath.floor(r0);,0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,274,        if (a0 > overflow) {,6,1,0,1,3,0,0,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,275,"            throw new FractionConversionException(value, a0, 1l);",4,0,0,1,2,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,280,        if (FastMath.abs(a0 - value) < epsilon) {,6,2,0,2,5,0,4,0,0,12,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,281,            numerator = BigInteger.valueOf(a0);,2,0,0,1,2,0,6,0,0,9,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,282,            denominator = BigInteger.ONE;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,283,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,286,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,287,        long q0 = 0;,6,0,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,288,        long p1 = a0;,8,0,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,289,        long q1 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,291,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,292,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,294,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,295,        boolean stop = false;,6,0,0,0,0,0,0,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,297,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,298,            final double r1 = 1.0 / (r0 - a0);,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,299,            final long a1 = (long) FastMath.floor(r1);,4,0,0,2,4,1,14,0,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,300,            p2 = (a1 * p1) + p0;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,301,            q2 = (a1 * q1) + q0;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,302,            if ((p2 > overflow) || (q2 > overflow)) {,10,3,0,3,7,0,0,0,0,15,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,303,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,306,            final double convergent = (double) p2 / (double) q2;,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,307,            if ((n < maxIterations) &&,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,310,                p0 = p1;,4,0,0,0,0,0,8,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,311,                p1 = p2;,14,1,0,0,0,0,0,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,312,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,313,                q1 = q2;,4,0,0,0,0,0,10,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,314,                a0 = a1;,32,13,0,0,0,0,0,0,0,47,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,315,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,317,                stop = true;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,319,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,321,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,322,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,325,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,326,            numerator   = BigInteger.valueOf(p2);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,327,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,329,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,330,            denominator = BigInteger.valueOf(q1);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,332,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,353,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,354,    },12,1,0,0,1,0,0,0,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,393,"        this(BigInteger.valueOf(num), BigInteger.ONE);",16,0,0,2,4,0,6,0,0,23,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,394,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,408,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",4,0,0,3,6,0,14,0,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,409,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,432,        if (numerator == 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,433,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,436,"        return new BigFraction(numerator, denominator);",0,0,0,1,2,1,0,0,0,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,447,        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();,12,1,0,3,6,1,6,2,0,22,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,463,        MathUtils.checkNotNull(bg);,6,1,0,1,2,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,464,"        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);",2,0,0,3,6,1,10,2,0,14,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,478,        return add(BigInteger.valueOf(i));,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,492,        return add(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,507,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,508,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,510,        if (ZERO.equals(fraction)) {,10,1,0,2,5,1,6,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,511,            return this;,8,0,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,514,        BigInteger num = null;,8,2,0,0,0,0,0,2,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,515,        BigInteger den = null;,2,0,0,0,0,0,2,2,0,6,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,517,        if (denominator.equals(fraction.denominator)) {,4,0,0,2,5,0,4,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,518,            num = numerator.add(fraction.numerator);,6,0,0,1,2,0,4,0,0,11,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,519,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,521,            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));,16,1,0,5,10,0,10,0,0,29,97,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,522,            den = denominator.multiply(fraction.denominator);,6,0,0,1,2,0,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,524,"        return new BigFraction(num, den);",10,0,0,1,2,2,6,4,0,22,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,541,        return new BigDecimal(numerator).divide(new BigDecimal(denominator));,4,0,0,3,6,1,2,4,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,560,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);",6,1,1,3,6,1,4,4,0,23,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,579,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);",4,0,0,3,6,1,6,4,0,14,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,594,        BigInteger nOd = numerator.multiply(object.denominator);,6,0,0,1,2,0,4,2,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,595,        BigInteger dOn = denominator.multiply(object.numerator);,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,596,        return nOd.compareTo(dOn);,9,7,0,1,2,1,0,0,0,17,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,614,        if (BigInteger.ZERO.equals(bg)) {,4,0,0,2,5,0,4,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,615,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,617,"        return new BigFraction(numerator, denominator.multiply(bg));",0,0,0,2,4,1,0,0,0,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,633,        return divide(BigInteger.valueOf(i));,2,0,0,2,4,2,8,0,0,12,37,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,649,        return divide(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,664,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,665,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,667,        if (BigInteger.ZERO.equals(fraction.numerator)) {,8,0,0,2,5,0,2,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,668,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,671,        return multiply(fraction.reciprocal());,6,2,0,2,4,1,6,0,0,15,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,708,        boolean ret = false;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,710,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,711,            ret = true;,2,0,0,0,0,0,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,712,        } else if (other instanceof BigFraction) {,4,0,0,1,4,0,4,2,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,713,            BigFraction rhs = ((BigFraction) other).reduce();,4,0,0,3,6,0,2,4,0,10,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,714,            BigFraction thisOne = this.reduce();,2,0,0,1,2,0,2,2,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,715,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,18,1,0,2,4,0,4,0,0,24,93,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,718,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,746,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,757,        return denominator.intValue();,0,0,0,1,2,1,4,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,768,        return denominator.longValue();,0,0,0,1,2,1,4,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,779,        return numerator;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,790,        return numerator.intValue();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,801,        return numerator.longValue();,0,0,0,1,2,1,4,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,814,        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();,0,0,0,3,6,1,0,0,0,10,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,828,        return numerator.divide(denominator).intValue();,2,0,0,2,4,1,14,0,0,17,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,842,        return numerator.divide(denominator).longValue();,0,0,0,2,4,1,8,0,0,8,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,856,        if (bg == null) {,6,1,0,1,3,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,857,            throw new NullArgumentException();,8,2,0,1,2,0,0,0,0,11,34,12,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,859,"        return new BigFraction(bg.multiply(numerator), denominator);",0,0,0,2,4,1,0,0,0,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,873,        return multiply(BigInteger.valueOf(i));,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,887,        return multiply(BigInteger.valueOf(l));,0,0,0,2,4,1,14,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,901,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,902,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,904,        if (numerator.equals(BigInteger.ZERO) ||,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,906,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,908,"        return new BigFraction(numerator.multiply(fraction.numerator),",4,0,0,1,3,1,4,2,0,10,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,921,"        return new BigFraction(numerator.negate(), denominator);",2,0,0,2,4,1,4,2,0,8,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,933,        return multiply(ONE_HUNDRED).doubleValue();,0,0,0,2,4,1,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,948,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,949,"            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));",4,0,0,3,6,1,8,2,0,16,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,951,"        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));",0,0,0,3,6,1,12,2,0,14,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,965,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,966,"            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),",2,0,0,1,3,1,6,2,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,969,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",2,1,0,1,3,1,8,2,0,13,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,984,        if (exponent.compareTo(BigInteger.ZERO) < 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,985,            final BigInteger eNeg = exponent.negate();,2,0,0,1,2,1,4,2,0,9,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,986,"            return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),",0,0,0,1,3,1,0,0,0,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,989,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",0,0,0,1,3,1,8,2,0,10,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1004,"        return FastMath.pow(numerator.doubleValue(),   exponent) /",6,1,0,2,4,1,10,0,0,17,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1016,"        return new BigFraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1028,        final BigInteger gcd = numerator.gcd(denominator);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1029,"        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));",0,0,0,3,6,1,12,2,0,14,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1043,        if (bg == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1044,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1046,"        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);",0,0,0,3,6,1,0,0,0,10,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1059,        return subtract(BigInteger.valueOf(i));,0,0,0,2,4,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1072,        return subtract(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1086,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1087,            throw new NullArgumentException(LocalizedFormats.FRACTION);,6,2,0,1,2,0,8,2,0,19,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1089,        if (ZERO.equals(fraction)) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1090,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1093,        BigInteger num = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1094,        BigInteger den = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1095,        if (denominator.equals(fraction.denominator)) {,4,0,0,2,5,0,4,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1096,            num = numerator.subtract(fraction.numerator);,4,0,0,1,2,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1097,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1099,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,12,2,0,5,10,0,18,0,0,34,102,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1100,            den = denominator.multiply(fraction.denominator);,6,0,0,1,2,0,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1102,"        return new BigFraction(num, den);",4,0,0,1,2,1,0,2,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1117,        String str = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1118,        if (BigInteger.ONE.equals(denominator)) {,4,0,0,2,5,0,4,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1119,            str = numerator.toString();,2,0,0,1,2,0,4,0,0,7,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1120,        } else if (BigInteger.ZERO.equals(numerator)) {,0,0,0,2,6,0,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1121,"            str = ""0"";",2,0,0,0,0,0,0,0,0,4,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1123,"            str = numerator + "" / "" + denominator;",6,1,0,0,0,0,0,0,0,9,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1125,        return str;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1130,        return BigFractionField.getInstance();,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,39,public class BigFraction,2,0,0,0,0,1,0,0,0,3,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,38,    },0,1,1,0,1,0,0,0,0,11,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,48,    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",10,1,0,1,2,0,0,0,0,11,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,43,    },6,3,1,0,1,0,0,0,0,13,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,54,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,4,0,1,1,2,0,0,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,49,"        getContext().addMessage(pattern, args);",6,1,0,2,4,1,8,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,45,                                     Object ... args) {,4,0,0,0,2,0,0,2,0,6,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,46,        context = new ExceptionContext(this);,6,0,0,1,2,0,0,2,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,70,    },0,0,0,0,1,0,0,6,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,376,        return sourceFormat;,4,0,0,0,0,1,2,2,0,8,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,382,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,384,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,386,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,391,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,389,        } catch (MissingResourceException mre) {,22,5,0,1,4,1,10,2,0,41,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,395,        return sourceFormat;,10,2,0,0,0,2,0,0,0,13,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,6,0,1,1,3,2,6,0,0,18,21,3,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,0,0,1,3,0,0,2,0,7,13,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,392,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,14,2,0,0,0,0,0,0,0,17,23,3,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,1.6,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,12,3,0,0,0,1,0,0,0,16,26,3,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1023,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);,0,0,0,2,4,0,0,0,0,6,59,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1066,        double real2 = 2.0 * real;,0,0,0,0,0,0,0,0,0,0,26,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1067,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,4,1,0,2,4,0,12,0,0,17,59,3,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",4,1,0,1,3,1,0,0,0,5,46,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,6,2,0,11,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,12,2,0,1,2,0,4,0,0,19,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,4,0,0,1,3,0,0,0,0,5,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,4,3,0,1,2,0,16,0,0,23,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0,1,1,1,3,0,0,0,0,20,26,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,        this.point = (point == null) ? null : point.clone();,0,0,0,2,4,0,0,0,0,6,52,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,6,1,1,0,0,0,0,0,0,13,19,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",6,1,0,1,2,0,8,0,0,17,48,0,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,0,12,0,0,21,34,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,6,1,0,2,5,0,6,0,0,15,45,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,                    if (upperDifference.getEntry(nfxm) == ZERO) {,0,0,0,2,5,0,0,0,0,7,45,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,                    final int ih = nfx * (nfx + 1) / 2 - 1;,0,0,0,1,2,0,0,0,0,3,39,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",0,1,0,3,6,0,8,0,0,9,107,6,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",8,4,0,3,6,0,16,0,0,29,118,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,                    if (stepa * stepb < ZERO) {,0,0,0,1,3,0,0,0,0,4,27,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,0,0,2,4,0,0,0,0,4,79,5,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",6,1,0,1,2,0,0,0,0,8,44,8,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,                            if (trustRegionCenterInterpolationPointIndex == nfm) {,0,0,0,1,3,0,0,0,0,4,54,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);",0,0,0,1,2,0,0,0,0,3,51,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",10,3,0,3,6,1,10,0,0,25,62,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,4,1,2,4,0,32,0,0,47,81,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,",0,0,0,0,1,0,0,0,0,1,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",4,1,0,2,4,0,24,0,0,29,53,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",6,1,0,0,1,0,10,0,0,17,31,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },18,1,0,0,1,0,6,0,0,28,1,1,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,6,1,0,1,2,1,4,0,0,12,30,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,1,0,0,2,0,0,0,5,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,        isMinimize = (getGoalType() == GoalType.MINIMIZE);,0,0,0,2,4,0,0,0,0,6,50,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,        currentBest = new ArrayRealVector(getStartPoint());,0,0,0,2,4,0,0,0,0,6,51,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);",0,0,0,1,2,0,0,0,0,3,52,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,        printMethod(); // XXX,0,0,0,1,2,0,0,0,0,3,21,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,        final int n = currentBest.getDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,2,0,0,1,2,0,0,0,0,2,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",4,1,0,3,6,0,0,0,0,5,69,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));",0,0,0,3,6,0,0,0,0,9,69,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {,8,4,0,2,5,0,0,0,0,12,63,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,24,6,0,2,6,1,6,0,0,39,69,0,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);",2,0,0,1,2,1,0,0,0,3,38,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,2,0,0,1,2,0,6,0,0,8,21,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,2,0,0,1,2,1,0,0,0,3,41,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,        final int npt = numberOfInterpolationPoints;,4,0,0,0,0,0,2,0,0,6,44,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,4,1,0,0,0,0,0,0,0,6,21,10,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,        final int nptm = npt - np;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,6,2,0,0,0,1,0,2,0,11,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,        final ArrayRealVector work1 = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,        final ArrayRealVector work3 = new ArrayRealVector(npt);,0,0,0,1,2,0,0,0,0,3,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,        double cauchy = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,14,5,1,0,0,0,0,0,0,21,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,        double dsq = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,8,0,1,0,0,0,0,2,0,14,27,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,        trustRegionCenterInterpolationPointIndex = 0;,0,0,0,0,0,0,0,0,0,0,45,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",2,0,0,1,2,3,0,0,0,5,31,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,23,21,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,0,0,1,2,1,6,0,0,16,41,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,1,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,        final int ndim = bMatrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,2,0,1,0,0,0,0,4,0,11,73,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,2,0,0,0,0,0,0,0,0,4,32,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,6,1,0,0,0,4,0,0,0,11,21,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,2,0,0,1,3,0,0,0,0,2,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1598,"            originShift.setEntry(j, currentBest.getEntry(j));",0,0,0,2,4,0,0,0,0,6,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1600,"                interpolationPoints.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1602,            for (int i = 0; i < ndim; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1606,"        for (int i = 0, max = n * np / 2; i < max; i++) {",0,0,0,1,3,0,0,0,0,4,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",4,0,0,1,2,1,8,0,0,13,47,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,        for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",10,1,0,1,2,0,0,0,0,12,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,6,0,0,23,47,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1612,"                zMatrix.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,4,2,1,0,0,0,0,0,0,8,12,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,        int jpt = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,4,0,0,1,2,0,0,0,0,4,33,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,            final int nfx = nfm - n;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,            final int nfmm = nfm - 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,0,0,0,6,19,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,6,1,0,0,0,0,14,0,0,22,33,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,4,1,0,2,5,1,6,0,0,12,45,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1638,"                    interpolationPoints.setEntry(nfm, nfmm, stepa);",0,0,0,1,2,0,10,0,0,10,47,11,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,4,1,0,1,4,0,0,0,0,5,21,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",0,0,0,1,5,0,0,0,0,6,56,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",2,1,0,3,7,0,14,0,0,18,74,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0,1,0,3,7,0,14,0,0,15,74,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,0,0,0,0,0,0,0,0,0,0,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1686,"            fAtInterpolationPoints.setEntry(nfm, f);",0,0,0,1,2,0,8,0,0,8,40,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,2,1,0,1,3,0,4,0,0,7,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,4,0,0,0,0,0,0,0,0,5,9,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,1,1,0,0,0,0,0,0,11,45,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,10,91,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,0,0,0,7,27,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,6,2,0,0,1,3,0,0,0,12,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1704,"                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);",0,0,0,2,4,0,0,0,0,6,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,10,2,0,1,3,0,0,0,0,13,24,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,2,1,0,2,5,0,2,0,0,5,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,6,2,1,1,3,0,0,0,0,11,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,2,0,1,1,2,0,4,0,0,9,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,12,1,0,0,0,0,0,0,0,14,54,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,6,1,0,1,3,0,0,0,0,8,32,0,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",6,1,0,0,1,0,0,2,0,10,75,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",8,0,0,0,1,0,0,2,0,11,75,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,45,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,0,0,0,1,2,0,0,0,0,3,74,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,10,1,0,1,2,0,0,2,0,14,57,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2426,        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,61,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,6,0,0,1,2,1,6,6,0,20,49,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2428,        upperDifference = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,4,0,0,1,2,0,0,2,0,7,84,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,0,0,5,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2432,        trialStepPoint = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,6,1,0,1,2,0,0,2,0,10,88,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2435,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,8,1,0,0,1,2,0,0,0,12,34,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,2,0,1,1,2,3,4,0,0,22,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,6,1,1,0,0,1,14,0,0,26,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,0,0,0,1,2,0,0,0,0,3,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,680,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,681,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,109,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,150,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",16,1,0,1,3,4,6,2,0,29,81,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,6,3,0,1,3,0,0,0,0,9,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,4,0,0,7,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,8,0,0,0,1,2,6,0,0,18,42,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,295,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,8,0,0,14,48,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,106,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,2,0,7,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,367,"        checkRowIndex(m, row);",8,1,0,1,2,0,0,0,0,11,22,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,379,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,384,    },2,1,1,0,1,0,0,0,0,8,1,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,8,4,1,2,5,0,4,0,0,21,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,0,0,0,2,4,0,0,0,0,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,0,0,0,1,3,0,0,0,0,4,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,0,2,4,0,0,0,0,6,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },4,2,0,0,1,0,0,0,0,6,1,5,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,8,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,2,0,0,0,0,0,0,0,0,2,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,4,0,0,0,0,0,0,0,0,7,27,0,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,4,0,0,2,5,3,8,0,0,16,37,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,18,4,0,1,3,4,2,0,0,29,42,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,6,0,0,2,5,4,12,4,0,26,44,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,4,0.03125,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.02703,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,              for (int i = 0; i < scale.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,12,2,1,3,6,3,4,0,0,31,78,1,0.02174,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,0,0,0,6,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,1,0,0,0,5,33,2,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },4,0,0,0,1,0,0,0,0,6,1,8,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,2,0,0,0,0,0,0,0,0,3,6,12,0.07692,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,0,0,0,0,0,0,0,0,0,0,33,4,0.0625,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,0,0,0,4,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,0,0,0,7,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,4,0,0,1,2,0,0,4,0,8,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",8,0,0,1,2,3,16,4,0,32,50,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",10,1,0,2,5,0,10,0,0,22,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,2,0,0,0,0,0,0,0,0,2,17,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,14,2,0,1,3,0,0,0,0,18,46,0,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,4,1,1,1,2,0,0,0,0,10,23,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,6,1,1,1,2,0,4,0,0,16,27,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,4,1,1,0,0,1,0,0,0,10,11,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",2,1,0,2,5,1,12,6,0,22,43,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",14,4,1,1,2,0,2,0,0,31,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",0,0,0,1,2,0,0,0,0,3,67,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,0,0,0,3,6,0,0,0,0,9,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,8,2,0,1,2,1,2,0,0,13,33,0,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,4,0,0,0,0,0,6,0,0,13,10,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,6,0,0,21,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,8,2,0,0,0,1,16,2,0,32,11,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,10,1,1,1,3,0,4,0,0,21,16,1,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,4,0,0,4,15,7,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,8,0,0,0,0,0,0,0,0,8,24,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",10,1,0,2,5,0,12,0,0,26,40,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,12,2,0,0,0,0,2,0,0,17,10,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,4,0,0,1,3,0,0,4,0,9,46,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,124,                sum += values[i];,0,0,0,1,2,0,0,0,0,3,17,4,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,2,1,0,0,0,1,4,0,0,7,11,7,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,92,        super.clear();,8,1,0,1,2,1,0,0,0,10,14,3,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,6,1,0,0,0,0,0,0,0,8,16,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,117,        m1 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,118,        n = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,2,0,0,0,0,0,0,0,0,2,17,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,2,0,0,0,0,0,10,0,0,12,18,3,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,6,2,0,1,2,0,4,0,0,12,44,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,0,0,0,7,33,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0,0,0,3,6,0,0,0,0,9,46,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,2,0,0,3,6,0,10,0,0,12,48,1,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.05882,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,2,21,9,0.05882,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,1,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,448,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,0,0,0,4,36,7,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,            for (int i = 0; i < data.length; i++) {,2,0,0,1,3,0,0,0,0,2,39,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,452,                dot += data[i] * vData[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,0,0,0,0,1,10,0,0,15,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,4,0,0,2,5,0,0,0,0,4,30,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,        return tableau.getSolution();,6,1,0,1,2,1,4,0,0,12,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,44,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",0,0,0,2,4,1,0,0,0,7,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,                return null;,0,0,0,0,0,1,10,0,0,10,12,7,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,320,        return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,0,0,0,1,2,0,0,0,0,3,72,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,4,1,0,1,2,0,4,4,0,14,92,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,1,0,2,4,0,4,0,0,5,102,8,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,0,0,0,5,48,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,6,1,0,3,6,1,0,0,0,8,70,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,      for (int i = 0; i < coefficients.length; i++) {,8,0,0,1,3,0,0,0,0,10,47,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",0,0,0,1,2,0,0,0,0,3,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,          if (colIndex < 0) {,4,2,1,1,3,1,0,0,0,19,19,12,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,409,          Integer basicRow = getBasicRow(colIndex);,0,0,0,1,2,0,0,0,0,3,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.05556,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,419,              coefficients[i] =,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,424,"      return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.05556,0,0
defect4j,math,org/apache/commons/math/util/Precision,42,92,            return 0;,18,4,1,0,0,2,0,0,0,28,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6,0,0,1,3,1,4,0,0,12,12,3,6.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,0,0,0,0,0,0,0,0,5,20,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,0,0,0,0,0,2,2,0,11,25,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,2,0,0,0,0,2,0,0,0,4,20,2,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,10,0,0,0,0,0,0,2,0,15,8,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,0,0,0,0,2,53,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,1,0,2,4,0,4,0,0,21,53,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,1,0,0,0,0,12,0,0,15,33,5,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,24,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,0,0,2,4,3,0,0,0,5,30,2,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,30,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,20,5,1,0,0,1,0,0,0,29,33,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,20,6,0,0,0,0,0,0,0,28,24,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,0,0,0,0,0,1,6,0,0,6,15,5,1.28571,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,167,        if (begin < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,171,        if (length < 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,        if (begin + length > values.length) {,8,2,0,1,3,0,0,0,0,10,37,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,4,2,0,1,3,0,0,0,0,7,33,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,        return true;,4,0,0,0,0,1,0,0,0,5,12,10,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,        if (values == null) {,6,1,0,1,3,6,0,4,0,17,21,1,1.14286,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,62,"        return evaluate(values, 0, values.length);",0,0,0,1,2,1,0,0,0,4,42,4,1.14286,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,0,0,0,0,0,0,0,0,0,0,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,0,0,0,0,0,1,0,0,0,1,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,4,0,0,0,0,1,0,0,0,5,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,            nbPoints        = 2;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,            signChangeIndex = 1;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);",4,0,0,1,2,0,18,0,0,23,36,3,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,                    resetOccurred = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,0,0,0,0,0,0,0,0,0,0,25,4,0.03333,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },2,1,1,0,1,0,0,0,0,7,1,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,                this.startColumn = startColumn;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,                destination[row - startRow][column - startColumn] = value;,10,2,1,2,4,0,0,0,0,15,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,366,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,            throw new NotStrictlyPositiveException(rowDimension);,0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,            throw new NotStrictlyPositiveException(columnDimension);,14,2,0,1,2,3,0,4,0,23,56,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,        final int rowCount    = getRowDimension();,2,2,0,1,2,1,10,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,74,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,        return out;,6,1,1,0,0,1,6,0,0,18,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,        final int rowCount    = getRowDimension();,6,1,0,1,2,0,0,0,0,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,91,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,        for (int row = 0; row < rowCount; ++row) {,10,1,0,1,3,0,0,0,0,12,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,94,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,        return out;,2,0,0,0,0,1,0,0,0,2,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,104,        final int rowCount    = getRowDimension();,10,1,0,1,2,1,2,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,        final int columnCount = getColumnDimension();,10,5,0,1,2,3,6,0,0,24,45,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,107,        for (int row = 0; row < rowCount; ++row) {,0,0,0,1,3,0,0,0,0,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,108,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,8,0,0,8,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,109,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,        return out;,16,3,0,0,0,1,0,0,0,21,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,118,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,119,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,        for (int row = 0; row < rowCount; ++row) {,2,1,0,1,3,0,0,0,0,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,123,"                out.setEntry(row, col, getEntry(row, col) * d);",2,2,0,2,4,0,26,0,0,30,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,127,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,135,        final int nRows = getRowDimension();,8,0,0,1,2,1,6,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,136,        final int nCols = m.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,137,        final int nSum  = getColumnDimension();,2,0,0,1,2,0,4,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,139,        for (int row = 0; row < nRows; ++row) {,4,1,1,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,140,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,141,                double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,142,                for (int i = 0; i < nSum; ++i) {,14,2,0,1,3,0,0,0,0,18,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,145,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,149,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,154,        return m.multiply(this);,6,1,0,1,2,1,6,0,0,14,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,159,        if (p < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,163,        if (!isSquare()) {,4,0,0,2,5,2,0,4,0,10,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",2,0,0,3,6,3,0,0,0,5,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,167,        if (p == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,2,1,0,2,4,1,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,171,        if (p == 1) {,2,0,0,1,3,0,0,2,0,4,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,172,            return this.copy();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,175,        final int power = p - 1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,186,        int maxI = -1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,10,1,0,1,3,0,0,0,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,189,            if (binaryRepresentation[i] == '1') {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,190,                final int pos = binaryRepresentation.length - i - 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,191,                nonZeroPositions.add(pos);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,194,                if (maxI == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,195,                    maxI = pos;,24,8,0,0,0,1,0,0,0,34,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,8,2,0,2,4,1,0,4,0,15,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,201,        results[0] = this.copy();,12,2,1,2,4,1,0,2,0,20,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,203,        for (int i = 1; i <= maxI; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,204,            results[i] = results[i-1].multiply(results[i-1]);,0,0,0,4,8,0,0,0,0,12,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,207,        RealMatrix result = this.copy();,2,0,0,1,2,0,2,2,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,209,        for (Integer i : nonZeroPositions) {,10,5,1,1,3,0,0,2,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,210,            result = result.multiply(results[i]);,2,0,0,2,4,1,6,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,211,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,213,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,4,0,0,6,12,0,0,0,0,4,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,220,        for (int i = 0; i < data.length; ++i) {,4,0,0,1,3,0,0,2,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,221,            final double[] dataI = data[i];,6,1,0,2,4,0,6,0,0,13,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,222,            for (int j = 0; j < dataI.length; ++j) {,18,2,0,1,3,0,0,0,0,21,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,223,"                dataI[j] = getEntry(i, j);",0,0,1,2,4,0,6,0,0,11,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,227,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",10,0,0,1,2,0,12,0,0,22,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,299,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,301,        for (int i = startRow; i <= endRow; ++i) {,10,1,0,1,3,0,0,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,302,            for (int j = startColumn; j <= endColumn; ++j) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",8,2,0,2,4,0,10,0,0,20,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,307,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",2,0,0,1,2,0,4,2,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,316,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,0,0,0,0,5,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,328,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,336,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,12,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,337,        final int rowsCount    = endRow + 1 - startRow;,6,2,0,0,0,1,0,0,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,338,        final int columnsCount = endColumn + 1 - startColumn;,6,2,0,0,0,1,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,10,3,1,4,9,0,0,0,0,15,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",6,0,1,1,3,0,0,2,0,10,85,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,369,    },2,1,0,0,1,0,4,0,0,7,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,374,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,375,        if ((destination.length < selectedRows.length) ||,8,2,0,1,3,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",10,0,1,1,3,2,0,2,0,16,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,382,        for (int i = 0; i < selectedRows.length; i++) {,14,1,0,1,3,0,0,0,0,17,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,383,            final double[] destinationI = destination[i];,2,0,1,2,4,1,0,0,0,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,384,            for (int j = 0; j < selectedColumns.length; j++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,0,4,8,0,0,0,0,12,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,388,    },16,5,0,0,1,0,0,0,0,23,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,393,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,394,        final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,395,        if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,396,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,399,        final int nCols = subMatrix[0].length;,6,1,0,1,2,0,4,0,0,11,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,400,        if (nCols == 0) {,8,2,0,1,3,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,8,0,0,1,2,0,0,2,0,11,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,404,        for (int r = 1; r < nRows; ++r) {,22,2,0,1,3,0,0,0,0,27,33,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,405,            if (subMatrix[r].length != nCols) {,8,1,0,2,5,1,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",4,0,1,2,4,0,0,2,0,10,65,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,410,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,411,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",6,2,0,1,2,0,4,0,0,13,55,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,415,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,6,0,0,16,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,416,            for (int j = 0; j < nCols; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",8,2,1,3,6,0,2,0,0,18,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,420,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,424,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,425,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,426,"        final RealMatrix out = createMatrix(1, nCols);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,427,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,428,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,2,4,0,12,0,0,12,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,431,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,436,"        MatrixUtils.checkRowIndex(this, row);",2,0,0,1,2,0,6,0,0,9,37,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,437,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,438,        if ((matrix.getRowDimension() != 1) ||,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,440,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,444,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,445,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,447,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,451,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,452,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,453,"        final RealMatrix out = createMatrix(nRows, 1);",10,1,0,1,2,1,4,2,0,19,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,454,        for (int i = 0; i < nRows; ++i) {,12,1,0,1,3,0,0,0,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,455,"            out.setEntry(i, 0, getEntry(i, column));",2,1,0,2,4,0,24,0,0,27,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,458,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,463,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,464,        final int nRows = getRowDimension();,4,0,0,1,2,1,8,0,0,14,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,465,        if ((matrix.getRowDimension() != nRows) ||,2,2,0,2,5,0,4,0,0,8,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",2,0,0,1,3,0,8,4,0,15,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,471,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,472,"            setEntry(i, column, matrix.getEntry(i, 0));",0,3,0,2,4,0,24,0,0,29,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,478,"        return new ArrayRealVector(getRow(row), false);",2,0,0,2,4,2,4,2,0,10,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,483,"        MatrixUtils.checkRowIndex(this, row);",8,2,0,1,2,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,484,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,485,        if (vector.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0,0,0,1,3,0,4,2,0,6,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,489,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,490,"            setEntry(row, i, vector.getEntry(i));",8,1,0,2,4,0,16,0,0,26,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,492,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,496,"        return new ArrayRealVector(getColumn(column), false);",0,0,0,2,4,1,4,2,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,501,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,18,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,502,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,503,        if (vector.getDimension() != nRows) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,504,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,507,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,508,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,12,0,0,12,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,510,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,514,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,515,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,516,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,517,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,518,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,14,0,0,19,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,521,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,526,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,527,        final int nCols = getColumnDimension();,4,0,0,1,2,1,2,2,0,9,39,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,528,        if (array.length != nCols) {,6,1,0,1,3,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,529,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",8,2,1,1,2,0,0,2,0,21,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,531,        for (int i = 0; i < nCols; ++i) {,12,1,0,1,3,0,0,0,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,532,"            setEntry(row, i, array[i]);",0,0,1,2,4,0,6,0,0,10,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,534,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,538,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,539,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,540,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,541,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,542,"            out[i] = getEntry(i, column);",0,0,1,2,4,0,6,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,545,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,550,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,551,        final int nRows = getRowDimension();,10,1,1,1,2,1,2,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,552,        if (array.length != nRows) {,6,2,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",6,0,0,1,2,0,0,2,0,8,70,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,555,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,556,"            setEntry(i, column, array[i]);",10,1,1,2,4,0,6,0,0,22,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,558,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,574,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,575,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,576,"        final RealMatrix out = createMatrix(nCols, nRows);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,587,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,592,        return getColumnDimension() == getRowDimension();,2,1,0,2,4,1,4,0,0,8,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,615,        final int nRows = getRowDimension();,8,1,0,1,2,1,2,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,616,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,617,        if (nRows != nCols) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,618,"            throw new NonSquareMatrixException(nRows, nCols);",4,0,0,1,2,0,0,2,0,6,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,620,        double trace = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,621,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,622,"            trace += getEntry(i, i);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,624,        return trace;,6,0,1,0,0,2,8,0,0,29,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,629,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,630,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,631,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,632,"            throw new DimensionMismatchException(v.length, nCols);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,635,        final double[] out = new double[nRows];,4,1,1,2,4,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,636,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,637,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,638,            for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,639,"                sum += getEntry(row, i) * v[i];",2,1,1,2,4,0,6,0,0,14,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,641,            out[row] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,644,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,651,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",2,0,0,5,10,1,4,4,0,11,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,652,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,653,            final int nRows = getRowDimension();,2,0,0,1,2,1,12,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,654,            final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,655,            if (v.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,656,"                throw new DimensionMismatchException(v.getDimension(), nCols);",2,0,1,2,4,0,0,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,659,            final double[] out = new double[nRows];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,660,            for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,661,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,662,                for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,663,"                    sum += getEntry(row, i) * v.getEntry(i);",2,1,0,2,4,0,12,0,0,16,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,665,                out[row] = sum;,2,0,1,1,2,0,0,0,0,7,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,668,"            return new ArrayRealVector(out, false);",2,0,1,1,2,1,0,2,0,9,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,675,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,676,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,677,        if (v.length != nRows) {,6,1,0,1,3,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,678,"            throw new DimensionMismatchException(v.length, nRows);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,681,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,682,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,683,            double sum = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,684,            for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,685,"                sum += getEntry(i, col) * v[i];",2,1,1,2,4,0,6,0,0,14,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,687,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,690,        return out;,8,1,0,0,0,1,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,696,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",10,1,0,5,10,1,4,4,0,22,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,697,        } catch (ClassCastException cce) {,2,1,1,1,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,699,            final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,700,            final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,701,            if (v.getDimension() != nRows) {,4,1,1,2,5,0,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,702,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,705,            final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,706,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,2,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,707,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,708,                for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,709,"                    sum += getEntry(i, col) * v.getEntry(i);",0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,711,                out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,714,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,720,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,721,        final int columns = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,722,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,723,        for (int row = 0; row < rows; ++row) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,724,            for (int column = 0; column < columns; ++column) {,12,2,1,1,3,0,0,0,0,24,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,725,"                final double oldValue = getEntry(row, column);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,726,"                final double newValue = visitor.visit(row, column, oldValue);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,727,"                setEntry(row, column, newValue);",0,0,0,1,2,0,8,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,730,        return visitor.end();,12,1,0,1,2,1,4,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,735,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,736,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,737,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,738,        for (int row = 0; row < rows; ++row) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,739,            for (int column = 0; column < columns; ++column) {,4,0,0,1,3,0,0,0,0,5,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,740,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,14,0,0,14,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,743,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,750,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,12,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,751,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,2,5,0,0,0,0,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,753,        for (int row = startRow; row <= endRow; ++row) {,10,1,0,1,3,0,0,0,0,12,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,754,            for (int column = startColumn; column <= endColumn; ++column) {,10,1,0,1,3,0,0,0,0,12,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,755,"                final double oldValue = getEntry(row, column);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,756,"                final double newValue = visitor.visit(row, column, oldValue);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,757,"                setEntry(row, column, newValue);",0,0,0,1,2,0,8,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,760,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,767,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",10,0,1,1,2,1,0,2,0,15,80,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,768,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,2,5,0,8,0,0,8,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,770,        for (int row = startRow; row <= endRow; ++row) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,771,            for (int column = startColumn; column <= endColumn; ++column) {,0,0,0,1,3,0,0,0,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,772,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,0,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,775,        return visitor.end();,2,0,0,1,2,2,8,2,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,780,        final int rows    = getRowDimension();,4,1,0,1,2,1,8,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,781,        final int columns = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,783,        for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,784,            for (int row = 0; row < rows; ++row) {,10,2,0,1,3,0,14,0,0,27,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,785,"                final double oldValue = getEntry(row, column);",4,0,1,1,2,1,6,0,0,18,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,786,"                final double newValue = visitor.visit(row, column, oldValue);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,787,"                setEntry(row, column, newValue);",2,0,0,1,2,1,8,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,790,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,795,        final int rows    = getRowDimension();,6,0,0,1,2,1,4,0,0,11,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,796,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,797,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,798,        for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,799,            for (int row = 0; row < rows; ++row) {,8,1,0,1,3,0,0,0,0,10,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,800,"                visitor.visit(row, column, getEntry(row, column));",8,0,0,2,4,0,14,0,0,24,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,803,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,810,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",6,2,0,1,2,1,12,0,0,21,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,811,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,2,5,0,0,0,0,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,813,        for (int column = startColumn; column <= endColumn; ++column) {,0,0,0,1,3,0,0,0,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,814,            for (int row = startRow; row <= endRow; ++row) {,6,0,0,1,3,0,0,2,0,8,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,815,"                final double oldValue = getEntry(row, column);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,816,"                final double newValue = visitor.visit(row, column, oldValue);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,817,"                setEntry(row, column, newValue);",0,0,0,1,2,0,8,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,820,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,827,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,828,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,2,5,0,8,0,0,8,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,830,        for (int column = startColumn; column <= endColumn; ++column) {,0,0,0,1,3,0,0,0,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,831,            for (int row = startRow; row <= endRow; ++row) {,10,1,0,1,3,0,0,0,0,12,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,832,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,14,0,0,14,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,835,        return visitor.end();,4,0,0,1,2,1,4,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,840,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,845,        return walkInRowOrder(visitor);,2,0,1,1,2,1,0,0,0,7,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,852,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",4,1,0,1,2,1,12,0,0,17,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,859,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,1,0,0,0,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,868,        final int nRows = getRowDimension();,2,0,1,1,2,1,2,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,869,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,870,        final StringBuffer res = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,871,        String fullClassName = getClass().getName();,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,872,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0,0,0,2,4,0,0,0,0,6,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,873,"        res.append(shortClassName).append(""{"");",0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,875,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,876,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,877,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,879,"            res.append(""{"");",0,0,0,1,3,0,4,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,880,            for (int j = 0; j < nCols; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,881,                if (j > 0) {,8,1,0,1,3,0,6,2,0,17,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,882,"                    res.append("","");",0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,884,"                res.append(getEntry(i, j));",0,0,0,2,4,0,10,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,886,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,889,"        res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,890,        return res.toString();,0,0,1,1,2,1,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,903,        if (object == this ) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,904,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,906,        if (object instanceof RealMatrix == false) {,4,1,0,1,3,0,0,2,0,9,44,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,907,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,909,        RealMatrix m = (RealMatrix) object;,4,0,0,1,2,0,0,4,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,910,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,911,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,912,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0,0,0,3,7,0,0,0,0,10,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,913,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,915,        for (int row = 0; row < nRows; ++row) {,30,10,0,1,3,0,0,0,0,42,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,916,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,917,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0,1,0,3,7,0,14,0,0,15,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,918,                    return false;,0,0,0,0,0,1,0,0,0,1,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,922,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,932,        int ret = 7;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,933,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,934,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,935,        ret = ret * 31 + nRows;,6,3,1,0,0,0,0,0,0,17,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,936,        ret = ret * 31 + nCols;,6,2,0,0,0,0,0,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,937,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,938,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,939,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,10,8,0,3,6,0,0,0,0,19,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,943,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,4,0,1,1,4,2,2,2,0,11,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,247,                this.endRow = endRow;,8,0,0,0,0,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,248,                columnSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,249,                maxColSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,250,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,254,                columnSum += FastMath.abs(value);,2,0,0,1,2,0,6,0,0,9,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,255,                if (row == endRow) {,6,1,0,1,3,0,6,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);",2,0,0,1,2,0,8,0,0,11,47,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,257,                    columnSum = 0;,2,0,0,0,0,0,0,0,0,3,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,259,            },8,1,0,0,1,0,10,0,0,20,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,263,                return maxColSum;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,            class UnmodifiableEntry extends Entry {,2,0,0,0,1,0,0,2,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1235,                    return v.getEntry(getIndex());,0,0,0,2,4,1,6,0,0,6,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1241,                    throw new MathUnsupportedOperationException();,6,0,0,1,2,1,0,2,0,9,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,797,        public Entry() {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,798,            setIndex(0);,0,0,0,1,2,0,2,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,799,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,807,            return getEntry(getIndex());,0,0,0,2,4,1,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,816,"            setEntry(getIndex(), value);",0,0,0,2,4,0,6,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,817,        },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,825,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,834,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,835,        },0,0,1,0,1,0,8,0,0,17,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,936,        return new RealVector() {,0,0,0,1,3,1,0,2,0,2,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,            class UnmodifiableEntry extends Entry {,4,0,0,0,1,0,0,2,0,8,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,940,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,946,                return v.map(function);,0,0,0,1,2,1,6,0,0,6,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,952,                final Iterator<Entry> i = v.iterator();,2,0,0,1,2,1,4,4,0,11,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,953,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,978,                final Iterator<Entry> i = v.sparseIterator();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,980,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1005,                return v.copy();,0,0,0,1,2,1,4,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1011,                return v.add(w);,0,0,0,1,2,1,6,0,0,6,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1017,                return v.subtract(w);,0,0,0,1,2,1,6,0,0,6,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1023,                return v.mapAdd(d);,14,2,0,1,2,1,16,2,0,35,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1029,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1035,                return v.mapSubtract(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1041,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1047,                return v.mapMultiply(d);,4,0,0,1,2,1,6,2,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1053,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1059,                return v.mapDivide(d);,0,0,0,1,2,1,6,0,0,6,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1065,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1071,                return v.ebeMultiply(w);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1077,                return v.ebeDivide(w);,0,0,0,1,2,1,6,0,0,6,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1083,                return v.dotProduct(w);,0,0,0,1,2,1,6,0,0,6,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1089,                return v.cosine(w);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1095,                return v.getNorm();,4,1,0,1,2,1,4,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1101,                return v.getL1Norm();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1107,                return v.getLInfNorm();,0,0,0,1,2,1,4,0,0,4,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1113,                return v.getDistance(w);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1119,                return v.getL1Distance(w);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1125,                return v.getLInfDistance(w);,0,0,0,1,2,1,6,0,0,6,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1131,                return v.unitVector();,4,0,0,1,2,1,4,2,0,10,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1137,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1143,                return v.projection(w);,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1149,                return v.outerProduct(w);,0,0,0,1,2,1,6,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1155,                return v.getEntry(index);,0,0,0,1,2,1,6,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1161,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1167,                return v.getDimension();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1173,                return v.append(w);,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1179,                return v.append(d);,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1185,"                return v.getSubVector(index, n);",0,0,0,1,2,1,14,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1191,                throw new MathUnsupportedOperationException();,2,0,0,1,2,0,0,2,0,5,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1197,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1203,                return v.toArray();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1209,                return v.isNaN();,0,0,0,1,2,1,4,0,0,4,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1215,                return v.isInfinite();,6,0,0,1,2,1,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1221,"                return v.combine(a, b, y);",0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1227,                throw new MathUnsupportedOperationException();,8,1,0,1,2,0,0,0,0,10,46,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,58,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,149,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,160,        int d = getDimension();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,161,        if (d != n) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,162,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,164,    },2,0,1,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,173,        if (index < 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,175,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,178,    },4,1,1,0,1,0,6,0,0,16,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,190,        RealVector result = v.copy();,8,1,0,1,2,0,2,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,191,        Iterator<Entry> it = sparseIterator();,4,1,0,1,2,0,8,4,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,193,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,194,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,195,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,196,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,197,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,210,        RealVector result = v.copy();,4,0,0,1,2,0,4,2,0,10,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,211,        Iterator<Entry> it = sparseIterator();,6,1,0,1,2,0,0,0,0,7,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,213,        while (it.hasNext() && (e = it.next()) != null) {,6,3,0,4,9,0,8,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,214,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,215,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,216,        },0,0,0,0,1,0,10,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,217,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,228,        return copy().mapAddToSelf(d);,0,0,0,2,4,1,6,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,239,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,240,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,8,2,0,10,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,242,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,261,        checkVectorDimensions(v);,4,0,0,1,2,0,4,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,262,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,263,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,265,        while (it.hasNext() && (e = it.next()) != null) {,10,3,0,4,9,0,8,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,266,            d += e.getValue() * v.getEntry(e.getIndex());,2,1,0,3,6,0,12,0,0,16,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,268,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,279,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,280,        final double vNorm = v.getNorm();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,282,        if (norm == 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,284,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,286,        return dotProduct(v) / (norm * vNorm);,4,2,0,2,4,1,4,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,324,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,325,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,326,        Iterator<Entry> it = iterator();,12,2,0,1,2,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,328,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,329,            final double diff = e.getValue() - v.getEntry(e.getIndex());,8,3,0,3,6,2,14,0,0,27,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,330,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,331,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,332,        return FastMath.sqrt(d);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,346,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,347,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,349,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,350,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,351,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,352,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,353,        return FastMath.sqrt(sum);,14,7,0,1,2,1,6,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,367,        double norm = 0;,4,0,0,0,0,0,0,0,0,4,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,368,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,370,        while (it.hasNext() && (e = it.next()) != null) {,10,3,0,4,9,0,8,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,371,            norm += FastMath.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,373,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,387,        double norm = 0;,2,0,1,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,388,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,390,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,391,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,393,        return norm;,2,0,0,0,0,1,0,2,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,408,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,409,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,410,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,412,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,413,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,8,3,1,4,8,0,20,0,0,42,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,415,        return d;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,433,        checkVectorDimensions(v);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,434,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,435,        Iterator<Entry> it = iterator();,20,3,0,1,2,0,2,4,0,30,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,437,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,438,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,440,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,450,        int minIndex    = -1;,12,1,0,0,0,0,0,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,451,        double minValue = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,452,        Iterator<Entry> iterator = iterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,453,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,454,            final Entry entry = iterator.next();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,455,            if (entry.getValue() <= minValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,456,                minIndex = entry.getIndex();,6,0,0,1,2,0,4,2,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,457,                minValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,459,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,460,        return minIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,470,        final int minIndex = getMinIndex();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,471,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,6,1,0,1,2,1,4,0,0,11,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,481,        int maxIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,482,        double maxValue = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,483,        Iterator<Entry> iterator = iterator();,6,0,0,1,2,0,2,4,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,484,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,485,            final Entry entry = iterator.next();,2,0,0,1,2,1,4,2,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,486,            if (entry.getValue() >= maxValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,487,                maxIndex = entry.getIndex();,2,0,0,1,2,0,10,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,488,                maxValue = entry.getValue();,4,1,0,1,2,0,4,0,0,10,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,490,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,491,        return maxIndex;,10,2,0,0,0,1,0,0,0,14,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,501,        final int maxIndex = getMaxIndex();,10,0,0,1,2,1,2,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,502,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,514,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,525,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,0,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,536,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,547,        return mapAddToSelf(-d);,2,0,0,1,2,1,2,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,558,        return copy().mapDivideToSelf(d);,0,0,0,2,4,1,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,569,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0,0,0,3,6,1,0,0,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,580,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0,0,0,1,3,0,0,0,0,4,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,581,"            product = new OpenMapRealMatrix(this.getDimension(),",2,0,0,1,3,0,2,2,0,7,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,584,"            product = new Array2DRowRealMatrix(this.getDimension(),",0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,587,        Iterator<Entry> thisIt = sparseIterator();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,588,        Entry thisE = null;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,589,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,2,2,0,4,9,0,8,0,0,13,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,590,            Iterator<Entry> otherIt = v.sparseIterator();,8,1,0,1,2,0,4,4,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,591,            Entry otherE = null;,2,0,0,0,0,0,0,2,0,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,592,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,2,2,0,4,9,0,8,0,0,13,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,593,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0,0,0,2,5,0,12,0,0,12,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,596,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,598,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,618,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,619,        Entry e = null;,2,0,0,0,0,0,0,2,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,620,        while (it.hasNext() && (e = it.next()) != null) {,10,4,0,4,9,0,8,0,0,24,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,621,            e.setValue(value);,0,0,0,1,2,0,6,0,0,6,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,623,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,633,        int dim = getDimension();,2,0,0,1,2,0,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,634,        double[] values = new double[dim];,2,0,1,2,4,0,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,635,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,636,            values[i] = getEntry(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,638,        return values;,24,9,0,0,0,1,0,0,0,35,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,649,        RealVector copy = copy();,2,0,0,1,2,0,8,2,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,650,        copy.unitize();,0,0,0,1,2,0,4,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,651,        return copy;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,662,        mapDivideToSelf(getNorm());,0,0,0,2,4,0,4,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,663,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,677,        return new SparseEntryIterator();,0,0,0,1,2,1,0,2,0,2,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,687,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,688,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,725,        return copy().mapToSelf(function);,10,1,0,2,4,1,6,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,742,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,2,1,0,4,8,0,8,4,0,15,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,744,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,745,            e.setValue(function.value(e.getValue()));,2,1,0,3,6,0,12,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,747,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,764,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,780,        checkVectorDimensions(y);,2,0,1,1,2,0,4,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,781,        for (int i = 0; i < getDimension(); i++) {,8,2,0,2,5,0,2,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,782,            final double xi = getEntry(i);,6,1,0,1,2,1,4,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,783,            final double yi = y.getEntry(i);,2,0,0,1,2,1,6,0,0,9,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,784,"            setEntry(i, a * xi + b * yi);",8,3,0,1,2,0,4,0,0,15,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,786,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,936,        return new RealVector() {,0,0,0,1,3,1,0,2,0,2,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,688,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,691,            private int i = 0;,2,0,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,694,            private Entry e = new Entry();,4,0,1,1,2,1,0,4,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,698,                return i < dim;,4,1,0,0,0,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,703,                e.setIndex(i++);,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,704,                return e;,2,0,0,0,0,1,0,0,0,2,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,709,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,63,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,279,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,280,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,284,                sum += value * value;,10,1,1,0,0,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,285,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,289,                return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,4,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,582,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,583,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,860,        protected SparseEntryIterator() {,2,0,0,1,3,1,0,0,0,3,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,861,            dim = getDimension();,2,0,0,1,2,0,2,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,862,            current = new Entry();,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,863,            next = new Entry();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,864,            if (next.getValue() == 0) {,6,3,0,2,5,0,4,0,0,14,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,865,                advance(next);,0,0,0,1,2,0,4,0,0,4,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,867,        },10,2,0,0,1,0,0,0,0,13,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,875,            if (e == null) {,2,1,0,1,3,0,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,876,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,879,                e.setIndex(e.getIndex() + 1);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,880,            } while (e.getIndex() < dim && e.getValue() == 0);,0,0,0,3,7,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,881,            if (e.getIndex() >= dim) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,882,                e.setIndex(-1);,12,4,0,1,2,0,4,0,0,22,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,884,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,888,            return next.getIndex() >= 0;,0,1,0,1,2,1,4,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,893,            int index = next.getIndex();,2,0,0,1,2,0,4,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,894,            if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,895,                throw new NoSuchElementException();,0,0,0,1,2,0,0,2,0,2,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,897,            current.setIndex(index);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,898,            advance(next);,2,1,0,1,2,1,4,0,0,8,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,899,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,904,            throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,    protected class SparseEntryIterator implements Iterator<Entry> {,6,0,0,0,1,1,0,4,0,12,64,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,953,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,955,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,2,0,0,1,2,2,0,4,0,8,60,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,959,                        return i.hasNext();,6,1,0,1,2,1,4,2,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,964,                        e.setIndex(i.next().getIndex());,0,0,0,3,6,0,0,0,0,9,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,965,                        return e;,2,0,0,0,0,1,0,0,0,2,9,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,970,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,980,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,982,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,2,0,0,1,2,2,0,4,0,8,60,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,986,                        return i.hasNext();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,991,                        e.setIndex(i.next().getIndex());,0,0,0,3,6,0,14,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,992,                        return e;,4,1,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,997,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",26,9,0,0,1,0,6,0,0,42,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,54,        return getWrongDimension(0);,0,0,0,1,2,1,2,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,60,        return getExpectedDimension(0);,0,0,0,1,2,1,2,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,66,        return getWrongDimension(1);,0,0,0,1,2,1,2,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,72,        return getExpectedDimension(1);,0,0,0,1,2,1,2,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,59,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,60,        this.wrong = wrong.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,61,        this.expected = expected.clone();,12,1,0,1,2,0,4,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,68,        return wrong.clone();,6,1,0,1,2,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,74,        return expected.clone();,2,0,0,1,2,1,4,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,82,        return wrong[index];,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,89,        return expected[index];,0,0,1,1,2,1,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,44,                                        Object ... args) {,4,0,0,0,2,0,0,0,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,45,        context = new ExceptionContext(this);,10,2,0,1,2,0,0,2,0,16,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,46,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,51,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,64,    public ExceptionContext(final Throwable throwable) {,10,1,0,1,3,0,0,0,0,12,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,66,        msgPatterns    = new ArrayList<Localizable>();,2,0,0,1,2,0,0,4,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,67,        msgArguments   = new ArrayList<Object[]>();,6,7,0,2,4,0,0,0,0,13,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,75,        return throwable;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,88,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,100,"        context.put(key, value);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,110,        return context.get(key);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,119,        return context.keySet();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,128,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,137,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,147,"        return buildMessage(locale, "": "");",0,0,0,1,2,1,4,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,159,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,171,        final StringBuilder sb = new StringBuilder();,6,0,1,1,2,1,0,0,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,172,        int count = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,174,        for (int i = 0; i < len; i++) {,14,2,0,1,3,0,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,175,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,18,2,0,23,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,176,            final Object[] args = msgArguments.get(i);,6,0,0,2,4,1,6,2,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",0,0,0,1,3,0,0,0,0,4,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,179,            sb.append(fmt.format(args));,0,0,0,2,4,0,10,0,0,10,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,182,                sb.append(separator);,0,0,0,1,2,0,6,0,0,6,21,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,186,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,197,        out.writeObject(throwable);,8,2,0,1,2,1,30,0,0,41,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,198,        serializeMessages(out);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,199,        serializeContext(out);,0,0,0,1,2,0,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,211,        throwable = (Throwable) in.readObject();,2,0,0,2,4,0,4,2,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,212,        deSerializeMessages(in);,10,1,0,1,2,0,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,213,        deSerializeContext(in);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,214,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,225,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,226,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,228,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,229,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,231,            out.writeObject(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,232,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,233,            final int aLen = args.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,235,            out.writeInt(aLen);,10,1,0,1,2,0,6,0,0,18,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,237,                if (args[j] instanceof Serializable) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,239,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,3,6,0,6,0,0,10,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,246,    },10,1,0,0,1,1,0,2,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,259,        final int len = in.readInt();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,260,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,263,        for (int i = 0; i < len; i++) {,10,2,0,1,3,0,4,0,0,17,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,266,            msgPatterns.add(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,268,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,269,            final Object[] args = new Object[aLen];,8,5,1,2,4,1,0,4,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,272,                args[j] = in.readObject();,8,0,1,2,4,0,8,0,0,21,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,274,            msgArguments.add(args);,0,0,0,1,2,0,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,276,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,287,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,288,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,289,        for (String key : context.keySet()) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,291,            out.writeObject(key);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,292,            final Object value = context.get(key);,6,2,0,1,2,1,6,2,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,293,            if (value instanceof Serializable) {,8,1,0,1,3,0,0,2,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,295,                out.writeObject(value);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,298,                out.writeObject(nonSerializableReplacement(value));,2,0,0,2,4,0,8,0,0,10,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,300,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,301,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,314,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,315,"        context = new HashMap<String, Object>();",10,2,0,1,2,0,0,6,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,316,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,318,            final String key = (String) in.readObject();,8,1,0,2,4,1,4,4,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,321,"            context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,323,    },2,0,0,0,1,0,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",2,1,0,3,6,1,6,0,0,11,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",16,1,0,1,2,0,0,0,0,17,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,6,0,0,14,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,63,        return dimension;,8,1,0,0,0,1,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,46,"        super(pattern, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,54,        return argument;,4,0,0,0,0,2,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,8,1,0,1,4,0,4,2,0,16,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,323,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,3,6,1,2,0,0,10,60,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,53,    public ArrayRealVector() {,4,0,1,1,3,1,0,0,0,8,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,54,        data = new double[0];,22,1,0,1,2,1,6,0,0,32,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,55,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,63,        data = new double[size];,4,0,1,1,2,0,0,0,0,7,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,72,"    public ArrayRealVector(int size, double preset) {",12,1,0,1,3,2,6,0,0,21,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,73,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,74,"        Arrays.fill(data, preset);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,83,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,84,        data = d.clone();,4,0,0,1,2,1,4,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,101,"    public ArrayRealVector(double[] d, boolean copyArray) {",8,0,0,2,5,1,0,0,0,9,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,102,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,103,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,105,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,118,"    public ArrayRealVector(double[] d, int pos, int size) {",8,0,0,2,5,1,0,0,0,9,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,119,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,120,            throw new NullArgumentException();,2,1,0,1,2,0,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,122,        if (d.length < pos + size) {,8,2,0,1,3,0,0,0,0,10,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,123,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",14,2,0,1,2,0,0,2,0,19,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,125,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,126,"        System.arraycopy(d, pos, data, 0, size);",4,0,0,1,2,0,0,0,0,4,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,127,    },8,0,0,0,1,0,0,0,0,10,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,134,    public ArrayRealVector(Double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,135,        data = new double[d.length];,14,2,0,1,2,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,136,        for (int i = 0; i < d.length; i++) {,10,1,0,1,3,0,8,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,137,            data[i] = d[i].doubleValue();,0,0,1,3,6,0,2,2,0,13,29,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,139,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,151,"    public ArrayRealVector(Double[] d, int pos, int size) {",14,2,1,2,5,2,0,2,0,24,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,152,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,153,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,155,        if (d.length < pos + size) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,156,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",10,1,1,1,2,1,0,2,0,17,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,158,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,159,        for (int i = pos; i < pos + size; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,160,            data[i - pos] = d[i].doubleValue();,4,1,1,3,6,0,2,0,0,14,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,170,    public ArrayRealVector(RealVector v) {,4,0,0,1,3,1,0,2,0,7,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,171,        if (v == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,172,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,174,        data = new double[v.getDimension()];,2,0,0,2,4,0,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,175,        for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,176,            data[i] = v.getEntry(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,187,"        this(v, true);",2,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,188,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,198,        data = deep ? v.data.clone() : v.data;,22,3,0,1,2,0,6,0,0,33,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,199,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,206,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",6,0,0,1,3,1,0,4,0,11,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,207,        data = new double[v1.data.length + v2.data.length];,20,3,0,1,2,0,0,0,0,24,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,208,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",14,0,0,1,2,0,6,0,0,20,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,209,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",16,0,0,1,2,0,6,0,0,22,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,210,    },4,0,0,0,1,0,0,0,0,4,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,217,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",2,1,1,1,3,0,0,0,0,8,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,218,        final int l1 = v1.data.length;,8,0,0,0,0,1,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,219,        final int l2 = v2.getDimension();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,220,        data = new double[l1 + l2];,6,1,0,1,2,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,221,"        System.arraycopy(v1.data, 0, data, 0, l1);",4,0,0,1,2,0,8,0,0,12,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,222,        for (int i = 0; i < l2; ++i) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,223,            data[l1 + i] = v2.getEntry(i);,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,225,    },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,232,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",6,0,0,1,3,1,0,4,0,11,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,233,        final int l1 = v1.getDimension();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,234,        final int l2 = v2.data.length;,8,0,0,0,0,1,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,235,        data = new double[l1 + l2];,6,1,0,1,2,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,236,        for (int i = 0; i < l1; ++i) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,237,            data[i] = v1.getEntry(i);,0,0,1,2,4,0,6,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,239,"        System.arraycopy(v2.data, 0, data, l1, l2);",4,0,0,1,2,0,10,0,0,14,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,240,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,247,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",6,0,0,2,5,1,0,2,0,9,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,248,        final int l1 = v1.getDimension();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,249,        final int l2 = v2.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,250,        data = new double[l1 + l2];,10,1,0,1,2,0,10,0,0,22,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,251,"        System.arraycopy(v1.data, 0, data, 0, l1);",4,0,0,1,2,0,8,0,0,12,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,252,"        System.arraycopy(v2, 0, data, l1, l2);",2,0,0,1,2,1,14,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,253,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,260,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",8,0,0,2,5,2,2,2,0,14,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,261,        final int l1 = v1.length;,8,0,0,0,0,1,0,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,262,        final int l2 = v2.getDimension();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,263,        data = new double[l1 + l2];,10,1,0,1,2,0,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,264,"        System.arraycopy(v1, 0, data, 0, l1);",0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,265,"        System.arraycopy(v2.data, 0, data, l1, l2);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,266,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,273,"    public ArrayRealVector(double[] v1, double[] v2) {",6,0,0,3,7,1,0,0,0,7,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,274,        final int l1 = v1.length;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,275,        final int l2 = v2.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,276,        data = new double[l1 + l2];,14,10,0,1,2,0,0,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,277,"        System.arraycopy(v1, 0, data, 0, l1);",0,0,0,1,2,0,10,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,278,"        System.arraycopy(v2, 0, data, l1, l2);",0,0,0,1,2,0,12,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,279,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,10,2,1,1,2,3,4,2,0,27,86,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,284,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,2,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,290,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,291,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,292,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,293,            checkVectorDimensions(dim);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,294,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,295,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,296,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,297,                resultData[i] = data[i] + vData[i];,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,299,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,301,            checkVectorDimensions(v);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,302,            double[] out = data.clone();,2,0,0,2,4,0,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,303,            Iterator<Entry> it = v.sparseIterator();,2,0,0,1,2,0,4,4,0,10,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,305,            while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,306,                out[e.getIndex()] += e.getValue();,0,0,0,3,6,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,308,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,315,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,10,2,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,316,            final double[] vData = ((ArrayRealVector) v).data;,14,0,0,3,6,1,0,4,0,19,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,317,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,318,            checkVectorDimensions(dim);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,319,            ArrayRealVector result = new ArrayRealVector(dim);,0,0,0,1,2,0,6,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,320,            double[] resultData = result.data;,10,0,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,321,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,322,                resultData[i] = data[i] - vData[i];,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,324,            return result;,8,1,0,0,0,1,0,0,0,10,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,326,            checkVectorDimensions(v);,2,0,0,1,2,0,8,2,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,327,            double[] out = data.clone();,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,328,            Iterator<Entry> it = v.sparseIterator();,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,330,            while(it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,331,                out[e.getIndex()] -= e.getValue();,10,3,1,3,6,1,22,0,0,40,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,333,"            return new ArrayRealVector(out, false);",4,2,0,1,2,1,6,2,0,15,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,340,        return copy().mapToSelf(function);,0,0,0,2,4,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,346,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,347,            data[i] = function.value(data[i]);,0,0,1,3,6,0,4,0,0,13,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,349,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,355,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,356,            data[i] = data[i] + d;,0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,358,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,364,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,365,            data[i] = data[i] - d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,367,        return this;,8,1,0,0,0,1,0,0,0,10,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,373,        for (int i = 0; i < data.length; i++) {,14,1,0,1,3,0,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,374,            data[i] = data[i] * d;,8,3,1,2,4,0,0,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,376,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,382,        for (int i = 0; i < data.length; i++) {,2,0,0,1,3,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,383,            data[i] = data[i] / d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,385,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,391,        if (v instanceof ArrayRealVector) {,14,2,0,1,3,1,0,2,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,392,            final double[] vData = ((ArrayRealVector) v).data;,6,0,1,3,6,1,4,2,0,18,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,393,            final int dim = vData.length;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,394,            checkVectorDimensions(dim);,6,0,0,1,2,1,4,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,395,            ArrayRealVector result = new ArrayRealVector(dim);,6,0,0,1,2,0,4,4,0,15,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,396,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,397,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,398,                resultData[i] = data[i] * vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,400,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,402,            checkVectorDimensions(v);,2,0,0,1,2,0,8,0,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,403,            double[] out = data.clone();,8,1,0,2,4,1,4,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,404,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,405,                out[i] *= v.getEntry(i);,0,0,1,2,4,0,6,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,407,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,413,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,414,            final double[] vData = ((ArrayRealVector) v).data;,2,0,0,3,6,0,0,2,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,415,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,416,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,417,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,418,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,419,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,420,                resultData[i] = data[i] / vData[i];,2,0,0,3,6,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,422,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,424,            checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,425,            double[] out = data.clone();,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,426,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,427,                out[i] /= v.getEntry(i);,0,0,1,2,4,0,6,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,429,"            return new ArrayRealVector(out, false);",8,1,0,1,2,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,440,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,446,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,447,            final double[] vData = ((ArrayRealVector) v).data;,6,1,0,3,6,0,0,0,0,8,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,448,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,449,            double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,450,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,451,                dot += data[i] * vData[i];,4,1,1,2,4,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,453,            return dot;,8,2,0,0,0,1,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,455,            checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,456,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,457,            Iterator<Entry> it = v.sparseIterator();,8,1,0,1,2,1,4,4,0,18,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,459,            while(it.hasNext() && (e = it.next()) != null) {,4,2,0,4,9,0,16,0,0,23,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,460,                dot += data[e.getIndex()] * e.getValue();,2,1,1,3,6,0,8,0,0,14,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,462,            return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,469,        double sum = 0;,4,2,0,0,0,0,4,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,470,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,471,            sum += a * a;,6,1,1,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,473,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,479,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,480,        for (double a : data) {,12,3,0,1,3,1,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,481,            sum += FastMath.abs(a);,2,0,0,1,2,0,6,0,0,9,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,483,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,489,        double max = 0;,10,1,0,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,490,        for (double a : data) {,6,0,0,1,3,0,0,0,0,6,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,491,"            max = FastMath.max(max, FastMath.abs(a));",0,0,0,2,4,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,493,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,499,        if (v instanceof ArrayRealVector) {,8,1,0,1,3,0,0,2,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,500,            final double[] vData = ((ArrayRealVector) v).data;,10,1,0,3,6,1,0,2,0,14,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,501,            checkVectorDimensions(vData.length);,10,1,0,1,2,1,2,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,502,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,503,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,504,                final double delta = data[i] - vData[i];,2,1,1,2,4,1,0,0,0,12,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,505,                sum += delta * delta;,6,1,0,0,0,0,0,0,0,8,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,507,            return FastMath.sqrt(sum);,2,0,0,1,2,2,8,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,509,            checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,510,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,511,            for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,512,                final double delta = data[i] - v.getEntry(i);,2,1,1,2,4,1,6,0,0,14,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,513,                sum += delta * delta;,12,2,0,0,0,1,18,4,0,38,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,515,            return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,522,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,523,            final double[] vData = ((ArrayRealVector) v).data;,10,0,1,3,6,2,0,2,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,524,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,525,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,526,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,527,                final double delta = data[i] - vData[i];,2,1,1,2,4,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,528,                sum += FastMath.abs(delta);,8,1,0,1,2,0,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,530,            return sum;,12,0,0,0,0,1,0,0,0,15,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,532,            checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,533,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,534,            for (int i = 0; i < data.length; ++i) {,12,1,0,1,3,0,4,2,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,535,                final double delta = data[i] - v.getEntry(i);,2,1,1,2,4,1,6,0,0,14,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,536,                sum += FastMath.abs(delta);,2,0,0,1,2,0,6,0,0,9,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,538,            return sum;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,545,        if (v instanceof ArrayRealVector) {,4,0,0,1,3,0,0,4,0,8,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,546,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,547,            checkVectorDimensions(vData.length);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,548,            double max = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,549,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,550,                final double delta = data[i] - vData[i];,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,551,"                max = FastMath.max(max, FastMath.abs(delta));",2,0,0,2,4,0,12,0,0,15,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,553,            return max;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,555,            checkVectorDimensions(v);,4,0,0,1,2,0,4,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,556,            double max = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,557,            for (int i = 0; i < data.length; ++i) {,14,1,0,1,3,0,8,0,0,24,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,558,                final double delta = data[i] - v.getEntry(i);,2,1,1,2,4,1,6,0,0,14,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,559,"                max = FastMath.max(max, FastMath.abs(delta));",2,0,0,2,4,0,12,0,0,15,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,561,            return max;,2,0,0,0,0,1,8,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,568,        final double norm = getNorm();,4,0,0,1,2,0,0,0,0,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,569,        if (norm == 0) {,4,1,1,1,3,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,570,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,572,        return mapDivide(norm);,2,1,0,1,2,1,4,0,0,7,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,578,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,579,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,580,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,582,        mapDivideToSelf(norm);,2,1,0,1,2,0,4,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,583,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,587,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,0,0,3,6,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,593,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,594,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,595,            final int m = data.length;,6,0,0,0,0,1,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,596,            final int n = vData.length;,12,0,0,0,0,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,597,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",6,2,1,1,2,1,8,2,0,24,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,598,            for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,599,                for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,600,"                    out.setEntry(i, j, data[i] * vData[j]);",8,3,1,3,6,0,8,0,0,28,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,603,            return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,605,            final int m = data.length;,4,0,0,0,0,0,2,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,606,            final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,607,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",6,1,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,608,            for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,609,                for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,610,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0,1,1,3,6,0,14,0,0,19,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,613,            return out;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,619,        return data[index];,2,0,0,1,2,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,624,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,630,"            return new ArrayRealVector(this, (ArrayRealVector) v);",6,2,1,2,4,1,0,4,0,14,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,631,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,632,"            return new ArrayRealVector(this, v);",6,1,1,1,2,1,4,0,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,643,"        return new ArrayRealVector(this, v);",2,0,0,1,2,1,0,2,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,648,        final double[] out = new double[data.length + 1];,0,0,0,2,4,0,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,649,"        System.arraycopy(data, 0, out, 0, data.length);",4,0,0,1,2,0,8,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,650,        out[data.length] = in;,8,1,1,1,2,0,6,0,0,23,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,651,"        return new ArrayRealVector(out, false);",4,2,0,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,656,        ArrayRealVector out = new ArrayRealVector(n);,6,0,1,1,2,0,0,4,0,13,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,658,"            System.arraycopy(data, index, out.data, 0, n);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,662,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,659,        } catch (IndexOutOfBoundsException e) {,4,1,0,1,4,0,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,660,            checkIndex(index);,4,0,0,1,2,0,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,661,            checkIndex(index + n - 1);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,663,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,669,            data[index] = value;,2,0,1,1,2,0,0,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,672,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,670,        } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,671,            checkIndex(index);,6,1,0,1,2,0,4,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,673,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,678,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,679,"            setSubVector(index, ((ArrayRealVector) v).data);",4,0,0,3,6,0,4,2,0,10,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,682,                for (int i = index; i < index + v.getDimension(); ++i) {,10,2,0,2,5,0,4,0,0,17,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,683,                    data[i] = v.getEntry(i - index);,8,3,1,2,4,0,4,0,0,20,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,688,            },10,3,0,0,1,0,0,0,0,15,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,685,            } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,2,2,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,686,                checkIndex(index);,8,4,0,1,2,1,10,2,0,25,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,687,                checkIndex(index + v.getDimension() - 1);,0,0,0,2,4,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,690,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,702,"            System.arraycopy(v, 0, data, index, v.length);",6,1,0,1,2,0,10,0,0,17,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,706,        },0,0,0,0,1,0,6,0,0,6,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,703,        } catch (IndexOutOfBoundsException e) {,4,0,0,1,4,1,0,2,0,7,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,704,            checkIndex(index);,4,0,0,1,2,0,4,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,705,            checkIndex(index + v.length - 1);,6,2,0,1,2,0,2,0,0,10,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,707,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,712,"        Arrays.fill(data, value);",0,0,0,1,2,0,8,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,713,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,718,        return data.clone();,2,0,1,1,2,2,4,2,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,724,        return DEFAULT_FORMAT.format(this);,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,736,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,737,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,748,        if (data.length != n) {,8,1,0,1,3,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,749,"            throw new DimensionMismatchException(data.length, n);",2,0,0,1,2,0,0,0,0,4,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,751,    },2,0,0,0,1,0,0,4,0,7,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,760,        for (double v : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,761,            if (Double.isNaN(v)) {,0,0,0,2,5,0,6,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,762,                return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,765,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,776,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,777,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,780,        for (double v : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,781,            if (Double.isInfinite(v)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,782,                return true;,6,1,0,0,0,1,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,786,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,805,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,806,            return true;,2,0,0,0,0,1,0,0,0,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,809,        if (other == null || !(other instanceof RealVector)) {,4,2,0,2,5,0,0,2,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,810,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,813,        RealVector rhs = (RealVector) other;,4,0,0,1,2,0,0,4,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,814,        if (data.length != rhs.getDimension()) {,8,1,0,2,5,0,4,0,0,14,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,815,            return false;,6,2,0,0,0,1,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,818,        if (rhs.isNaN()) {,0,0,0,2,5,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,819,            return this.isNaN();,0,1,0,1,2,1,4,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,822,        for (int i = 0; i < data.length; ++i) {,4,2,0,1,3,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,823,            if (data[i] != rhs.getEntry(i)) {,0,1,1,3,7,0,6,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,824,                return false;,4,1,1,0,0,2,2,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,827,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,838,        if (isNaN()) {,0,0,0,2,5,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,839,            return 9;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,841,        return MathUtils.hash(data);,0,0,0,1,2,1,6,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,847,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,853,        if (y instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,854,            final double[] yData = ((ArrayRealVector) y).data;,10,0,0,3,6,1,0,2,0,14,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,855,            checkVectorDimensions(yData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,856,            for (int i = 0; i < this.data.length; i++) {,10,1,0,1,3,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,857,                data[i] = a * data[i] + b * yData[i];,4,3,1,3,6,0,0,0,0,20,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,859,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,860,            checkVectorDimensions(y);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,861,            for (int i = 0; i < this.data.length; i++) {,16,2,0,1,3,0,0,0,0,19,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,862,                data[i] = a * data[i] + b * y.getEntry(i);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,865,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,37,public class ArrayRealVector extends RealVector implements Serializable {,2,0,0,0,1,1,0,4,0,7,73,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,60,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,8,0,0,1,3,1,6,2,0,18,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,61,        this.rows = matrix.rows;,6,0,0,0,0,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,62,        this.columns = matrix.columns;,6,0,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,63,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,6,0,0,1,2,0,0,2,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,69,        return new OpenMapRealMatrix(this);,0,0,0,1,2,1,0,2,0,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,75,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,81,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,95,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,97,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,98,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,10,0,0,3,7,0,6,0,0,16,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,99,            iterator.advance();,0,0,0,1,2,0,4,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,100,            final int row = iterator.key() / columns;,6,2,0,1,2,1,4,0,0,13,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,101,            final int col = iterator.key() - row * columns;,12,3,0,1,2,1,4,0,0,21,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,102,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0,1,0,3,6,0,18,0,0,19,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,103,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,105,        return out;,10,2,0,0,0,1,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,113,            return subtract((OpenMapRealMatrix) m);,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,114,        } catch (ClassCastException cce) {,8,0,0,1,4,1,0,2,0,11,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,115,            return (OpenMapRealMatrix) super.subtract(m);,4,0,0,2,4,1,0,2,0,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,129,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,131,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,2,0,0,1,2,1,0,4,0,7,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,132,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,10,0,0,3,7,0,6,0,0,16,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,133,            iterator.advance();,0,0,0,1,2,0,4,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,134,            final int row = iterator.key() / columns;,8,3,0,1,2,0,0,0,0,12,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,135,            final int col = iterator.key() - row * columns;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,136,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0,1,0,3,6,0,18,0,0,19,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,137,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,139,        return out;,2,0,1,0,0,1,0,0,0,7,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,146,            return multiply((OpenMapRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,147,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,150,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,152,            final int outCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,153,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,154,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,6,0,0,3,7,0,8,0,0,14,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,155,                iterator.advance();,0,0,0,1,2,0,4,0,0,4,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,156,                final double value = iterator.value();,2,0,0,1,2,1,4,0,0,7,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,157,                final int key      = iterator.key();,10,2,1,1,2,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,158,                final int i        = key / columns;,8,1,0,0,0,1,0,0,0,10,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,159,                final int k        = key % columns;,6,1,0,0,0,1,0,0,0,8,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,160,                for (int j = 0; j < outCols; ++j) {,8,1,0,1,3,0,0,0,0,10,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,161,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",2,1,0,2,4,0,16,0,0,19,47,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,163,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,165,            return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,180,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,182,        final int outCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,183,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",6,0,0,1,2,0,0,4,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,184,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,14,3,1,3,7,0,8,0,0,36,90,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,185,            iterator.advance();,0,0,0,1,2,0,4,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,186,            final double value = iterator.value();,4,1,0,1,2,1,4,0,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,187,            final int key      = iterator.key();,2,0,0,1,2,1,4,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,188,            final int i        = key / columns;,6,1,0,0,0,1,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,189,            final int k        = key % columns;,6,1,0,0,0,1,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,190,            for (int j = 0; j < outCols; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,191,"                final int rightKey = m.computeKey(k, j);",2,0,0,1,2,1,8,0,0,11,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,192,                if (m.entries.containsKey(rightKey)) {,4,0,0,2,5,0,4,0,0,8,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,193,"                    final int outKey = out.computeKey(i, j);",2,0,0,1,2,1,8,0,0,11,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,194,                    final double outValue =,8,2,0,0,0,1,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,196,                    if (outValue == 0.0) {,4,1,0,1,3,0,0,0,0,5,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,197,                        out.entries.remove(outKey);,4,0,0,1,2,0,4,0,0,8,27,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,199,"                        out.entries.put(outKey, outValue);",4,0,0,1,2,0,6,0,0,10,34,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,203,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,205,        return out;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,211,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,212,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,213,"        return entries.get(computeKey(row, column));",0,0,0,2,4,1,10,0,0,10,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,219,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,225,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,226,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,227,        if (value == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,228,"            entries.remove(computeKey(row, column));",0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,230,"            entries.put(computeKey(row, column), value);",0,0,0,2,4,0,12,0,0,12,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,232,    },8,2,0,0,1,0,0,0,0,11,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,237,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,238,"        MatrixUtils.checkColumnIndex(this, column);",4,3,1,1,2,0,6,0,0,17,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,239,"        final int key = computeKey(row, column);",2,0,0,1,2,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,240,        final double value = entries.get(key) + increment;,6,1,0,1,2,2,8,0,0,17,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,241,        if (value == 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,242,            entries.remove(key);,0,0,1,1,2,0,14,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,244,"            entries.put(key, value);",4,0,0,1,2,0,8,0,0,13,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,246,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,251,"        MatrixUtils.checkRowIndex(this, row);",2,1,0,1,2,0,6,0,0,9,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,252,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,253,"        final int key = computeKey(row, column);",2,0,0,1,2,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,254,        final double value = entries.get(key) * factor;,4,1,0,1,2,1,6,0,0,12,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,255,        if (value == 0.0) {,16,4,0,1,3,0,0,0,0,22,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,256,            entries.remove(key);,0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,258,"            entries.put(key, value);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,260,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,269,        return row * columns + column;,6,2,0,0,0,1,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,31,public class OpenMapRealMatrix extends AbstractRealMatrix,2,0,0,0,0,1,0,2,0,5,57,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,50,        this(boundIsAllowed ?,6,2,0,0,1,0,0,0,0,8,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,69,        this.max = max;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,71,    },4,0,0,0,1,0,0,0,0,4,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,84,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,38,"        super(value, 0, false);",8,1,0,1,2,1,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,54,    },14,4,1,0,1,0,0,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,68,"        super(specific, wrong, min);",10,0,0,1,2,0,0,0,0,10,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,70,        this.min = min;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,78,        return boundIsAllowed;,2,0,1,0,0,1,0,0,0,5,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,85,        return min;,12,1,0,0,0,1,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,37,        this(LocalizedFormats.NO_DATA);,10,1,0,1,2,0,0,0,0,12,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,46,    },4,0,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,358,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,359,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,360,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0,0,0,2,4,0,0,0,0,6,94,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",4,0,1,3,6,0,0,0,0,10,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,1,0,0,0,3,115,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",8,1,0,2,4,0,0,0,0,11,86,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",4,0,0,3,6,0,0,0,0,5,263,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",16,1,1,1,2,1,0,0,0,23,54,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",8,1,0,4,8,0,0,0,0,10,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",6,1,0,4,8,0,0,0,0,8,78,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0,0,0,3,6,0,0,0,0,9,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,98,"    EVALUATION(""evaluation""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",4,0,0,2,4,0,0,0,0,5,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",10,0,0,1,2,0,0,2,0,13,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,1,2,0,0,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",0,0,0,6,12,0,0,0,0,18,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,113,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,4,0,0,7,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",6,1,0,5,10,1,0,0,0,8,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,117,"    INDEX(""index ({0})""), /* keep */",20,3,1,3,6,0,0,0,0,36,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",0,0,0,2,4,0,0,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",6,0,0,3,6,0,0,0,0,8,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",8,1,0,3,6,0,0,0,0,10,67,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",14,4,0,2,4,0,0,0,0,20,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",12,2,1,3,6,0,0,0,0,19,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,129,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",0,0,0,2,4,0,0,0,0,6,103,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",6,1,0,3,6,0,0,0,0,8,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,139,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0,0,0,1,2,0,0,0,0,3,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,140,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,141,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,142,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,143,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",8,1,0,1,2,0,0,0,0,11,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,144,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,145,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,146,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,147,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,148,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,149,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,150,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,151,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,152,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",4,1,0,3,6,0,2,0,0,8,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",0,0,0,4,8,0,0,0,0,12,132,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,6,0,0,8,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",28,5,0,3,6,1,0,0,0,37,60,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",8,1,0,3,6,0,0,0,0,10,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,1,3,6,0,2,0,0,18,43,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",4,1,0,3,6,0,0,0,0,6,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,168,"    START_POSITION(""start position ({0})""), /* keep */",18,4,0,3,6,1,0,0,0,26,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0,0,0,1,2,0,0,0,0,3,100,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",6,0,0,2,4,0,4,0,0,12,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",10,1,0,2,4,0,0,0,0,14,81,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,4,0,0,7,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",10,2,0,1,2,1,0,0,0,14,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",6,0,0,6,12,0,0,0,0,9,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",6,1,0,6,12,0,0,0,0,7,88,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",8,1,0,5,10,1,0,0,0,11,113,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0,0,0,3,6,0,0,0,0,9,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",6,5,0,6,12,0,0,0,0,11,85,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",8,1,0,6,12,0,0,0,0,11,88,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,4,2,0,9,105,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",12,2,0,7,14,1,0,0,0,17,118,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,192,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,193,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,194,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,199,"    EXPONENT(""exponent ({0})""), /* keep */",24,2,1,3,6,3,0,0,0,39,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,201,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",6,0,0,3,6,0,0,0,0,7,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,4,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",24,9,0,3,6,0,0,0,0,35,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",6,0,0,3,6,0,0,0,0,8,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",6,1,0,3,6,0,0,0,0,7,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",10,2,1,3,6,0,4,0,0,27,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,214,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",8,1,0,3,6,0,0,0,0,11,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",14,1,1,2,4,0,0,0,0,19,44,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",8,1,0,6,12,0,0,0,0,10,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",10,0,0,2,4,1,0,2,0,14,70,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0,0,0,8,16,0,0,0,0,24,134,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,235,"    NO_DATA(""no data""), /* keep */",0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",6,0,0,1,2,0,0,0,0,7,70,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,244,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",10,1,0,1,2,0,0,0,0,13,80,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,245,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",4,0,1,1,2,1,0,0,0,10,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,246,"    DENOMINATOR(""denominator""), /* keep */",4,0,0,1,2,0,12,0,0,18,38,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,247,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,4,0,0,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,248,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,249,"    FUNCTION(""function""), /* keep */",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,250,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,251,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,252,"    NUMERATOR(""numerator""), /* keep */",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,253,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,254,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0,0,0,1,2,0,0,0,0,3,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,255,"    REAL_FORMAT(""real format""), /* keep */",0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,256,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,257,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,258,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,259,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,260,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,261,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,127,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,262,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",6,2,0,2,4,0,0,0,0,10,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,263,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,264,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,265,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,266,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0,0,0,3,6,0,0,0,0,9,150,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,267,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,268,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",6,0,0,4,8,0,0,0,0,8,101,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,269,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,270,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,271,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,272,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,273,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",12,1,0,5,10,0,0,0,0,16,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,274,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,275,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0,0,0,3,6,0,0,0,0,9,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,276,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,277,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",6,0,0,3,6,0,0,0,0,8,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,278,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",0,0,0,3,6,0,0,0,0,9,108,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,279,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",8,1,0,3,6,0,0,0,0,11,99,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,280,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,281,"    POLYNOMIAL(""polynomial""), /* keep */",4,0,0,1,2,0,4,4,0,14,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,282,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,283,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,284,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",0,0,0,4,8,0,0,0,0,12,109,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,285,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,286,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",12,1,0,1,2,0,0,0,0,15,65,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,287,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,288,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,289,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0,0,0,3,6,0,0,0,0,9,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,290,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,291,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,292,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,293,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,294,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,295,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,296,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,6,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,297,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,298,"    SINGULAR_OPERATOR(""operator is singular""),",0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,299,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,300,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",4,1,1,3,6,0,10,0,0,19,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,301,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",0,0,0,3,6,0,0,0,0,9,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,302,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",4,1,0,1,2,0,0,0,0,6,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,303,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",6,1,0,4,8,1,2,0,0,11,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,304,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,305,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",6,1,0,2,4,0,0,0,0,8,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,306,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,307,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0,0,0,3,6,0,0,0,0,9,156,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,308,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,309,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",8,1,0,2,4,0,0,0,0,11,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,310,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,311,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,312,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,313,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,314,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,315,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,316,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",14,3,1,1,2,0,0,0,0,23,70,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,317,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,318,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,319,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,320,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",4,0,0,1,2,0,0,0,0,5,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,321,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,322,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,2,74,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,323,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,324,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,325,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,326,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,327,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,328,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",4,0,0,1,2,0,0,0,0,5,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,329,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,330,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,331,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,332,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,333,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,334,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,335,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",10,1,0,1,2,0,0,0,0,13,86,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,336,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",4,0,1,4,8,1,0,2,0,12,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,337,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",4,0,0,3,6,0,0,0,0,5,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,338,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,339,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",4,0,0,1,2,0,4,0,0,10,57,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,340,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,341,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,342,"    ZERO_NORM(""zero norm""),",0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,343,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,344,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,345,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,364,        return sourceFormat;,4,0,0,0,0,1,0,0,0,5,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,370,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,372,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,374,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,379,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,377,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,383,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,32,    private ArgUtils() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,0,8,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,45,                if (o instanceof Object[]) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,47,                        list.add(oR);,0,0,0,1,2,0,6,0,0,6,13,13,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,54,        return list.toArray();,4,2,1,1,2,1,4,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,0,0,0,13,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,253,        MathUtils.checkNotNull(divisor);,2,0,0,1,2,0,16,0,0,18,32,3,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,254,        if (isNaN || divisor.isNaN) {,0,0,0,1,3,0,0,0,0,4,29,4,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,8,1,0,1,3,0,0,0,0,11,28,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,6,0,1,0,0,3,4,0,0,14,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0
defect4j,math,org/apache/commons/math/complex/Complex,47,251,        MathUtils.checkNotNull(divisor);,0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,8,1,0,1,3,0,6,0,0,15,29,3,0.26667,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,0,0,0,3,6,0,0,0,0,9,64,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",0,0,0,1,2,0,0,0,0,3,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0,0,0,4,8,0,0,0,0,12,94,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",14,5,0,1,2,0,0,0,0,20,131,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0,0,0,2,4,0,0,0,0,6,78,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0,0,0,1,2,0,0,0,0,3,95,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",4,1,0,1,2,0,6,0,0,11,55,12,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",4,2,0,3,6,0,6,0,0,12,46,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,3,2,0,0,10,112,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,0,0,0,0,8,86,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,16,290,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,1,1,2,1,0,0,0,7,52,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,1,2,0,0,5,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,3,0,0,0,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,8,0,0,13,49,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0,0,0,5,10,0,0,0,0,15,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,4,1,1,2,0,0,0,0,22,51,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",6,1,0,4,8,1,4,0,0,12,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",20,8,0,1,2,1,0,0,0,29,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",8,0,0,4,8,3,4,0,0,16,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",20,0,0,3,6,4,0,6,0,31,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",4,2,0,1,2,0,0,2,0,9,36,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",6,1,0,3,6,1,0,0,0,8,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",4,1,0,2,4,0,0,0,0,5,69,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,108,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",6,0,0,3,6,0,10,2,0,19,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",0,0,1,3,6,0,12,0,0,16,32,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,1,1,3,6,0,0,0,0,8,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",22,2,0,3,6,1,0,0,0,28,79,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,8,0,0,11,72,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",10,1,0,4,8,0,0,0,0,12,121,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,129,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",0,0,0,2,4,0,0,0,0,6,103,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",10,0,0,2,4,0,8,0,0,19,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",8,0,0,1,2,0,0,0,0,10,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,1,0,4,8,0,0,0,0,3,56,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",0,0,0,1,2,0,8,0,0,8,38,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",4,0,0,4,8,1,6,0,0,12,132,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0,0,0,2,4,0,0,0,0,6,55,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0,0,0,5,10,0,0,0,0,15,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",8,0,0,3,6,0,0,0,0,8,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",6,1,0,3,6,0,0,0,0,8,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0,0,0,1,2,0,0,0,0,3,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,1,1,6,12,0,4,0,0,11,85,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",10,1,0,1,2,0,0,0,0,13,80,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,0,0,3,6,0,0,0,0,6,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,7,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,69,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",6,0,0,3,6,1,0,2,0,11,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,11,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,9,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",6,0,0,2,4,0,0,0,0,7,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",4,0,0,8,16,3,0,0,0,8,134,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",6,0,0,1,2,4,8,10,0,29,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",8,1,0,1,2,0,0,0,0,11,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",4,0,0,1,2,0,0,2,0,7,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",10,3,1,6,12,0,0,0,0,17,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",12,4,1,1,2,0,6,0,0,29,51,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,246,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,251,"    NUMERATOR(""numerator""), /* keep */",0,0,0,1,2,0,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,252,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",4,0,0,1,2,3,0,0,0,8,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,255,"    WHOLE_FORMAT(""whole format""), /* keep */",0,0,0,1,2,0,0,0,0,3,40,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,256,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",4,0,1,4,8,0,0,0,0,9,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,258,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,259,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,98,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,262,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,263,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",4,0,0,3,6,0,6,0,0,11,150,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,266,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,269,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",0,0,0,5,10,0,0,0,0,15,150,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",12,2,0,6,12,0,0,0,0,16,96,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",6,0,0,1,2,0,8,0,0,15,63,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",4,0,0,3,6,1,2,0,0,8,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,276,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0,0,0,3,6,0,0,0,0,9,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",20,3,1,1,2,2,8,2,0,40,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,285,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,286,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,287,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",0,0,0,1,2,0,0,0,0,3,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,288,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,6,0,0,9,72,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",8,1,0,1,2,0,0,0,0,10,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",4,0,0,3,6,1,0,0,0,6,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,302,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,9,136,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,303,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,305,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0,0,0,3,6,0,0,0,0,9,156,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",4,0,1,2,4,0,0,0,0,8,76,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,309,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,1,0,1,2,0,0,0,0,3,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,312,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",6,0,0,1,2,1,0,0,0,8,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,315,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0,0,0,1,2,0,0,0,0,3,41,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,2,118,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",4,0,0,5,10,0,0,0,0,5,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,319,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,320,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,321,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,1,0,8,16,0,2,0,0,6,106,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,327,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,328,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",0,0,0,2,4,0,0,0,0,6,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",4,0,0,2,4,1,6,4,0,16,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,330,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,331,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,333,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",8,1,0,4,8,0,0,0,0,11,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",8,3,0,3,6,0,0,0,0,12,64,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,337,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,69,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,338,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",4,0,0,1,2,0,0,0,0,5,23,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,341,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,342,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,42,        final List<Object> list = new ArrayList<Object>();,0,0,0,1,2,0,0,0,0,3,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,50,                    list.add(o);,0,0,0,1,2,0,0,0,0,3,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,54,        return list.toArray();,0,0,0,1,2,1,0,0,0,4,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,60,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,1,1,2,0,0,0,0,16,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,61,    },4,0,0,0,1,0,6,0,0,12,1,0,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,125,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",0,0,0,1,2,1,0,0,0,4,73,4,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,172,            if (f1 * fx < 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,175,                x0 = x1;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,176,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,177,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,179,                switch (method) {,4,0,0,1,3,0,0,0,0,4,17,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,196,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,197,            f1 = fx;,4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,202,            if (FastMath.abs(f1) <= ftol) {,0,0,0,2,5,0,0,0,0,7,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,233,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,250,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,48,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,203,                switch (allowed) {,8,1,0,1,3,0,0,0,0,11,18,0,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,179,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,0,0,0,2,5,0,0,0,0,7,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",4,1,0,2,5,1,4,0,0,10,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,2,1,0,1,2,0,0,0,0,3,18,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,6,1,0,1,2,0,0,0,0,7,24,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,2,0,1,0,0,0,0,0,0,8,7,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,4,0,0,0,0,3,0,2,0,10,8,1,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,10,1,0,0,0,1,4,0,0,15,16,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,6,1,0,1,2,1,16,0,0,25,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,2,2,0,4,13,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,6,0,0,6,22,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,0,0,0,1,2,0,0,0,0,3,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,6,1,0,0,0,1,0,0,0,7,12,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,4,0,0,1,3,2,0,2,0,8,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,2,0,1,1,2,0,0,0,0,5,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",4,0,0,1,2,0,8,0,0,12,50,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,2,0,1,1,2,0,0,0,0,5,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,138,"        System.arraycopy(source.values, 0, values, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,4,2,1,1,2,0,12,2,0,25,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,140,"        System.arraycopy(source.states, 0, states, 0, length);",0,0,0,1,2,0,0,0,0,3,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,10,0,0,0,0,0,6,0,0,17,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,144,        count = source.count;,0,0,0,0,0,0,0,0,0,0,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",14,2,0,1,3,1,0,0,0,17,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,75,        virtualSize = dimension;,0,0,0,0,0,0,0,0,0,0,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,76,        entries = new OpenIntToDoubleHashMap(0.0);,0,0,0,1,2,0,0,0,0,3,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,77,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,78,    },6,0,0,0,1,0,0,0,0,7,1,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,12,1,1,1,3,1,8,2,0,32,47,1,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,180,        virtualSize = v.getDimension();,2,0,0,1,2,0,4,0,0,7,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,0,0,0,2,4,0,0,0,0,6,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,182,        epsilon = v.epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,183,    },6,0,0,0,1,0,10,2,0,21,1,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.16667,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,0,0,0,1,3,0,4,0,0,5,18,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,4,0,1,1,2,1,0,2,0,10,21,3,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,208,        return entries;,6,0,0,0,0,1,0,0,0,7,15,3,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,663,        checkIndex(index);,2,0,0,1,2,0,4,0,0,7,18,0,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,664,        if (!isDefaultValue(value)) {,2,0,0,2,5,0,2,2,0,6,29,4,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",6,1,0,1,2,0,0,0,0,8,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,669,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,0,0,0,0,0,1,0,0,0,1,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,2,0,4,18,3,0.05,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0,0,0,1,3,0,6,0,0,6,17,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,6,2,1,1,3,0,0,0,0,12,18,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,6,3,0,0,0,0,0,0,0,10,21,0,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,1,1,3,0,0,0,0,11,17,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,8,1,1,2,5,0,14,6,0,37,31,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },16,4,1,0,1,0,22,6,0,70,1,1,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,        this.method = method;,0,0,0,0,0,0,0,0,0,0,21,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,8,1,0,1,2,3,0,0,0,12,47,2,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,4,0,0,7,42,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,        boolean inverted = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,14,5,0,4,8,1,0,0,0,20,53,6,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,            final double fx = computeObjectiveValue(x);,0,0,0,1,2,0,0,0,0,3,43,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,  double v2v2 = v2.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,  double coeffU = u1u2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,  Vector3D v2Su2 = v2.subtract(u2);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,0,0,0,1,2,0,0,0,0,3,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,1.0,1,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,1,0,3,6,0,0,0,0,3,46,6,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",2,0,0,1,3,3,0,0,0,5,65,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },6,1,0,0,1,0,0,0,0,7,1,6,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,0,0,0,0,2,0,0,0,0,2,29,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,0,0,0,1,3,0,0,0,0,4,25,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,    this.q2 = q2;,0,0,0,0,0,0,0,0,0,0,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },4,0,1,0,1,1,4,0,0,14,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",2,0,0,1,2,0,0,0,0,3,80,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,120,"    public Vector3D(double a, Vector3D u) {",16,3,0,1,3,0,0,0,0,20,39,1,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,121,        this.x = a * u.x;,12,1,0,0,0,1,6,0,0,21,17,3,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,122,        this.y = a * u.y;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,123,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2375,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2376,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2377,        final double a1Low      = a1 - a1High;,12,3,1,0,0,1,0,0,0,21,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2378,        final double cb1        = SPLIT_FACTOR * b1;,4,0,0,0,0,0,0,2,0,6,44,7,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2379,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2380,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2383,        final double prod1High  = a1 * b1;,10,4,0,0,0,1,12,0,0,27,34,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2384,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2387,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,0,0,0,0,7,44,5,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2388,        final double a2High     = ca2 - (ca2 - a2);,12,3,0,1,2,1,10,0,0,27,43,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2389,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2390,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,2,2,0,12,44,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2391,        final double b2High     = cb2 - (cb2 - b2);,4,0,0,1,2,1,0,0,0,5,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2392,        final double b2Low      = b2 - b2High;,4,0,1,0,0,0,0,0,0,10,38,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2395,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2396,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2399,        final double s12High    = prod1High + prod2High;,4,0,0,0,0,0,0,0,0,5,48,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2400,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,2,1,0,3,6,0,4,0,0,7,86,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2405,        return s12High + (prod1Low + prod2Low + s12Low);,4,0,0,1,2,1,0,0,0,5,48,6,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,261,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,262,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,437,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,438,"        return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,67,5,0.05882,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,152,        MathUtils.checkNotNull(rhs);,0,0,0,1,2,0,0,0,0,3,28,4,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",0,0,0,1,3,1,0,0,0,5,42,4,0.05263,1,0
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,2,0,0,0,0,1,4,0,0,6,13,3,0.04348,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },10,0,0,0,1,1,8,0,0,19,1,3,0.02381,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2331,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.02326,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,    private static final long[] FACTORIALS = new long[] {,6,0,0,2,5,0,0,0,0,6,53,6,0.01587,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,50,9,1,1,2,0,0,2,0,66,18,3,0.08333,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.07143,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,0,0,0,0,0,0,0,0,0,0,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,10,1,0,0,0,0,0,0,0,12,11,5,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,        return nans == INFINITE;,0,0,0,0,0,1,0,0,0,1,24,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,6,0,0,0,0,1,0,0,0,6,19,6,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,        Dfp y = this;,0,0,0,0,0,0,0,0,0,0,13,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,        if (lessThan(getZero())) {,0,0,0,3,7,0,0,0,0,10,26,4,0.05263,1,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,2,0,0,3,6,0,0,0,0,2,39,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,6,2,0,1,3,0,4,0,0,13,19,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",0,0,0,2,4,0,0,0,0,6,46,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2332,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2336,        exponent--;,0,0,0,0,0,0,0,0,0,0,11,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",0,0,0,3,6,0,0,0,0,9,46,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2341,        if (exponent > -1023) {,0,0,0,1,3,0,0,0,0,4,23,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,14,4,0,1,3,0,6,0,0,25,23,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,0,1,0,1,3,0,8,0,0,9,22,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2355,        String str = y.toString();,0,0,0,1,2,0,0,0,0,3,26,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);",8,1,1,2,4,1,8,0,0,21,39,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,6,0,0,1,2,0,0,0,0,7,36,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2359,        if (mantissa == 4503599627370496L) {,0,0,0,1,3,0,0,0,0,4,36,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,        if (exponent <= -1023) {,2,0,0,1,3,0,0,0,0,3,24,8,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2370,        while (exponent < -1023) {,2,1,0,1,3,0,0,0,0,4,26,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2375,        long bits = mantissa | ((exponent + 1023L) << 52);,6,3,0,2,4,0,0,0,0,9,50,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2376,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2378,        if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2382,        return x;,2,0,0,0,0,2,0,0,0,3,9,2,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,661,        return field.getTwo();,0,0,0,1,2,1,6,0,0,6,22,5,0.05,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,54,414,        return two;,2,1,0,0,0,1,4,0,0,7,11,7,0.05,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",0,0,0,1,2,1,0,0,0,4,101,4,0.33333,1,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,0,0,1,0,0,1,0,0,0,5,9,10,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,    return z;,0,0,0,0,0,1,0,0,0,1,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,0,0,0,0,0,0,0,0,0,0,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",4,0,1,1,2,3,0,4,0,16,60,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",6,1,0,1,2,3,6,4,0,21,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,1,1,1,2,0,0,0,0,11,62,8,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,  public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,  private static final Vector3DFormat DEFAULT_FORMAT =,0,0,0,0,0,0,0,0,0,0,52,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,159,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.01266,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,56,        final NumberFormat nf = NumberFormat.getInstance(locale);,8,1,0,1,2,1,6,2,0,18,57,3,0.01149,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,57,        nf.setMaximumFractionDigits(2);,12,2,0,1,2,0,18,2,0,34,31,3,0.01149,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,58,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,80,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",10,1,0,1,2,0,6,0,0,17,64,3,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,103,"                          final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,104,        this.prefix      = prefix;,2,2,0,0,0,0,0,0,0,4,26,6,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,105,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,106,        this.separator   = separator;,10,3,0,0,0,0,12,2,0,28,29,3,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,107,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,108,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,109,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,110,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,168,        return new Vector3DFormat(CompositeFormat.getDefaultNumberFormat(locale));,4,1,0,2,4,1,6,0,0,11,74,16,0.01149,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,63,    public MathRuntimeException() {},4,0,0,2,4,1,0,2,0,7,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,47,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,53,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,0,0,0,3,6,0,0,0,0,9,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,71,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,77,        msgPatterns.add(pattern);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,78,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,83,"        context.put(key, value);",2,0,0,1,2,3,0,4,0,10,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,84,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,88,        return context.get(key);,6,1,0,1,2,1,0,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,93,        return context.keySet();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,103,"        return buildMessage(locale, "": "");",6,0,0,1,2,3,0,4,0,12,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,115,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,121,        return getMessage(Locale.US);,2,0,0,1,2,1,0,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,127,        return getMessage(Locale.getDefault());,2,0,0,2,4,1,0,0,0,3,39,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,139,        final StringBuilder sb = new StringBuilder();,6,1,0,1,2,1,0,4,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,140,        int count = 0;,6,1,0,0,0,0,0,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,141,        final int len = msgPatterns.size();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,142,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,143,            final Localizable pat = msgPatterns.get(i);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,145,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",0,0,0,1,3,0,0,0,0,4,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,147,            sb.append(fmt.format(args));,0,0,0,2,4,0,10,0,0,10,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,148,            if (++count < len) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,150,                sb.append(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,154,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,165,        serializeMessages(out);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,166,        serializeContext(out);,4,0,0,1,2,0,6,0,0,10,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,178,        deSerializeMessages(in);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,179,        deSerializeContext(in);,2,0,1,1,2,0,0,0,0,9,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,191,        final int len = msgPatterns.size();,2,1,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,192,        out.writeInt(len);,10,2,1,1,2,0,0,0,0,15,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,194,        for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,195,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,197,            out.writeObject(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,198,            final Object[] args = msgArguments.get(i);,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,199,            final int aLen = args.length;,2,0,0,0,0,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,201,            out.writeInt(aLen);,4,0,0,1,2,1,6,0,0,11,19,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,202,            for (int j = 0; j < aLen; j++) {,4,1,0,1,3,0,6,0,0,13,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,203,                if (args[j] instanceof Serializable) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,205,                    out.writeObject(args[j]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,208,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,225,        final int len = in.readInt();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,226,        msgPatterns = new ArrayList<Localizable>(len);,0,0,0,1,2,0,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,227,        msgArguments = new ArrayList<Object[]>(len);,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,229,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,231,            final Localizable pat = (Localizable) in.readObject();,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,232,            msgPatterns.add(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,234,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,235,            final Object[] args = new Object[aLen];,6,1,1,2,4,1,8,4,0,28,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,236,            for (int j = 0; j < aLen; j++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,238,                args[j] = in.readObject();,0,0,1,2,4,0,4,0,0,9,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,240,            msgArguments.add(args);,2,0,0,1,2,1,6,0,0,9,23,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,242,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,253,        final int len = context.keySet().size();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,254,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,255,        for (String key : context.keySet()) {,4,0,0,2,5,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,257,            out.writeObject(key);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,258,            final Object value = context.get(key);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,259,            if (value instanceof Serializable) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,261,                out.writeObject(value);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,264,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,0,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,266,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,280,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,281,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,282,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,284,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,286,            final Object value = in.readObject();,2,0,0,1,2,0,0,0,0,3,37,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,287,"            context.put(key, value);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,289,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,299,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",4,2,0,3,6,1,16,2,0,29,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,40,                              Class<?> type) {,0,0,0,0,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,41,"        addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",4,0,0,0,1,0,2,0,0,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,51,                              int position) {,2,0,0,0,2,0,0,0,0,2,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,52,"        addMessage(LocalizedFormats.CANNOT_PARSE,",4,0,0,0,1,0,2,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,38,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,50,                                   Object ... args) {,2,0,0,0,2,0,8,2,0,12,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,51,"        addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,36,    private CompositeFormat() {},2,0,0,2,4,1,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,45,        return getDefaultNumberFormat(Locale.getDefault());,2,1,1,2,4,1,6,0,0,14,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,70,"        parseNextCharacter(source, pos);",0,0,0,1,2,0,6,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,71,        pos.setIndex(pos.getIndex() - 1);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,72,    },20,9,1,0,1,0,2,0,0,49,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,83,         int index = pos.getIndex();,8,1,0,1,2,1,4,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,84,         final int n = source.length();,2,0,0,1,2,1,4,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,85,         char ret = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,87,         if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,90,                 c = source.charAt(index++);,4,0,0,1,2,0,4,2,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,91,             } while (Character.isWhitespace(c) && index < n);,4,2,0,2,5,0,6,0,0,12,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,92,             pos.setIndex(index);,0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,94,             if (index < n) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,95,                 ret = c;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,99,         return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,113,        Number ret = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,115,        StringBuilder sb = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,116,        sb.append('(');,0,0,0,1,3,0,4,0,0,5,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,117,        sb.append(value);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,118,        sb.append(')');,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,120,        final int n = sb.length();,2,2,1,1,2,0,0,0,0,13,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,121,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,122,        final int endIndex = startIndex + n;,6,1,0,0,0,1,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,123,        if (endIndex < source.length()) {,2,1,0,2,5,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,124,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0,1,0,4,9,0,14,0,0,15,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,125,                ret = Double.valueOf(value);,2,0,0,1,2,0,6,0,0,9,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,126,                pos.setIndex(endIndex);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,130,        return ret;,4,0,1,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,145,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,146,"        Number number = format.parse(source, pos);",2,0,0,1,2,0,8,2,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,147,        final int endIndex = pos.getIndex();,22,7,0,1,2,1,4,0,0,35,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,150,        if (startIndex == endIndex) {,8,1,1,1,3,0,0,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,152,            final double[] special = {,2,0,0,1,3,1,0,0,0,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,155,            for (int i = 0; i < special.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,156,"                number = parseNumber(source, special[i], pos);",2,0,1,2,4,0,6,0,0,13,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,157,                if (number != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,158,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,163,        return number;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,177,        final int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,178,        final int endIndex = startIndex + expected.length();,4,1,0,1,2,1,4,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,179,        if ((startIndex >= source.length()) ||,6,2,0,2,5,0,10,0,0,18,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,183,            pos.setIndex(startIndex);,0,0,0,1,2,0,14,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,184,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,6,0,0,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,185,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,189,        pos.setIndex(endIndex);,0,0,0,1,2,0,6,0,0,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,190,        return true;,2,0,0,0,0,1,0,0,0,4,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,213,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0,0,0,3,7,0,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,214,            toAppendTo.append('(');,0,0,0,1,3,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,215,            toAppendTo.append(value);,2,0,0,1,2,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,216,            toAppendTo.append(')');,0,0,0,1,3,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,218,"            format.format(value, toAppendTo, pos);",0,0,0,1,2,0,10,0,0,10,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,220,        return toAppendTo;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,251,    },4,1,0,0,1,0,12,0,0,19,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,2,0,0,0,4,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,73,    private static final double FACT[] = new double[20];,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,76,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,85,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,105,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,118,    private static final double LN_HI_PREC_COEF[][] = {,6,5,0,2,5,0,0,0,0,11,51,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,128,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,131,    private static final double SINE_TABLE_B[] = new double[14];,4,1,1,2,4,3,0,0,0,12,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,134,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,137,    private static final double COSINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,143,    private static final double TANGENT_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,146,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,167,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,0,0,0,0,4,126,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,0,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,208,        FACT[0] = 1.0;,0,0,1,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,209,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,210,            FACT[i] = FACT[i-1] * i;,8,4,1,2,4,0,0,0,0,20,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,218,"            expint(i, tmp);",2,0,0,1,2,0,0,2,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,2,0,11,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,222,            if (i != 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,224,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,225,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
