dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,202,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,1,0,3,6,0,0,0,0,6,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,203,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,204,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",4,0,0,3,6,1,2,0,0,8,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,205,"    EXPONENT(""exponent ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,206,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",10,1,0,3,6,1,0,0,0,13,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,207,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,208,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,209,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,210,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",4,0,0,2,4,0,0,0,0,6,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,211,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,212,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,213,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,214,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,215,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,216,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,217,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0,0,0,3,6,0,0,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,218,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,219,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,220,"    SCALE(""scale ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,221,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,222,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,223,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",18,3,0,3,6,0,0,0,0,23,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,224,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,225,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,226,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,227,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,228,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,229,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",4,0,0,2,4,3,0,0,0,8,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,230,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,231,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,232,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,233,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,234,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,235,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,236,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,237,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,238,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,239,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,240,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,241,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,242,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,243,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,244,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,245,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,246,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,247,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,248,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",4,0,0,6,12,0,4,0,0,10,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,249,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,250,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,251,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,252,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,253,"    DENOMINATOR(""denominator""), /* keep */",0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,254,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,255,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,256,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,6,0,0,9,32,13,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,257,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",10,3,0,1,2,1,2,0,0,16,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,258,"    INPUT_ARRAY(""input array""), /* keep */",8,0,0,1,2,0,4,0,0,14,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,259,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,260,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,261,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,262,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,263,"    WHOLE_FORMAT(""whole format""), /* keep */",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,264,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,265,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,266,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,267,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,268,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,269,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,270,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,271,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",6,1,0,2,4,0,0,0,0,7,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,272,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,0,0,2,4,0,0,0,0,6,84,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,273,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,274,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,275,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,276,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,277,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",4,0,0,5,10,1,8,0,0,14,150,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,278,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0,0,0,6,12,0,0,0,0,18,96,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,279,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,280,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0,0,0,5,10,0,0,0,0,15,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,281,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",2,0,0,5,10,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,282,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",4,1,1,5,10,1,0,0,0,15,50,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,283,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",6,0,0,1,2,0,0,0,0,8,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,284,"    OVERFLOW(""overflow""), /* keep */",8,0,0,1,2,3,0,4,0,17,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,285,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,1,2,0,0,5,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,286,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,287,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,288,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,289,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,290,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,291,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,292,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",8,0,0,4,8,0,0,0,0,11,130,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,293,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,294,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,295,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,296,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,297,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,298,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0,0,0,3,6,0,0,0,0,9,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,299,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,300,"    ROW_INDEX(""row index ({0})""), /* keep */",2,1,1,3,6,0,0,0,0,6,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,301,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,302,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",6,1,0,5,10,0,0,0,0,8,98,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,303,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,304,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,305,"    SIMPLE_MESSAGE(""{0}""),",0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,306,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,1,1,1,2,0,6,0,0,16,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,307,"    SINGULAR_OPERATOR(""operator is singular""),",14,3,0,1,2,0,0,0,0,19,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,308,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,309,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",8,1,0,3,6,0,0,0,0,11,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,310,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",8,1,0,5,10,0,0,0,0,11,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,311,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,312,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,313,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,9,136,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,314,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,315,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,316,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,317,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,318,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,319,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,320,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,321,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",14,4,0,1,2,0,10,0,0,29,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,322,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,323,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,324,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0,0,0,3,6,0,0,0,0,9,117,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,325,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,326,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,327,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,328,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,329,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",6,0,0,1,2,0,0,0,0,9,89,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,330,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,331,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,332,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,333,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,334,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,2,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,335,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,12,0,0,15,106,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,336,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,337,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",8,1,0,1,2,0,0,0,0,11,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,338,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,339,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,340,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,341,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",6,0,0,2,4,0,0,0,0,8,103,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,342,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",44,14,0,3,6,0,0,0,0,60,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,343,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,344,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,345,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",6,0,0,4,8,0,4,0,0,11,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,346,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,1,1,3,6,0,0,0,0,8,64,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,347,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",4,0,0,3,6,0,10,2,0,17,54,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,348,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,349,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,350,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,351,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,352,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,353,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,354,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,39,public enum LocalizedFormats implements Localizable {,8,2,0,0,1,1,0,2,0,13,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,373,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,379,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",2,0,0,2,4,1,4,4,0,13,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,380,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,382,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,384,                return bundle.getString(toString());,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,389,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,387,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,393,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,32,    private ArgUtils() {},6,0,0,2,4,1,0,0,0,8,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,0,8,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,45,                if (o instanceof Object[]) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,47,                        list.add(oR);,0,0,0,1,2,0,6,0,0,6,13,13,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,54,        return list.toArray();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",0,0,0,1,3,0,0,0,0,4,52,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",6,0,0,1,2,0,8,0,0,14,56,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",0,0,0,1,2,0,0,0,0,3,58,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,4,0,0,2,5,0,12,0,0,16,34,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,6,0,0,2,5,1,6,0,0,13,34,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,8,1,0,0,0,0,0,0,0,10,30,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,0,0,0,1,2,0,0,0,0,3,36,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,2,0,0,1,2,0,6,0,0,9,22,8,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,2,0,0,1,2,0,6,0,0,9,22,8,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,8,1,0,0,0,0,0,0,0,10,18,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",4,0,0,2,4,0,6,0,0,10,46,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,0,0,0,9,55,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,2,0,0,1,2,3,0,4,0,9,57,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,2,0,0,1,2,3,0,4,0,9,57,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,0,1,0,1,2,0,8,0,0,9,58,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,4,1,0,1,2,3,0,4,0,13,64,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0,0,0,1,2,0,0,0,0,3,68,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",0,0,0,1,2,0,0,0,0,3,66,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,3,0,4,0,9,69,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0,0,0,1,2,0,0,0,0,3,71,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",2,0,0,1,2,3,0,4,0,9,69,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,2,0,0,1,2,3,4,2,0,11,70,2,0.05405,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",10,4,0,5,10,0,0,0,0,15,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",6,0,0,3,6,0,0,0,0,8,29,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",4,0,0,4,8,0,10,2,0,17,108,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",8,0,0,1,2,1,0,0,0,10,89,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0,0,0,3,6,0,0,0,0,9,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",10,1,0,2,4,0,0,0,0,13,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,1,1,2,0,2,0,0,14,95,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,0,0,0,0,6,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,0,6,2,0,13,112,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,0,0,1,2,0,6,2,0,13,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",8,0,0,3,6,0,0,0,0,10,109,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",4,0,0,3,6,3,0,0,0,8,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",2,0,0,1,2,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,4,0,0,7,71,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,1,3,6,0,4,0,0,12,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,0,0,0,0,6,119,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,8,0,0,14,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0,0,0,1,2,0,0,0,0,3,88,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",4,1,0,1,2,1,0,0,0,8,71,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,8,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",6,0,0,2,4,0,10,0,0,17,54,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",4,0,0,2,4,0,8,0,0,13,73,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0,0,0,5,10,0,0,0,0,15,85,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,3,0,2,4,0,12,0,0,20,62,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0,0,0,3,6,0,0,0,0,9,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,120,"    INDEX(""index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",8,1,0,2,4,0,0,0,0,11,59,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0,0,0,1,2,0,0,0,0,3,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0,0,0,3,6,0,0,0,0,9,105,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",20,3,0,2,4,0,0,2,0,26,103,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",0,0,0,2,4,0,0,0,0,6,50,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,1,1,2,0,0,0,0,12,96,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,4,0,0,7,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",4,0,1,4,8,0,2,0,0,21,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,2,0,5,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",6,1,0,3,6,0,4,2,0,15,62,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,162,"    MUTATION_RATE(""mutation rate ({0})""),",0,0,0,3,6,0,0,0,0,9,37,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0,0,0,2,4,0,0,0,0,6,43,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0,0,0,2,4,0,0,0,0,6,92,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",10,2,0,2,4,1,0,0,0,14,55,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",6,1,1,3,6,1,0,0,0,14,82,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,1,3,6,0,0,0,0,7,43,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,175,"    START_POSITION(""start position ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,50,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0,0,0,4,8,0,0,0,0,12,131,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0,0,0,1,2,0,0,0,0,3,100,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",4,1,0,2,4,0,0,0,0,6,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,4,0,0,7,93,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",4,0,0,6,12,0,0,0,0,5,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",4,0,1,1,2,0,0,0,0,13,26,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,198,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,200,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0,0,0,1,2,0,0,0,0,3,73,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,0,0,0,6,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,202,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",12,2,0,3,6,4,4,0,0,23,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",4,0,0,3,6,0,0,0,0,6,66,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,208,"    LENGTH(""length ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,34,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,4,0,0,4,49,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,30,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,0,0,3,6,1,6,2,0,14,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",4,0,0,3,6,3,0,0,0,8,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,0,0,6,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",4,0,0,3,6,0,0,0,0,5,63,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",8,1,0,6,12,0,0,0,0,10,104,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",8,1,0,8,16,0,0,0,0,11,134,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,240,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0,0,0,2,4,0,0,0,0,6,99,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",0,0,0,4,8,0,0,0,0,12,82,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0,0,0,1,2,0,0,0,0,3,99,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",8,1,0,1,2,0,0,0,0,11,70,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",4,1,0,1,2,0,0,0,0,6,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,1,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,80,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",4,0,0,1,2,0,0,0,0,6,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",4,0,0,1,2,0,0,0,0,6,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,257,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0,0,0,1,2,0,0,0,0,3,48,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",16,2,0,1,2,0,0,0,0,20,40,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,98,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",6,1,0,4,8,0,0,0,0,8,150,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,6,0,0,9,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0,0,0,2,4,0,0,0,0,6,84,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0,0,0,3,6,0,0,0,0,9,87,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",6,0,0,4,8,0,6,2,0,16,101,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,8,0,0,11,150,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0,0,0,5,10,0,0,0,0,15,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",2,0,0,5,10,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",0,0,0,5,10,0,0,0,0,15,50,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,284,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0,0,0,1,2,0,0,0,0,3,63,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",10,1,0,1,2,0,0,0,0,13,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0,0,0,3,6,0,0,0,0,9,68,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",6,1,0,3,6,1,0,0,0,8,62,6,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",8,1,0,3,6,0,0,0,0,10,99,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,292,"    POLYNOMIAL(""polynomial""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,293,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0,0,0,4,8,0,0,0,0,12,130,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,294,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,295,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",0,0,0,4,8,0,0,0,0,12,109,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,297,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,298,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",4,0,0,1,2,1,0,0,0,6,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,301,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,302,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,8,0,0,11,40,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",6,1,1,5,10,0,0,0,0,12,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,305,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,306,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,1,1,2,0,16,0,0,21,66,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,6,0,0,9,49,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,1,3,6,0,0,0,0,9,87,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",6,1,0,5,10,0,0,0,0,8,97,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,317,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",4,0,0,3,6,0,0,0,0,5,120,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",6,1,1,1,2,0,0,0,0,13,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,6,0,0,9,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",6,0,0,3,6,0,4,0,0,11,117,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",6,0,0,5,10,0,0,0,0,8,107,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0,0,0,1,2,0,0,0,0,3,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",10,1,0,3,6,0,0,0,0,13,64,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",8,0,1,3,6,0,0,0,0,17,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,82,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",4,1,0,1,2,0,0,0,0,6,23,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,356,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,39,public enum LocalizedFormats implements Localizable {,0,0,0,0,1,0,0,0,0,1,53,4,0.04706,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,685,        double result = numerator.doubleValue() / denominator.doubleValue();,2,1,0,2,4,0,8,0,0,11,68,5,0.02564,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,688,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.02564,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,47,    private MathUtils() {},2,0,0,2,4,1,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,57,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,68,        return Arrays.hashCode(value);,0,0,0,1,2,1,6,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,6,1,2,4,1,4,0,0,31,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,113,        final double p = FastMath.abs(period);,2,0,0,1,2,1,6,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0,0,0,2,4,1,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,128,        if ((magnitude >= 0 && sign >= 0) ||,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,130,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,131,        } else if (sign >= 0 &&,2,2,0,0,2,0,8,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,135,            return (byte) -magnitude; // Flip sign.,4,0,0,1,2,1,0,0,0,5,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,150,        if ((magnitude >= 0 && sign >= 0) ||,4,4,0,1,3,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,152,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,153,        } else if (sign >= 0 &&,0,0,0,0,2,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,157,            return (short) -magnitude; // Flip sign.,0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,172,        if ((magnitude >= 0 && sign >= 0) ||,6,4,0,1,3,0,0,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,174,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,175,        } else if (sign >= 0 &&,2,2,0,0,2,0,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,6,0,0,1,2,0,0,2,0,9,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,179,            return -magnitude; // Flip sign.,2,0,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,194,        if ((magnitude >= 0 && sign >= 0) ||,4,4,0,1,3,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,196,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,197,        } else if (sign >= 0 &&,0,0,0,0,2,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,201,            return -magnitude; // Flip sign.,4,0,0,0,0,1,0,0,0,6,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,213,            throw new NotFiniteNumberException(x);,4,0,0,1,2,0,0,2,0,6,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,215,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,225,        for (int i = 0; i < val.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,226,            final double x = val[i];,2,0,1,1,2,1,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,6,1,0,3,7,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",8,0,0,1,2,0,0,2,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,231,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,245,"            throw new NullArgumentException(pattern, args);",0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,257,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,258,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,260,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,43,    public MathArithmeticException() {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,44,        context = new ExceptionContext(this);,6,1,0,1,2,0,0,2,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,57,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,63,        return context;,12,3,0,0,0,1,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,42,    },4,0,0,0,1,0,6,0,0,10,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,57,        return context.getMessage();,10,2,0,1,2,1,0,0,0,13,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,41,    },2,0,1,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,46,"        super(pattern, wrong, arguments);",22,9,0,1,2,0,0,0,0,32,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,107,"        this(num, BigInteger.ONE);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,123,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,139,                num = num.negate();,6,1,0,1,2,0,4,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,140,                den = den.negate();,2,0,0,1,2,0,12,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,171,    public BigFraction(final double value) throws MathIllegalArgumentException {,6,0,0,1,3,2,12,0,0,20,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,172,        if (Double.isNaN(value)) {,6,3,0,2,5,0,14,0,0,23,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,173,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);,4,0,0,1,2,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,175,        if (Double.isInfinite(value)) {,0,0,0,2,5,0,6,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,176,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,180,        final long bits     = Double.doubleToLongBits(value);,10,0,0,1,2,1,8,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,181,        final long sign     = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,182,        final long exponent = bits & 0x7ff0000000000000L;,16,5,0,0,0,1,0,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,183,        long m              = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,184,        if (exponent != 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,186,            m |= 0x0010000000000000L;,6,0,0,0,0,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,188,        if (sign != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,189,            m = -m;,2,0,0,0,0,1,4,2,0,9,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,191,        int k = ((int) (exponent >> 52)) - 1075;,4,2,0,3,6,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,192,        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {,4,5,0,5,11,0,0,0,0,9,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,193,            m = m >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,194,            ++k;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,197,        if (k < 0) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,198,            numerator   = BigInteger.valueOf(m);,2,1,1,1,2,0,6,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,199,            denominator = BigInteger.ZERO.flipBit(-k);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,201,            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));,0,0,0,3,6,0,0,0,0,9,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,202,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,205,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,231,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,232,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,270,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,271,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,272,        double r0 = value;,12,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,273,        long a0 = (long) FastMath.floor(r0);,2,0,1,2,4,0,10,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,274,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,275,"            throw new FractionConversionException(value, a0, 1l);",4,0,0,1,2,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,280,        if (FastMath.abs(a0 - value) < epsilon) {,6,2,0,2,5,0,4,0,0,12,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,281,            numerator = BigInteger.valueOf(a0);,2,0,0,1,2,0,10,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,282,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,283,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,286,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,287,        long q0 = 0;,2,0,0,0,0,0,6,0,0,9,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,288,        long p1 = a0;,4,0,0,0,0,0,0,0,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,289,        long q1 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,291,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,292,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,294,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,295,        boolean stop = false;,10,4,1,0,0,0,0,0,0,25,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,297,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,298,            final double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,1,0,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,299,            final long a1 = (long) FastMath.floor(r1);,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,300,            p2 = (a1 * p1) + p0;,2,0,0,1,2,0,10,0,0,13,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,301,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,302,            if ((p2 > overflow) || (q2 > overflow)) {,0,0,0,3,7,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,303,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,306,            final double convergent = (double) p2 / (double) q2;,6,1,0,2,4,1,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,307,            if ((n < maxIterations) &&,4,2,0,1,3,0,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,310,                p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,311,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,312,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,313,                q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,314,                a0 = a1;,10,1,0,0,0,1,4,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,315,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,317,                stop = true;,4,1,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,319,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,321,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,322,"            throw new FractionConversionException(value, maxIterations);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,325,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,326,            numerator   = BigInteger.valueOf(p2);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,327,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,329,            numerator   = BigInteger.valueOf(p1);,4,0,0,1,2,0,6,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,330,            denominator = BigInteger.valueOf(q1);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,332,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,353,"        this(value, 0, maxDenominator, 100);",2,0,0,1,2,0,2,4,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,354,    },2,0,1,0,1,0,0,0,0,7,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,393,"        this(BigInteger.valueOf(num), BigInteger.ONE);",6,1,0,2,4,0,4,0,0,12,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,394,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,408,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",6,2,0,3,6,0,12,0,0,21,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,409,    },4,0,0,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,432,        if (numerator == 0) {,8,3,0,1,3,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,433,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,436,"        return new BigFraction(numerator, denominator);",0,0,0,1,2,1,0,0,0,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,447,        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();,14,2,0,3,6,1,6,0,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,463,        MathUtils.checkNotNull(bg);,2,1,0,1,2,0,6,0,0,9,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,464,"        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);",2,0,0,3,6,1,10,2,0,14,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,478,        return add(BigInteger.valueOf(i));,0,0,0,2,4,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,492,        return add(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,507,        if (fraction == null) {,2,1,0,1,3,0,4,0,0,7,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,508,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,510,        if (ZERO.equals(fraction)) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,511,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,514,        BigInteger num = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,515,        BigInteger den = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,517,        if (denominator.equals(fraction.denominator)) {,6,1,0,2,5,0,4,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,518,            num = numerator.add(fraction.numerator);,8,0,0,1,2,0,4,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,519,            den = denominator;,12,7,1,0,0,0,0,0,0,26,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,521,            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));,16,3,0,5,10,0,12,0,0,32,97,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,522,            den = denominator.multiply(fraction.denominator);,6,0,0,1,2,0,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,524,"        return new BigFraction(num, den);",4,0,0,1,2,1,0,2,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,541,        return new BigDecimal(numerator).divide(new BigDecimal(denominator));,4,0,0,3,6,1,2,4,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,560,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);",4,0,0,3,6,1,4,4,0,12,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,579,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);",0,0,0,3,6,1,0,0,0,10,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,594,        BigInteger nOd = numerator.multiply(object.denominator);,6,0,0,1,2,0,4,2,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,595,        BigInteger dOn = denominator.multiply(object.numerator);,4,0,0,1,2,0,0,0,0,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,596,        return nOd.compareTo(dOn);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,614,        if (BigInteger.ZERO.equals(bg)) {,4,0,0,2,5,0,4,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,615,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,12,1,0,1,2,0,0,2,0,16,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,617,"        return new BigFraction(numerator, denominator.multiply(bg));",2,0,0,2,4,1,6,2,0,10,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,633,        return divide(BigInteger.valueOf(i));,0,0,0,2,4,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,649,        return divide(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,664,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,665,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,667,        if (BigInteger.ZERO.equals(fraction.numerator)) {,0,0,0,2,5,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,668,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,671,        return multiply(fraction.reciprocal());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,708,        boolean ret = false;,2,0,0,0,0,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,710,        if (this == other) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,711,            ret = true;,4,0,0,0,0,0,4,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,712,        } else if (other instanceof BigFraction) {,0,0,0,1,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,713,            BigFraction rhs = ((BigFraction) other).reduce();,4,0,0,3,6,0,2,4,0,10,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,714,            BigFraction thisOne = this.reduce();,2,0,0,1,2,0,2,2,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,715,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,18,1,0,2,4,0,4,0,0,24,93,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,718,        return ret;,2,0,0,0,0,1,0,0,0,3,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,746,        return denominator;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,757,        return denominator.intValue();,0,0,0,1,2,1,4,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,768,        return denominator.longValue();,0,0,0,1,2,1,4,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,779,        return numerator;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,790,        return numerator.intValue();,6,0,1,1,2,2,4,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,801,        return numerator.longValue();,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,814,        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();,0,4,0,3,6,1,8,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,828,        return numerator.divide(denominator).intValue();,0,0,0,2,4,1,8,0,0,8,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,842,        return numerator.divide(denominator).longValue();,0,0,0,2,4,1,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,856,        if (bg == null) {,8,2,0,1,3,0,0,0,0,11,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,857,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,859,"        return new BigFraction(bg.multiply(numerator), denominator);",54,17,0,2,4,1,6,2,0,80,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,873,        return multiply(BigInteger.valueOf(i));,0,0,0,2,4,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,887,        return multiply(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,901,        if (fraction == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,902,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,904,        if (numerator.equals(BigInteger.ZERO) ||,4,1,0,1,3,0,4,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,906,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,908,"        return new BigFraction(numerator.multiply(fraction.numerator),",4,0,0,1,3,1,4,2,0,10,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,921,"        return new BigFraction(numerator.negate(), denominator);",0,0,0,2,4,1,0,0,0,7,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,933,        return multiply(ONE_HUNDRED).doubleValue();,0,0,0,2,4,1,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,948,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,949,"            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));",10,4,0,3,6,1,8,2,0,26,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,951,"        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));",0,0,0,3,6,1,12,2,0,14,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,965,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,966,"            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),",20,2,0,1,3,1,6,2,0,31,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,969,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",4,0,0,1,3,1,8,2,0,14,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,984,        if (exponent.compareTo(BigInteger.ZERO) < 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,985,            final BigInteger eNeg = exponent.negate();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,986,"            return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),",18,3,1,1,3,1,16,2,0,45,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,989,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",2,1,0,1,3,1,8,2,0,13,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1004,"        return FastMath.pow(numerator.doubleValue(),   exponent) /",0,1,0,2,4,1,10,0,0,11,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1016,"        return new BigFraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1028,        final BigInteger gcd = numerator.gcd(denominator);,2,0,0,1,2,1,6,2,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1029,"        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));",0,0,0,3,6,1,12,2,0,14,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1043,        if (bg == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1044,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1046,"        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);",0,0,0,3,6,1,0,0,0,10,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1059,        return subtract(BigInteger.valueOf(i));,2,0,0,2,4,1,8,0,0,10,39,0,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1072,        return subtract(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1086,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1087,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1089,        if (ZERO.equals(fraction)) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1090,            return this;,0,0,1,0,0,1,0,0,0,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1093,        BigInteger num = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1094,        BigInteger den = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1095,        if (denominator.equals(fraction.denominator)) {,6,3,1,2,5,0,0,0,0,18,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1096,            num = numerator.subtract(fraction.numerator);,8,0,0,1,2,0,14,0,0,24,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1097,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1099,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,14,1,0,5,10,1,12,0,0,30,102,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1100,            den = denominator.multiply(fraction.denominator);,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1102,"        return new BigFraction(num, den);",10,2,1,1,2,1,0,2,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1117,        String str = null;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1118,        if (BigInteger.ONE.equals(denominator)) {,4,0,0,2,5,0,4,0,0,9,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1119,            str = numerator.toString();,2,0,1,1,2,0,4,0,0,10,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1120,        } else if (BigInteger.ZERO.equals(numerator)) {,4,0,0,2,6,0,4,0,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1121,"            str = ""0"";",0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1123,"            str = numerator + "" / "" + denominator;",6,1,0,0,0,0,0,0,0,9,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1125,        return str;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1130,        return BigFractionField.getInstance();,0,0,0,1,2,1,4,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,39,public class BigFraction,2,0,0,0,0,1,0,0,0,3,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,48,    },2,0,0,0,1,0,6,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,74,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,376,        return sourceFormat;,2,0,0,0,0,1,4,0,0,7,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,382,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,384,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,2,0,0,5,11,0,12,0,0,14,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,386,                return bundle.getString(toString());,4,0,0,2,4,1,10,0,0,14,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,391,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,389,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,395,        return sourceFormat;,22,7,0,0,0,1,0,0,0,30,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,4,0,0,1,2,1,6,0,0,10,18,5,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,6,1,0,1,2,1,4,0,0,11,18,3,4.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,0,0,1,2,2,4,2,0,15,44,1,2.0,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,4,1,1,1,3,0,0,0,0,9,21,3,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,392,      if (x > 20.0) {,4,1,0,1,3,0,2,0,0,8,15,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,1.6,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,4,1,0,0,0,0,0,0,0,5,26,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1023,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);,16,1,0,2,4,3,12,4,0,36,59,1,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1066,        double real2 = 2.0 * real;,0,0,0,0,0,0,0,0,0,0,26,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1067,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,2,1,0,2,4,0,12,0,0,15,59,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",2,1,0,1,3,1,8,0,0,11,46,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,12,1,0,1,3,0,0,0,0,15,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,4,0,0,13,69,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",8,1,0,1,2,0,8,0,0,19,48,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,3,0,4,0,15,34,1,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,0,0,0,2,5,0,0,0,0,7,45,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,                    if (upperDifference.getEntry(nfxm) == ZERO) {,2,1,0,2,5,0,6,0,0,9,45,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,                    final int ih = nfx * (nfx + 1) / 2 - 1;,6,4,0,1,2,1,0,0,0,11,39,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,10,2,0,0,0,1,0,0,0,13,34,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",6,3,0,3,6,0,12,0,0,21,107,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",10,4,0,3,6,1,18,0,0,33,118,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,                    if (stepa * stepb < ZERO) {,6,2,0,1,3,0,0,0,0,8,27,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,1,0,2,4,0,10,0,0,15,79,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",4,1,0,1,2,0,6,0,0,11,44,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,                            if (trustRegionCenterInterpolationPointIndex == nfm) {,4,1,0,1,3,0,0,0,0,5,54,15,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);",4,1,0,1,2,0,8,0,0,13,51,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",8,3,0,3,6,0,6,0,0,18,62,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,2,0,2,4,0,14,0,0,23,81,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,",4,1,0,0,1,0,6,0,0,11,31,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",14,5,0,3,6,0,12,0,0,31,60,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",0,0,0,2,4,0,0,0,0,6,53,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",4,1,0,0,1,0,6,0,0,11,31,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,0,0,0,1,2,1,4,0,0,4,30,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,            evaluations.incrementCount();,0,0,0,1,2,0,4,0,0,4,29,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,        return function.value(point);,0,0,0,1,2,1,0,0,0,4,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,        isMinimize = (getGoalType() == GoalType.MINIMIZE);,6,1,0,2,4,0,2,0,0,10,50,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,        currentBest = new ArrayRealVector(getStartPoint());,2,1,0,2,4,0,0,0,0,4,51,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);",2,0,0,1,2,1,6,0,0,9,52,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,        printMethod(); // XXX,12,2,0,1,2,0,12,0,0,26,21,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,        final int n = currentBest.getDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,        for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,4,1,1,1,2,1,6,0,0,16,44,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",0,1,1,3,6,0,12,0,0,17,69,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));",0,1,1,3,6,0,12,0,0,17,69,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {,0,0,0,2,5,0,0,0,0,7,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,2,1,0,2,6,0,6,0,0,9,69,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);",0,0,0,1,2,1,0,0,0,4,38,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,21,21,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,12,1,0,1,2,1,4,0,0,20,41,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,        final int npt = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,0,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,0,0,0,0,0,0,0,0,0,0,21,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,        final int nptm = npt - np;,6,1,0,0,0,1,0,0,0,8,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,10,3,0,0,0,1,4,0,0,18,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,        final ArrayRealVector work1 = new ArrayRealVector(n);,4,0,0,1,2,1,0,4,0,9,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,0,0,0,1,2,0,0,0,0,3,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,        final ArrayRealVector work3 = new ArrayRealVector(npt);,0,0,0,1,2,0,0,0,0,3,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,        double cauchy = Double.NaN;,10,0,0,0,0,3,0,0,0,13,27,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,        double dsq = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,        trustRegionCenterInterpolationPointIndex = 0;,8,1,0,0,0,1,0,0,0,11,45,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",0,0,0,1,2,0,0,0,0,3,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,0,0,0,1,2,0,2,0,0,2,21,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,3,0,1,2,0,0,0,0,11,41,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,4,0,0,0,0,1,0,0,0,5,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,        final int ndim = bMatrix.getRowDimension();,2,0,0,1,2,1,10,0,0,13,43,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,6,1,0,0,0,1,0,0,0,8,73,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,4,1,0,0,0,1,0,0,0,6,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,0,0,0,0,0,0,0,0,0,0,21,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1598,"            originShift.setEntry(j, currentBest.getEntry(j));",0,0,0,2,4,0,0,0,0,6,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1600,"                interpolationPoints.setEntry(k, j, ZERO);",0,0,0,1,2,0,10,0,0,10,41,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1602,            for (int i = 0; i < ndim; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);",2,1,0,1,2,0,10,0,0,13,29,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1606,"        for (int i = 0, max = n * np / 2; i < max; i++) {",0,0,0,1,3,0,0,0,0,4,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",0,0,0,1,2,0,0,0,0,3,47,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,        for (int k = 0; k < npt; k++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",0,0,0,1,2,0,0,0,0,3,51,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,0,0,0,17,47,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1612,"                zMatrix.setEntry(k, j, ZERO);",0,0,0,1,2,0,10,0,0,10,29,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,        int jpt = 0;,4,0,0,0,0,0,0,0,0,5,12,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,0,0,0,1,2,0,0,0,0,3,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,            final int nfx = nfm - n;,6,1,0,0,0,1,0,0,0,8,24,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,            final int nfmm = nfm - 1;,8,1,0,0,0,1,0,0,0,11,25,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,6,0,0,8,17,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,10,0,0,16,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,0,0,0,0,0,0,0,0,0,0,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,6,3,0,2,5,0,10,0,0,19,45,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1638,"                    interpolationPoints.setEntry(nfm, nfmm, stepa);",0,0,0,1,2,0,10,0,0,10,47,11,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,0,0,0,1,4,0,0,0,0,5,21,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",2,0,1,1,5,0,14,0,0,33,56,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",0,0,0,3,7,0,0,0,0,10,74,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",4,2,0,3,7,0,18,0,0,24,74,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,2,0,0,0,0,0,0,0,0,2,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1686,"            fAtInterpolationPoints.setEntry(nfm, f);",0,0,0,1,2,0,8,0,0,8,40,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,4,1,0,1,3,0,0,0,0,6,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,14,1,0,0,0,0,0,0,0,17,9,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,0,0,0,0,0,0,0,0,3,45,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,9,91,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,12,0,0,19,27,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,2,2,0,0,1,0,0,0,0,4,19,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1704,"                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);",0,0,0,2,4,0,0,0,0,6,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,6,2,0,1,3,0,0,0,0,8,24,10,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,0,0,0,2,5,0,0,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,0,0,0,1,3,0,0,0,0,4,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,0,0,0,1,2,0,0,0,0,3,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,0,0,0,0,0,0,0,0,0,0,54,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,42,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",8,3,0,0,1,0,0,2,0,14,75,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",0,0,0,0,1,0,0,0,0,1,75,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,45,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,2,0,0,1,2,3,0,0,0,5,74,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,57,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2426,        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,61,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2428,        upperDifference = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,6,0,1,1,2,1,0,2,0,14,84,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,14,1,0,1,2,0,0,2,0,20,53,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2432,        trialStepPoint = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,2,0,0,1,2,0,0,0,0,2,88,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2435,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,0,0,0,0,1,0,0,0,0,1,34,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,10,3,1,1,2,0,0,0,0,19,24,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,1,1,2,3,4,2,0,16,86,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,0,0,1,1,2,1,2,0,0,6,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,8,0,0,0,0,1,0,0,0,9,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,2,0,1,1,2,0,0,0,0,7,20,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,680,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,681,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,2,1,0,1,2,1,16,0,0,19,20,1,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0,0,1,1,2,0,4,0,0,9,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,6,2,0,0,0,1,4,0,0,12,10,1,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,109,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,150,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0,0,0,1,3,0,0,0,0,4,81,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,4,0,0,0,1,2,0,0,0,6,42,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,0,0,0,2,4,0,0,0,0,6,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,295,        return data[row][column];,0,0,1,2,4,1,12,0,0,25,25,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,302,        data[row][column] = value;,0,0,0,2,4,0,0,0,0,6,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,106,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,10,1,0,0,0,0,0,0,0,13,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,108,        this.suffix      = suffix;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,6,0,0,0,0,0,0,2,0,10,29,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,4,0,10,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,367,"        checkRowIndex(m, row);",0,0,0,1,2,0,6,0,0,6,22,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,368,"        checkColumnIndex(m, column);",6,1,0,1,2,0,6,0,0,13,28,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,379,        if (row < 0 ||,8,3,0,0,1,1,6,0,0,18,14,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,384,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,398,    },0,0,0,0,1,0,2,0,0,2,1,9,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,1,0,1,2,0,4,0,0,7,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,0,0,0,1,2,1,0,2,0,2,50,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",14,0,0,1,2,0,0,0,0,14,83,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,10,1,0,1,3,0,0,0,0,12,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,0,0,1,2,4,0,0,0,0,7,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,2,0,0,2,4,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,10,1,0,1,3,0,0,0,0,12,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,1,2,4,0,0,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,4,0,0,1,2,0,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,2,0,0,0,0,0,8,0,0,12,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",10,0,0,0,1,1,0,0,0,12,54,1,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,12,1,0,0,0,0,0,0,0,15,17,3,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },6,3,0,0,1,0,10,0,0,19,1,5,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,2,0,0,2,5,3,0,0,0,5,37,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,2,0,0,2,5,3,0,0,0,5,44,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,4,0.03125,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,8,1,0,1,3,0,0,0,0,10,12,3,0.02703,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.02703,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,              for (int i = 0; i < scale.length; ++i) {,12,1,0,1,3,0,0,0,0,14,40,3,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,4,2,1,3,6,0,4,0,0,19,78,14,0.02174,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,4,0,0,2,4,0,4,0,0,8,54,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0,0,0,1,2,0,0,0,0,3,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,10,0,0,10,45,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,4,0,0,0,0,1,4,0,0,8,11,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",6,1,0,1,2,0,8,0,0,15,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,0,0,0,1,2,0,6,0,0,6,39,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,2,0,0,1,2,0,0,2,0,4,41,10,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",12,0,0,1,2,1,0,0,0,12,53,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,2,0,0,1,4,0,0,2,0,4,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,0,0,0,2,4,0,0,0,0,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,0,0,0,0,5,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,14,1,0,0,0,0,0,0,0,17,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,2,1,0,1,3,0,6,0,0,9,23,3,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",8,1,1,1,2,0,0,0,0,14,65,1,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,0,0,0,0,0,0,0,0,0,0,6,4,0.07692,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,6,1,0,0,0,0,0,0,0,9,33,8,0.0625,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",0,0,0,1,2,1,0,0,0,4,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",0,0,0,1,2,1,0,0,0,4,51,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,8,1,0,1,3,0,0,0,0,9,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,2,0,0,0,0,0,0,0,0,3,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,14,3,0,1,3,0,0,0,0,18,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,1,3,7,0,4,0,0,8,31,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,0,0,1,3,7,0,4,0,0,8,36,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,2,3,1,2,5,0,0,0,0,9,21,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,2,2,1,2,5,0,0,0,0,9,50,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,2,0,0,0,0,0,0,0,0,4,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,2,0,0,1,3,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,10,0,0,10,47,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,10,0,0,10,42,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,2,0,0,1,2,3,2,4,0,11,8,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,6,1,0,1,4,0,0,0,0,9,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,2,0,0,1,2,0,0,4,0,6,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",4,1,0,1,2,0,12,0,0,18,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",0,0,0,2,5,0,10,0,0,10,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,2,1,0,1,4,0,0,0,0,3,24,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,14,2,0,0,0,0,0,0,0,17,17,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,4,1,1,1,2,0,0,0,0,10,27,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,16,1,0,1,3,3,0,4,0,25,42,2,0.5,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,2,0,0,1,3,0,0,0,0,2,22,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,12,5,0,3,6,0,0,0,0,18,60,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",0,0,0,2,5,0,16,0,0,16,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,2,0,0,1,2,0,0,4,0,6,20,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",2,0,0,1,2,0,10,0,0,12,49,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",4,1,0,1,2,0,12,0,0,17,67,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,4,2,1,3,6,0,0,0,0,15,47,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,6,2,0,1,2,1,0,0,0,8,33,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,2,0,0,0,0,0,0,0,0,3,10,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,4,0,0,4,15,7,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",0,0,0,2,5,0,8,0,0,9,40,5,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,2,0,0,0,0,0,0,0,0,3,10,6,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,6,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,124,                sum += values[i];,2,0,1,1,2,0,6,0,0,13,17,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,92,        super.clear();,0,0,0,1,2,0,0,0,0,3,14,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,6,0,0,0,0,0,0,0,0,7,16,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,117,        m1 = Double.NaN;,10,0,0,0,0,1,0,4,0,16,16,3,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,118,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,6,0,0,0,0,0,0,0,0,7,18,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },4,1,0,0,1,0,0,0,0,6,1,6,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,0,0,0,1,2,0,0,0,0,3,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0,0,0,0,1,0,0,0,0,1,75,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,4,0,0,4,10,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,4,3,0,1,3,0,0,0,0,7,17,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,8,0,1,2,4,3,0,4,0,19,43,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,0,0,0,1,2,0,4,0,0,4,21,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,6,1,0,3,7,0,4,0,0,12,82,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,10,2,0,2,5,0,2,0,0,15,55,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,4,1,0,1,2,0,2,0,0,7,44,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,1,0,2,5,0,4,0,0,6,31,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,6,0,0,7,33,8,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,0,0,0,3,6,0,10,0,0,10,48,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,2,0,0,0,0,0,0,0,0,3,32,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,10,3,0,1,3,0,0,0,0,13,16,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },2,0,0,0,1,0,0,4,0,6,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,44,    protected AbstractRealMatrix() {},4,0,1,2,4,2,0,0,0,10,33,2,0.05882,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,6,0,0,9,21,3,0.05882,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,448,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,            checkVectorDimensions(vData.length);,0,0,0,1,2,0,0,0,0,3,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,            double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,            for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,452,                dot += data[i] * vData[i];,2,1,1,2,4,0,0,0,0,12,26,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,1,1,0,0,1,0,0,0,8,11,11,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,8,0,0,9,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,        return tableau.getSolution();,0,0,0,1,2,1,4,0,0,4,29,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,47,    },8,2,0,0,1,0,0,0,0,10,1,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",4,1,0,2,4,1,4,2,0,12,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,                return null;,4,0,0,0,0,1,0,0,0,5,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,320,        return row;,2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,4,0,1,1,2,1,12,0,0,21,72,1,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,4,1,0,1,2,0,4,2,0,12,92,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,      Set<Integer> basicRows = new HashSet<Integer>();,0,0,0,1,2,0,0,0,0,3,48,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,      for (int i = 0; i < coefficients.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",4,1,0,1,2,0,4,0,0,10,45,7,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,          if (colIndex < 0) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,409,          Integer basicRow = getBasicRow(colIndex);,2,0,0,1,2,0,4,2,0,8,41,6,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.05556,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,419,              coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,8,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,424,"      return new RealPointValuePair(coefficients, f.getValue(coefficients));",4,0,0,2,4,1,6,2,0,13,70,3,0.05556,0,0
defect4j,math,org/apache/commons/math/util/Precision,42,92,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },0,0,0,0,1,0,0,0,0,1,1,4,9.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,2,0,0,0,0,0,0,0,8,25,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,6,1,0,0,0,0,0,0,0,7,20,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,6,0,0,0,0,0,0,0,0,7,8,5,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,18,5,0,0,0,0,0,0,0,24,33,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,8,2,0,0,0,0,2,2,0,15,18,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0,0,0,2,4,0,0,0,0,6,30,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,8,2,1,2,4,0,0,0,0,15,30,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,10,2,0,0,0,0,0,4,0,17,18,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,2,1,0,0,0,0,6,0,0,9,13,11,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,12,2,0,0,0,0,4,0,0,21,18,5,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,1.28571,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,167,        if (begin < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,171,        if (length < 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,        if (begin + length > values.length) {,0,0,0,1,3,0,0,0,0,4,37,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,4,2,0,1,3,0,0,0,0,7,33,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,        if (values == null) {,0,0,0,1,3,0,0,0,0,4,21,4,1.14286,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,62,"        return evaluate(values, 0, values.length);",6,0,0,1,2,4,4,4,0,18,42,1,1.14286,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,1,4,0,0,18,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,4,0,0,0,0,0,0,0,0,5,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,            nbPoints        = 2;,0,0,0,0,0,0,0,0,0,0,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,            signChangeIndex = 1;,2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",0,0,0,1,2,0,0,0,0,3,44,4,0.08333,1,1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);",0,0,0,1,2,0,8,0,0,8,36,9,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,4,0,0,0,0,0,0,0,0,5,25,4,0.03333,1,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,6,3,0,0,0,0,28,0,0,39,31,3,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },2,0,0,0,1,0,0,0,0,2,1,7,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,        if (columnDimension < 1) {,0,0,0,1,3,0,0,0,0,4,26,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",6,0,0,1,3,3,0,0,0,9,81,2,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,public abstract class RealLinearOperator {,0,0,0,0,1,0,0,0,0,1,42,4,0.00315,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,1,1,1,4,0,2,2,0,15,63,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,4,0,0,0,0,0,0,0,0,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,                this.startColumn = startColumn;,4,0,0,0,0,0,0,0,0,5,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,360,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,                destination[row - startRow][column - startColumn] = value;,10,2,1,2,4,0,0,0,0,15,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,366,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,    protected AbstractRealMatrix() {},2,0,0,2,4,1,0,0,0,3,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,            throw new NotStrictlyPositiveException(rowDimension);,2,0,0,1,2,0,0,2,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,            throw new NotStrictlyPositiveException(columnDimension);,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,74,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",2,1,0,3,6,0,22,0,0,27,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,91,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,6,0,0,16,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,94,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,104,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,        final int columnCount = getColumnDimension();,4,0,0,1,2,4,2,0,0,10,45,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,107,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,108,            for (int col = 0; col < columnCount; ++col) {,0,0,0,1,3,0,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,109,"                out.setEntry(row, col, getEntry(row, col) + d);",2,1,0,2,4,0,14,0,0,17,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,        return out;,4,0,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,118,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,119,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,123,"                out.setEntry(row, col, getEntry(row, col) * d);",0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,127,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,135,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,136,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,137,        final int nSum  = getColumnDimension();,4,0,0,1,2,4,2,0,0,10,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,139,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,140,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,141,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,142,                for (int i = 0; i < nSum; ++i) {,10,1,0,1,3,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,145,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,149,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,154,        return m.multiply(this);,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,159,        if (p < 0) {,10,1,0,1,3,0,0,0,0,13,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,163,        if (!isSquare()) {,4,0,0,2,5,0,2,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0,0,0,3,6,0,4,2,0,6,76,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,167,        if (p == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0,0,0,2,4,1,6,0,0,6,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,171,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,172,            return this.copy();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,175,        final int power = p - 1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,2,0,0,3,6,1,8,0,0,11,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,2,0,0,1,2,1,0,8,0,11,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,186,        int maxI = -1;,2,0,0,0,0,0,0,0,0,3,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,12,1,0,1,3,0,0,0,0,15,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,189,            if (binaryRepresentation[i] == '1') {,0,1,1,2,5,0,0,0,0,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,190,                final int pos = binaryRepresentation.length - i - 1;,8,1,0,0,0,1,0,0,0,10,52,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,191,                nonZeroPositions.add(pos);,0,0,0,1,2,0,6,0,0,6,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,194,                if (maxI == -1) {,6,1,0,1,3,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,195,                    maxI = pos;,4,2,1,0,0,0,0,0,0,11,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,201,        results[0] = this.copy();,0,0,1,2,4,0,2,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,203,        for (int i = 1; i <= maxI; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,204,            results[i] = results[i-1].multiply(results[i-1]);,6,2,1,4,8,0,2,0,0,19,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,207,        RealMatrix result = this.copy();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,209,        for (Integer i : nonZeroPositions) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,210,            result = result.multiply(results[i]);,2,0,1,2,4,0,4,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,211,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,213,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,220,        for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,221,            final double[] dataI = data[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,222,            for (int j = 0; j < dataI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,223,"                dataI[j] = getEntry(i, j);",0,0,0,2,4,0,0,0,0,1,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,227,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,6,1,0,1,4,2,6,2,0,16,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,299,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,301,        for (int i = startRow; i <= endRow; ++i) {,12,2,0,1,3,0,0,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,302,            for (int j = startColumn; j <= endColumn; ++j) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",8,2,0,2,4,0,10,0,0,20,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,307,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",6,1,0,1,2,0,8,0,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,316,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,0,0,0,0,5,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,328,        return subMatrix;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,336,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,12,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,337,        final int rowsCount    = endRow + 1 - startRow;,6,2,0,0,0,1,0,0,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,338,        final int columnsCount = endColumn + 1 - startColumn;,0,0,0,0,0,0,0,0,0,0,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,10,3,1,4,9,0,0,0,0,15,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",6,0,1,1,3,0,0,2,0,10,85,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,374,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0,0,0,1,2,0,8,0,0,8,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,375,        if ((destination.length < selectedRows.length) ||,8,2,0,1,3,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0,0,0,1,3,0,0,0,0,4,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,382,        for (int i = 0; i < selectedRows.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,383,            final double[] destinationI = destination[i];,0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,384,            for (int j = 0; j < selectedColumns.length; j++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,4,8,0,6,0,0,19,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,388,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,393,        MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,6,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,394,        final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,395,        if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,396,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,16,4,0,1,2,0,12,2,0,34,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,399,        final int nCols = subMatrix[0].length;,6,0,1,1,2,1,0,0,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,400,        if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,4,0,0,1,2,0,0,2,0,6,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,404,        for (int r = 1; r < nRows; ++r) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,405,            if (subMatrix[r].length != nCols) {,6,1,1,2,5,1,2,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",4,0,1,2,4,0,0,2,0,10,65,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,410,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,411,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",4,2,0,1,2,0,4,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",14,3,0,1,2,0,4,0,0,23,55,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,415,        for (int i = 0; i < nRows; ++i) {,10,1,0,1,3,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,416,            for (int j = 0; j < nCols; ++j) {,16,2,0,1,3,0,0,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",8,2,1,3,6,0,2,0,0,18,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,420,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,424,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,425,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,426,"        final RealMatrix out = createMatrix(1, nCols);",4,2,0,1,2,1,4,2,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,427,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,428,"            out.setEntry(0, i, getEntry(row, i));",0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,431,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,436,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,437,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,438,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,0,4,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,440,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,444,        for (int i = 0; i < nCols; ++i) {,10,1,0,1,3,3,0,0,0,15,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,445,"            setEntry(row, i, matrix.getEntry(0, i));",0,0,0,2,4,0,12,0,0,12,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,447,    },2,0,0,0,1,1,6,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,451,"        MatrixUtils.checkColumnIndex(this, column);",2,2,0,1,2,0,6,0,0,10,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,452,        final int nRows = getRowDimension();,6,3,0,1,2,1,2,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,453,"        final RealMatrix out = createMatrix(nRows, 1);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,454,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,455,"            out.setEntry(i, 0, getEntry(i, column));",2,0,0,2,4,0,12,0,0,15,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,458,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,463,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,464,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,465,        if ((matrix.getRowDimension() != nRows) ||,4,0,0,2,5,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,0,4,2,0,6,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,471,        for (int i = 0; i < nRows; ++i) {,20,2,0,1,3,0,0,0,0,25,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,472,"            setEntry(i, column, matrix.getEntry(i, 0));",0,0,0,2,4,0,12,0,0,12,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,478,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,483,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,484,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,485,        if (vector.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",2,0,0,1,3,0,4,2,0,9,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,489,        for (int i = 0; i < nCols; ++i) {,14,3,0,1,3,1,0,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,490,"            setEntry(row, i, vector.getEntry(i));",12,3,0,2,4,0,12,0,0,28,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,492,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,496,"        return new ArrayRealVector(getColumn(column), false);",0,0,0,2,4,1,4,2,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,501,"        MatrixUtils.checkColumnIndex(this, column);",0,0,1,1,2,0,6,0,0,9,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,502,        final int nRows = getRowDimension();,4,0,0,1,2,1,2,0,0,7,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,503,        if (vector.getDimension() != nRows) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,504,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0,0,0,1,3,0,4,2,0,6,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,507,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,508,"            setEntry(i, column, vector.getEntry(i));",0,0,0,2,4,0,12,0,0,12,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,510,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,514,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,515,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,516,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,517,        for (int i = 0; i < nCols; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,518,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,6,0,0,11,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,521,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,526,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,527,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,528,        if (array.length != nCols) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,529,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,531,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,532,"            setEntry(row, i, array[i]);",2,0,1,2,4,0,6,2,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,534,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,538,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,539,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,540,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,541,        for (int i = 0; i < nRows; ++i) {,10,1,1,1,3,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,542,"            out[i] = getEntry(i, column);",2,0,1,2,4,0,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,545,        return out;,10,1,0,0,0,1,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,550,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,551,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,552,        if (array.length != nRows) {,12,2,0,1,3,0,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",4,0,0,1,2,0,6,0,0,10,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,555,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,556,"            setEntry(i, column, array[i]);",2,0,1,2,4,0,6,0,0,13,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,558,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,574,        final int nRows = getRowDimension();,2,0,0,1,2,0,0,0,0,2,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,575,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,576,"        final RealMatrix out = createMatrix(nCols, nRows);",0,0,0,1,2,0,0,0,0,1,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,0,0,1,4,0,2,2,0,11,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,587,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,592,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,615,        final int nRows = getRowDimension();,4,0,0,1,2,1,2,0,0,8,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,616,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,617,        if (nRows != nCols) {,6,1,0,1,3,0,0,0,0,8,21,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,618,"            throw new NonSquareMatrixException(nRows, nCols);",8,2,1,1,2,0,0,2,0,19,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,620,        double trace = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,621,        for (int i = 0; i < nRows; ++i) {,10,1,0,1,3,0,0,0,0,13,33,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,622,"            trace += getEntry(i, i);",4,0,0,1,2,0,6,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,624,        return trace;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,629,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,630,        final int nCols = getColumnDimension();,4,0,0,1,2,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,631,        if (v.length != nCols) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,632,"            throw new DimensionMismatchException(v.length, nCols);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,635,        final double[] out = new double[nRows];,2,0,1,2,4,1,10,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,636,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,637,            double sum = 0;,2,0,0,0,0,0,8,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,638,            for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,639,"                sum += getEntry(row, i) * v[i];",16,4,1,2,4,0,6,0,0,32,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,641,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,644,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,651,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",2,0,0,5,10,1,4,4,0,11,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,652,        } catch (ClassCastException cce) {,0,0,1,1,4,0,0,0,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,653,            final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,654,            final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,655,            if (v.getDimension() != nCols) {,0,0,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,656,"                throw new DimensionMismatchException(v.getDimension(), nCols);",2,0,0,2,4,0,4,2,0,8,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,659,            final double[] out = new double[nRows];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,660,            for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,661,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,662,                for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,663,"                    sum += getEntry(row, i) * v.getEntry(i);",0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,665,                out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,668,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,675,        final int nRows = getRowDimension();,2,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,676,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,677,        if (v.length != nRows) {,6,1,0,1,3,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,678,"            throw new DimensionMismatchException(v.length, nRows);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,681,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,682,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,683,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,684,            for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,685,"                sum += getEntry(i, col) * v[i];",2,1,1,2,4,0,6,0,0,14,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,687,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,690,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,696,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",2,0,0,5,10,1,4,4,0,11,83,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,697,        } catch (ClassCastException cce) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,699,            final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,700,            final int nCols = getColumnDimension();,6,1,0,1,2,1,2,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,701,            if (v.getDimension() != nRows) {,0,0,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,702,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,705,            final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,706,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,707,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,708,                for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,709,"                    sum += getEntry(i, col) * v.getEntry(i);",2,1,1,2,4,0,12,0,0,23,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,711,                out[col] = sum;,4,0,1,1,2,0,0,2,0,11,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,714,"            return new ArrayRealVector(out, false);",0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,720,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,721,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,722,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,723,        for (int row = 0; row < rows; ++row) {,12,2,1,1,3,0,0,0,0,18,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,724,            for (int column = 0; column < columns; ++column) {,10,2,1,1,3,0,0,0,0,20,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,725,"                final double oldValue = getEntry(row, column);",4,1,0,1,2,1,6,0,0,12,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,726,"                final double newValue = visitor.visit(row, column, oldValue);",4,0,0,1,2,4,10,0,0,18,61,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,727,"                setEntry(row, column, newValue);",0,0,0,1,2,0,8,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,730,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,735,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,736,        final int columns = getColumnDimension();,10,1,0,1,2,1,2,0,0,16,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,737,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",6,2,0,1,2,0,8,0,0,17,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,738,        for (int row = 0; row < rows; ++row) {,10,2,0,1,3,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,739,            for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,740,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,14,0,0,14,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,743,        return visitor.end();,0,1,1,1,2,1,4,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,750,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,751,"        visitor.start(getRowDimension(), getColumnDimension(),",4,0,0,2,5,3,8,0,0,15,54,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,753,        for (int row = startRow; row <= endRow; ++row) {,10,1,0,1,3,0,0,0,0,12,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,754,            for (int column = startColumn; column <= endColumn; ++column) {,10,1,0,1,3,0,0,0,0,12,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,755,"                final double oldValue = getEntry(row, column);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,756,"                final double newValue = visitor.visit(row, column, oldValue);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,757,"                setEntry(row, column, newValue);",0,0,0,1,2,0,8,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,760,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,767,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,768,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,2,5,0,10,0,0,10,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,770,        for (int row = startRow; row <= endRow; ++row) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,771,            for (int column = startColumn; column <= endColumn; ++column) {,10,1,0,1,3,0,0,0,0,12,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,772,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,20,0,0,20,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,775,        return visitor.end();,2,1,0,1,2,1,4,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,780,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,781,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,0,0,1,2,0,0,0,0,2,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,783,        for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,784,            for (int row = 0; row < rows; ++row) {,8,1,0,1,3,0,0,0,0,10,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,785,"                final double oldValue = getEntry(row, column);",0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,786,"                final double newValue = visitor.visit(row, column, oldValue);",2,0,0,1,2,1,10,0,0,13,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,787,"                setEntry(row, column, newValue);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,790,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,795,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,796,        final int columns = getColumnDimension();,4,0,0,1,2,1,2,0,0,7,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,797,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,798,        for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,799,            for (int row = 0; row < rows; ++row) {,12,1,0,1,3,0,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,800,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,0,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,803,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,810,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",4,0,0,1,2,0,12,0,0,17,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,811,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,2,5,0,8,0,0,8,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,813,        for (int column = startColumn; column <= endColumn; ++column) {,16,1,0,1,3,0,0,0,0,19,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,814,            for (int row = startRow; row <= endRow; ++row) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,815,"                final double oldValue = getEntry(row, column);",10,1,0,1,2,1,6,0,0,19,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,816,"                final double newValue = visitor.visit(row, column, oldValue);",2,0,0,1,2,1,10,0,0,13,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,817,"                setEntry(row, column, newValue);",0,0,0,1,2,0,8,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,820,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,827,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,828,"        visitor.start(getRowDimension(), getColumnDimension(),",2,1,0,2,5,0,8,0,0,11,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,830,        for (int column = startColumn; column <= endColumn; ++column) {,10,1,0,1,3,0,8,0,0,20,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,831,            for (int row = startRow; row <= endRow; ++row) {,4,1,0,1,3,0,0,0,0,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,832,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,14,0,0,14,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,835,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,840,        return walkInRowOrder(visitor);,0,0,1,1,2,1,4,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,845,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,852,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,1,1,2,1,12,0,0,19,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,859,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,1,1,2,1,12,0,0,18,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,868,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,869,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,870,        final StringBuffer res = new StringBuffer();,8,1,0,1,2,1,0,4,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,871,        String fullClassName = getClass().getName();,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,872,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0,0,0,2,4,0,0,0,0,6,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,873,"        res.append(shortClassName).append(""{"");",0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,875,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,876,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,877,"                res.append("","");",6,1,0,1,2,0,4,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,879,"            res.append(""{"");",0,0,0,1,3,0,4,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,880,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,881,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,882,"                    res.append("","");",0,0,0,1,2,0,4,0,0,5,16,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,884,"                res.append(getEntry(i, j));",0,0,0,2,4,0,10,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,886,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,889,"        res.append(""}"");",0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,890,        return res.toString();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,903,        if (object == this ) {,2,1,0,1,3,0,8,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,904,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,906,        if (object instanceof RealMatrix == false) {,2,1,1,1,3,0,0,2,0,11,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,907,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,909,        RealMatrix m = (RealMatrix) object;,4,0,0,1,2,0,0,4,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,910,        final int nRows = getRowDimension();,2,0,0,1,2,1,8,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,911,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,912,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,10,3,0,3,7,0,8,0,0,21,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,913,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,915,        for (int row = 0; row < nRows; ++row) {,20,3,0,1,3,0,4,0,0,30,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,916,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,917,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0,0,0,3,7,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,918,                    return false;,0,0,0,0,0,1,0,0,0,1,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,922,        return true;,14,2,0,0,0,1,0,0,0,16,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,932,        int ret = 7;,10,2,0,0,0,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,933,        final int nRows = getRowDimension();,8,1,0,1,2,4,2,0,0,15,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,934,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,935,        ret = ret * 31 + nRows;,6,2,0,0,0,0,8,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,936,        ret = ret * 31 + nCols;,6,2,0,0,0,0,0,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,937,        for (int row = 0; row < nRows; ++row) {,10,1,0,1,3,0,0,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,938,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,939,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,8,8,0,3,6,0,0,0,0,17,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,943,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,2,0,0,1,4,1,6,2,0,11,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,247,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,248,                columnSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,249,                maxColSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,250,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,254,                columnSum += FastMath.abs(value);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,255,                if (row == endRow) {,10,2,0,1,3,1,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);",2,0,0,1,2,0,8,0,0,11,47,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,257,                    columnSum = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,259,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,263,                return maxColSum;,2,0,0,0,0,1,0,0,0,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,            class UnmodifiableEntry extends Entry {,8,3,0,0,1,1,0,2,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1235,                    return v.getEntry(getIndex());,0,0,0,2,4,1,6,0,0,6,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1241,                    throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,797,        public Entry() {,2,0,0,1,3,1,0,0,0,3,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,798,            setIndex(0);,0,0,0,1,2,0,2,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,799,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,807,            return getEntry(getIndex());,0,0,0,2,4,1,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,816,"            setEntry(getIndex(), value);",0,0,0,2,4,0,6,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,817,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,825,            return index;,2,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,834,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,835,        },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,936,        return new RealVector() {,0,0,0,1,3,1,0,2,0,2,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,            class UnmodifiableEntry extends Entry {,0,0,0,0,1,0,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,940,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,946,                return v.map(function);,0,0,0,1,2,1,10,0,0,10,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,952,                final Iterator<Entry> i = v.iterator();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,953,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,978,                final Iterator<Entry> i = v.sparseIterator();,2,0,0,1,2,1,12,4,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,980,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1005,                return v.copy();,0,0,0,1,2,1,4,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1011,                return v.add(w);,10,2,0,1,2,1,6,0,0,19,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1017,                return v.subtract(w);,0,0,0,1,2,1,6,0,0,6,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1023,                return v.mapAdd(d);,0,0,0,1,2,1,6,0,0,6,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1029,                throw new MathUnsupportedOperationException();,6,1,0,1,2,1,0,2,0,10,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1035,                return v.mapSubtract(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1041,                throw new MathUnsupportedOperationException();,2,0,1,1,2,0,0,2,0,7,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1047,                return v.mapMultiply(d);,0,0,0,1,2,1,6,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1053,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1059,                return v.mapDivide(d);,0,0,0,1,2,1,6,0,0,6,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1065,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1071,                return v.ebeMultiply(w);,2,0,0,1,2,1,6,0,0,9,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1077,                return v.ebeDivide(w);,0,0,0,1,2,1,6,0,0,6,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1083,                return v.dotProduct(w);,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1089,                return v.cosine(w);,2,1,1,1,2,1,6,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1095,                return v.getNorm();,12,2,0,1,2,2,4,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1101,                return v.getL1Norm();,0,0,0,1,2,1,4,0,0,4,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1107,                return v.getLInfNorm();,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1113,                return v.getDistance(w);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1119,                return v.getL1Distance(w);,0,0,0,1,2,1,6,0,0,6,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1125,                return v.getLInfDistance(w);,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1131,                return v.unitVector();,0,0,0,1,2,1,4,0,0,4,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1137,                throw new MathUnsupportedOperationException();,10,1,0,1,2,0,0,2,0,14,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1143,                return v.projection(w);,0,0,0,1,2,1,6,0,0,6,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1149,                return v.outerProduct(w);,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1155,                return v.getEntry(index);,0,0,0,1,2,1,6,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1161,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1167,                return v.getDimension();,0,0,0,1,2,1,4,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1173,                return v.append(w);,0,0,0,1,2,1,0,0,0,1,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1179,                return v.append(d);,6,1,0,1,2,1,10,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1185,"                return v.getSubVector(index, n);",0,0,0,1,2,1,8,0,0,8,32,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1191,                throw new MathUnsupportedOperationException();,2,1,0,1,2,0,0,2,0,5,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1197,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1203,                return v.toArray();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1209,                return v.isNaN();,0,0,0,1,2,1,4,0,0,4,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1215,                return v.isInfinite();,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1221,"                return v.combine(a, b, y);",0,0,0,1,2,1,10,0,0,10,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1227,                throw new MathUnsupportedOperationException();,0,0,1,1,2,0,0,2,0,7,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,58,public abstract class RealVector {,2,0,1,0,1,2,4,0,0,10,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,149,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,160,        int d = getDimension();,8,1,0,1,2,0,12,0,0,22,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,161,        if (d != n) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,162,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,164,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,173,        if (index < 0 ||,8,4,0,0,1,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,175,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,178,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,190,        RealVector result = v.copy();,2,0,0,1,2,0,4,2,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,191,        Iterator<Entry> it = sparseIterator();,2,1,0,1,2,0,20,4,0,27,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,193,        while (it.hasNext() && (e = it.next()) != null) {,4,2,0,4,9,0,14,0,0,21,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,194,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,195,"            result.setEntry(index, e.getValue() + result.getEntry(index));",8,3,0,3,6,0,24,0,0,36,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,196,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,197,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,210,        RealVector result = v.copy();,2,0,0,1,2,0,4,2,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,211,        Iterator<Entry> it = sparseIterator();,6,0,1,1,2,2,2,4,0,17,38,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,213,        while (it.hasNext() && (e = it.next()) != null) {,6,2,0,4,9,0,8,0,0,19,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,214,            final int index = e.getIndex();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,215,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,216,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,217,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,228,        return copy().mapAddToSelf(d);,2,0,0,2,4,1,16,2,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,239,        if (d != 0) {,6,1,0,1,3,0,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,240,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",8,1,0,3,6,5,8,2,0,23,61,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,242,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,261,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,262,        double d = 0;,2,1,0,0,0,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,263,        Iterator<Entry> it = sparseIterator();,4,0,0,1,2,1,6,4,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,265,        while (it.hasNext() && (e = it.next()) != null) {,12,5,0,4,9,0,8,0,0,27,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,266,            d += e.getValue() * v.getEntry(e.getIndex());,2,1,0,3,6,0,12,0,0,16,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,268,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,279,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,280,        final double vNorm = v.getNorm();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,282,        if (norm == 0 ||,2,2,0,0,1,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,284,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,286,        return dotProduct(v) / (norm * vNorm);,4,2,0,2,4,1,4,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,324,        checkVectorDimensions(v);,2,0,0,1,2,0,4,0,0,6,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,325,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,326,        Iterator<Entry> it = iterator();,10,4,0,1,2,0,0,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,328,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,329,            final double diff = e.getValue() - v.getEntry(e.getIndex());,2,1,0,3,6,1,12,0,0,16,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,330,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,331,        },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,332,        return FastMath.sqrt(d);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,346,        double sum = 0;,10,1,0,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,347,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,349,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,350,            final double value = e.getValue();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,351,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,352,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,353,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,367,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,368,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,370,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,371,            norm += FastMath.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,373,        return norm;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,387,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,388,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,390,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,391,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",4,0,0,3,6,0,14,0,0,19,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,393,        return norm;,8,0,0,0,0,2,6,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,408,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,409,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,410,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,412,        while (it.hasNext() && (e = it.next()) != null) {,10,2,1,4,9,0,14,0,0,32,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,413,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,2,1,0,4,8,0,16,0,0,20,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,415,        return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,433,        checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,434,        double d = 0;,2,1,1,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,435,        Iterator<Entry> it = iterator();,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,437,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,438,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,440,        return d;,8,0,0,0,0,1,0,2,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,450,        int minIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,451,        double minValue = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,452,        Iterator<Entry> iterator = iterator();,4,0,0,1,2,0,2,4,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,453,        while (iterator.hasNext()) {,4,2,1,2,5,0,4,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,454,            final Entry entry = iterator.next();,8,1,0,1,2,1,4,2,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,455,            if (entry.getValue() <= minValue) {,0,0,0,2,5,0,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,456,                minIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,457,                minValue = entry.getValue();,2,1,1,1,2,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,459,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,460,        return minIndex;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,470,        final int minIndex = getMinIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,471,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,12,2,0,1,2,1,4,0,0,18,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,481,        int maxIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,482,        double maxValue = Double.NEGATIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,483,        Iterator<Entry> iterator = iterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,484,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,485,            final Entry entry = iterator.next();,8,3,0,1,2,1,14,2,0,28,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,486,            if (entry.getValue() >= maxValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,487,                maxIndex = entry.getIndex();,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,488,                maxValue = entry.getValue();,8,1,1,1,2,1,4,4,0,24,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,490,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,491,        return maxIndex;,2,0,1,0,0,1,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,501,        final int maxIndex = getMaxIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,502,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,514,        return copy().mapMultiplyToSelf(d);,0,0,0,2,4,1,6,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,525,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,8,2,0,10,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,536,        return copy().mapSubtractToSelf(d);,0,0,0,2,4,1,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,547,        return mapAddToSelf(-d);,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,558,        return copy().mapDivideToSelf(d);,0,0,0,2,4,1,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,569,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",8,1,0,3,6,2,8,2,0,21,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,580,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,2,1,0,1,3,0,0,4,0,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,581,"            product = new OpenMapRealMatrix(this.getDimension(),",2,0,0,1,3,0,2,2,0,7,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,584,"            product = new Array2DRowRealMatrix(this.getDimension(),",2,0,0,1,3,0,2,2,0,7,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,587,        Iterator<Entry> thisIt = sparseIterator();,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,588,        Entry thisE = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,589,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,2,2,0,4,9,0,8,0,0,13,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,590,            Iterator<Entry> otherIt = v.sparseIterator();,2,0,0,1,2,0,4,4,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,591,            Entry otherE = null;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,592,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,2,2,0,4,9,0,8,0,0,13,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,593,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0,0,0,2,5,0,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,596,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,598,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,618,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,619,        Entry e = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,620,        while (it.hasNext() && (e = it.next()) != null) {,0,0,0,4,9,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,621,            e.setValue(value);,4,1,0,1,2,0,6,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,623,    },6,0,1,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,633,        int dim = getDimension();,6,1,0,1,2,0,0,0,0,7,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,634,        double[] values = new double[dim];,2,0,1,2,4,0,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,635,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,636,            values[i] = getEntry(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,638,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,649,        RealVector copy = copy();,4,1,0,1,2,0,2,2,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,650,        copy.unitize();,12,1,0,1,2,0,4,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,651,        return copy;,10,2,0,0,0,1,0,2,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,662,        mapDivideToSelf(getNorm());,0,0,0,2,4,0,4,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,663,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,677,        return new SparseEntryIterator();,0,0,0,1,2,1,0,2,0,2,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,687,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,688,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,725,        return copy().mapToSelf(function);,0,0,0,2,4,1,6,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,742,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,2,1,0,4,8,0,8,4,0,15,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,744,        while (it.hasNext() && (e = it.next()) != null) {,8,3,1,4,9,0,8,0,0,22,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,745,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,12,0,0,12,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,747,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,764,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,780,        checkVectorDimensions(y);,0,0,0,1,2,0,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,781,        for (int i = 0; i < getDimension(); i++) {,6,1,0,2,5,0,2,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,782,            final double xi = getEntry(i);,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,783,            final double yi = y.getEntry(i);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,784,"            setEntry(i, a * xi + b * yi);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,786,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,936,        return new RealVector() {,0,0,0,1,3,1,0,2,0,2,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,688,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,691,            private int i = 0;,2,0,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,694,            private Entry e = new Entry();,2,0,0,1,2,1,0,4,0,7,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,698,                return i < dim;,4,1,0,0,0,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,703,                e.setIndex(i++);,2,0,0,1,2,0,4,0,0,7,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,704,                return e;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,709,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,279,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,280,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,284,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,285,            },8,3,1,0,1,0,0,0,0,14,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,289,                return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,1,0,1,4,0,0,0,0,7,63,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,582,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,583,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,860,        protected SparseEntryIterator() {,2,0,0,1,3,1,0,0,0,3,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,861,            dim = getDimension();,2,0,0,1,2,0,2,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,862,            current = new Entry();,4,0,1,1,2,1,0,2,0,12,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,863,            next = new Entry();,2,0,0,1,2,0,0,2,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,864,            if (next.getValue() == 0) {,0,1,0,2,5,0,4,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,865,                advance(next);,0,0,0,1,2,0,4,0,0,4,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,867,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,875,            if (e == null) {,2,1,0,1,3,0,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,876,                return;,2,0,0,0,0,1,0,0,0,3,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,879,                e.setIndex(e.getIndex() + 1);,0,1,0,2,4,0,8,0,0,9,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,880,            } while (e.getIndex() < dim && e.getValue() == 0);,4,3,0,3,7,1,8,2,0,18,50,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,881,            if (e.getIndex() >= dim) {,4,1,0,2,5,0,4,0,0,10,26,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,882,                e.setIndex(-1);,4,0,0,1,2,0,4,2,0,11,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,884,        },12,5,0,0,1,0,0,0,0,18,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,888,            return next.getIndex() >= 0;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,893,            int index = next.getIndex();,2,0,0,1,2,0,4,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,894,            if (index < 0) {,6,2,0,1,3,0,0,0,0,9,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,895,                throw new NoSuchElementException();,0,0,0,1,2,0,0,2,0,2,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,897,            current.setIndex(index);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,898,            advance(next);,0,0,0,1,2,0,4,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,899,            return current;,4,0,0,0,0,1,0,0,0,5,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,904,            throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,    protected class SparseEntryIterator implements Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,953,                return new Iterator<Entry>() {,2,0,0,1,3,2,6,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,955,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,2,0,0,1,2,2,0,4,0,8,60,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,959,                        return i.hasNext();,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,964,                        e.setIndex(i.next().getIndex());,0,0,0,3,6,0,0,0,0,9,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,965,                        return e;,2,0,0,0,0,1,0,0,0,2,9,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,970,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,980,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,982,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,6,2,0,1,2,0,6,0,0,15,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,986,                        return i.hasNext();,0,0,0,1,2,1,4,0,0,4,19,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,991,                        e.setIndex(i.next().getIndex());,2,1,0,3,6,0,10,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,992,                        return e;,2,0,0,0,0,1,0,0,0,2,9,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,997,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0,0,0,0,1,0,0,0,0,1,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,54,        return getWrongDimension(0);,0,0,0,1,2,1,2,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,60,        return getExpectedDimension(0);,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,66,        return getWrongDimension(1);,0,0,0,1,2,1,2,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,72,        return getExpectedDimension(1);,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",8,0,0,1,2,0,0,0,0,8,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,59,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,60,        this.wrong = wrong.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,61,        this.expected = expected.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,68,        return wrong.clone();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,74,        return expected.clone();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,82,        return wrong[index];,4,0,1,1,2,1,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,89,        return expected[index];,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,44,                                        Object ... args) {,6,5,0,0,2,0,0,0,0,11,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,45,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,46,"        context.addMessage(pattern, args);",12,5,0,1,2,0,8,0,0,26,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,57,        return context.getMessage();,8,1,0,1,2,1,4,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,64,    public ExceptionContext(final Throwable throwable) {,8,0,0,1,3,2,0,2,0,13,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,66,        msgPatterns    = new ArrayList<Localizable>();,6,0,1,1,2,0,0,4,0,14,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,67,        msgArguments   = new ArrayList<Object[]>();,2,0,0,2,4,0,0,4,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,75,        return throwable;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,88,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,89,    },6,1,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,100,"        context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,101,    },0,0,0,0,1,0,4,0,0,4,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,110,        return context.get(key);,4,0,0,1,2,1,6,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,119,        return context.keySet();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,128,        return getMessage(Locale.US);,14,5,0,1,2,1,4,0,0,23,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,137,        return getMessage(Locale.getDefault());,4,0,0,2,4,1,6,2,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,147,"        return buildMessage(locale, "": "");",0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,159,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,171,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,172,        int count = 0;,4,0,0,0,0,0,0,0,0,4,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,174,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,175,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,176,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,179,            sb.append(fmt.format(args));,2,1,0,2,4,0,10,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,182,                sb.append(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,186,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,197,        out.writeObject(throwable);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,198,        serializeMessages(out);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,199,        serializeContext(out);,0,0,0,1,2,0,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,211,        throwable = (Throwable) in.readObject();,2,0,0,2,4,0,4,2,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,212,        deSerializeMessages(in);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,213,        deSerializeContext(in);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,214,    },4,0,0,0,1,0,0,0,0,4,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,225,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,226,        out.writeInt(len);,2,0,0,1,2,1,10,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,228,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,229,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,231,            out.writeObject(pat);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,232,            final Object[] args = msgArguments.get(i);,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,233,            final int aLen = args.length;,6,0,0,0,0,1,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,235,            out.writeInt(aLen);,0,0,0,1,2,0,6,0,0,6,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,237,                if (args[j] instanceof Serializable) {,0,0,1,2,5,0,0,2,0,6,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,239,                    out.writeObject(args[j]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,3,6,0,6,0,0,10,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,246,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,259,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,260,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,263,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,266,            msgPatterns.add(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,268,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,269,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,272,                args[j] = in.readObject();,10,2,1,2,4,0,4,0,0,23,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,274,            msgArguments.add(args);,2,0,0,1,2,0,12,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,276,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,287,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,288,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,289,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,291,            out.writeObject(key);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,293,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,295,                out.writeObject(value);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,298,                out.writeObject(nonSerializableReplacement(value));,2,1,0,2,4,0,8,0,0,11,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,300,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,301,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,314,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,316,        for (int i = 0; i < len; i++) {,12,2,0,1,3,0,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,318,            final String key = (String) in.readObject();,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,321,"            context.put(key, value);",8,1,1,1,2,0,8,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,323,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",8,0,0,1,2,0,0,0,0,8,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,41,    },4,1,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,45,        dimension = expected;,6,0,0,0,0,0,0,2,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,0,0,0,8,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,46,"        super(pattern, wrong, arguments);",10,0,0,1,2,0,0,0,0,11,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,54,        return argument;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0,0,0,1,4,0,0,0,0,5,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,323,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,0,3,6,1,0,0,0,10,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,53,    public ArrayRealVector() {,2,1,0,1,3,0,0,0,0,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,54,        data = new double[0];,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,55,    },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,62,    public ArrayRealVector(int size) {,6,0,1,1,3,2,0,0,0,10,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,72,"    public ArrayRealVector(int size, double preset) {",10,3,0,1,3,1,6,0,0,21,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,73,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,74,"        Arrays.fill(data, preset);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,83,    public ArrayRealVector(double[] d) {,8,1,0,2,5,1,0,0,0,10,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,101,"    public ArrayRealVector(double[] d, boolean copyArray) {",0,0,0,2,5,0,0,0,0,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,102,        if (d == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,103,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,105,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,118,"    public ArrayRealVector(double[] d, int pos, int size) {",8,0,0,2,5,1,0,0,0,9,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,119,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,120,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,122,        if (d.length < pos + size) {,8,2,0,1,3,0,0,0,0,10,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,123,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",8,1,0,1,2,0,0,2,0,12,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,125,        data = new double[size];,4,0,1,1,2,0,0,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,126,"        System.arraycopy(d, pos, data, 0, size);",6,0,0,1,2,0,12,0,0,18,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,134,    public ArrayRealVector(Double[] d) {,6,1,0,2,5,0,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,135,        data = new double[d.length];,8,0,0,1,2,0,0,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,136,        for (int i = 0; i < d.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,137,            data[i] = d[i].doubleValue();,0,0,1,3,6,0,2,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,139,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,151,"    public ArrayRealVector(Double[] d, int pos, int size) {",0,0,0,2,5,0,0,0,0,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,152,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,153,            throw new NullArgumentException();,4,0,0,1,2,0,8,2,0,14,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,155,        if (d.length < pos + size) {,8,2,0,1,3,0,0,0,0,10,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,156,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",12,1,0,1,2,0,0,2,0,17,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,158,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,159,        for (int i = pos; i < pos + size; i++) {,12,2,0,1,3,0,0,0,0,15,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,160,            data[i - pos] = d[i].doubleValue();,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,170,    public ArrayRealVector(RealVector v) {,4,0,0,1,3,1,0,2,0,7,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,171,        if (v == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,172,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,174,        data = new double[v.getDimension()];,2,0,0,2,4,0,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,175,        for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,176,            data[i] = v.getEntry(i);,0,0,1,2,4,0,6,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,187,"        this(v, true);",0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,188,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,198,        data = deep ? v.data.clone() : v.data;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,199,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,206,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0,0,1,1,3,0,4,0,0,6,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,207,        data = new double[v1.data.length + v2.data.length];,14,1,0,1,2,0,0,0,0,16,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,208,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",10,0,0,1,2,0,6,0,0,16,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,209,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0,0,0,1,2,0,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,210,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,217,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0,0,0,1,3,0,0,0,0,4,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,218,        final int l1 = v1.data.length;,16,1,0,0,0,1,0,0,0,19,30,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,219,        final int l2 = v2.getDimension();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,220,        data = new double[l1 + l2];,6,1,0,1,2,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,221,"        System.arraycopy(v1.data, 0, data, 0, l1);",0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,222,        for (int i = 0; i < l2; ++i) {,4,0,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,223,            data[l1 + i] = v2.getEntry(i);,18,2,1,2,4,0,6,2,0,32,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,225,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,232,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",6,0,0,1,3,1,0,4,0,11,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,233,        final int l1 = v1.getDimension();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,234,        final int l2 = v2.data.length;,8,0,0,0,0,1,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,235,        data = new double[l1 + l2];,12,1,0,1,2,0,0,0,0,15,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,236,        for (int i = 0; i < l1; ++i) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,237,            data[i] = v1.getEntry(i);,6,0,1,2,4,0,6,2,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,239,"        System.arraycopy(v2.data, 0, data, l1, l2);",4,0,0,1,2,0,10,0,0,14,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,240,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,247,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",6,0,0,2,5,1,0,2,0,9,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,248,        final int l1 = v1.getDimension();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,249,        final int l2 = v2.length;,12,0,0,0,0,1,0,2,0,15,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,250,        data = new double[l1 + l2];,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,251,"        System.arraycopy(v1.data, 0, data, 0, l1);",4,0,0,1,2,0,8,0,0,12,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,252,"        System.arraycopy(v2, 0, data, l1, l2);",0,0,0,1,2,0,12,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,253,    },6,3,0,0,1,0,8,0,0,17,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,260,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0,0,0,2,5,0,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,261,        final int l1 = v1.length;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,262,        final int l2 = v2.getDimension();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,263,        data = new double[l1 + l2];,6,1,0,1,2,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,264,"        System.arraycopy(v1, 0, data, 0, l1);",6,1,0,1,2,0,10,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,265,"        System.arraycopy(v2.data, 0, data, l1, l2);",4,0,0,1,2,0,10,0,0,14,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,266,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,273,"    public ArrayRealVector(double[] v1, double[] v2) {",6,0,0,3,7,1,0,0,0,7,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,274,        final int l1 = v1.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,275,        final int l2 = v2.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,276,        data = new double[l1 + l2];,14,3,1,1,2,0,2,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,277,"        System.arraycopy(v1, 0, data, 0, l1);",0,0,0,1,2,0,10,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,278,"        System.arraycopy(v2, 0, data, l1, l2);",6,0,0,1,2,0,16,0,0,23,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,279,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,284,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,290,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,291,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,292,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,293,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,294,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,295,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,296,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,297,                resultData[i] = data[i] + vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,299,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,301,            checkVectorDimensions(v);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,302,            double[] out = data.clone();,2,0,0,2,4,0,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,303,            Iterator<Entry> it = v.sparseIterator();,6,1,0,1,2,0,4,4,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,305,            while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,306,                out[e.getIndex()] += e.getValue();,0,0,1,3,6,0,8,0,0,11,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,308,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,315,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,316,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,317,            final int dim = vData.length;,4,0,0,0,0,0,0,2,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,318,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,319,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,320,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,321,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,322,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,324,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,326,            checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,327,            double[] out = data.clone();,2,0,0,2,4,0,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,328,            Iterator<Entry> it = v.sparseIterator();,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,330,            while(it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,331,                out[e.getIndex()] -= e.getValue();,4,0,1,3,6,0,8,0,0,16,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,333,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,340,        return copy().mapToSelf(function);,0,0,0,2,4,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,346,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,347,            data[i] = function.value(data[i]);,4,3,1,3,6,0,4,0,0,21,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,349,        return this;,6,1,0,0,0,1,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,355,        for (int i = 0; i < data.length; i++) {,16,1,0,1,3,0,0,2,0,21,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,356,            data[i] = data[i] + d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,358,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,364,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,365,            data[i] = data[i] - d;,20,7,1,2,4,0,0,0,0,38,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,367,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,373,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,374,            data[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,376,        return this;,20,8,0,0,0,2,0,0,0,29,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,382,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,383,            data[i] = data[i] / d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,385,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,391,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,392,            final double[] vData = ((ArrayRealVector) v).data;,8,1,0,3,6,1,2,2,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,393,            final int dim = vData.length;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,394,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,395,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,396,            double[] resultData = result.data;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,397,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,398,                resultData[i] = data[i] * vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,400,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,402,            checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,403,            double[] out = data.clone();,2,0,0,2,4,0,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,404,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,405,                out[i] *= v.getEntry(i);,6,0,1,2,4,1,6,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,407,"            return new ArrayRealVector(out, false);",8,2,0,1,2,1,0,2,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,413,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,414,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,415,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,416,            checkVectorDimensions(dim);,0,0,0,1,2,0,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,417,            ArrayRealVector result = new ArrayRealVector(dim);,12,1,1,1,2,1,0,4,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,418,            double[] resultData = result.data;,14,0,0,1,2,0,4,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,419,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,420,                resultData[i] = data[i] / vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,422,            return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,424,            checkVectorDimensions(v);,2,0,0,1,2,1,4,2,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,425,            double[] out = data.clone();,4,0,0,2,4,0,4,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,426,            for (int i = 0; i < data.length; i++) {,4,0,0,1,3,0,0,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,427,                out[i] /= v.getEntry(i);,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,429,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,440,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,446,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,447,            final double[] vData = ((ArrayRealVector) v).data;,2,1,0,3,6,0,0,0,0,3,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,448,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,449,            double dot = 0;,4,0,0,0,0,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,450,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,451,                dot += data[i] * vData[i];,12,1,1,2,4,1,6,0,0,29,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,453,            return dot;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,455,            checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,456,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,457,            Iterator<Entry> it = v.sparseIterator();,2,0,0,1,2,0,4,4,0,10,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,459,            while(it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,460,                dot += data[e.getIndex()] * e.getValue();,2,1,1,3,6,0,8,0,0,14,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,462,            return dot;,10,1,0,0,0,5,0,0,0,15,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,469,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,470,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,471,            sum += a * a;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,473,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,479,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,480,        for (double a : data) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,481,            sum += FastMath.abs(a);,4,2,1,1,2,0,6,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,483,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,489,        double max = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,490,        for (double a : data) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,491,"            max = FastMath.max(max, FastMath.abs(a));",0,0,0,2,4,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,493,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,499,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,500,            final double[] vData = ((ArrayRealVector) v).data;,10,0,0,3,6,1,0,2,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,501,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,502,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,503,            for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,504,                final double delta = data[i] - vData[i];,14,7,1,2,4,1,0,0,0,31,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,505,                sum += delta * delta;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,507,            return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,509,            checkVectorDimensions(v);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,510,            double sum = 0;,8,2,0,0,0,0,0,0,0,11,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,511,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,512,                final double delta = data[i] - v.getEntry(i);,4,2,1,2,4,1,6,0,0,17,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,513,                sum += delta * delta;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,515,            return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,522,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,523,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,524,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,525,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,526,            for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,527,                final double delta = data[i] - vData[i];,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,528,                sum += FastMath.abs(delta);,2,0,0,1,2,0,6,0,0,9,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,530,            return sum;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,532,            checkVectorDimensions(v);,2,1,0,1,2,0,4,0,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,533,            double sum = 0;,4,0,0,0,0,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,534,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,535,                final double delta = data[i] - v.getEntry(i);,0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,536,                sum += FastMath.abs(delta);,2,0,0,1,2,0,6,0,0,9,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,538,            return sum;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,545,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,546,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,547,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,548,            double max = 0;,4,1,0,0,0,0,2,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,549,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,550,                final double delta = data[i] - vData[i];,4,1,1,2,4,2,4,0,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,551,"                max = FastMath.max(max, FastMath.abs(delta));",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,553,            return max;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,555,            checkVectorDimensions(v);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,556,            double max = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,557,            for (int i = 0; i < data.length; ++i) {,18,3,0,1,3,0,12,0,0,34,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,558,                final double delta = data[i] - v.getEntry(i);,2,1,1,2,4,1,6,0,0,14,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,559,"                max = FastMath.max(max, FastMath.abs(delta));",4,0,0,2,4,1,14,0,0,20,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,561,            return max;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,568,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,569,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,570,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,572,        return mapDivide(norm);,8,1,0,1,2,1,4,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,578,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,579,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,580,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,582,        mapDivideToSelf(norm);,0,0,0,1,2,0,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,583,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,587,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,1,0,3,6,1,14,0,0,15,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,593,        if (v instanceof ArrayRealVector) {,8,1,0,1,3,0,0,2,0,11,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,594,            final double[] vData = ((ArrayRealVector) v).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,595,            final int m = data.length;,6,0,0,0,0,1,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,596,            final int n = vData.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,597,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",2,0,0,1,2,1,8,2,0,13,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,598,            for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,599,                for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,600,"                    out.setEntry(i, j, data[i] * vData[j]);",0,1,1,3,6,0,8,0,0,17,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,603,            return out;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,605,            final int m = data.length;,6,0,0,0,0,1,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,606,            final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,607,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",8,1,0,1,2,2,8,2,0,21,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,608,            for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,609,                for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,610,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0,1,1,3,6,0,14,0,0,19,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,613,            return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,619,        return data[index];,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,624,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,630,"            return new ArrayRealVector(this, (ArrayRealVector) v);",2,0,0,2,4,1,0,4,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,631,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,632,"            return new ArrayRealVector(this, v);",2,0,0,1,2,1,0,2,0,4,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,643,"        return new ArrayRealVector(this, v);",2,0,0,1,2,1,0,2,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,648,        final double[] out = new double[data.length + 1];,6,1,0,2,4,1,0,0,0,8,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,649,"        System.arraycopy(data, 0, out, 0, data.length);",4,0,0,1,2,0,8,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,650,        out[data.length] = in;,16,1,1,1,2,0,0,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,651,"        return new ArrayRealVector(out, false);",0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,656,        ArrayRealVector out = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,658,"            System.arraycopy(data, index, out.data, 0, n);",4,0,0,1,2,0,10,0,0,14,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,662,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,659,        } catch (IndexOutOfBoundsException e) {,0,0,0,1,4,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,660,            checkIndex(index);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,661,            checkIndex(index + n - 1);,8,2,0,1,2,0,6,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,663,        return out;,8,0,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,669,            data[index] = value;,2,0,0,1,2,0,2,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,672,        },4,0,0,0,1,1,2,0,0,8,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,670,        } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,671,            checkIndex(index);,8,1,0,1,2,0,4,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,673,    },10,1,0,0,1,0,0,0,0,12,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,678,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,679,"            setSubVector(index, ((ArrayRealVector) v).data);",6,1,1,3,6,0,4,2,0,17,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,682,                for (int i = index; i < index + v.getDimension(); ++i) {,10,2,0,2,5,0,4,0,0,17,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,683,                    data[i] = v.getEntry(i - index);,4,1,1,2,4,0,4,0,0,14,32,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,688,            },4,0,0,0,1,0,0,2,0,7,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,685,            } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,686,                checkIndex(index);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,687,                checkIndex(index + v.getDimension() - 1);,2,2,0,2,4,0,6,0,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,690,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,702,"            System.arraycopy(v, 0, data, index, v.length);",6,0,0,1,2,0,10,0,0,16,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,706,        },2,0,0,0,1,0,4,0,0,7,1,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,703,        } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,704,            checkIndex(index);,0,0,0,1,2,0,4,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,705,            checkIndex(index + v.length - 1);,6,2,0,1,2,0,12,0,0,21,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,707,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,712,"        Arrays.fill(data, value);",0,0,0,1,2,0,8,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,713,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,718,        return data.clone();,10,3,0,1,2,1,4,0,0,17,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,724,        return DEFAULT_FORMAT.format(this);,0,0,0,1,2,1,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,736,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,737,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,748,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,749,"            throw new DimensionMismatchException(data.length, n);",10,0,0,1,2,0,0,2,0,13,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,751,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,760,        for (double v : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,761,            if (Double.isNaN(v)) {,0,0,0,2,5,0,10,0,0,10,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,762,                return true;,8,2,0,0,0,1,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,765,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,776,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,777,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,780,        for (double v : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,781,            if (Double.isInfinite(v)) {,0,0,0,2,5,0,6,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,782,                return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,786,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,805,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,806,            return true;,2,0,0,0,0,2,0,4,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,809,        if (other == null || !(other instanceof RealVector)) {,4,2,0,2,5,0,0,2,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,810,            return false;,4,0,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,813,        RealVector rhs = (RealVector) other;,4,0,0,1,2,0,0,6,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,814,        if (data.length != rhs.getDimension()) {,4,1,0,2,5,0,4,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,815,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,818,        if (rhs.isNaN()) {,10,2,0,2,5,0,4,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,819,            return this.isNaN();,0,0,0,1,2,1,2,0,0,2,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,822,        for (int i = 0; i < data.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,823,            if (data[i] != rhs.getEntry(i)) {,0,1,1,3,7,0,6,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,824,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,827,        return true;,8,0,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,838,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,839,            return 9;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,841,        return MathUtils.hash(data);,0,0,0,1,2,1,6,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,847,"        return copy().combineToSelf(a, b, y);",0,0,0,2,4,1,10,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,853,        if (y instanceof ArrayRealVector) {,6,1,0,1,3,0,0,2,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,854,            final double[] yData = ((ArrayRealVector) y).data;,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,855,            checkVectorDimensions(yData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,856,            for (int i = 0; i < this.data.length; i++) {,10,1,0,1,3,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,857,                data[i] = a * data[i] + b * yData[i];,4,3,1,3,6,0,0,0,0,20,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,859,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,860,            checkVectorDimensions(y);,0,0,0,1,2,0,4,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,861,            for (int i = 0; i < this.data.length; i++) {,10,1,0,1,3,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,862,                data[i] = a * data[i] + b * y.getEntry(i);,4,3,1,3,6,0,6,0,0,22,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,865,        return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,37,public class ArrayRealVector extends RealVector implements Serializable {,2,0,0,0,1,1,0,4,0,7,73,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,60,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,4,0,0,1,3,1,0,2,0,7,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,61,        this.rows = matrix.rows;,30,8,0,0,0,0,0,0,0,42,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,62,        this.columns = matrix.columns;,8,0,0,0,0,0,4,2,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,63,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,6,0,0,1,2,0,0,2,0,10,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,69,        return new OpenMapRealMatrix(this);,0,0,0,1,2,1,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,75,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,81,        return columns;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,95,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,97,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,2,0,0,1,2,1,0,4,0,7,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,98,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0,0,0,3,7,0,0,0,0,10,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,99,            iterator.advance();,0,0,0,1,2,0,4,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,100,            final int row = iterator.key() / columns;,4,1,0,1,2,1,4,0,0,10,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,101,            final int col = iterator.key() - row * columns;,6,2,0,1,2,1,4,0,0,13,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,102,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",4,1,0,3,6,0,28,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,103,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,105,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,113,            return subtract((OpenMapRealMatrix) m);,6,2,0,2,4,1,2,2,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,114,        } catch (ClassCastException cce) {,10,2,0,1,4,0,0,2,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,115,            return (OpenMapRealMatrix) super.subtract(m);,4,0,0,2,4,1,0,2,0,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,129,"        MatrixUtils.checkAdditionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,131,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,6,0,0,1,2,1,0,4,0,11,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,132,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,10,0,0,3,7,0,6,0,0,16,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,133,            iterator.advance();,2,0,0,1,2,0,4,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,134,            final int row = iterator.key() / columns;,4,1,0,1,2,1,4,0,0,10,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,135,            final int col = iterator.key() - row * columns;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,136,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,137,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,139,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,146,            return multiply((OpenMapRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,147,        } catch (ClassCastException cce) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,150,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,1,1,2,0,8,0,0,17,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,152,            final int outCols = m.getColumnDimension();,2,1,0,1,2,0,4,0,0,8,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,153,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",8,0,0,1,2,1,0,4,0,13,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,154,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0,0,0,3,7,0,0,0,0,10,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,155,                iterator.advance();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,156,                final double value = iterator.value();,12,1,0,1,2,1,4,0,0,19,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,157,                final int key      = iterator.key();,2,0,0,1,2,1,4,0,0,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,158,                final int i        = key / columns;,6,1,0,0,0,1,0,0,0,8,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,159,                final int k        = key % columns;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,160,                for (int j = 0; j < outCols; ++j) {,8,1,0,1,3,0,0,0,0,10,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,161,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",2,1,0,2,4,0,16,0,0,19,47,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,163,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,165,            return out;,2,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,180,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,182,        final int outCols = m.getColumnDimension();,4,1,1,1,2,1,4,0,0,13,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,183,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",6,0,0,1,2,0,0,4,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,184,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,6,0,0,3,7,0,8,0,0,14,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,185,            iterator.advance();,0,0,0,1,2,0,4,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,186,            final double value = iterator.value();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,187,            final int key      = iterator.key();,2,0,0,1,2,0,0,0,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,188,            final int i        = key / columns;,10,5,0,0,0,1,0,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,189,            final int k        = key % columns;,8,2,0,0,0,1,0,0,0,11,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,190,            for (int j = 0; j < outCols; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,191,"                final int rightKey = m.computeKey(k, j);",2,0,0,1,2,1,8,0,0,11,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,192,                if (m.entries.containsKey(rightKey)) {,16,3,0,2,5,0,4,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,193,"                    final int outKey = out.computeKey(i, j);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,194,                    final double outValue =,4,1,0,0,0,0,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,196,                    if (outValue == 0.0) {,2,1,0,1,3,0,12,0,0,15,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,197,                        out.entries.remove(outKey);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,199,"                        out.entries.put(outKey, outValue);",4,0,0,1,2,0,6,0,0,10,34,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,203,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,205,        return out;,0,0,0,0,0,1,6,0,0,6,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,211,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,212,"        MatrixUtils.checkColumnIndex(this, column);",2,0,1,1,2,0,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,213,"        return entries.get(computeKey(row, column));",2,0,1,2,4,1,10,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,219,        return rows;,10,2,0,0,0,1,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,225,"        MatrixUtils.checkRowIndex(this, row);",8,6,0,1,2,0,6,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,226,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,227,        if (value == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,228,"            entries.remove(computeKey(row, column));",0,0,0,2,4,0,10,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,230,"            entries.put(computeKey(row, column), value);",6,1,0,2,4,0,4,0,0,12,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,232,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,237,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,238,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,239,"        final int key = computeKey(row, column);",2,0,0,1,2,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,240,        final double value = entries.get(key) + increment;,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,241,        if (value == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,242,            entries.remove(key);,0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,244,"            entries.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,246,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,251,"        MatrixUtils.checkRowIndex(this, row);",0,0,0,1,2,0,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,252,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,253,"        final int key = computeKey(row, column);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,254,        final double value = entries.get(key) * factor;,4,1,0,1,2,1,6,0,0,12,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,255,        if (value == 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,256,            entries.remove(key);,0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,258,"            entries.put(key, value);",4,0,0,1,2,0,8,0,0,12,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,260,    },0,0,1,0,1,0,0,0,0,7,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,269,        return row * columns + column;,6,2,0,0,0,1,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,31,public class OpenMapRealMatrix extends AbstractRealMatrix,0,0,0,0,0,0,0,0,0,0,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,67,"        super(specific, wrong, max);",10,3,1,1,2,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,70,        this.boundIsAllowed = boundIsAllowed;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,84,        return max;,8,2,1,0,0,3,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,48,"        super(specific, value, 0, false);",14,6,1,1,2,0,0,0,0,26,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,72,    },2,1,0,0,1,0,0,0,0,3,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,37,        this(LocalizedFormats.NO_DATA);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,358,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,359,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,360,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",8,2,0,1,2,0,0,0,0,11,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",4,0,0,4,8,0,0,0,0,5,108,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0,0,0,2,4,0,0,0,0,6,94,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",10,1,0,3,6,0,0,0,0,13,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",6,2,0,2,4,0,0,0,0,10,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0,0,0,1,2,0,0,0,0,3,131,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",4,0,0,2,4,0,0,0,0,4,98,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",12,1,0,1,2,0,0,0,0,16,95,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",6,0,0,2,4,0,0,0,0,8,115,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",12,3,0,5,10,0,2,0,0,20,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,4,0,0,7,112,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,1,0,3,6,0,4,0,0,8,263,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",18,19,0,1,2,0,0,0,0,39,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",6,2,0,5,10,0,0,0,0,10,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",4,0,0,1,2,0,0,0,0,5,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,98,"    EVALUATION(""evaluation""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",8,1,0,3,6,1,0,0,0,11,77,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",8,1,0,5,10,0,0,0,0,10,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",8,1,0,2,4,0,0,0,0,11,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,113,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,117,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",18,3,0,3,6,0,0,0,0,24,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,8,0,0,11,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",4,0,1,2,4,1,0,0,0,10,103,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,129,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0,0,0,3,6,0,0,0,0,9,105,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,139,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",6,0,0,1,2,0,0,0,0,8,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,140,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,141,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,142,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",8,1,0,26,52,1,0,0,0,11,165,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,143,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,144,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",16,0,0,4,8,0,0,0,0,20,56,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,145,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",6,0,0,4,8,0,0,0,0,8,56,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,146,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,147,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,148,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,149,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,150,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,151,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,152,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",10,1,0,4,8,0,0,0,0,13,132,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",10,3,0,2,4,0,0,0,0,15,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0,0,0,2,4,0,0,0,0,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",0,0,0,3,6,0,0,0,0,9,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,168,"    START_POSITION(""start position ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,1,2,4,0,6,0,0,14,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",8,3,1,3,6,0,0,0,0,21,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",6,0,0,3,6,0,0,0,0,7,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",4,0,0,1,2,0,0,0,0,6,60,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",4,0,0,1,2,0,0,0,0,5,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",0,0,0,6,12,0,0,0,0,18,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",6,0,0,5,10,0,0,2,0,9,113,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0,0,0,3,6,0,0,0,0,9,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0,0,0,6,12,0,0,0,0,18,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",4,1,0,5,10,0,0,0,0,7,105,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",8,1,0,1,2,0,4,0,0,16,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",4,0,0,7,14,0,0,0,0,7,118,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,192,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,193,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,194,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,6,0,0,11,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,199,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,201,"    LENGTH(""length ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",6,0,0,3,6,0,0,0,0,7,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0,0,0,3,6,0,0,0,0,9,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",8,1,0,2,5,1,4,0,0,15,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",8,0,1,3,6,0,0,2,0,13,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,214,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",4,0,0,3,6,1,2,0,0,8,77,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,4,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",14,1,0,3,6,1,0,0,0,17,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",8,1,0,1,2,0,0,0,0,11,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",4,1,1,6,12,0,0,0,0,10,107,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",0,0,0,2,4,0,0,0,0,6,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,235,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",4,0,0,1,2,0,0,0,0,5,99,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",10,1,0,1,2,0,0,0,0,14,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,244,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,80,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,245,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,246,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,247,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,248,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,249,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,250,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,251,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,252,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,253,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,254,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",4,1,0,1,2,0,0,0,0,6,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,255,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,256,"    WHOLE_FORMAT(""whole format""), /* keep */",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,257,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,258,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,259,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,260,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,261,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",14,2,0,5,10,1,0,0,0,19,127,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,262,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,263,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,264,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,265,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,266,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",6,0,0,3,6,0,0,2,0,9,150,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,267,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,268,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",0,0,0,4,8,0,0,0,0,12,101,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,269,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,270,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,271,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,272,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,273,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0,0,0,5,10,0,0,0,0,15,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,274,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",4,1,0,1,2,0,0,0,0,6,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,275,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0,0,0,3,6,0,0,0,0,9,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,276,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,277,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",8,1,0,3,6,1,0,0,0,11,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,278,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",8,1,0,3,6,0,0,0,0,11,108,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,279,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,280,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,4,0,0,7,91,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,281,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,282,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,283,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,284,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",0,0,0,4,8,0,0,0,0,12,109,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,285,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",0,0,0,4,8,0,0,0,0,12,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,286,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",16,5,0,1,2,0,0,0,0,23,65,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,287,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,288,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,289,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,290,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,291,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,292,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",8,2,0,7,14,0,0,0,0,12,126,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,293,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,294,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,295,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0,0,0,1,2,0,0,0,0,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,296,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,297,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,298,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,299,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,300,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,301,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,302,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,303,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",8,1,0,4,8,0,0,0,0,10,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,304,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,305,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,306,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,307,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0,0,0,3,6,0,0,0,0,9,156,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,308,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,309,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,310,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,311,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",4,0,0,1,2,0,0,0,0,7,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,312,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",6,1,0,1,2,0,0,0,0,8,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,313,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",0,0,0,1,2,0,0,0,0,3,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,314,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,315,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",4,0,0,3,6,1,0,0,0,6,117,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,316,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,317,"    UNBOUNDED_SOLUTION(""unbounded solution""),",8,2,1,1,2,0,0,0,0,14,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,318,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,319,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,320,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,321,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",4,2,0,5,10,0,12,0,0,19,107,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,322,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,323,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,324,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,325,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,326,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,327,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,328,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,1,0,1,2,0,0,0,0,3,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,329,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,330,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,331,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,332,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,333,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,334,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,335,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,336,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,337,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",4,0,0,3,6,0,0,0,0,6,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,338,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,339,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,340,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,341,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,342,"    ZERO_NORM(""zero norm""),",8,0,1,1,2,0,0,0,0,12,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,343,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,344,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,345,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,39,public enum LocalizedFormats implements Localizable {,6,1,1,0,1,1,0,2,0,13,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,364,        return sourceFormat;,4,0,0,0,0,2,2,0,0,7,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,370,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,372,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,374,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,379,        },2,0,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,377,        } catch (MissingResourceException mre) {,4,0,0,1,4,0,0,2,0,6,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,383,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,32,    private ArgUtils() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,6,8,0,17,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,43,        if (array != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,46,                    for (Object oR : flatten((Object[]) o)) {,0,0,0,4,9,0,0,0,0,13,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,47,                        list.add(oR);,0,0,0,1,2,0,6,0,0,6,13,13,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,54,        return list.toArray();,0,0,0,1,2,1,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,0,0,0,0,0,1,0,0,0,1,26,4,2.0,1,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,18,0,0,18,49,3,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,8,2,0,1,3,0,0,0,0,10,21,4,0.30769,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,253,        MathUtils.checkNotNull(divisor);,0,0,0,1,2,0,0,0,0,3,32,4,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,254,        if (isNaN || divisor.isNaN) {,6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,0,0,0,0,0,1,0,0,0,1,11,4,2.0,1,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,10,0,0,1,3,1,0,8,0,19,28,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,0,3,0,3,7,0,8,0,0,11,64,4,0.30769,1,0
defect4j,math,org/apache/commons/math/complex/Complex,47,251,        MathUtils.checkNotNull(divisor);,0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,2,0,0,1,2,1,0,8,0,11,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,2,0,0,3,6,1,0,8,0,11,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,2,0,1,2,0,0,0,0,9,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",12,1,0,1,2,0,0,0,0,15,60,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",4,1,0,1,2,0,0,0,0,6,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0,0,0,1,2,0,0,0,0,3,123,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",6,0,0,2,4,0,0,0,0,7,108,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,6,0,0,11,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,6,0,0,9,55,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",8,1,0,1,2,0,0,0,0,11,52,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",0,0,0,1,2,0,0,0,0,3,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,8,0,0,11,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0,0,0,2,4,0,0,0,0,6,119,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0,0,0,4,8,0,0,0,0,12,78,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,1,0,3,6,0,4,0,0,8,77,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",4,0,0,2,4,0,0,0,0,6,79,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,108,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,6,0,0,9,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,64,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",4,1,1,2,4,0,0,0,0,11,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,129,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0,0,0,2,4,0,0,0,0,6,66,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,4,0,0,7,124,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",22,2,0,4,8,3,0,0,0,31,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0,0,0,1,2,0,0,0,0,3,70,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",6,1,1,3,6,0,0,0,0,11,58,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0,0,0,2,4,0,0,0,0,6,81,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,6,0,0,11,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",10,1,0,3,6,0,0,0,0,14,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,1,4,8,0,0,0,0,8,49,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",4,0,0,5,10,0,0,0,0,6,93,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0,0,0,6,12,0,0,0,0,18,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,1,1,3,6,0,0,0,0,10,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",8,1,0,1,2,0,0,0,0,10,61,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",4,0,1,1,2,0,0,0,0,8,80,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",24,8,1,4,8,3,0,0,0,40,78,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,1,3,6,0,0,0,0,7,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",0,0,0,2,4,0,0,0,0,6,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,4,0,0,8,65,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",12,4,0,2,5,0,0,0,0,18,53,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",12,2,0,3,6,0,0,0,0,16,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",0,0,0,2,4,0,0,0,0,6,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0,0,0,6,12,0,0,0,0,18,104,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",4,0,0,6,12,0,0,0,0,5,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",10,1,0,1,2,0,2,2,0,17,45,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0,0,0,8,16,0,0,0,0,24,134,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,8,0,0,12,35,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",8,7,0,4,8,0,0,0,0,16,82,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0,0,0,1,2,0,0,0,0,3,99,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,246,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,251,"    NUMERATOR(""numerator""), /* keep */",6,1,1,1,2,1,0,0,0,14,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,252,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",16,2,0,1,2,0,0,0,0,19,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,255,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,256,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,6,0,0,9,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,258,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,97,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,259,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,262,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,263,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,1,1,2,4,0,0,0,0,13,84,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,266,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0,0,0,3,6,0,0,0,0,9,87,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,269,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",4,0,0,1,2,0,0,0,0,6,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",2,0,0,1,2,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",4,0,0,3,6,0,0,0,0,6,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,276,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",10,1,0,5,10,0,0,0,0,14,91,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",4,0,0,4,8,0,0,0,0,5,130,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,285,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,286,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,287,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,288,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0,0,0,3,6,0,0,0,0,9,75,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",8,2,0,3,6,0,0,0,0,11,40,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",4,0,0,7,14,0,0,0,0,6,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,1,0,5,10,1,4,0,0,8,98,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",4,0,0,1,2,1,0,0,0,6,49,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",6,1,0,1,2,1,0,0,0,9,63,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,302,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,303,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,305,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",4,1,0,1,2,0,2,0,0,10,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,309,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",0,0,0,1,2,0,0,0,0,3,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,312,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",0,0,0,2,4,0,0,0,0,6,83,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,315,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",8,2,0,5,10,0,6,0,0,17,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,319,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,56,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,320,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,66,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,321,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",10,3,0,1,2,0,0,0,0,14,58,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",6,1,0,1,2,0,0,0,0,8,42,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,327,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,328,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,6,0,0,9,49,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,330,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,2,75,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,331,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,333,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",0,0,0,4,8,0,0,0,0,12,75,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",6,1,1,3,6,0,0,0,0,13,54,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,337,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,69,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,338,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,341,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,342,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,42,        final List<Object> list = new ArrayList<Object>();,18,0,0,1,2,1,6,8,0,33,50,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,6,1,0,4,9,0,2,4,0,13,41,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,50,                    list.add(o);,2,2,0,1,2,0,6,0,0,10,12,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,54,        return list.toArray();,0,0,0,1,2,1,4,0,0,4,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,                    break;,10,2,0,0,0,0,0,0,0,13,6,6,0.16667,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,60,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,61,    },4,1,1,0,1,0,0,0,0,10,1,6,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,125,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,172,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,175,                x0 = x1;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,176,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,177,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,179,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,196,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,197,            f1 = fx;,0,0,0,0,0,0,0,0,0,0,8,4,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,202,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,12,0,0,15,31,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,233,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,250,        },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,48,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,1,2,4,1,10,0,0,24,60,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,203,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,179,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,4,3,0,2,4,0,0,0,0,7,40,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,2,2,0,10,39,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,10,5,1,1,2,0,4,0,0,23,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,1,0,5,10,0,20,0,0,21,64,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,            return doRemove(index);,0,0,0,1,2,1,0,0,0,4,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,2,0,1,1,2,0,0,0,0,7,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,2,0,1,1,2,1,0,0,0,7,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,4,0,1,1,2,0,0,0,0,10,31,0,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,0,0,0,0,0,0,0,0,0,0,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,2,0,0,1,2,0,2,0,0,4,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,            entries.remove(index);,0,0,0,1,2,0,6,0,0,6,22,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,4,0,0,1,2,4,4,4,0,17,30,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,10,2,0,0,0,0,0,0,0,12,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",2,0,0,2,5,3,0,2,0,7,30,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,0,0,0,1,3,0,0,0,0,4,68,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,4,0,1,1,2,0,4,0,0,11,23,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",4,0,0,1,2,0,8,0,0,12,50,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,2,0,1,1,2,0,0,0,0,5,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,138,"        System.arraycopy(source.values, 0, values, 0, length);",4,0,0,1,2,0,8,0,0,12,54,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,8,3,1,1,2,0,0,0,0,14,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,140,"        System.arraycopy(source.states, 0, states, 0, length);",4,0,0,1,2,0,8,0,0,12,54,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,144,        count = source.count;,6,0,0,0,0,0,0,0,0,7,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",6,0,0,1,3,1,6,0,0,13,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,75,        virtualSize = dimension;,4,0,0,0,0,0,0,0,0,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,76,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,1,1,2,0,0,2,0,12,42,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,77,        this.epsilon = epsilon;,0,0,0,0,0,0,0,0,0,0,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,4,0,0,1,3,1,0,2,0,7,47,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,180,        virtualSize = v.getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,2,0,0,2,4,0,4,2,0,9,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,182,        epsilon = v.epsilon;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,183,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,6,2,1,1,3,0,0,0,0,17,30,1,0.16667,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.16667,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,0,0,1,1,2,1,0,0,0,4,21,6,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,208,        return entries;,0,0,0,0,0,1,0,0,0,1,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,663,        checkIndex(index);,0,0,0,1,2,0,4,0,0,4,18,5,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,664,        if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",10,0,0,1,2,7,8,0,0,25,26,1,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,669,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,2,0,0,0,0,1,6,0,0,8,10,3,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,0,0,1,3,0,0,0,0,4,14,11,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",0,0,0,1,2,1,0,0,0,4,73,4,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.05,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",0,0,0,1,2,0,0,0,0,3,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,0,0,0,1,3,0,0,0,0,4,18,4,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,4,0,0,0,0,0,0,0,0,5,8,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",2,0,0,2,6,3,0,2,0,7,65,2,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },2,0,0,0,1,0,0,0,0,2,1,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,        this.allowed = AllowedSolution.ANY_SIDE;,6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,        this.method = method;,4,0,0,0,0,0,0,0,0,5,21,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,2,0,0,1,2,0,0,0,0,2,47,9,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,0,0,0,1,2,0,0,0,0,3,42,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,        boolean inverted = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,0,0,0,4,8,0,0,0,0,12,53,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,            final double fx = computeObjectiveValue(x);,8,1,0,1,2,1,4,0,0,15,43,5,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",0,0,0,1,3,0,0,0,0,4,69,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,  double v2v2 = v2.getNormSq();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,14,5,0,5,11,0,0,0,0,19,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",8,1,0,2,4,0,4,2,0,16,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,4,0,0,1,2,0,6,0,0,10,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,  double coeffU = u1u2 / u1u1;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,6,1,0,0,0,0,0,0,0,7,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,8,2,0,0,0,0,0,0,0,10,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",10,0,0,1,2,0,0,2,0,13,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,4,0,0,0,0,0,6,2,0,12,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,0,0,0,0,0,0,0,0,0,0,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,2,0,0,1,2,0,6,2,0,10,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,  Vector3D v2Su2 = v2.subtract(u2);,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,8,1,1,1,2,0,6,2,0,21,43,1,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,1,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,8,3,0,1,2,0,0,0,0,11,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,8,1,0,1,2,0,4,0,0,15,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",6,3,0,2,5,0,8,2,0,20,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,2,0,3,6,0,10,0,0,15,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },4,0,0,0,1,0,0,0,0,4,1,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,2,0,0,0,0,1,6,0,0,8,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",10,0,0,1,3,1,0,4,0,15,65,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",4,1,0,1,2,0,0,0,0,5,57,8,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },10,4,0,0,1,0,0,0,0,15,1,15,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,4,0,0,0,2,1,0,0,0,5,29,2,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,2,0,0,1,3,0,0,0,0,2,25,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,    this.q2 = q2;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,16,0,0,0,0,0,0,0,0,17,13,3,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",2,0,0,1,2,3,0,4,0,10,80,2,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,120,"    public Vector3D(double a, Vector3D u) {",0,0,0,1,3,0,0,0,0,4,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,121,        this.x = a * u.x;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,122,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,123,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2375,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2376,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2377,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2378,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2379,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2380,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2383,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2384,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2387,        final double ca2        = SPLIT_FACTOR * a2;,8,1,1,0,0,2,0,0,0,15,44,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2388,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2389,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2390,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2391,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2392,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2395,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2396,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2399,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2400,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2405,        return s12High + (prod1Low + prod2Low + s12Low);,8,2,0,1,2,1,0,0,0,10,48,4,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,261,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,262,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,437,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,438,"        return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),",0,0,0,1,3,1,0,0,0,5,67,4,0.05882,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,152,        MathUtils.checkNotNull(rhs);,6,0,0,1,2,1,6,4,0,17,28,3,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",0,0,0,1,3,1,0,0,0,5,42,4,0.05263,1,1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,0,0,0,0,0,1,0,0,0,1,13,4,0.04348,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02381,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2331,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.02326,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.01587,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,52,9,1,1,2,0,0,2,0,68,18,1,0.08333,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.07143,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,2,0,0,0,0,0,0,0,0,2,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",2,0,0,2,4,1,2,2,0,6,30,5,0.05263,1,1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,        return nans == INFINITE;,0,0,0,0,0,1,0,0,0,1,24,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,4,2,0,0,0,4,0,0,0,9,19,1,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,        if (isInfinite()) {,0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,        if (isNaN()) {,2,1,0,2,5,0,4,0,0,8,14,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,        Dfp y = this;,2,0,0,0,0,0,0,2,0,4,13,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,        if (lessThan(getZero())) {,0,0,0,3,7,0,4,0,0,4,26,5,0.05263,1,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,8,2,0,3,6,1,4,0,0,15,39,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,6,1,0,1,3,0,0,0,0,8,19,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",4,1,1,2,4,0,8,2,0,19,46,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2332,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2336,        exponent--;,2,0,0,0,0,0,0,0,0,3,11,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",2,0,0,3,6,0,12,0,0,15,46,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2341,        if (exponent > -1023) {,8,1,1,1,3,0,0,0,0,16,23,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,8,6,1,1,3,1,0,0,0,20,23,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,2,1,0,1,3,0,0,0,0,3,22,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2355,        String str = y.toString();,2,0,0,1,2,0,4,2,0,8,26,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);",0,0,0,2,4,0,0,0,0,6,39,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,2,0,0,1,2,0,6,0,0,8,36,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2359,        if (mantissa == 4503599627370496L) {,0,0,0,1,3,0,0,0,0,4,36,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,        if (exponent <= -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2370,        while (exponent < -1023) {,2,1,0,1,3,0,0,0,0,4,26,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2375,        long bits = mantissa | ((exponent + 1023L) << 52);,12,4,0,2,4,1,6,0,0,23,50,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2376,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2378,        if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2382,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,661,        return field.getTwo();,0,0,0,1,2,1,4,0,0,4,22,5,0.05,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,54,414,        return two;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",0,0,0,1,2,1,0,0,0,4,101,4,0.33333,1,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,    return z;,0,0,0,0,0,1,0,0,0,1,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",10,0,0,1,3,2,6,4,0,22,47,2,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,  },0,0,0,0,1,0,0,0,0,1,1,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",4,0,0,1,2,3,0,4,0,12,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,62,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,  public static final Vector3D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,  private static final Vector3DFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,2,0,7,52,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,159,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.01266,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,56,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.01149,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,57,        nf.setMaximumFractionDigits(2);,2,1,0,1,2,0,4,0,0,7,31,3,0.01149,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,58,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,80,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,103,"                          final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,104,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,105,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,106,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,107,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,108,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,109,        trimmedSeparator = separator.trim();,8,2,0,1,2,0,14,0,0,25,36,3,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,110,        this.format      = format;,18,5,0,0,0,0,0,0,0,24,26,3,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,168,        return new Vector3DFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,74,5,0.01149,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,63,    public MathRuntimeException() {},0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,47,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,2,0,0,1,2,1,0,8,0,11,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,53,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,2,0,0,3,6,1,0,8,0,11,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,6,12,0,21,68,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,71,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,72,    },6,1,0,0,1,0,0,0,0,8,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,77,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,78,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,83,"        context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,88,        return context.get(key);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,93,        return context.keySet();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,103,"        return buildMessage(locale, "": "");",0,0,0,1,2,1,4,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,115,"        return buildMessage(locale, separator);",0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,121,        return getMessage(Locale.US);,6,0,0,1,2,1,2,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,127,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,139,        final StringBuilder sb = new StringBuilder();,4,0,0,1,2,1,0,4,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,140,        int count = 0;,6,1,1,0,0,0,0,0,0,11,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,141,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,142,        for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,143,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,145,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,147,            sb.append(fmt.format(args));,0,0,0,2,4,0,10,0,0,10,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,148,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,150,                sb.append(separator);,0,0,0,1,2,0,6,0,0,6,21,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,154,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,165,        serializeMessages(out);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,166,        serializeContext(out);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,178,        deSerializeMessages(in);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,179,        deSerializeContext(in);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,180,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,191,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,192,        out.writeInt(len);,4,0,0,1,2,3,6,0,0,14,18,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,194,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,195,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,197,            out.writeObject(pat);,4,0,0,1,2,0,6,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,198,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,199,            final int aLen = args.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,201,            out.writeInt(aLen);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,202,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,203,                if (args[j] instanceof Serializable) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,205,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,208,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,212,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,225,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,226,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,227,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,229,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,231,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,232,            msgPatterns.add(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,234,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,235,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,238,                args[j] = in.readObject();,0,0,1,2,4,0,4,0,0,9,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,240,            msgArguments.add(args);,0,0,0,1,2,0,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,242,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,253,        final int len = context.keySet().size();,2,0,0,2,4,0,0,0,0,3,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,254,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,255,        for (String key : context.keySet()) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,257,            out.writeObject(key);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,258,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,259,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,261,                out.writeObject(value);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,264,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,8,0,0,8,51,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,266,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,267,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,280,        final int len = in.readInt();,6,0,0,1,2,1,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,281,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,282,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,284,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,286,            final Object value = in.readObject();,0,0,0,1,2,0,4,0,0,4,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,287,"            context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,289,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,299,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,40,                              Class<?> type) {,8,1,0,0,2,0,0,2,0,12,16,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,41,"        addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",12,1,0,0,1,1,2,0,0,17,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,43,    },6,1,0,0,1,1,0,0,0,8,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,51,                              int position) {,2,0,0,0,2,0,0,0,0,2,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,52,"        addMessage(LocalizedFormats.CANNOT_PARSE,",0,0,0,0,1,0,0,0,0,1,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,38,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,50,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,51,"        addMessage(pattern, args);",0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,36,    private CompositeFormat() {},2,0,0,2,4,1,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,45,        return getDefaultNumberFormat(Locale.getDefault());,6,6,1,2,4,1,6,0,0,32,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,70,"        parseNextCharacter(source, pos);",0,0,0,1,2,0,6,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,71,        pos.setIndex(pos.getIndex() - 1);,2,2,0,2,4,0,8,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,72,    },10,2,0,0,1,0,0,0,0,13,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,83,         int index = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,84,         final int n = source.length();,2,0,0,1,2,1,4,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,85,         char ret = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,87,         if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,90,                 c = source.charAt(index++);,4,0,0,1,2,0,4,0,0,10,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,91,             } while (Character.isWhitespace(c) && index < n);,4,2,0,2,5,0,6,0,0,12,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,92,             pos.setIndex(index);,0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,94,             if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,95,                 ret = c;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,99,         return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,113,        Number ret = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,115,        StringBuilder sb = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,116,        sb.append('(');,0,0,0,1,3,0,4,0,0,5,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,117,        sb.append(value);,0,0,0,1,2,0,6,0,0,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,118,        sb.append(')');,0,0,0,1,3,0,4,0,0,5,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,120,        final int n = sb.length();,2,0,0,1,2,1,4,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,121,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,122,        final int endIndex = startIndex + n;,6,1,0,0,0,1,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,123,        if (endIndex < source.length()) {,2,1,0,2,5,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,124,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0,1,0,4,9,0,14,0,0,15,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,125,                ret = Double.valueOf(value);,2,0,0,1,2,0,6,0,0,9,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,126,                pos.setIndex(endIndex);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,130,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,145,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,146,"        Number number = format.parse(source, pos);",0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,147,        final int endIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,150,        if (startIndex == endIndex) {,4,1,0,1,3,0,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,152,            final double[] special = {,4,0,1,1,3,2,0,2,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,155,            for (int i = 0; i < special.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,156,"                number = parseNumber(source, special[i], pos);",2,0,1,2,4,0,6,0,0,13,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,157,                if (number != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,158,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,163,        return number;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,177,        final int startIndex = pos.getIndex();,4,1,1,1,2,1,4,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,178,        final int endIndex = startIndex + expected.length();,4,1,0,1,2,1,4,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,179,        if ((startIndex >= source.length()) ||,2,2,1,2,5,0,4,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,183,            pos.setIndex(startIndex);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,184,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,6,0,0,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,185,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,189,        pos.setIndex(endIndex);,18,0,0,1,2,0,12,0,0,31,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,190,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,213,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0,2,0,3,7,0,20,0,0,22,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,214,            toAppendTo.append('(');,0,0,0,1,3,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,215,            toAppendTo.append(value);,0,0,0,1,2,0,6,0,0,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,216,            toAppendTo.append(')');,6,1,0,1,3,0,4,0,0,13,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,218,"            format.format(value, toAppendTo, pos);",0,0,0,1,2,0,10,0,0,10,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,220,        return toAppendTo;,4,1,0,0,0,1,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,251,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0,0,0,2,4,0,0,0,0,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,8,4,1,2,4,3,0,0,0,20,66,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,73,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,76,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,85,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,0,0,2,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,105,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,118,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,128,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,134,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,137,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,0,0,0,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,143,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,146,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,167,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,208,        FACT[0] = 1.0;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,209,        for (i = 1; i < FACT.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,210,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,8,0,0,21,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,214,        double recip[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,217,        for (i = 0; i < 750; i++) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,218,"            expint(i, tmp);",2,2,1,1,2,0,16,0,0,29,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,222,            if (i != 0) {,4,2,0,1,3,0,0,0,0,6,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,224,"                splitReciprocal(tmp, recip);",0,0,1,1,2,0,10,0,0,12,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,225,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
