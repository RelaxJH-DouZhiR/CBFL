dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,125,                    r = e;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,126,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,129,                if (Math.abs(p) < Math.abs(0.5 * q * r) &&,4,4,0,2,5,0,10,0,0,18,42,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,139,                    e = ((x < m) ? b : a) - x;,12,2,0,2,4,0,0,0,0,15,26,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,140,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,144,                u = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));,14,3,0,5,10,0,6,0,0,25,59,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,145,"                double fu = computeObjectiveValue(f, u);",0,0,0,1,2,0,0,0,0,3,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,146,                if (goalType == GoalType.MAXIMIZE) {,0,0,0,1,3,0,0,0,0,4,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,151,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,152,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,153,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,155,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,157,                    v = w;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,158,                    fv = fw;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,159,                    w = x;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,160,                    fw = fx;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,161,                    x = u;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,162,                    fx = fu;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,164,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,165,                        a = u;,6,0,0,0,0,0,0,0,0,7,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,167,                        b = u;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,169,                    if ((fu <= fw) || (w == x)) {,8,3,0,3,7,0,0,0,0,11,29,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,170,                        v = w;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,171,                        fv = fw;,4,0,0,0,0,0,0,0,0,5,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,172,                        w = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,173,                        fw = fu;,4,0,0,0,0,0,0,0,0,5,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,174,                    } else if ((fu <= fv) || (v == x) || (v == w)) {,12,4,0,4,10,0,0,0,0,16,48,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,175,                        v = u;,6,3,1,0,0,1,0,0,0,15,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,176,                        fv = fu;,10,1,1,0,0,0,6,0,0,24,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,179,            } else { // termination,0,0,0,0,2,0,0,0,0,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,180,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",12,2,0,2,4,0,6,0,0,21,64,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,181,                return x;,2,0,0,0,0,1,0,0,0,2,9,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,184,            ++count;,4,0,0,0,0,0,0,4,0,9,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,185,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,63,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",8,0,0,1,2,0,0,0,0,9,61,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,64,        resultComputed = false;,2,0,0,0,0,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,65,        setMaxEvaluations(Integer.MAX_VALUE);,6,0,0,1,2,0,6,0,0,13,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,66,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,72,        if (!resultComputed) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,75,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,85,        checkResultComputed();,0,0,0,1,2,0,2,0,0,2,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,86,        return functionValue;,2,0,0,0,0,1,0,0,0,2,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,98,        this.result         = x;,4,1,0,0,0,0,0,0,0,6,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,99,        this.functionValue  = fx;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,100,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,101,        this.resultComputed = true;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,102,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,108,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,109,    },2,0,0,0,1,0,0,0,0,3,1,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,113,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,114,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,123,        return evaluations;,2,0,0,0,0,1,0,0,0,2,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,137,        if (++evaluations > maxEvaluations) {,4,1,0,1,3,0,8,0,0,14,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,141,        return f.value(point);,0,0,0,1,2,1,6,0,0,6,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,61,                                      final double defaultAbsoluteAccuracy) {,2,0,0,0,2,1,0,0,0,3,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,0,0,0,0,0,0,0,0,0,0,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,63,        this.defaultRelativeAccuracy = 1.0e-14;,2,0,0,0,0,0,0,0,0,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,0,0,0,0,0,0,0,0,0,0,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,65,        this.relativeAccuracy = defaultRelativeAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,4,0,0,0,0,0,0,0,0,5,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,67,        this.maximalIterationCount = defaultMaximalIterationCount;,0,0,0,0,0,0,0,0,0,0,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,68,        this.iterationCount = 0;,2,0,0,0,0,1,6,0,0,9,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,69,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,73,        return iterationCount;,2,0,0,0,0,1,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,93,        maximalIterationCount = count;,4,0,0,0,0,0,0,0,0,5,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,94,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,27,public enum GoalType implements Serializable {,2,0,0,0,1,1,0,2,0,5,46,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,80,                                             final RandomGenerator generator) {,0,0,0,0,2,0,0,0,0,2,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,81,        this.optimizer        = optimizer;,0,0,0,0,0,0,0,0,0,0,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,82,        this.totalIterations  = 0;,6,1,0,0,0,0,0,0,0,8,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,83,        this.starts           = starts;,10,1,0,0,0,0,0,0,0,13,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,84,        this.generator        = generator;,10,1,0,0,0,0,0,0,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,85,        this.optima           = null;,8,0,0,0,0,0,0,0,0,10,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,86,        setMaximalIterationCount(Integer.MAX_VALUE);,10,0,0,1,2,0,2,0,0,13,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,87,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,88,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,152,        this.maxIterations = count;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,153,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,157,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,158,    },0,0,0,0,1,0,8,0,0,8,1,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,193,        if (optima == null) {,2,0,0,1,3,0,4,0,0,7,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,219,        if (optimaValues == null) {,2,1,0,1,3,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,231,        optima           = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,232,        optimaValues     = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,233,        totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,234,        totalEvaluations = 0;,4,0,0,0,0,3,0,0,0,8,21,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,237,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,240,                optimizer.setMaximalIterationCount(maxIterations - totalIterations);,4,1,0,1,2,0,4,0,0,9,68,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,241,                optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);,4,1,0,1,2,0,4,0,0,9,63,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,242,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,243,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,244,"                optima[i]       = optimizer.optimize(f, goalType,",0,0,1,1,3,0,8,0,0,13,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,247,                optimaValues[i] = optimizer.getFunctionValue();,0,0,1,2,4,0,4,0,0,9,47,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,254,            },4,0,0,0,1,0,0,0,0,5,1,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,256,            totalIterations  += optimizer.getIterationCount();,2,0,0,1,2,0,4,0,0,7,50,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,257,            totalEvaluations += optimizer.getEvaluations();,0,0,0,1,2,0,0,0,0,3,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,262,        int lastNaN = optima.length;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,263,        for (int i = 0; i < lastNaN; ++i) {,8,1,0,1,3,0,0,0,0,10,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,264,            if (Double.isNaN(optima[i])) {,0,0,1,3,7,0,4,0,0,8,30,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,272,        double currX = optima[0];,8,1,1,1,2,0,0,0,0,12,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,273,        double currY = optimaValues[0];,2,0,1,1,2,0,0,0,0,4,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,274,        for (int j = 1; j < lastNaN; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,275,            final double prevY = currY;,4,0,0,0,0,1,0,0,0,5,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,276,            currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,277,            currY = optimaValues[j];,2,0,1,1,2,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,278,            if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {,10,3,0,3,7,0,0,0,0,13,56,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,301,        if (Double.isNaN(optima[0])) {,0,0,1,3,7,0,4,0,0,6,30,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,308,        return optima[0];,0,0,1,1,2,1,0,0,0,2,17,5,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,2,0,0,0,1,1,0,4,0,7,75,1,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,626,"        return new ParseException(null, offset) {",8,0,0,1,3,4,4,4,0,20,41,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,634,"                return buildMessage(Locale.US, pattern, arguments);",6,0,0,1,2,4,14,0,0,23,51,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,640,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,64,"        this(new DummyLocalizable(pattern), arguments);",10,0,0,2,4,3,0,2,0,15,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",10,0,0,1,3,4,0,4,0,18,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,76,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,0,0,0,9,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,88,        super(rootCause);,16,5,0,1,2,0,0,0,0,21,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,91,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,107,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,121,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,122,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,124,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,146,        return pattern.getSourceString();,0,0,0,1,2,1,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,155,        return pattern;,4,0,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,163,        return arguments.clone();,4,0,1,1,2,3,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,173,        if (pattern != null) {,4,1,0,1,3,0,0,0,0,6,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,174,"            return buildMessage(locale, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,176,"        return """";",2,0,0,0,0,3,0,0,0,4,10,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,182,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,188,        return getMessage(Locale.getDefault());,4,1,0,2,4,1,6,0,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,196,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,206,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,207,"            PrintWriter pw = new PrintWriter(out, false);",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,208,            printStackTrace(pw);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,210,            pw.flush();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,211,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,238,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",0,0,0,2,4,1,0,0,0,7,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,1,4,2,0,11,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,326,        return new EOFException() {,0,0,0,1,3,1,0,2,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,6,0,0,2,4,0,4,4,0,15,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,359,        ioe.initCause(rootCause);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,360,        return ioe;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",0,0,0,2,4,1,0,0,0,7,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,416,        iae.initCause(rootCause);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,417,        return iae;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,444,        return new IllegalStateException() {,0,0,0,1,3,1,0,2,0,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,488,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,2,0,2,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,78,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,532,        return new NoSuchElementException() {,0,0,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,563,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,1,4,4,0,12,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,576,        return new NullPointerException() {,4,2,0,1,3,1,12,2,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,610,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",0,0,0,2,4,1,0,0,0,7,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,626,"        return new ParseException(null, offset) {",0,0,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,652,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",0,0,0,0,0,0,0,0,0,0,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,654,        return new RuntimeException() {,0,0,0,1,3,1,0,2,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,39,public class MathRuntimeException extends RuntimeException {,2,0,0,0,1,1,0,2,0,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,444,        return new IllegalStateException() {,0,0,0,1,3,1,0,2,0,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,452,"                return buildMessage(Locale.US, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,395,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,654,        return new RuntimeException() {,0,0,0,1,3,1,0,2,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,662,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",8,0,0,1,2,1,4,0,0,12,74,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,668,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",4,0,0,2,4,1,8,0,0,12,84,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,576,        return new NullPointerException() {,0,0,0,1,3,1,0,2,0,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,584,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,590,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,532,        return new NoSuchElementException() {,0,0,0,1,3,1,0,2,0,2,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,540,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,488,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,496,"                return buildMessage(Locale.US, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,326,        return new EOFException() {,0,0,0,1,3,1,0,2,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,334,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,340,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,2,0,2,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,290,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,296,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,238,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,246,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,252,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,50,"        return optimize(f, goalType, min, max);",0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,94,            fx = -fx;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,131,                    d = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,132,                    u = x + d;,8,1,0,0,0,0,0,0,0,11,10,0,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,135,                    if (((u - a) < t2) || ((b - u) < t2)) {,12,5,0,5,11,0,0,0,0,17,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,136,                        d = (x < m) ? tol : -tol;,10,1,0,1,2,0,0,0,0,13,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,147,                    fu = -fu;,4,0,0,0,0,0,0,0,0,6,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,187,        throw new MaxIterationsExceededException(maximalIterationCount);,2,0,0,1,2,0,0,2,0,4,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,73,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_RESULT_AVAILABLE);,4,0,0,1,2,0,4,0,0,8,93,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,79,        checkResultComputed();,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,80,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,118,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,138,"            throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),",2,0,0,1,3,0,0,4,0,6,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,78,        absoluteAccuracy = accuracy;,4,0,0,0,0,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,83,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,88,        absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,98,        return maximalIterationCount;,4,0,0,0,0,1,4,0,0,8,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,103,        maximalIterationCount = defaultMaximalIterationCount;,4,0,1,0,0,0,4,0,0,11,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,104,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,108,        relativeAccuracy = accuracy;,4,0,0,0,0,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,113,        return relativeAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,118,        relativeAccuracy = defaultRelativeAccuracy;,4,0,0,0,0,0,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,119,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,45,"        super(LocalizedFormats.MAX_EVALUATIONS_EXCEEDED, maxEvaluations);",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,46,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,60,"        this(maxEvaluations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,73,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,74,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,81,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,4,0,0,1,2,0,0,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,51,"        this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,52,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,62,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,63,    },4,1,0,0,1,0,10,2,0,20,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,70,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,84,"        this(cause, new DummyLocalizable(pattern), arguments);",10,0,0,2,4,0,6,2,0,18,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,85,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,96,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,97,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,57,    public MathException() {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,2,0,0,0,0,1,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,59,"        this.arguments = new Object[] { """" };",2,0,0,2,4,0,0,2,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,72,"      this(new DummyLocalizable(pattern), arguments);",0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,83,"    public MathException(Localizable pattern, Object ... arguments) {",6,0,0,1,3,1,0,4,0,11,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,84,      this.pattern   = pattern;,6,0,0,0,0,0,0,2,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,96,        super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,99,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,128,      super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,129,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,131,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,141,        return pattern.getSourceString();,0,0,0,1,2,1,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,150,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,159,        return arguments.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,170,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,173,"        return """";",0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,179,        return getMessage(Locale.US);,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,193,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,203,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,204,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,205,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,207,            pw.flush();,0,0,0,1,2,0,4,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,208,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,209,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,48,        this.argument = new double[] { argument };,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",6,0,0,2,4,0,0,2,0,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,60,        this.argument = argument.clone();,6,0,0,1,2,0,10,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,73,"        this(argument, new DummyLocalizable(pattern), argument);",0,0,0,2,4,0,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,86,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,87,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,100,"        this(argument, new DummyLocalizable(pattern), argument);",6,0,0,2,4,0,6,2,0,14,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,101,    },6,1,1,0,1,0,0,0,0,15,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,113,"        super(pattern, arguments);",4,0,1,1,2,0,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,114,        this.argument = argument.clone();,10,1,0,1,2,0,4,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,126,        this.argument = new double[] { argument };,8,0,0,2,4,0,8,2,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,137,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,138,        this.argument = argument.clone();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,139,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,153,"        this(cause, argument, new DummyLocalizable(pattern), argument);",8,0,0,2,4,0,0,2,0,10,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,154,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,168,"        super(cause, pattern, arguments);",8,1,0,1,2,0,0,0,0,9,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,184,"        this(cause, argument, new DummyLocalizable(pattern), argument);",8,0,0,2,4,0,0,2,0,10,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,199,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,209,        return argument.clone();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,46,        this.maxIterations = maxIterations;,8,0,0,0,0,0,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,73,"        super(pattern, arguments);",8,1,0,1,2,0,0,0,0,9,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,74,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,81,        return maxIterations;,0,0,0,0,0,1,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,46,"        this(new DummyLocalizable(specifier), parts);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,57,"        super(specifier, parts);",4,0,0,1,2,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,65,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,92,        return optimizer.getFunctionValue();,0,0,0,1,2,1,4,0,0,4,36,5,0.0,1,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,        return optimizer.getResult();,0,0,0,1,2,1,4,0,0,4,29,5,0.0,1,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,102,        return optimizer.getAbsoluteAccuracy();,10,1,0,1,2,1,4,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,107,        return totalIterations;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,112,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,117,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,122,        return totalEvaluations;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,127,        return optimizer.getRelativeAccuracy();,0,0,0,1,2,1,4,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,132,        optimizer.resetAbsoluteAccuracy();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,137,        optimizer.resetMaximalIterationCount();,0,0,0,1,2,0,4,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,138,    },2,1,1,0,1,0,0,0,0,8,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,142,        optimizer.resetRelativeAccuracy();,0,0,0,1,2,0,4,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,147,        optimizer.setAbsoluteAccuracy(accuracy);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,162,        optimizer.setRelativeAccuracy(accuracy);,0,0,0,1,2,0,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,163,    },6,1,0,0,1,0,0,0,0,8,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,194,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,2,1,0,1,2,0,0,0,0,3,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,196,        return optima.clone();,2,0,0,1,2,1,4,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,220,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,4,0,0,1,2,0,4,0,0,8,97,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,222,        return optimaValues.clone();,0,1,0,1,2,1,8,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,248,            } catch (FunctionEvaluationException fee) {,2,0,0,1,4,0,0,2,0,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,249,                optima[i]       = Double.NaN;,4,0,1,1,2,0,0,0,0,9,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,250,                optimaValues[i] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,251,            } catch (ConvergenceException ce) {,2,0,0,1,4,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,252,                optima[i]       = Double.NaN;,4,0,1,1,2,0,0,0,0,9,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,253,                optimaValues[i] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,265,                optima[i] = optima[--lastNaN];,2,0,1,2,4,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,266,                optima[lastNaN + 1] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,267,                optimaValues[i] = optimaValues[--lastNaN];,2,0,1,2,4,0,0,0,0,10,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,268,                optimaValues[lastNaN + 1] = Double.NaN;,6,1,1,1,2,0,0,0,0,10,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,280,                int i = j - 1;,4,1,0,0,0,0,0,0,0,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,281,                double mIX = optima[i];,2,0,1,1,2,0,0,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,282,                double mIY = optimaValues[i];,6,0,1,1,2,0,4,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,283,                while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {,2,1,0,5,11,0,0,0,0,4,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,284,                    optima[i + 1]       = mIX;,4,1,1,1,2,0,0,0,0,8,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,285,                    optimaValues[i + 1] = mIY;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,286,                    if (i-- != 0) {,2,1,0,1,3,0,0,0,0,4,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,287,                        mIX = optima[i];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,288,                        mIY = optimaValues[i];,2,0,1,1,2,0,0,0,0,7,22,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,290,                        mIX = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,291,                        mIY = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,294,                optima[i + 1]       = currX;,8,2,1,1,2,0,0,0,0,16,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,295,                optimaValues[i + 1] = currY;,4,1,1,1,2,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,296,                currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,297,                currY = optimaValues[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,302,            throw new OptimizationException(,0,0,0,0,1,0,0,2,0,2,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,316,"        return optimize(f, goalType, min, max);",0,0,0,1,2,1,10,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,35,        setSeed((long) seed);,2,0,0,2,4,0,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,36,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,41,        final long prime = 4294967291l;,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,43,        long combined = 0l;,4,2,1,0,0,0,0,0,0,11,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,44,        for (int s : seed) {,4,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,45,            combined = combined * prime + s;,8,2,0,0,0,0,0,0,0,11,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,47,        setSeed(combined);,0,0,0,1,2,0,4,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,305,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,306,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,307,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,0,0,4,8,0,0,0,0,5,94,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",18,25,0,1,2,0,0,0,0,45,95,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",6,0,0,3,6,0,0,0,0,9,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,0,0,4,8,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,4,0,0,7,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",12,1,0,2,4,0,0,0,0,15,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",4,0,1,2,4,0,0,0,0,8,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,6,0,0,9,95,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,78,"    CONVERGENCE_FAILED(""convergence failed""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",3,0,0,3,6,1,0,0,0,5,109,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,6,0,0,9,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,82,"    DIMENSIONS_MISMATCH_2x2(""dimensions mismatch: got {0}x{1} but expected {2}x{3}""),",2,0,0,5,10,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,83,"    DIMENSIONS_MISMATCH_SIMPLE(""dimensions mismatch {0} != {1}""), /* keep */",2,0,0,3,6,0,8,0,0,11,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,84,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,85,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,86,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,87,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,88,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,89,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,90,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",6,0,0,1,2,0,0,0,0,7,77,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,91,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0,0,0,4,8,0,0,0,0,12,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,92,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0,0,0,3,6,0,0,0,0,9,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,93,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,94,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,95,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,96,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,4,0,0,7,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,97,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",8,2,0,12,24,0,0,0,0,12,175,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,98,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,99,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",10,1,0,2,4,0,0,0,0,14,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,100,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,101,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,102,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",4,0,1,5,10,0,0,2,0,14,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,103,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,104,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,105,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,106,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,107,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,108,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,109,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,110,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",4,0,1,3,6,1,0,0,0,10,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,111,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,112,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,113,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,114,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,115,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,116,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,117,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,118,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,119,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",10,1,0,2,4,0,0,0,0,13,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,120,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,121,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,122,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,123,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,124,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,125,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,126,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,127,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,128,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,129,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",6,0,0,26,52,0,0,0,0,8,165,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,130,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",6,0,0,1,2,0,0,0,0,8,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,131,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,132,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,133,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,134,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",12,1,0,5,10,0,0,0,0,15,111,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,135,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,136,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",10,3,0,1,2,0,0,0,0,14,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,137,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,138,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,139,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",6,1,0,4,8,0,0,0,0,8,132,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,140,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,141,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,142,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,143,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",4,0,1,2,4,0,0,0,0,7,92,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,144,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0,0,0,2,4,0,0,0,0,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,145,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0,0,0,5,10,0,0,0,0,15,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,146,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,147,"    NEGATIVE_LENGTH(""length cannot be negative ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,148,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,149,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",8,2,0,3,6,0,0,0,0,11,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,150,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",2,0,0,2,4,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,151,"    NEGATIVE_START_POSITION(""start position cannot be negative ({0})""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,152,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,153,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,154,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,1,10,0,0,21,81,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,155,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,0,0,0,5,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,156,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,157,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",8,3,0,3,6,1,4,0,0,17,85,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,158,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",8,0,0,3,6,0,4,0,0,14,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,159,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,160,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,161,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",0,0,0,5,10,0,0,0,0,15,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,162,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",4,0,0,6,12,0,0,0,0,5,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,163,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,164,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",4,0,0,5,10,0,0,0,0,5,113,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,165,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0,0,0,3,6,0,0,0,0,9,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,166,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",8,0,0,6,12,0,10,0,0,20,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,167,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,168,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,169,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,170,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,171,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,172,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,173,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,174,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,175,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,176,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,177,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,8,0,0,11,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,178,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,179,"    MEAN(""mean ({0})""), /* keep */",10,2,0,3,6,1,0,0,0,14,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,180,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",14,7,0,2,4,0,0,0,0,23,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,181,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,182,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0,0,0,3,6,0,0,0,0,9,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,183,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,184,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,185,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,186,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,2,0,8,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,187,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,188,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,189,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,190,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,191,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",8,3,1,3,6,0,0,0,0,17,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,192,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,193,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,194,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,195,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,10,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,196,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,197,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,198,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",4,0,0,6,12,0,2,2,0,9,107,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,199,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",0,0,0,1,2,0,0,2,0,2,79,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,200,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",4,0,0,6,12,0,0,0,0,5,104,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,201,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,202,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,203,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,204,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,205,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""),",0,0,0,2,4,0,0,0,0,6,88,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,206,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,207,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",8,0,0,4,8,1,0,4,0,14,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,208,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,209,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",6,0,0,1,2,0,0,0,0,9,45,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,210,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,211,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,212,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,1,0,6,12,1,2,0,0,11,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,213,"    NULL_COVARIANCE_MATRIX(""covariance matrix is null""),",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,214,"    NULL_DENOMINATOR(""denominator is null""),",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,215,"    NULL_DENOMINATOR_FORMAT(""denominator format can not be null""),",0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,216,"    NULL_FRACTION(""null fraction""),",2,0,0,1,2,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,217,"    NULL_FUNCTION(""function is null""),",4,0,0,1,2,1,0,0,0,6,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,218,"    NULL_IMAGINARY_FORMAT(""null imaginary format""),",4,0,0,1,2,0,8,0,0,14,47,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,219,"    NULL_INPUT_ARRAY(""input array is null""),",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,220,"    NULL_NUMERATOR(""numerator is null""),",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,221,"    NULL_NUMERATOR_FORMAT(""numerator format can not be null""),",6,0,0,1,2,0,0,0,0,8,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,222,"    NULL_OBJECT_TRANSFORMATION(""Conversion Exception in Transformation, Object is null""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,223,"    NULL_REAL_FORMAT(""null real format""),",0,0,0,1,2,0,0,0,0,1,37,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,224,"    NULL_WHOLE_FORMAT(""whole format can not be null""),",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,225,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,226,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,227,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,228,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",10,2,0,4,8,0,0,0,0,13,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,229,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,230,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0,0,0,2,4,0,0,0,0,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,231,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,232,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,233,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,234,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",10,2,0,3,6,0,6,0,0,20,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,235,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,236,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,237,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,238,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,239,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0,0,0,3,6,0,0,0,0,9,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,240,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,241,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",8,0,0,3,6,0,0,0,0,9,99,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,242,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,243,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,244,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",0,0,0,4,8,0,0,0,0,12,109,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,245,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",0,0,0,4,8,0,0,0,0,12,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,246,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,247,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,248,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,249,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,250,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,251,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,252,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,253,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,254,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,255,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,256,"    SINGULAR_MATRIX(""matrix is singular""),",11,2,0,1,2,0,4,0,0,18,38,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,257,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",4,1,1,1,2,0,0,0,0,10,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,258,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,259,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,260,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",0,0,0,4,8,0,0,0,0,12,174,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,261,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,9,136,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,262,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,263,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,264,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",6,0,0,3,6,0,0,0,0,8,156,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,265,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,266,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,267,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",4,1,0,1,2,0,0,0,0,6,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,268,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,269,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,270,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",0,0,0,2,4,0,0,0,0,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,271,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,272,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,273,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,274,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,275,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,276,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,277,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",6,2,0,2,4,1,10,0,0,20,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,278,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,279,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,280,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,281,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,282,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",10,1,0,3,6,0,4,2,0,18,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,283,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,284,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,285,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,286,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",6,4,0,3,6,0,0,0,0,11,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,287,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,288,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,289,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,290,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,291,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,292,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,293,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector"");",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,40,public enum LocalizedFormats implements Localizable {,10,2,0,0,1,1,0,2,0,15,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,311,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,317,            ResourceBundle bundle =,4,0,1,0,0,0,0,2,0,11,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,319,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,321,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,326,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,324,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,2,4,0,8,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,330,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,1,0,0,0,0,12,0,0,16,10,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",6,0,0,1,2,0,16,0,0,23,29,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,12,1,0,1,3,0,0,0,0,14,38,5,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,0,0,0,0,0,0,0,0,0,0,9,4,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,            for (int j = 0; j < solvedCols; ++j) {,14,2,0,1,3,0,0,0,0,17,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,516,                int pj = permutation[j];,8,0,1,1,2,1,0,0,0,13,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,517,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,518,                for (int i = 0; i < j; ++i) {,8,1,0,1,3,0,0,0,0,10,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,519,                    sum += jacobian[i][pj] * work1[permutation[i]];,4,1,1,4,8,0,8,0,0,27,47,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,521,                double s = (work1[pj] - sum) / diagR[pj];,4,2,1,3,6,0,0,0,0,14,41,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,522,                work1[pj] = s;,8,1,1,1,2,0,0,0,0,15,14,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,523,                sum2 += s * s;,6,1,0,0,0,0,0,0,0,8,14,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,525,            parl = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,11,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,585,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,586,                int pj = permutation[j];,8,1,0,1,2,0,0,0,0,10,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,587,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,0,0,0,3,6,0,0,0,0,9,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,589,            for (int j = 0; j < solvedCols; ++j) {,10,2,1,1,3,0,0,0,0,22,38,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,590,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,591,                work1[pj] /= work2[j];,0,0,1,2,4,0,0,0,0,9,22,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,592,                double tmp = work1[pj];,2,0,1,1,2,0,0,0,0,6,23,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,593,                for (int i = j + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,0,0,0,13,42,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,594,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,2,1,1,4,8,0,0,0,0,16,47,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,597,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,598,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,599,                double s = work1[permutation[j]];,2,0,1,2,4,0,0,0,0,8,33,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,600,                sum2 += s * s;,0,0,0,0,0,0,0,0,0,0,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,602,            double correction = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,10,40,7,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,605,            if (fp > 0) {,4,2,0,1,3,0,4,0,0,10,13,1,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,612,"            lmPar = Math.max(parl, lmPar + correction);",6,1,0,1,2,0,6,0,0,14,43,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,402,                    cost = previousCost;,4,0,0,0,0,0,0,0,0,5,20,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,403,                    for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,404,                        int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,405,                        point[pj] = oldX[pj];,8,1,1,2,4,0,0,0,0,19,21,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,407,                    tmpVec    = residuals;,0,0,0,0,0,0,0,0,0,0,22,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,408,                    residuals = oldRes;,0,0,0,0,0,0,0,0,0,0,19,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,409,                    oldRes    = tmpVec;,4,0,0,0,0,0,0,0,0,5,19,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,508,        double parl = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,509,        if (rank == solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,529,        sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,530,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,531,            int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,532,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,533,            for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,0,0,0,10,30,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,534,                sum += jacobian[i][pj] * qy[i];,2,1,1,3,6,0,0,0,0,14,31,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,536,            sum /= diag[pj];,2,0,1,1,2,0,0,0,0,7,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,537,            sum2 += sum * sum;,12,1,0,0,0,0,0,0,0,14,18,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,539,        double gNorm = Math.sqrt(sum2);,4,0,0,1,2,0,6,0,0,10,31,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,540,        double paru = gNorm / delta;,6,1,0,0,0,0,0,0,0,7,28,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,541,        if (paru == 0) {,4,1,0,1,3,0,0,0,0,5,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,548,"        lmPar = Math.min(paru, Math.max(lmPar, parl));",0,0,0,2,4,0,0,0,0,6,46,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,549,        if (lmPar == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,553,        for (int countdown = 10; countdown >= 0; --countdown) {,16,2,0,1,3,0,0,0,0,20,55,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,556,            if (lmPar == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,559,            double sPar = Math.sqrt(lmPar);,2,0,0,1,2,0,6,0,0,8,31,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,560,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,2,0,13,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,561,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,562,                work1[pj] = sPar * diag[pj];,0,0,0,2,4,0,0,0,0,6,28,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,564,"            determineLMDirection(qy, work1, work2, work3);",0,0,0,1,2,0,10,0,0,10,46,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,566,            dxNorm = 0;,4,0,0,0,0,0,0,0,0,6,11,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,567,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,568,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,569,                double s = diag[pj] * lmDir[pj];,2,1,1,2,4,0,0,0,0,11,32,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,570,                work3[pj] = s;,6,0,1,1,2,0,0,0,0,12,14,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,571,                dxNorm += s * s;,6,1,0,0,0,0,0,0,0,8,16,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,573,            dxNorm = Math.sqrt(dxNorm);,0,0,0,1,2,0,0,0,0,3,27,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,574,            double previousFP = fp;,4,0,0,0,0,0,0,0,0,4,23,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,575,            fp = dxNorm - delta;,22,2,0,0,0,0,0,0,0,26,20,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,579,            if ((Math.abs(fp) <= 0.1 * delta) ||,4,4,0,2,5,0,6,0,0,14,36,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,581,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,642,        for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,643,            int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,644,            for (int i = j + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,4,0,0,17,42,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,645,                jacobian[i][pj] = jacobian[j][permutation[i]];,6,1,1,5,10,0,0,4,0,28,46,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,647,            lmDir[j] = diagR[pj];,0,0,1,2,4,0,0,0,0,9,21,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,648,            work[j]  = qy[j];,0,0,0,2,4,0,0,0,0,6,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,652,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,656,            int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,657,            double dpj = diag[pj];,2,0,1,1,2,0,0,0,0,6,22,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,658,            if (dpj != 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,659,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",16,5,0,1,2,0,10,0,0,32,45,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,661,            lmDiag[j] = dpj;,2,0,1,1,2,0,0,0,0,7,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,666,            double qtbpj = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,667,            for (int k = j; k < solvedCols; ++k) {,10,1,0,1,3,0,0,0,0,12,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,668,                int pk = permutation[k];,6,3,1,1,2,0,6,0,0,19,24,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,672,                if (lmDiag[k] != 0) {,0,1,1,2,5,0,0,0,0,5,21,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,676,                    double rkk = jacobian[k][pk];,0,0,0,2,4,0,0,0,0,6,29,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,677,                    if (Math.abs(rkk) < Math.abs(lmDiag[k])) {,0,1,1,4,9,0,10,0,0,15,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,678,                        final double cotan = rkk / lmDiag[k];,0,0,0,1,2,0,0,0,0,3,37,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,679,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,6,3,0,1,2,0,4,0,0,14,45,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,680,                        cos   = sin * cotan;,0,0,0,0,0,0,0,0,0,0,20,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,681,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,682,                        final double tan = lmDiag[k] / rkk;,4,1,1,1,2,1,0,0,0,10,35,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,683,                        cos = 1.0 / Math.sqrt(1.0 + tan * tan);,6,3,0,1,2,0,4,0,0,14,39,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,684,                        sin = cos * tan;,0,0,0,0,0,0,0,0,0,0,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,689,                    jacobian[k][pk] = cos * rkk + sin * lmDiag[k];,6,3,1,3,6,0,0,0,0,20,46,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,690,                    final double temp = cos * work[k] + sin * qtbpj;,0,0,0,1,2,0,0,0,0,3,48,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,691,                    qtbpj = -sin * work[k] + cos * qtbpj;,8,3,1,1,2,0,0,0,0,17,37,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,692,                    work[k] = temp;,2,1,1,1,2,0,0,0,0,21,15,1,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,695,                    for (int i = k + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,0,0,0,13,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,696,                        double rik = jacobian[i][pk];,2,0,1,2,4,0,0,0,0,8,29,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,697,                        final double temp2 = cos * rik + sin * lmDiag[i];,8,3,1,1,2,1,0,0,0,16,49,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,698,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,12,6,1,2,4,0,8,0,0,36,41,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,699,                        jacobian[i][pk] = temp2;,2,0,1,2,4,0,0,0,0,9,24,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,707,            lmDiag[j] = jacobian[j][permutation[j]];,6,4,0,4,8,0,0,0,0,10,40,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,708,            jacobian[j][permutation[j]] = lmDir[j];,0,1,1,4,8,0,14,0,0,28,39,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,714,        int nSing = solvedCols;,6,1,0,0,0,0,4,0,0,12,23,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,715,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,716,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,6,4,1,4,9,0,12,0,0,27,48,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,719,            if (nSing < solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,723,        if (nSing > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,724,            for (int j = nSing - 1; j >= 0; --j) {,8,2,0,1,3,0,0,0,0,11,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,725,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,726,                double sum = 0;,8,0,0,0,0,0,0,0,0,9,15,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,727,                for (int i = j + 1; i < nSing; ++i) {,10,2,0,1,3,0,0,0,0,13,37,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,728,                    sum += jacobian[i][pj] * work[i];,10,2,1,3,6,1,0,0,0,29,33,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,730,                work[j] = (work[j] - sum) / lmDiag[j];,4,2,1,4,8,0,0,0,0,26,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,735,        for (int j = 0; j < lmDir.length; ++j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,736,            lmDir[permutation[j]] = work[j];,0,0,0,3,6,0,0,0,0,9,32,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,739,    },0,0,0,0,1,0,0,0,0,1,1,4,0.22222,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,51,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,2,0,1,4,8,0,0,0,0,6,42,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,            for (int j = 0; j < nVars; j++) {,10,1,0,1,3,0,0,0,0,12,33,3,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,                    out[i][j] = 0d;,2,0,1,2,4,0,0,0,0,9,15,3,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));,10,5,0,4,8,0,8,0,0,23,59,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,2,1,4,8,0,6,0,0,15,61,10,0.8,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,8,0,0,1,2,1,0,2,0,10,32,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);",2,0,0,1,2,0,4,0,0,6,23,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,        double q1 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,0,0,0,4,22,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,12,3,0,0,0,0,0,0,0,15,28,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,2,0,0,0,0,0,0,0,0,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,            if (infinite) {,2,0,0,1,3,0,0,0,0,2,15,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,6,1,0,0,0,0,0,0,0,7,19,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,            if (Double.isNaN(r)) {,0,0,0,2,5,0,0,0,0,7,22,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,6,2,0,1,2,0,4,0,0,13,38,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,            c = p2 / q2;,6,1,0,0,0,0,0,0,0,8,12,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,            q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,10,2,0,1,3,1,0,0,0,13,25,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,        return c;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,128,        if (x == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,2,0,0,0,0,0,0,0,0,2,10,7,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,4,2,0,0,0,0,0,0,0,7,20,8,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,41,    private static final double[] LANCZOS =,2,0,0,1,2,3,0,0,0,5,39,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,97,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,4,1,0,0,0,0,0,0,0,5,25,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,102,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,104,                sum = sum + (LANCZOS[i] / (x + i));,0,0,0,3,6,0,0,0,0,9,35,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,113,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",28,11,0,1,2,2,10,0,0,50,68,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,121,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,2,2,0,4,9,0,18,0,0,22,71,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,0,0,0,3,8,0,0,0,0,11,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,54,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,151,            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -,8,7,0,4,9,0,14,0,0,30,60,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,4,3,0,5,11,0,12,0,0,19,69,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,2,2,0,2,4,0,12,0,0,17,45,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,4,0,1,1,3,0,0,4,0,15,54,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,0,0,0,1,3,0,0,0,0,4,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,135,                        m = n / 2.0;,4,1,0,0,0,0,0,0,0,6,12,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,136,                        ret = (m * (b - m) * x) /,10,3,0,2,4,0,0,0,0,14,25,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,139,                        m = (n - 1.0) / 2.0;,4,2,0,1,2,0,0,0,0,7,20,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,140,                        ret = -((a + m) * (a + b + m) * x) /,14,4,0,3,6,0,0,0,0,20,36,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,143,                    return ret;,6,4,0,0,0,1,4,0,0,14,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,148,                    return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1238,            final int iBlock = row    / BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1239,            final int jBlock = column / BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0,0,0,2,4,0,0,0,0,6,72,4,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,6,2,1,2,4,1,0,0,0,12,49,7,0.57143,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,2,0,0,1,2,0,4,0,0,7,32,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,80,        correlationMatrix = computeCorrelationMatrix(matrix);,8,1,0,1,2,0,4,0,0,15,53,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,4,0,0,1,2,0,8,2,0,14,40,3,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,188,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",0,0,0,1,2,0,0,0,0,3,57,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",2,0,0,3,6,0,14,0,0,16,68,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,192,"              outMatrix.setEntry(i, j, corr);",0,0,0,1,2,0,0,0,0,3,31,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,193,"              outMatrix.setEntry(j, i, corr);",0,0,0,1,2,0,10,0,0,10,31,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,195,"            outMatrix.setEntry(i, i, 1d);",0,0,0,1,2,0,8,0,0,8,29,7,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,280,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,4,1,0,0,0,1,0,0,0,5,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1255,            final int iBlock = row    / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,8,4,0,2,4,1,4,0,0,17,72,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,8,2,1,2,4,0,0,0,0,15,50,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1264,        },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },4,2,1,0,1,0,0,0,0,8,1,7,0.44444,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,10,3,0,1,2,1,0,0,0,13,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,166,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,208,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,79,        clearResult();,0,0,0,1,2,0,2,0,0,2,14,5,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,80,"        verifyInterval(min,max);",0,0,0,1,2,0,6,0,0,6,24,5,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,85,        int i = 0;,10,1,0,0,0,0,0,0,0,12,10,3,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,86,        while (i < maximalIterationCount) {,4,1,0,1,3,0,0,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,87,"            m = UnivariateRealSolverUtils.midpoint(min, max);",0,0,0,1,2,0,0,0,0,3,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,88,           fmin = f.value(min);,2,0,0,1,2,0,6,0,0,9,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,52,"        super(100, 1E-6);",0,0,0,1,2,0,0,0,0,3,17,4,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,0,0,0,0,0,0,0,0,0,1,17,4,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,2,0,0,0,0,0,0,0,0,4,17,14,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,8,3,0,3,7,0,0,0,0,11,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,      initialStep = initialStepSize;,4,0,0,0,0,0,0,0,0,5,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,          filteredH = maxStep;,4,0,0,0,0,0,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,12,2,0,17,41,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,230,    },0,0,0,0,1,0,8,0,0,8,1,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,102,        clearResult();,2,0,1,1,2,1,0,0,0,5,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",2,0,0,1,2,0,8,0,0,10,34,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,106,        double yInitial = f.value(initial);,2,0,0,1,2,0,6,0,0,8,35,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,113,        double yMin = f.value(min);,2,0,0,1,2,0,6,0,0,8,27,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,180,            if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,183,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,72,83,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,247,"                setResult(x1, i);",0,0,0,1,2,0,6,0,0,6,17,9,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,248,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,0,0,0,2,4,1,0,0,0,7,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,4,0,0,6,41,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,230,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,        clearResult();,0,0,0,1,2,0,0,0,0,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,103,"        verifySequence(min, initial, max);",4,1,1,1,2,0,8,0,0,15,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,106,        double yInitial = f.value(initial);,2,0,0,1,2,0,6,0,0,8,35,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,113,        double yMin = f.value(min);,2,0,0,1,2,0,6,0,0,8,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,12,3,0,1,3,0,0,0,0,16,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,125,        double yMax = f.value(max);,2,0,0,1,2,0,6,0,0,8,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,132,        if (yInitial * yMax < 0) {,0,0,0,1,3,0,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,184,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,10,1.0,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,176,            if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,179,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,286,                    delta = 0.5 * dx;,4,1,0,0,0,0,0,0,0,6,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,287,                    oldDelta = delta;,4,0,0,0,0,0,0,0,0,5,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,          filteredH = maxStep;,0,0,0,0,0,0,0,0,0,0,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,                    final double factor = computeStepGrowShrinkFactor(error);,0,0,0,1,2,0,0,0,0,3,57,4,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",6,1,0,1,2,0,6,0,0,15,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,11,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,                        final double dt = manager.getEventTime() - stepStart;,8,1,0,1,2,1,4,0,0,14,53,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,                        if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,1,0,3,7,0,12,0,0,13,42,12,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,                            hNew = dt;,4,0,0,0,0,0,0,0,0,5,10,14,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,4,1,0,0,2,0,0,0,0,5,8,5,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,        return stopTime;,6,1,1,0,0,1,0,0,0,10,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,4,0,0,1,2,1,4,0,0,8,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,4,0,0,1,2,2,4,0,0,10,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,0,0,0,1,2,0,6,0,0,6,34,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,0,0,0,0,0,0,0,0,0,0,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,        interpolator.rescale(hNew);,0,0,0,1,2,0,8,0,0,8,27,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,        boolean lastStep = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,0,0,1,3,0,0,0,0,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,0,0,0,1,2,0,4,0,0,4,21,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,                stepSize = hNew;,4,0,0,0,0,0,0,0,0,5,16,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,0,0,0,1,2,0,0,0,0,3,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",4,0,0,2,4,0,10,0,0,14,77,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,1,2,0,8,0,0,8,40,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,                final double[] predictedScaled = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,55,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,                for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,0,0,0,2,4,0,0,0,0,6,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);",0,0,0,1,2,0,8,0,0,8,72,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,270,"                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));",0,0,0,2,4,0,0,0,0,6,83,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,                if (error <= 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,1,2,0,8,0,0,8,40,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,                    final double[] correctedScaled = new double[y0.length];,8,0,0,2,4,1,4,0,0,14,55,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,                    for (int j = 0; j < y0.length; ++j) {,0,0,0,1,3,0,0,0,0,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,2,1,1,2,4,0,0,0,0,12,40,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);",0,0,0,1,2,0,8,0,0,8,81,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);",0,0,0,1,2,0,0,0,0,3,79,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,286,                    interpolatorTmp.storeTime(stepStart);,0,0,0,1,2,0,6,0,0,6,37,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,                    interpolatorTmp.shift();,0,0,0,1,2,0,4,0,0,4,24,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,288,                    interpolatorTmp.storeTime(stepEnd);,0,0,0,1,2,0,0,0,0,3,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,                    if (manager.evaluateStep(interpolatorTmp)) {,4,0,0,2,5,0,0,0,0,5,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,4,0,0,0,0,0,0,0,0,5,28,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,                        nordsieck = nordsieckTmp;,10,1,0,0,0,0,0,0,0,12,25,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);",0,0,0,1,2,0,12,0,0,12,64,13,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,                        loop = false;,2,0,0,0,0,0,0,0,0,4,13,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,307,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,314,            },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,317,            final double nextStep = stepStart + stepSize;,0,0,0,0,0,0,0,0,0,0,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,318,"            System.arraycopy(yTmp, 0, y, 0, n);",0,0,0,1,2,0,10,0,0,10,35,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,319,            interpolator.storeTime(nextStep);,0,0,0,1,2,0,6,0,0,6,33,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,320,"            manager.stepAccepted(nextStep, y);",0,0,0,1,2,0,8,0,0,8,34,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,            for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,325,                interpolator.setInterpolatedTime(nextStep);,0,0,0,1,2,0,6,0,0,6,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);",0,0,0,1,2,0,8,0,0,8,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,            },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,            stepStart = nextStep;,4,0,0,0,0,0,0,0,0,5,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {",0,0,0,2,5,0,0,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,2,0,0,1,3,0,0,0,0,3,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,343,"                stepSize = filterStep(stepSize, forward, true);",2,0,0,1,2,0,6,0,0,10,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,2,0,0,1,2,1,4,0,0,7,62,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,6,1,0,0,0,1,0,0,0,8,45,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,6,1,0,0,0,1,0,0,0,8,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,12,2,0,2,4,1,0,0,0,15,65,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,350,"                hNew = filterStep(scaledH, forward, nextIsLast);",2,0,0,1,2,0,8,0,0,11,48,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,                interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,390,"        public Corrector(final double[] previous, final double[] scaled, final double[] state) {",0,0,0,4,9,0,0,0,0,13,88,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,8,0,0,0,0,0,0,0,0,10,25,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,8,0,0,0,0,0,0,0,0,10,22,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,2,0,0,1,2,0,4,0,0,7,30,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,395,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,400,"            Arrays.fill(after, 0.0);",0,0,0,1,2,0,6,0,0,6,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,401,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,406,            if ((row & 0x1) == 0) {,0,0,0,2,5,0,0,0,0,7,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,407,                after[column] -= value;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,409,                after[column] += value;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,411,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,424,            double error = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,425,            for (int i = 0; i < after.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,426,                after[i] += previous[i] + scaled[i];,0,0,0,3,6,0,0,0,0,9,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",6,0,1,5,10,1,12,0,0,28,74,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,428,                final double tol = (vecAbsoluteTolerance == null) ?,4,1,0,1,2,1,0,0,0,6,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,431,                final double ratio  = (after[i] - before[i]) / tol;,4,2,1,3,6,1,0,0,0,15,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,435,            return Math.sqrt(error / after.length);,6,1,0,1,2,1,4,0,0,11,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,6,0,0,4,8,2,0,0,0,7,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,444,        return getCumFreq(Long.valueOf(v));,2,0,0,2,4,2,4,0,0,7,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,177,        addValue(Long.valueOf(v));,0,0,0,2,4,0,0,0,0,6,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,320,        return (double) getCount(v) / (double) sumFreq;,2,1,0,3,6,1,4,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,408,"            return getSumFreq();    // v is comparable, but greater than the last value",0,0,0,1,2,1,2,0,0,2,75,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,0,0,0,0,0,0,0,0,0,0,4,4,4.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,8,1,0,1,3,0,0,0,0,11,23,5,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,0,0,0,0,0,1,0,0,0,1,16,4,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,0,0,1,2,4,0,0,0,0,7,25,10,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,4,1,0,1,3,3,0,0,0,8,22,1,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);,2,0,0,1,2,0,6,0,0,9,63,6,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,2,0,0,0,0,1,0,0,0,2,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,10,1,0,1,3,0,0,0,0,12,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",2,0,1,2,4,0,8,0,0,15,30,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,6,0,0,1,2,3,0,4,0,13,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,        return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,6,1,0,4,9,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,4,1,0,0,0,0,0,0,0,5,15,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,0,0,0,1,2,0,0,0,0,3,20,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,6,1,0,0,0,1,0,0,0,7,11,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,0,0,0,1,2,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,0,0,0,0,0,0,0,0,0,0,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,14,2,0,19,34,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,        protected OpenMapSparseIterator() {,2,0,0,1,3,1,0,0,0,3,35,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,2,0,0,1,2,0,4,0,0,7,26,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,4,0,0,1,2,0,0,2,0,7,33,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,4,1,1,1,2,2,4,0,0,14,22,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,0,0,0,1,2,0,4,0,0,4,15,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,854,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,8,0,0,0,1,1,0,2,0,11,76,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,        return new OpenMapSparseIterator();,0,0,0,1,2,1,0,2,0,2,35,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",2,0,0,0,1,1,0,6,0,9,101,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,825,        protected OpenMapEntry(Iterator iter) {,4,0,0,1,3,1,0,2,0,7,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,826,            this.iter = iter;,4,0,0,0,0,0,0,0,0,5,17,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,832,            return iter.value();,0,0,0,1,2,1,4,0,0,4,20,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,77,72,    public abstract class Entry {,0,0,0,0,1,0,0,0,0,1,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,18,7,0,4,8,0,0,0,0,26,56,10,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,0,0,0,3,6,0,0,0,0,9,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,6,2,0,0,0,0,0,0,0,9,26,9,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,100,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05882,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,    public Cluster(final T center) {,4,0,0,1,3,2,0,2,0,8,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,        this.center = center;,4,0,0,0,0,0,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,1,0,1,2,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,        return center;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,4,0,0,0,0,0,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,42,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",2,0,0,1,2,0,8,6,0,16,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,57,"        assignPointsToClusters(clusters, points);",0,0,0,1,2,0,6,0,0,6,41,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,90,"            Cluster<T> cluster = getNearestCluster(clusters, p);",2,0,0,1,2,0,6,4,0,12,52,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,91,            cluster.addPoint(p);,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,107,        final List<T> pointSet = new ArrayList<T>(points);,4,0,0,1,2,1,0,8,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,108,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,0,0,0,1,2,0,0,0,0,3,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,111,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,2,0,0,3,6,0,0,0,0,3,70,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,114,        final double[] dx2 = new double[pointSet.size()];,2,0,0,3,6,1,4,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,2,1,0,2,5,0,4,0,0,7,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,14,1,0,0,0,0,0,0,0,17,38,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,2,1,0,0,0,0,0,0,0,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,10,1,0,1,3,1,0,4,0,17,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,4,1,0,1,3,0,0,0,0,5,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,161,        },2,0,0,0,1,0,0,0,0,3,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,57,"        return MathUtils.distance(point, p.getPoint());",0,0,0,2,4,1,0,0,0,7,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1624,      int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1625,      for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1627,          sum += dp * dp;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1629,      return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,0,0,0,1,2,0,0,0,0,3,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,                    updateSigma(tau);,0,0,0,1,2,0,6,0,0,6,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,                    return deflatedEnd;,4,0,0,0,0,1,0,0,0,5,19,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,2,0,0,2,4,1,8,2,0,12,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,18,3,1,2,4,0,0,0,0,31,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,0,0,1,2,1,2,0,0,6,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,        if (eigenvectors == null) {,0,0,0,1,3,0,0,0,0,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,            findEigenVectors();,0,0,0,1,2,0,0,0,0,3,19,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,        return eigenvectors[i].copy();,0,0,1,2,4,1,2,0,0,6,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,6,4,0,13,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,                        tau *= 0.25;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,2,0,0,0,0,0,0,0,0,4,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,8,2,0,0,0,1,2,0,0,13,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,                double b2 = work[np - 6];,4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,                final double gam = dN2;,10,2,1,0,0,1,0,0,0,18,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,10,6,1,4,8,0,0,0,0,20,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,14,3,0,1,3,0,0,0,0,18,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,                if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,4,0,3,6,0,6,0,0,17,43,10,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,0,0,0,1,2,0,0,0,0,3,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,0,0,0,0,0,0,0,0,0,0,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,10,6,1,4,8,0,0,0,0,20,58,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,4,2,0,1,3,0,0,0,0,6,22,8,0.5,1,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,4,1,0,0,0,0,0,0,0,6,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,4,1,0,1,3,0,0,0,0,5,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,8,1,0,2,5,1,4,0,0,14,36,2,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },4,0,0,0,1,2,6,2,0,14,1,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,10,1,0,0,0,0,0,0,0,14,9,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,2,0,0,0,0,0,0,0,0,3,9,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,0,0,0,3,7,0,0,0,0,10,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,0,0,0,0,0,0,0,0,0,0,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,2,2,1,3,7,0,0,0,0,10,32,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,6,3,1,3,6,0,0,0,0,16,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,8,13,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",0,0,0,2,5,0,0,0,0,7,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,8,3,0,1,3,0,0,0,0,11,35,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,18,5,1,1,4,3,0,0,0,32,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,12,1,0,1,4,0,8,0,0,22,24,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,0,0,0,1,3,0,0,0,0,4,18,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,0,0,0,2,4,0,0,0,0,6,53,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,                        tType -= 11;,0,0,0,0,0,0,0,0,0,0,12,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,2,1,1,3,6,0,2,0,0,11,65,8,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,10,0,0,2,4,0,2,0,0,12,39,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,14,1,0,1,3,0,2,0,0,18,39,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,0,0,0,2,4,0,0,0,0,6,21,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,0,0,0,1,2,1,0,0,0,4,32,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,6,5,1,1,2,1,0,0,0,20,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },10,1,0,0,1,0,0,0,0,12,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,6,0,0,1,2,0,4,0,0,11,47,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,278,                    final double v1 = o1.getValue();,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,6,1,0,1,2,1,0,0,0,7,40,12,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,142,        final int n = steps.length;,14,4,0,0,0,1,0,0,0,20,27,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,0,0,0,2,4,0,0,0,0,6,38,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,4,0,1,2,4,1,0,2,0,11,47,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,146,            for (int j = 0; j < i + 1; ++j) {,8,2,0,1,3,0,0,0,0,11,33,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,147,                if (steps[j] == 0.0) {,0,1,1,2,5,0,0,0,0,5,22,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",2,1,0,1,2,0,8,0,0,11,46,9,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,0,0,0,2,4,0,0,0,0,6,71,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,294,            if (iterations > 0) {,2,1,0,1,3,0,0,0,0,3,21,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",0,0,0,1,2,0,0,0,0,3,58,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,2,1,0,1,2,0,4,0,0,7,27,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,322,    },2,1,0,0,1,0,0,0,0,3,1,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,401,"        Arrays.sort(simplex, comparator);",0,0,0,1,2,0,8,0,0,8,33,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,403,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,45,    public MultiDirectional() {,4,0,0,1,3,0,0,0,0,5,27,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,47,        this.gamma = 0.5;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,48,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,66,            incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,7,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,69,            final RealPointValuePair[] original = simplex;,4,0,0,1,2,1,0,2,0,7,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,70,            final RealPointValuePair best = original[0];,2,0,1,1,2,1,0,2,0,7,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,73,"            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);",8,1,0,1,2,1,6,2,0,18,83,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,74,"            if (comparator.compare(reflected, best) < 0) {",0,1,0,2,5,0,8,0,0,9,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,89,"            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);",2,0,0,1,2,1,8,2,0,13,86,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,90,"            if (comparator.compare(contracted, best) < 0) {",0,1,0,2,5,0,8,0,0,9,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },2,0,0,0,1,0,0,0,0,3,1,6,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,115,        final double[] xSmallest = original[0].getPointRef();,8,1,1,3,6,2,8,0,0,21,53,1,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,116,        final int n = xSmallest.length;,6,0,0,0,0,1,0,0,0,7,31,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,119,        simplex = new RealPointValuePair[n + 1];,4,1,0,1,2,0,0,2,0,8,40,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,120,        simplex[0] = original[0];,0,0,1,2,4,0,0,0,0,5,25,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,121,        for (int i = 1; i <= n; ++i) {,14,2,0,1,3,1,0,0,0,18,30,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,122,            final double[] xOriginal    = original[i].getPointRef();,6,0,1,3,6,1,4,0,0,15,56,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,123,            final double[] xTransformed = new double[n];,2,0,1,2,4,1,0,0,0,5,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,124,            for (int j = 0; j < n; ++j) {,8,1,0,1,3,0,0,0,0,10,29,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,125,                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);,2,3,1,5,10,0,0,0,0,22,71,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,127,"            simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);",6,0,1,2,4,0,0,2,0,14,69,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,131,        evaluateSimplex(comparator);,0,0,0,1,2,0,8,0,0,8,28,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,132,        return simplex[0];,0,0,0,1,2,1,0,0,0,4,18,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,27,public enum GoalType implements Serializable {,2,0,0,0,1,1,0,2,0,5,46,1,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,33,    MINIMIZE,0,0,0,0,0,0,0,0,0,0,8,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,50,    public SimpleScalarValueChecker() {,0,0,0,1,3,0,0,0,0,4,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,51,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,10,0,0,0,0,1,0,0,0,14,52,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,52,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,53,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,51,    },4,1,0,0,1,0,0,0,0,5,1,7,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,79,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,275,            new Comparator<RealPointValuePair>() {,6,0,0,1,3,0,0,4,0,11,38,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,116,    protected DirectSearchOptimizer() {,12,3,0,1,3,1,0,0,0,17,35,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,117,        setConvergenceChecker(new SimpleScalarValueChecker());,0,0,0,2,4,0,2,2,0,4,54,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,118,        setMaxIterations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,36,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,119,        setMaxEvaluations(Integer.MAX_VALUE);,4,1,0,1,2,0,2,0,0,7,37,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,120,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,220,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,221,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,230,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,231,    },4,1,0,0,1,0,0,0,0,5,1,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,250,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,251,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,265,        if (startConfiguration == null) {,10,5,0,1,3,0,0,0,0,15,33,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,273,        this.f = f;,4,0,0,0,0,0,0,0,0,5,11,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,274,        final Comparator<RealPointValuePair> comparator =,0,0,0,0,0,0,0,0,0,0,49,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,286,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,287,        evaluations = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,288,        buildSimplex(startPoint);,2,0,1,1,2,1,4,0,0,11,25,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,289,        evaluateSimplex(comparator);,0,0,0,1,2,0,4,0,0,4,28,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,345,        if (++evaluations > maxEvaluations) {,4,1,0,1,3,0,0,0,0,6,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,349,        return f.value(x);,0,0,0,1,2,1,0,0,0,4,18,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,360,        final int n = startPoint.length;,6,0,0,0,0,1,0,0,0,7,32,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,361,        if (n != startConfiguration.length) {,6,1,0,1,3,0,0,0,0,7,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,368,        simplex = new RealPointValuePair[n + 1];,4,1,0,1,2,0,0,2,0,8,40,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,369,"        simplex[0] = new RealPointValuePair(startPoint, Double.NaN);",8,0,1,2,4,0,0,2,0,14,60,0,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,372,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,373,            final double[] confI   = startConfiguration[i];,2,0,1,2,4,1,0,2,0,10,47,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,374,            final double[] vertexI = new double[n];,2,0,1,2,4,1,0,0,0,5,39,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,375,            for (int k = 0; k < n; ++k) {,10,2,0,1,3,0,4,0,0,18,29,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,376,                vertexI[k] = startPoint[k] + confI[k];,0,1,1,3,6,0,0,0,0,14,38,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,378,"            simplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);",8,1,1,2,4,0,0,2,0,14,61,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,381,    },2,0,0,0,1,0,0,0,0,2,1,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,392,        for (int i = 0; i < simplex.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,393,            final RealPointValuePair vertex = simplex[i];,2,0,1,1,2,1,0,2,0,9,45,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,394,            final double[] point = vertex.getPointRef();,2,0,0,2,4,1,4,0,0,7,44,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,395,            if (Double.isNaN(vertex.getValue())) {,0,0,0,3,7,0,0,0,0,10,38,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,396,"                simplex[i] = new RealPointValuePair(point, evaluate(point), false);",2,0,1,3,6,0,4,2,0,14,67,8,1.33333,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,44,        this.maxIterations = maxIterations;,0,0,0,0,0,0,0,0,0,0,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,53,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,166,"        return buildMessage(locale, pattern, arguments);",4,1,1,1,2,1,8,0,0,15,48,3,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,172,        return getMessage(Locale.getDefault());,6,1,1,2,4,1,6,0,0,16,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,70,        return point.clone();,0,0,0,1,2,1,4,0,0,4,21,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,320,            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,2,0,0,2,4,0,0,4,0,6,83,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,50,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,51,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,109,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,10,2,0,20,104,5,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,45,    },2,0,0,0,1,0,0,0,0,2,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,45,"        super(pattern, arguments);",4,1,0,1,2,0,22,0,0,27,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,128,        } catch (MaxIterationsExceededException ex) {,0,0,0,1,4,0,0,0,0,5,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,129,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,6,3,0,2,5,0,0,0,0,9,65,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,206,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,181,                throw new MaxIterationsExceededException(maxIterations);,2,0,0,1,2,0,0,2,0,4,56,11,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,162,        return super.inverseCumulativeProbability(p);,6,0,0,1,2,1,0,0,0,6,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,156,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,159,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,8,0,0,1,2,1,2,0,0,11,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,0,0,0,1,2,0,6,0,0,6,44,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,2,0,0,2,4,0,4,2,0,8,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,8,2,0,14,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",0,0,0,2,5,0,8,0,0,9,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",2,0,0,1,3,0,4,2,0,9,16,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",0,0,0,2,4,0,10,0,0,10,27,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,        return res.toString();,0,0,0,1,2,1,4,0,0,4,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,        if (left.getColumnDimension() != right.getRowDimension()) {,0,0,0,3,7,0,0,0,0,10,59,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,37,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",8,0,0,1,2,1,8,4,0,21,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,560,        int blockIndex = 0;,4,1,0,0,0,0,0,0,0,5,19,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,561,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,56,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,563,            final int pStart = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,564,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,567,                final int jWidth = out.blockWidth(jBlock);,0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,568,                final int jWidth2 = jWidth  + jWidth;,6,1,0,0,0,1,0,0,0,8,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,569,                final int jWidth3 = jWidth2 + jWidth;,6,1,0,0,0,1,0,0,0,8,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,570,                final int jWidth4 = jWidth3 + jWidth;,8,1,0,0,0,1,0,0,0,10,37,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,573,                final double[] outBlock = out.blocks[blockIndex];,6,0,1,2,4,1,0,0,0,9,49,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,8,1,0,1,3,0,0,0,0,10,55,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,2,0,0,1,2,1,4,0,0,7,38,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,578,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,8,2,1,2,4,1,0,0,0,13,63,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,579,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,20,2,0,2,4,4,4,0,0,30,67,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,580,"                    for (int p = pStart, k = 0; p < pEnd; ++p) {",0,0,0,1,3,0,0,0,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,581,                        final int lStart = (p - pStart) * kWidth;,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,582,                        final int lEnd   = lStart + kWidth;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,583,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0,0,0,1,3,0,0,0,0,4,49,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,585,                            int l = lStart;,4,0,0,0,0,0,0,0,0,4,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,586,                            int n = nStart;,4,0,0,0,0,0,0,0,0,4,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,587,                            while (l < lEnd - 3) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,588,                                sum += tBlock[l] * mBlock[n] +,0,0,0,2,4,0,0,0,0,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,592,                                l += 4;,2,0,0,0,0,0,0,0,0,3,7,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,593,                                n += jWidth4;,4,0,0,0,0,0,0,0,0,5,13,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,595,                            while (l < lEnd) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,596,                                sum += tBlock[l++] * mBlock[n];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,597,                                n += jWidth;,6,0,0,0,0,0,0,0,0,7,12,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,599,                            outBlock[k++] += sum;,0,0,0,1,2,0,0,0,0,3,21,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,605,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,610,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,76,    },0,0,0,0,1,0,8,0,0,8,1,7,0.5,1,1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,132,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,134,            final double[] ltI = lTData[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,138,            ltI[i] = Math.sqrt(ltI[i]);,6,1,0,3,6,0,0,0,0,8,27,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,139,            final double inverse = 1.0 / ltI[i];,0,0,1,1,2,0,0,0,0,5,36,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,141,            for (int q = order - 1; q > i; --q) {,10,2,0,1,3,0,0,0,0,13,37,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,142,                ltI[q] *= inverse;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,143,                final double[] ltQ = lTData[q];,2,0,1,2,4,1,0,0,0,7,31,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,144,                for (int p = q; p < order; ++p) {,10,1,0,1,3,0,0,0,0,12,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,145,                    ltQ[p] -= ltI[q] * ltI[p];,0,1,1,3,6,0,0,0,0,14,26,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,618,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,2,0,0,6,12,1,4,0,0,7,76,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,619,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,10,3,1,1,2,1,0,2,0,21,66,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,621,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,622,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,1,8,0,0,16,39,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,623,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,55,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,624,            int regularPos   = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,625,            int lastPos      = 0;,0,0,0,0,0,0,0,0,0,0,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,626,            for (int p = pStart; p < pEnd; ++p) {,10,1,0,1,3,0,0,0,0,12,37,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,627,                final double[] dataP = data[p];,2,0,1,2,4,1,0,0,0,7,31,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,628,                int blockIndex = iBlock * blockColumns;,8,1,0,0,0,1,0,0,0,10,39,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,629,                int dataPos    = 0;,4,0,0,0,0,0,0,0,0,5,19,10,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,630,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,8,2,0,1,3,0,0,0,0,11,59,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,634,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,0,2,4,0,0,0,0,6,75,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,635,                regularPos += BLOCK_SIZE;,4,0,0,0,0,0,0,0,0,5,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,636,                lastPos    += lastColumns;,4,0,0,0,0,0,0,0,0,5,26,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,640,        return data;,6,1,0,0,0,1,0,0,0,7,12,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,104,        final int order = matrix.getRowDimension();,4,1,0,1,2,1,12,0,0,19,43,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,105,        lTData   = matrix.getData();,2,0,0,1,2,0,4,0,0,7,28,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,106,        cachedL  = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,107,        cachedLT = null;,4,0,0,0,0,1,0,0,0,6,16,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,110,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,112,            final double[] lI = lTData[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,2,1,1,3,7,0,0,0,0,9,49,6,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,118,            for (int j = i + 1; j < order; ++j) {,24,2,0,1,3,0,8,0,0,36,37,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,119,                final double[] lJ = lTData[j];,2,0,1,2,4,1,0,0,0,7,30,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,120,                final double lIJ = lI[j];,10,0,1,1,2,5,0,0,0,19,25,1,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,121,                final double lJI = lJ[i];,2,0,1,1,2,1,0,0,0,7,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,122,                final double maxDelta =,0,0,0,0,0,0,0,0,0,0,23,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,124,                if (Math.abs(lIJ - lJI) > maxDelta) {,0,0,0,2,5,0,0,0,0,7,37,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,127,                lJ[i] = 0;,0,0,0,1,2,0,0,0,0,3,10,4,0.44444,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,12,0,0,13,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,2,0,0,1,2,1,4,0,0,6,21,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,4,1,1,3,6,0,2,0,0,15,66,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,0,0,0,1,2,1,4,0,0,4,21,5,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,0,0,0,2,4,0,0,0,0,6,28,4,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,        freqTable = new TreeMap();,2,0,0,1,2,0,0,2,0,5,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,468,"    private static class NaturalComparator implements Comparator, Serializable {",2,0,0,0,1,2,0,4,0,8,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,487,            return ((Comparable)o1).compareTo(o2);,2,0,0,3,6,1,4,2,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,67,        freqTable = new TreeMap(comparator);,4,0,0,1,2,0,0,2,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,78,        NumberFormat nf = NumberFormat.getPercentInstance();,2,0,0,1,2,0,4,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,79,        StringBuffer outBuffer = new StringBuffer();,4,0,1,1,2,0,0,4,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",8,4,0,1,2,1,4,0,0,18,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,81,        Iterator iter = freqTable.keySet().iterator();,2,0,0,2,4,0,6,2,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,82,        while (iter.hasNext()) {,4,0,0,2,5,2,0,0,0,6,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,83,            Object value = iter.next();,2,0,0,1,2,0,4,2,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,84,            outBuffer.append(value);,4,0,0,1,2,0,6,2,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,85,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,86,            outBuffer.append(getCount(value));,0,0,0,2,4,0,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,87,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,88,            outBuffer.append(nf.format(getPct(value)));,0,0,0,3,6,0,12,0,0,12,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,89,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,90,            outBuffer.append(nf.format(getCumPct(value)));,2,0,0,3,6,0,12,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,91,            outBuffer.append('\n');,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,92,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,93,        return outBuffer.toString();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,124,        Object obj = v;,6,0,0,0,0,0,0,2,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,125,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,126,           obj = Long.valueOf(((Integer) v).longValue());,4,0,0,4,8,0,6,2,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,129,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,130,            if (count == null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,131,"                freqTable.put(obj, Long.valueOf(1));",0,0,0,2,4,0,10,0,0,10,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,133,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,3,6,0,14,0,0,15,56,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,138,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,135,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,137,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,139,    },4,2,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,147,        addValue(Long.valueOf(v));,0,0,0,2,4,0,8,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,156,        addValue(Long.valueOf(v.longValue()));,0,0,0,3,6,0,10,0,0,10,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,157,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,165,        addValue(Long.valueOf(v));,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,166,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,174,        addValue(Character.valueOf(v));,0,0,0,2,4,0,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,175,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,179,        freqTable.clear();,0,0,0,1,2,0,4,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,192,        return freqTable.keySet().iterator();,0,0,0,2,4,1,6,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,203,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,204,        Iterator iterator = freqTable.values().iterator();,4,1,0,2,4,0,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,205,        while (iterator.hasNext())  {,0,0,1,2,5,0,0,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,206,            result += ((Long) iterator.next()).longValue();,2,0,0,4,8,0,6,2,0,11,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,208,        return result;,4,0,0,0,0,4,0,0,0,7,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,219,        if (v instanceof Integer) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,220,            return getCount(((Integer) v).longValue());,8,1,0,4,8,2,4,2,0,16,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,222,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,224,            Long count =  (Long) freqTable.get(v);,4,1,0,2,4,1,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,225,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,226,                result = count.longValue();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,230,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,228,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,231,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,241,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,251,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,14,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,261,        return getCount(Character.valueOf(v));,0,0,0,2,4,1,8,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,276,        final long sumFreq = getSumFreq();,4,0,0,1,2,1,2,0,0,8,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,277,        if (sumFreq == 0) {,2,1,1,1,3,0,6,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,278,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,280,        return (double) getCount(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,291,        return getPct(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,302,        return getPct(Long.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,313,        return getPct(Character.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,327,        if (getSumFreq() == 0) {,0,1,0,2,5,0,2,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,328,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,330,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,331,            return getCumFreq(((Integer) v).longValue());,0,0,0,4,8,1,0,0,0,13,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,333,        Comparator c = freqTable.comparator();,4,1,0,1,2,0,4,2,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,334,        if (c == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,335,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,337,        long result = 0;,0,1,0,0,0,0,4,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,340,            Long value = (Long) freqTable.get(v);,2,0,0,2,4,0,6,4,0,12,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,341,            if (value != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,342,                result = value.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,346,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,344,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,345,            return result;   // v is not comparable,2,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,348,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,349,"            return 0;  // v is comparable, but less than first value",0,0,0,0,0,1,0,0,0,1,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,352,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,353,"            return getSumFreq();    // v is comparable, but greater than the last value",2,0,0,1,2,2,6,0,0,9,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,356,        Iterator values = valuesIterator();,2,0,0,1,2,0,2,2,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,357,        while (values.hasNext()) {,0,0,0,2,5,0,4,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,358,            Object nextValue = values.next();,2,0,0,1,2,0,4,2,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,359,"            if (c.compare(v, nextValue) > 0) {",0,1,0,2,5,0,8,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,360,                result += getCount(nextValue);,2,0,0,1,2,0,4,0,0,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,362,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,364,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,365,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,377,        return getCumFreq(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,389,        return getCumFreq(Long.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,401,        return getCumFreq(Character.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,418,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,6,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,419,        if (sumFreq == 0) {,12,2,0,1,3,0,0,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,420,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,422,        return (double) getCumFreq(v) / (double) sumFreq;        ,0,0,0,3,6,1,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,435,        return getCumPct(Long.valueOf(v));       ,8,1,0,2,4,1,14,4,0,28,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,448,        return getCumPct(Long.valueOf(v));         ,2,0,0,2,4,4,0,0,0,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,461,        return getCumPct(Character.valueOf(v));         ,2,0,0,2,4,4,8,0,0,13,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,10,2,0,1,4,0,0,0,0,12,33,3,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,0,0,2,0,3,79,8,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,4,0,0,0,0,0,0,2,0,6,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,4,0,0,1,2,0,0,2,0,8,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,    },2,1,0,0,1,0,0,0,0,3,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,0,0,0,2,4,1,0,0,0,7,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,6,0,0,0,0,1,0,4,0,12,24,1,0.02439,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,0,1,0,3,6,1,12,0,0,13,35,7,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,580,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,583,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,584,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,590,        if (k == 31) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,597,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,603,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,4,2,0,10,43,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,607,            if (t > 0) {,6,1,0,1,3,0,0,2,0,9,12,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,608,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,610,                v = t;,6,0,0,0,0,0,6,0,0,13,6,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,613,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,616,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,617,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,209,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,210,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,214,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,223,"        int d = MathUtils.gcd(num, den);",2,0,0,1,2,0,8,0,0,10,32,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,224,        if (d > 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,230,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,234,        this.numerator = num;,4,0,0,0,0,0,0,0,0,5,21,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,235,        this.denominator = den;,0,0,0,0,0,0,0,0,0,0,23,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,236,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,33,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,36,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,39,"    public static final Fraction ZERO = new Fraction(0, 1);",2,0,0,1,2,3,0,4,0,9,55,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,42,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",2,0,0,1,2,3,0,4,0,10,61,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",2,0,0,1,2,2,6,4,0,14,42,3,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,10,4,0,3,7,1,0,0,0,15,31,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",2,0,0,2,4,0,10,0,0,12,58,5,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,113,"            ret = addAndCheck(b, a, msg);",8,1,0,1,2,0,8,0,0,19,29,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,            if (a < 0) {,4,1,0,1,3,0,10,0,0,15,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,170,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,174,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,10,2,0,3,6,1,16,0,0,29,51,3,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,8,0,0,0,0,0,0,0,0,8,18,1,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,399,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,401,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.00498,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,12,1,0,0,0,0,0,0,0,15,7,3,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,0,0,0,0,0,0,0,0,0,0,22,4,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,6,0,0,0,0,0,0,4,0,12,7,3,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0303,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",0,0,0,0,1,1,10,0,0,10,58,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,4,1,0,1,3,1,2,0,0,8,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {,0,0,0,1,3,0,0,0,0,4,79,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,145,        double d = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,2,0,1,2,0,0,0,0,9,20,4,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,6,0,0,0,0,1,0,0,0,6,11,3,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,80,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,0,0,0,1,2,0,0,0,0,3,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,2,0,0,1,2,0,0,0,0,2,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,2,0,0,0,1,0,4,0,0,7,44,6,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,0,0,0,1,3,0,0,2,0,2,30,7,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,106,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,61,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,100,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,103,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,0,0,1,3,1,0,0,0,5,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,2,0,0,2,5,0,0,0,0,2,62,6,0.04348,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);",0,0,0,1,2,0,0,0,0,3,17,4,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,12,1,0,0,0,0,0,0,0,15,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,185,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,186,                y1 = y2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,187,                y2 = y0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,0,0,0,2,5,0,0,0,0,7,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,0,0,0,2,4,0,0,0,0,6,50,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,6,0,0,16,39,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,0,0,0,0,0,0,0,0,0,0,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,2,0,1,5,10,0,6,0,0,19,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,6,1,0,1,2,0,4,0,0,11,41,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,2,0,0,1,2,1,2,0,0,5,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,0,0,0,1,3,0,0,0,0,4,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,0,0,0,2,4,0,0,0,0,6,42,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,780,        for (int row = 0; row < nRows; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,8,0,1,2,4,1,12,0,0,25,35,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,2,1,1,2,4,0,0,0,0,12,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,27,8,0.05263,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",6,0,0,3,7,1,0,2,0,9,59,2,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,145,            final int nRows = d.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,146,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,149,            final int nCols = d[0].length;,0,0,0,1,2,0,0,0,0,3,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,1,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,158,            data = d;,0,0,0,0,0,0,0,0,0,0,9,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,160,        lu = null;,0,0,0,0,0,0,0,0,0,0,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,161,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,6,3,0,1,3,0,0,0,0,10,18,3,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,50,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,2,1,0,0,0,1,12,0,0,15,11,3,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,578,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.08889,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,4,1,0,5,10,1,10,4,0,19,92,3,1.0,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,4,0,0,1,2,1,4,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,6,0,0,1,2,1,0,4,0,11,51,2,0.5,1,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,1,4,8,0,0,0,0,6,40,5,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,        for (int i = 0; i < cols; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,10,1,0,0,0,0,0,0,0,11,15,3,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,1,1,3,0,0,0,0,21,37,7,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,7,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",6,0,0,2,4,0,2,0,0,8,60,3,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,237,        return getDefaultNumberFormat(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,51,5,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,361,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,0,0,0,3,38,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,364,"        Number im = parseNumber(source, getRealFormat(), pos);",2,0,0,2,4,0,8,2,0,12,54,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,365,        if (im == null) {,2,1,0,1,3,0,2,0,0,5,17,3,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,374,        int n = getImaginaryCharacter().length();,2,0,0,2,4,0,4,0,0,6,41,5,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,375,        startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,7,28,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,376,        int endIndex = startIndex + n;,0,0,0,0,0,0,0,0,0,0,30,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,        if (,0,0,0,0,1,0,0,0,0,1,4,4,0.18182,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,0,0,0,1,3,0,0,0,0,4,38,4,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,2,1,2,5,0,0,0,0,8,16,3,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",4,1,0,3,6,0,8,0,0,14,57,6,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,0,0,0,0,0,1,0,0,0,1,13,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,2,0,0,0,0,1,0,0,0,2,12,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,        return getGamma().cumulativeProbability(x);,0,0,0,2,4,1,6,0,0,6,43,5,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",8,0,1,1,2,2,8,0,0,23,67,3,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,160,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,0,0,0,1,4,0,0,0,0,5,31,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,186,        return ret;,2,0,0,0,0,1,0,2,0,5,11,3,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,0,0,0,1,2,0,0,0,0,3,74,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,96,            for (int i = lanczos.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,97,                sum = sum + (lanczos[i] / (x + i));,8,3,1,3,6,0,0,0,0,16,35,8,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,4,1,1,1,2,0,0,0,0,8,23,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,12,4,0,3,6,0,4,0,0,21,40,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,4,4,0,1,4,1,4,0,0,12,40,4,0.14286,1,1
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,10,3,0,1,3,0,0,0,0,13,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,58,            ret = -ret;,4,0,0,0,0,0,0,0,0,6,11,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,60,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,96,            for (int i = lanczos.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,97,                sum = sum + (lanczos[i] / (x + i));,8,3,1,3,6,0,0,0,0,16,35,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,99,            sum = sum + lanczos[0];,0,0,0,1,2,0,0,0,0,3,23,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,101,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,160,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,168,            double n = 0.0; // current element index,4,0,0,0,0,0,0,0,0,4,40,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,169,            double an = 1.0 / a; // n-th element in the series,6,1,1,0,0,3,2,4,0,19,50,1,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,170,            double sum = an; // partial sum,4,1,0,0,0,0,4,0,0,10,31,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,173,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,174,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,177,                sum = sum + an;,0,0,0,0,0,0,0,0,0,0,15,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,179,            if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,16,4,0,4,8,4,14,2,0,42,59,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,186,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,48,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,12,4,0,2,4,1,0,0,0,16,33,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,6,3,0,1,4,0,0,0,0,9,30,6,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",0,0,0,1,2,0,0,0,0,3,51,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,8,4,0,4,8,0,14,0,0,28,59,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,235,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.03846,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,2,0,0,0,0,1,0,0,0,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,14,5,0,0,0,1,0,0,0,20,26,1,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,2,0,0,0,0,1,0,0,0,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,72,    private double sumXY = 0d;,2,0,0,0,0,0,0,0,0,2,26,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,75,    private long n = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,78,    private double xbar = 0;,6,0,0,0,0,0,0,0,0,6,24,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,81,    private double ybar = 0;,0,0,0,0,0,0,0,0,0,0,24,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,90,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,106,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,107,            xbar = x;,4,0,0,0,0,0,0,0,0,5,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,108,            ybar = y;,4,0,0,0,0,0,0,0,0,5,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,110,            double dx = x - xbar;,10,4,0,0,0,0,0,0,0,14,21,3,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,111,            double dy = y - ybar;,6,1,0,0,0,0,0,0,0,7,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,112,            sumXX += dx * dx * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,113,            sumYY += dy * dy * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,114,            sumXY += dx * dy * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,115,            xbar += dx / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,116,            ybar += dy / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,118,        sumX += x;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,119,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,120,        n++;,0,0,0,0,0,0,0,0,0,0,4,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,121,    },2,0,0,0,1,0,4,0,0,6,1,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,12,5,0,0,0,1,8,0,0,25,37,3,0.125,1,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,140,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,141,"            addData(data[i][0], data[i][1]);",0,0,1,5,10,0,2,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,149,        sumX = 0d;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,150,        sumXX = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,151,        sumY = 0d;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,152,        sumYY = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,153,        sumXY = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,154,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,163,        return n;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,184,        double b1 = getSlope();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,185,        return getIntercept(b1) + b1 * x;,4,2,0,1,2,1,4,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,205,        return getIntercept(getSlope());,0,0,0,2,4,1,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,225,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,226,            return Double.NaN; //not enough data ,4,0,0,0,0,1,0,0,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,228,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,4,2,0,2,5,0,18,0,0,24,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,229,            return Double.NaN; //not enough variation in x,0,0,0,0,0,1,0,0,0,1,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,231,        return sumXY / sumXX;,4,1,0,0,0,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,278,        if (n < 2) {,4,1,0,1,3,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,279,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,281,        return sumYY;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,301,        return getRegressionSumSquares(getSlope());,0,0,0,2,4,1,4,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,315,        if (n < 3) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,316,            return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,318,        return getSumSquaredErrors() / (double) (n - 2);,2,2,0,3,6,1,2,0,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,336,        double b1 = getSlope();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,337,        double result = Math.sqrt(getRSquare());,2,0,0,2,4,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,338,        if (b1 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,339,            result = -result;,6,0,0,0,0,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,341,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,359,        double ssto = getTotalSumSquares();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,360,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,375,        return Math.sqrt(,0,0,0,0,1,1,4,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,390,        return Math.sqrt(getMeanSquareError() / sumXX);,2,1,0,2,4,1,6,0,0,9,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,417,        return getSlopeConfidenceInterval(0.05d);,0,0,0,1,2,1,2,0,0,2,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,453,        if (alpha >= 1 || alpha <= 0) {,12,5,0,1,3,0,0,0,0,17,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,454,            throw new IllegalArgumentException();,0,0,0,1,2,0,0,2,0,2,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,456,        return getSlopeStdErr() *,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,482,        return 2d* (1.0 - getTDistribution().cumulativeProbability(,0,2,0,1,4,1,4,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,497,        return (sumY - slope * sumX) / ((double) n);,8,3,0,3,6,1,0,0,0,11,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,507,        return slope * slope * sumXX;,6,1,0,0,0,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,517,        return DistributionFactory.newInstance().createTDistribution(n - 2);,2,1,0,2,4,1,6,0,0,9,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,3,0,1,2,0,12,0,0,15,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,32,4,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,177,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",0,0,0,2,4,0,0,0,0,6,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,192,        if (den == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,10,0,0,13,25,6,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,4,0,0,6,23,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,204,        int d = den.intValue();,2,0,0,1,2,0,4,0,0,6,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",0,0,0,5,10,1,0,0,0,16,68,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,153,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,156,"        Number num = getNumeratorFormat().parse(source, pos);",0,0,0,2,4,0,0,0,0,6,53,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,157,        if (num == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,137,        int initialIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,34,5,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,140,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,143,"        Number whole = getWholeFormat().parse(source, pos);",2,0,0,2,4,0,8,2,0,12,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,144,        if (whole == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
